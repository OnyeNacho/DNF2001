; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.9044.0 

	TITLE	D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_1HO@DOMN@?$AAG?$AAe?$AAt?$AAA?$AAl?$AAl?$AAo?$AAc?$AAs?$AAS?$AAt?$AAa?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?5?$AAn?$AAo?$AAt@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_17JBDG@?$AAn?$AAe?$AAw?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_11A@?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13HMCP@?$AA?2?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DIHH@Pos?$DO?$DN0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@JEDA@Pos?$CLNum?$DM?$DNBytes?4Num?$CI?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NOIE@InPos?$DO?$DN0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@PKIF@InPos?$DM?$DNBytes?4Num?$CI?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BM@LKB@?$AAU?$AAn?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CC@CPAJ@?$AA?$CF?$AA0?$AA8?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@KHFL@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@IPGH@?4?4?2?4?4?2Core?2Inc?2UnObjBas?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05LCAF@Class?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_17HGCB@?$AAF?$AA?$CF?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@NOGP@?$AAA?$AAc?$AAt?$AAo?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13NHLM@?$AAA?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13LOIM@?$AAU?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19FLGB@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@DMLA@?4?4?2?4?4?2Core?2Inc?2UnClass?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DA@NIKO@Defaults?$FLCPD_Normal?$FN?4Num?$CI?$CJ?$DN?$DNGetP@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@BEPO@Defaults?$FLCPD_Normal?$FN?4Num?$CI?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19NGFL@?$AAN?$AAo?$AAn?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BM@ECHK@?$AAU?$AAn?$AAh?$AAa?$AAs?$AAh?$AAe?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAm?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@IEJK@?4?4?2?4?4?2Core?2Inc?2UnMem?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@DFNF@TopChunk?$DN?$DNNULL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@BION@?4?4?2?4?4?2Core?2Inc?2UnMath?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JDHJ@i?$DO?91?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03FBPA@i?$DM3?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03PLGH@i?$DM2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CA@BFE@?$AAR?$AAe?$AAs?$AAo?$AAl?$AAv?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAs?$AA?4?$AA?4?$AA?4?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@EDDF@?4?4?2?4?4?2Engine?2Inc?2UnNetStuff?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07GDHO@hThread?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_15DEDE@?$AA?$CF?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@JICC@?4?4?2?4?4?2Engine?2Inc?2ABrush?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NJDM@Brush?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05DJGJ@Other?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@ELOE@Other?9?$DOBrush?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@NPJG@?$AAT?$AAi?$AAt?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BG@COBA@?$AAL?$AAe?$AAv?$AAe?$AAl?$AAI?$AAn?$AAf?$AAo?$AA0?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CC@JMMP@?$AAI?$AAd?$AAe?$AAa?$AAl?$AAP?$AAl?$AAa?$AAy?$AAe?$AAr?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@IIGF@?4?4?2?4?4?2Engine?2Inc?2UnLevel?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@DADJ@Actors?4Num?$CI?$CJ?$DO?$DN2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@OIOI@Actors?$CI1?$CJ?$CB?$DNNULL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@EHGL@Actors?$CI1?$CJ?9?$DOBrush?$CB?$DNNULL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CI@PENI@?$AAA?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09HBFO@Actors?$CI0?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CK@OLMN@Actors?$CI0?$CJ?9?$DOIsA?$CIALevelInfo?3?3Stati@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19PPKP@?$AAU?$AAs?$AAe?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@KAEM@?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BE@ECAA@?$AAH?$AAH?$AAi?$AAt?$AAP?$AAr?$AAo?$AAx?$AAy?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BK@BNHE@?$AAH?$AAA?$AAc?$AAt?$AAo?$AAr?$AAV?$AAe?$AAr?$AAt?$AAe?$AAx?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@FAAL@?4?4?2?4?4?2Engine?2Inc?2UnRenDev?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@GBLI@Tesselations?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04BEIE@this?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@NDIM@?$AAH?$AAB?$AAs?$AAp?$AAS?$AAu?$AAr?$AAf?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@OHK@?$AAH?$AAA?$AAc?$AAt?$AAo?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@POFM@?$AAH?$AAC?$AAo?$AAo?$AAr?$AAd?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_15EGHP@?$AA?5?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@IEEK@?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@CONI@?$AAF?$AAo?$AAg?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@GJLM@?$AAF?$AAo?$AAg?$AAE?$AAn?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CA@HBNN@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BK@FPPB@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAM?$AAe?$AAs?$AAh?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BO@GOHM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BI@FDIM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAL?$AAi?$AAn?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BI@PCCF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAi?$AAl?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BK@KAKF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAo?$AAi?$AAn?$AAt?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BI@OKEE@?$AAW?$AAo?$AAr?$AAl?$AAd?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1ME@HHPG@?$AAW?$AAh?$AAe?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAD?$AA3?$AAD?$AA?8?$AAs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BM@FL@?$AAC?$AAa?$AAc?$AAh?$AAe?$AAB?$AAl?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DA@FCHG@?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAZ?$AA?5?$AAr?$AAa?$AAn@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@BODI@?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@MLDM@?$AAG?$AAe?$AAt?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_15PBC@?$AA?$CF?$AAf?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BK@BJII@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DC@NGFL@?$AAU?$AAs?$AAe?$AAE?$AAd?$AAi?$AAt?$AAo?$AAr?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AAe?$AAc@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CG@HKBJ@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAp?$AAl?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@CAKA@?$AAU?$AAs?$AAe?$AAV?$AAS?$AAy?$AAn?$AAc?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BI@DADG@?$AAU?$AAs?$AAe?$AAP?$AAr?$AAe?$AAc?$AAa?$AAc?$AAh?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CO@LCJN@?$AAU?$AAs?$AAe?$AA2?$AAn?$AAd?$AAT?$AAi?$AAe?$AAr?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAC?$AAa?$AAc@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CC@FKDE@?$AAU?$AAs?$AAe?$AA3?$AA2?$AAB?$AAi?$AAt?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CL@LFAA@Direct3D8?$DNDirect3DCreate8?$CID3D_SD@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DI@KLIH@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1NE@JBN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DA@PCNO@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DG@FNMM@?$AAN?$AAo?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@DMBD@?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1MC@CDHI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1FG@EPEG@?$AAD?$AAu?$AAk?$AAe?$AAF?$AAo?$AAr?$AAe?$AAv?$AAe?$AAr?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1ME@PLCP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1FE@FDHJ@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAS?$AAa?$AAf?$AAe?$AAR?$AAe?$AAl@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EK@CFJJ@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?3?$AAS?$AAh@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1HC@JJLK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FEJO@Direct3DDevice8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EC@LPJP@?$AAT?$AAe?$AAs?$AAt?$AAC?$AAo?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAe?$AAv?$AAe?$AAl@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CI@LMHM@?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DI@DLMG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CO@DHDA@?$AAB?$AAe?$AAg?$AAi?$AAn?$AAS?$AAc?$AAe?$AAn?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AA?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@CHAC@HitStack?4Num?$CI?$CJ?$DN?$DN0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@BICI@Surface?4Texture?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KKDE@Surface?4LightMap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09PNHJ@Stages?$FL0?$FN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09OLND@Stages?$FL1?$FN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PDMC@V?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GHEP@V?9?$DOU?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MGNJ@V?9?$DOU2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MPKE@n?$DMARRAY_COUNT?$CIVerts?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@LDCG@VertexCount?$DM?$DNACTORPOLY_VERTEXBUF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01IJJ@c?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CC@NBJF@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DA@DNJO@TotalParticleCount?$CK6?$DMPARTICLE_VE@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@IFBG@?$AAG?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@PMBP@?$AA?5?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@NBKC@?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@CCID@?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CK@ECOM@?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAf@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1KK@HEA@?$AAc?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AAL?$AAI?$AAN?$AAE?$AA_?$AAV?$AAE@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@NGCA@Count?$DMLINE_VERTEXBUFFER_SIZE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@KHEC@Viewport?9?$DOHitYL?$DM?$DNHIT_SIZE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@MKKI@Viewport?9?$DOHitXL?$DM?$DNHIT_SIZE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1FA@HABJ@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAG?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EC@KMJO@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAR?$AAe?$AAc?$AAt@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@MCHO@Count?5?$DM?$DN?5HitStack?4Num?$CI?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CAK@KINP@?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?3?$AA?$CF?$AA?4?$AA1?$AAf?$AAm?$AAs?$AA?5?$AA?$CI?$AAs?$AAu?$AAr?$AAf?$AA?$DN?$AA?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1KI@FDIG@?$AA?5?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?1?$AAB@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1PM@KNH@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1KE@NMAC@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1NI@LHNJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1LE@BAFJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DJ@JEFN@?$CINewSrcBlend?$DO0?$CJ?$CG?$CG?$CINewSrcBlend?$DM?$DND@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DJ@CJG@?$CINewDstBlend?$DO0?$CJ?$CG?$CG?$CINewDstBlend?$DM?$DND@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DK@OOPG@?$CINewAlphaBlendEnable?$DN?$DNTRUE?$CJ?$HM?$HM?$CINe@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CM@ILAF@?$CIdwStage?$DO?$DN0?$CJ?$CG?$CG?$CIdwStage?$DMARRAY_COU@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DG@GDLM@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1II@DOLE@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAn?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BFI@PKNA@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1IG@GNH@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$CI?$AAN?$AAe?$AAw?$AAX?$AA?$DN?$AA?$CF?$AAi?$AA?0?$AAN?$AAe?$AAw?$AAY?$AA?$DN@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09FJBK@Direct3D8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@JBFD@NewColorBytes?$DM?$DN4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EM@JIDN@?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AAl?$AAy?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EE@PDPG@?$AAN?$AAo?$AA?5?$AAf?$AAu?$AAl?$AAl?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EE@COBK@?$AAN?$AAo?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1FK@OJMD@?$AAB?$AAe?$AAs?$AAt?$AA?9?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAm@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CE@EFFL@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CO@HHEN@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAp?$AAt?$AAh?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl?$AAM?$AAa?$AAt@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1IA@JLIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CE@BLNE@?$AAV?$AAi?$AAe?$AAw?$AAp?$AAo?$AAr?$AAt?$AAh?$AAW?$AAn?$AAd?$AA?3?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1LE@DHNM@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAh?$AAa?$AAr?$AAd?$AAw?$AAa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1HA@ONNK@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CI?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1FI@IKFB@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAo?$AAf?$AAt@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DF@FMGL@?$CBFAILED?$CIDirect3DDevice8?9?$DOSetView@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DF@HNEL@?$CBFAILED?$CIDirect3DDevice8?9?$DOGetView@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@PNPN@?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@FEAG@?$AAA?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1GM@CMDP@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAM?$AAi?$AAp?$AAm?$AAa?$AAp?$AAp?$AAi@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DO@LJFH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EM@HNBH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EO@FHMI@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0HG@OIHH@Viewport?9?$DOResizeViewport?$CI?$CIFullsc@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@JDJI@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CA@MMOI@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CA@NLNL@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BM@CBJB@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAR?$AA5?$AAG?$AA6?$AAB?$AA5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CA@HCCA@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DA@PNOF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DA@KNFF@?$AAC?$AAl?$AAi?$AAp?$AAp?$AAe?$AAr?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAc?$AAr?$AAe?$AAa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EG@JNCJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1FM@ONLA@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1HG@MLIH@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1FE@MDFI@?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EM@HNNJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EI@PKCN@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EG@EKPK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EI@BJID@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EA@OCBK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CC@LEJP@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08GCAE@Index?$DO?$DN0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08DHAB@InDevice?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08MGPM@InLength?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@DFJN@VertexBuffer8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06CAAP@Length?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@GIGE@Num?$DMLength?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06NBPC@Device?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BI@IADD@?$AAH?$AAa?$AAs?$AAh?$AAM?$AAa?$AAp?$AAH?$AAa?$AAs?$AAh?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appRound@@YAHM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appCycles@@YAKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appRDTSC@@YA_JXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appSeconds@@YANXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Serialize@FOutputDevice@@UAEXPBDW4EName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Flush@FOutputDevice@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FConfigCache@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFConfigCache@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appToUpper@@YAGG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appToLower@@YAGG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appStrihash@@YAKPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appSin@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appCos@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appTan@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appAcos@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appAtan@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appPow@@YANNN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appSrand@@YAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appRand@@YAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appFrand@@YAMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appSqrt@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appFloor@@YAHM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appMemcpy@@YAXPAXPBXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appMemzero@@YAXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_U@YAPAXIPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_U@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FArchive@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SerializeBits@FArchive@@UAEXPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SerializeInt@FArchive@@UAEXAAKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Preload@FArchive@@UAEXPAVUObject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?CountBytes@FArchive@@UAEXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??6FArchive@@UAEAAV0@AAVFName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??6FArchive@@UAEAAV0@AAPAVUObject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MapName@FArchive@@UAEHPAVFName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MapObject@FArchive@@UAEHPAVUObject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?TotalSize@FArchive@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?AtEnd@FArchive@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?AttachLazyLoader@FArchive@@UAEXPAVFLazyLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?DetachLazyLoader@FArchive@@UAEXPAVFLazyLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Precache@FArchive@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Flush@FArchive@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Close@FArchive@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetError@FArchive@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ByteOrderSerialize@FArchive@@QAEAAV1@PAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FArchive@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Ver@FArchive@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsLoading@FArchive@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsSaving@FArchive@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsTrans@FArchive@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsPersistent@FArchive@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AA_K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfo@E@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfo@H@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfo@G@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfo@VFName@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetData@FArray@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Num@FArray@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Insert@FArray@@QAEXHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Add@FArray@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?AddZeroed@FArray@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Shrink@FArray@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Empty@FArray@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Clear@FArray@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FArray@@QAE@W4ENoInit@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?CountBytes@FArray@@QAEXAAVFArchive@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FArray@@IAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FLazyLoader@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FString@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FString@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FString@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FString@@QAE@W4ENoInit@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4FString@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4FString@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FString@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFString@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??YFString@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??HFString@@QAE?AV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??XFString@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFString@@QBE?AV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Len@FString@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Left@FString@@QBE?AV1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Mid@FString@@QBE?AV1@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?InStr@FString@@QBEHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?InStr@FString@@QBEHABV1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FString@@AAE@HPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FStringNoInit@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4FStringNoInit@@QAEAAU0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTypeHash@@YAKABVFString@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@FStringOutputDevice@@UAEXPBGW4EName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FOutputDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FBufferWriter@@QAE@AAV?$TArray@E@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@FBufferWriter@@UAEXPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Tell@FBufferWriter@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Seek@FBufferWriter@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TotalSize@FBufferWriter@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFBufferWriter@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FBufferWriter@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFBufferArchive@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FBufferArchive@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FBufferReader@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FRainbowPtr@@QAE@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFName@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetIndex@FName@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FName@@QAE@W4EName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FName@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTypeHash@@YAKVFName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FFrame@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FIteratorList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FIteratorList@@QAE@PAU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FGuid@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FGuid@@QAE@KKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAVFGuid@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UObject@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UObject@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticConfigName@UObject@@SAPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??3UObject@@SAXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsPendingKill@UObject@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetFlags@UObject@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetName@UObject@@UBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetFName@UObject@@QBE?BVFName@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetOuter@UObject@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetIndex@UObject@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTypeHash@@YAKPBVUObject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??EFObjectIterator@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UPackageMap@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UPackageMap@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UPackageMap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetMaxObjectIndex@UPackageMap@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUPackageMap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMap@PAVUObject@@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMap@PAVUObject@@PAVFClassNetCache@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UPackageMap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMap@PAVUObject@@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMap@PAVUObject@@PAVFClassNetCache@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UPackage@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UPackage@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UPackage@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUPackage@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@USubsystem@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1USubsystem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0USubsystem@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Tick@USubsystem@@UAIXM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FExec@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UCommandlet@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UCommandlet@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UCommandlet@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUCommandlet@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FStringNoInit@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0UCommandlet_eventMain_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1UCommandlet_eventMain_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ULanguage@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ULanguage@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UTextBuffer@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UTextBuffer@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UTextBuffer@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUTextBuffer@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@USystem@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2USystem@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1USystem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUSystem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UField@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UField@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UField@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UStruct@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UStruct@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UStruct@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UStruct@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetInheritanceSuper@UStruct@@UAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetPropertiesSize@UStruct@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetNameCPP@UStruct@@UAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSuperStruct@UStruct@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUStruct@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UFunction@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UFunction@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UFunction@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UFunction@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MergeBools@UFunction@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetInheritanceSuper@UFunction@@UAEPAVUStruct@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUFunction@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UState@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UState@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UState@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UState@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MergeBools@UState@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetInheritanceSuper@UState@@UAEPAVUStruct@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSuperState@UState@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUState@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UEnum@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UEnum@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UEnum@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UEnum@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUEnum@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UClass@@SAPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UClass@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UClass@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MergeBools@UClass@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetInheritanceSuper@UClass@@UAEPAVUStruct@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetNameCPP@UClass@@UAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSuperClass@UClass@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetDefaultActor@UClass@@QAEPAVAActor@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUClass@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UConst@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UConst@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UConst@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UConst@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUConst@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Matches@UProperty@@QBEHPBX0H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UByteProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UByteProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UByteProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UByteProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUByteProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UIntProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UIntProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UIntProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UIntProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUIntProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UBoolProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UBoolProperty@@SAPAXIPAVUObject@@VFName@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UBoolProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UBoolProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UBoolProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUBoolProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UFloatProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UFloatProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UFloatProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UFloatProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUFloatProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UObjectProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UObjectProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UObjectProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UObjectProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UObjectProperty@@QAE@W4ECppProperty@@HPBGKPAVUClass@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUObjectProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UClassProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UClassProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UClassProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UClassProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetID@UClassProperty@@UBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUClassProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UNameProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UNameProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UNameProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UNameProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUNameProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UStrProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UStrProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UStrProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UStrProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUStrProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UFixedArrayProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UFixedArrayProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UFixedArrayProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UFixedArrayProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUFixedArrayProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UArrayProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UArrayProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UArrayProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UArrayProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUArrayProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UMapProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UMapProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UMapProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UMapProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUMapProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UStructProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UStructProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UStructProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UStructProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUStructProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsA@UObject@@QBIHPAVUClass@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsProbing@UObject@@QAEHVFName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FFrame@@QAE@PAVUObject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FStateFrame@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFStateFrame@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FGenerationInfo@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAUFGenerationInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPackageFileSummary@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ULinker@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ULinker@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ULinker@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ULinker@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GULinker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FPackageFileSummary@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StaticClass@ULinkerLoad@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2ULinkerLoad@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ULinkerLoad@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ULinkerLoad@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GULinkerLoad@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StaticClass@ULinkerSave@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2ULinkerSave@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ULinkerSave@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ULinkerSave@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GULinkerSave@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UFactory@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UFactory@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UExporter@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UExporter@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Unlock@FCacheItem@FMemCache@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GHash@FMemCache@@QAEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PushBytes@FMemStack@@QAEPAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Tick@FMemStack@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAVFMemStack@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMemMark@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMemMark@@QAE@AAVFMemStack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Pop@FMemMark@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FSnap@@YAMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FSheerSnap@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FAddAngleConfined@@YIGHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FVector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FVector@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??TFVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??UFVector@@QBEMABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D@YA?AVFVector@@MABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??HFVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??GFVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFVector@@QBE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??KFVector@@QBE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??8FVector@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??9FVector@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??GFVector@@QBE?AV0@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??YFVector@@QAE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??ZFVector@@QAE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??XFVector@@QAE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??_0FVector@@QAE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??XFVector@@QAE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??_0FVector@@QAE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Size@FVector@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SizeSquared@FVector@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Normalize@FVector@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?UnsafeNormal@FVector@@QBE?AV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?BoundToCube@FVector@@QAE?AV1@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToStd@FVector@@QBE?AV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToUnr@FVector@@QBE?AV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RotateAboutAxis@@YA?AVFVector@@AAV1@M0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FVectorDouble@@QAE@NNN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??HFVectorDouble@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?BoundToCube@FVectorDouble@@QAE?AV1@N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FQuat@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FQuat@@QAE@ABVFVector@@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4FQuat@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SizeSquared@FQuat@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Size@FQuat@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Normalize@FQuat@@QAEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??GFQuat@@QBE?AV0@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFQuat@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??UFQuat@@QBEMABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??8FQuat@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FPlane@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FPlane@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FPlane@@QAE@ABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FPlane@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FPlane@@QAE@VFVector@@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PlaneDot@FPlane@@QBEMABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??9FPlane@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAVFPlane@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FSphere@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FScale@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Orientation@FScale@@QAEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FCoords@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FCoords@@QAE@ABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FCoords@@QAE@ABVFVector@@000@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FModelCoords@@QAE@ABVFCoords@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FRotator@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FRotator@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??HFRotator@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFRotator@@QBE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D@YA?AVFRotator@@MABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FRange@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FBox@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FBox@@QAE@ABVFVector@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetExtrema@FBox@@QBEABVFVector@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Init@FBox@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??YFBox@@QAEAAV0@ABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??YFBox@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SinTab@FGlobalMath@@QAEMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?CosTab@FGlobalMath@@QAEMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SinFloat@FGlobalMath@@QAEMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?CosFloat@FGlobalMath@@QAEMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReduceAngle@@YAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ASMTransformPoint@@YAXABVFCoords@@ABVFVector@@AAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ASMTransformVector@@YAXABVFCoords@@ABVFVector@@AAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?TransformPointBy@FVector@@QBE?AV1@ABVFCoords@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?TransformVectorBy@FVector@@QBE?AV1@ABVFCoords@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MirrorByVector@FVector@@QBE?AV1@ABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MirrorByPlane@FVector@@QBE?AV1@ABVFPlane@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FPointPlaneDist@@YAMABVFVector@@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FParallel@@YAHABVFVector@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Transpose@FCoords@@QBE?AV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??XFCoords@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFCoords@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??XFCoords@@QAEAAV0@ABVFRotator@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFCoords@@QBE?AV0@ABVFRotator@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??XFCoords@@QAEAAV0@ABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFCoords@@QBE?AV0@ABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??_0FCoords@@QAEAAV0@ABVFRotator@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??KFCoords@@QBE?AV0@ABVFRotator@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??_0FCoords@@QAEAAV0@ABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??KFCoords@@QBE?AV0@ABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??XFCoords@@QAEAAV0@ABVFScale@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFCoords@@QBE?AV0@ABVFScale@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??_0FCoords@@QAEAAV0@ABVFScale@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??KFCoords@@QBE?AV0@ABVFScale@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMatrix@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMatrix@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??_3FCoords@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??6FCoords@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??SFCoords@@QBE?AV0@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KRSpline_Sample@@YAXMAAVFVector@@AAVFRotator@@V1@V2@232323@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Splerp@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FPointRegion@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsCsg@FBspNode@@QBEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UPolys@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UPolys@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UPolys@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UPolys@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Serialize@UPolys@@UAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUPolys@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TTransArray@VFPoly@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FIteratorActorList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FIteratorActorList@@QAE@PAU0@PAVAActor@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UPrimitive@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UPrimitive@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UPrimitive@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UPrimitive@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUPrimitive@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UModel@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UModel@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UModel@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UModel@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUModel@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TTransArray@VFBspNode@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TTransArray@VFVert@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TTransArray@VFVector@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TTransArray@VFBspSurf@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FColor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FColor@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FColor@@QAE@EEEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FColor@@QAE@ABVFPlane@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4FColor@@QAEAAV0@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?TrueColor@FColor@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Plane@FColor@@QBE?AVFVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UPalette@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UPalette@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UPalette@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUPalette@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMipmapBase@@QAE@EE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMipmapBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UBitmap@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UTexture@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UTexture@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAPAVUTexture@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UTexture@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetMip@UTexture@@UAEPAUFMipmapBase@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MousePosition@UTexture@@UAEXKMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Click@UTexture@@UAEXKMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Get@UTexture@@QAEPAV1@N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUTexture@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAUFFontCharacter@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UFont@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UFont@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UFont@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUFont@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UFontTrueType@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UFontTrueType@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UFontTrueType@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUFontTrueType@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMap@GH@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UProceduralTexture@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UProceduralTexture@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UMesh@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UMesh@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UMesh@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetInstanceClass@UMesh@@UAEPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUMesh@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UMeshInstance@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UMeshInstance@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UMeshInstance@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PointCheck@UMeshInstance@@UAEHAAUFCheckResult@@PAVAActor@@VFVector@@2K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?LineCheck@UMeshInstance@@UAEHAAUFCheckResult@@PAVAActor@@VFVector@@22KH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetRenderBoundingBox@UMeshInstance@@UAE?AVFBox@@PBVAActor@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetCollisionBoundingBox@UMeshInstance@@UBE?AVFBox@@PBVAActor@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetMesh@UMeshInstance@@UAEPAVUMesh@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SetMesh@UMeshInstance@@UAEXPAVUMesh@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetActor@UMeshInstance@@UAEPAVAActor@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SetActor@UMeshInstance@@UAEXPAVAActor@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetNumSequences@UMeshInstance@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSequence@UMeshInstance@@UAEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?FindSequence@UMeshInstance@@UAEPAXVFName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqName@UMeshInstance@@UAE?AVFName@@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SetSeqGroupName@UMeshInstance@@UAEXVFName@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqGroupName@UMeshInstance@@UAE?AVFName@@V2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqNumFrames@UMeshInstance@@UAEHPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqRate@UMeshInstance@@UAEMPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqNumEvents@UMeshInstance@@UAEHPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqEventType@UMeshInstance@@UAE?AW4EMeshSeqEvent@@PAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqEventTime@UMeshInstance@@UAEMPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqEventString@UMeshInstance@@UAEPBGPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PlaySequence@UMeshInstance@@UAEHPAXEHMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?DriveSequences@UMeshInstance@@UAEXM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetTexture@UMeshInstance@@UAEPAVUTexture@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetStringValue@UMeshInstance@@UAEXAAVFOutputDevice@@PBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SendStringCommand@UMeshInstance@@UAEXPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetBasisCoords@UMeshInstance@@UAE?AVFCoords@@V2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetFrame@UMeshInstance@@UAEHPAVFVector@@PAEHVFCoords@@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetMountCoords@UMeshInstance@@UAEHVFName@@HAAVFCoords@@PAVAActor@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Draw@UMeshInstance@@UAEXPAX0VFCoords@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUMeshInstance@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UMeshInstance@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMeshChannel@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AActor@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AActor@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAPAVAActor@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AActor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AActor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ShouldDoScriptReplication@AActor@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetLevel@AActor@@QBEPAVULevel@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?WorldLightRadius@AActor@@UBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PostEditMove@AActor@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PreRaytrace@AActor@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PostRaytrace@AActor@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Spawned@AActor@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToLocal@AActor@@UBE?AVFCoords@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToWorld@AActor@@UBE?AVFCoords@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsPendingKill@AActor@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetMeshInstance@AActor@@QAEPAVUMeshInstance@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventCalcView_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventGlobalTrigger_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventEnumSurfsInRadiusCB_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventBroadcastMessage_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AActor_eventBroadcastMessage_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventTakeDamage_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventPushedByMover_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventLanded_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventHitWall_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAActor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInfoActor@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInfoActor@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInfoActor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AInfoActor@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInfoActor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AInfo@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInternetInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInternetInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInternetInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AInternetInfo@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInternetInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInternetLink@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInternetLink@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInternetLink@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInternetLink@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AUdpLink@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AUdpLink@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AUdpLink@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AUdpLink_eventReceivedLine_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AUdpLink_eventReceivedLine_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AUdpLink_eventReceivedText_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AUdpLink_eventReceivedText_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAUdpLink@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ATcpLink@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ATcpLink@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ATcpLink@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ATcpLink_eventReceivedLine_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ATcpLink_eventReceivedLine_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ATcpLink_eventReceivedText_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ATcpLink_eventReceivedText_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GATcpLink@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AMapLocations@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AMapLocations@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AMapLocations@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AMapLocations@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAMapLocations@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FMapInfoData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMapInfoData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ADOTAffector@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ADOTAffector@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ADOTAffector@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ADOTAffector@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GADOTAffector@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AActorDamageEffect@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AActorDamageEffect@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AActorDamageEffect@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AActorDamageEffect@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAActorDamageEffect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AMutator@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AMutator@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AMutator@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AMutator@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAMutator@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AReplicationInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AReplicationInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AReplicationInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AReplicationInfo@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAReplicationInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AGameReplicationInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AGameReplicationInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AGameReplicationInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AGameReplicationInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAGameReplicationInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@APlayerReplicationInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2APlayerReplicationInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1APlayerReplicationInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0APlayerReplicationInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAPlayerReplicationInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ASavedMove@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ASavedMove@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ASavedMove@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ASavedMove@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GASavedMove@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AZoneInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AZoneInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AZoneInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AZoneInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAZoneInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AWarpZoneInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AWarpZoneInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AWarpZoneInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AWarpZoneInfo@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAWarpZoneInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ASkyZoneInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ASkyZoneInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ASkyZoneInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ASkyZoneInfo@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GASkyZoneInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ALevelInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ALevelInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ALevelInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ALevelInfo@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ALevelInfo_eventServerTravel_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ALevelInfo_eventServerTravel_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GALevelInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FObjectiveInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FObjectiveInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AGameInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AGameInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AGameInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AGameInfo@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AGameInfo_eventLoginNewClass_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AGameInfo_eventLoginNewClass_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AGameInfo_eventLogin_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AGameInfo_eventLogin_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AGameInfo_eventPreLogin_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AGameInfo_eventPreLogin_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AGameInfo_eventGetBeaconText_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AGameInfo_eventGetBeaconText_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AGameInfo_eventInitGame_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AGameInfo_eventInitGame_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAGameInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AMaterial@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AMaterial@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AMaterial@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AMaterial@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAMaterial@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FDamageCategoryEffectStruct@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AFocalPoint@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AFocalPoint@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AFocalPoint@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAFocalPoint@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AFocalPoint@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ALight@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ALight@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ALight@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ALight@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GALight@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AFlareLight@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AFlareLight@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AFlareLight@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AFlareLight@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAFlareLight@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ATriggerLight@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ATriggerLight@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ATriggerLight@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ATriggerLight@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GATriggerLight@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ADamageType@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ADamageType@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ADamageType@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ADamageType@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GADamageType@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AKeypoint@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AKeypoint@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AKeypoint@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AKeypoint@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAKeypoint@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInterpolationStation@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInterpolationStation@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInterpolationStation@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AInterpolationStation@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInterpolationStation@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@Alocationid@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2Alocationid@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1Alocationid@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0Alocationid@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAlocationid@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInterpolationPoint@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInterpolationPoint@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInterpolationPoint@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AInterpolationPoint@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInterpolationPoint@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@APolyMarker@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2APolyMarker@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1APolyMarker@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0APolyMarker@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAPolyMarker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AClipMarker@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AClipMarker@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AClipMarker@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AClipMarker@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAClipMarker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AMeshEffect@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AMeshEffect@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AMeshEffect@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AMeshEffect@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AMeshEffect_eventEvalVert_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAMeshEffect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ASpawnNotify@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ASpawnNotify@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ASpawnNotify@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ASpawnNotify@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GASpawnNotify@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ANavigationPoint@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ANavigationPoint@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ANavigationPoint@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ANavigationPoint@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GANavigationPoint@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ALiftExit@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ALiftExit@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ALiftExit@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ALiftExit@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GALiftExit@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ALiftCenter@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ALiftCenter@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ALiftCenter@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ALiftCenter@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GALiftCenter@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AWarpZoneMarker@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AWarpZoneMarker@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AWarpZoneMarker@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AWarpZoneMarker@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAWarpZoneMarker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AButtonMarker@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AButtonMarker@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AButtonMarker@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AButtonMarker@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAButtonMarker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ATriggerMarker@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ATriggerMarker@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ATriggerMarker@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ATriggerMarker@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GATriggerMarker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInventorySpot@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInventorySpot@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInventorySpot@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AInventorySpot@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInventorySpot@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@APlayerStart@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2APlayerStart@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1APlayerStart@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0APlayerStart@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAPlayerStart@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ATeleporter@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ATeleporter@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ATeleporter@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ATeleporter@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GATeleporter@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@APathNode@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2APathNode@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1APathNode@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0APathNode@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAPathNode@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AHUD@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AHUD@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AHUD@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AHUD@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAHUD@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ATriggers@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ATriggers@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ATriggers@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ATriggers@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GATriggers@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ATrigger@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ATrigger@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ATrigger@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ATrigger@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GATrigger@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ADukeNet@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ADukeNet@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ADukeNet@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ADukeNet@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ADukeNet_eventdncServerCommand_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ADukeNet_eventdncServerCommand_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GADukeNet@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ARenderActor@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ARenderActor@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ARenderActor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GARenderActor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ARenderActor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@APawn@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2APawn@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1APawn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0APawn@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0APawn_eventClientHearSound_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0APawn_eventWalkTexture_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0APawn_eventTeamMessage_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1APawn_eventTeamMessage_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0APawn_eventClientMessage_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1APawn_eventClientMessage_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAPawn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FSFacialExpression@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FFacialNoiseInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FSFacialExpressionFrame@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@APlayerPawn@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2APlayerPawn@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1APlayerPawn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0APlayerPawn_eventPlayerCalcView_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0APlayerPawn_eventClientTravel_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1APlayerPawn_eventClientTravel_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAPlayerPawn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0APlayerPawn@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ACamera@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ACamera@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ACamera@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ACamera@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GACamera@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AScout@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AScout@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AScout@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AScout@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAScout@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ABrush@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ABrush@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ABrush@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ABrush@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?OldBuildCoords@ABrush@@UAEMPAVFModelCoords@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToLocal@ABrush@@UBE?AVFCoords@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToWorld@ABrush@@UBE?AVFCoords@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?BuildCoords@ABrush@@UAEMPAVFModelCoords@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?CopyPosRotScaleFrom@ABrush@@UAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GABrush@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AMover@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AMover@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AMover@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToLocal@AMover@@UBE?AVFCoords@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToWorld@AMover@@UBE?AVFCoords@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?BuildCoords@AMover@@UAEMPAVFModelCoords@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAMover@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ADoorMover@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ADoorMover@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ADoorMover@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GADoorMover@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ADoorMover@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AMeshDecal@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AMeshDecal@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AMeshDecal@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AMeshDecal@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAMeshDecal@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AItem@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AItem@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AItem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AItem@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAItem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ADecoration@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ADecoration@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ADecoration@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ADecoration@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GADecoration@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FSThirdPersonInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ACarcass@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ACarcass@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ACarcass@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GACarcass@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ACarcass@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ABoneRope@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ABoneRope@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ABoneRope@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GABoneRope@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AParticleCollisionActor@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AParticleCollisionActor@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AParticleCollisionActor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AParticleCollisionActor@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAParticleCollisionActor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ADecal@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ADecal@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ADecal@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ADecal@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GADecal@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInventory@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInventory@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInventory@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AInventory@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInventory@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AWeapon@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AWeapon@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AWeapon@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AWeapon@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAWeapon@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FWAMEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FWAMEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AProjectile@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AProjectile@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AProjectile@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AProjectile@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAProjectile@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AParticleSystem@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AParticleSystem@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AParticleSystem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AParticleSystem@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAParticleSystem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ASoftParticleAffector@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ASoftParticleAffector@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ASoftParticleAffector@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ASoftParticleAffector@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GASoftParticleAffector@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ASoftParticleSystem@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ASoftParticleSystem@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ASoftParticleSystem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ASoftParticleSystem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GASoftParticleSystem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FAdditionalSpawnStruct@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ABeamSystem@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ABeamSystem@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ABeamSystem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ABeamSystem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GABeamSystem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FSControlPoint@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ABreakableGlass@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ABreakableGlass@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ABreakableGlass@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GABreakableGlass@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ULevelSummary@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ULevelSummary@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ULevelSummary@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ULevelSummary@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PostLoad@ULevelSummary@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GULevelSummary@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FCollisionHashBase@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFCollisionHashBase@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ULevelBase@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ULevelBase@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ULevelBase@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FURL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TTransArray@PAVAActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FNetworkNotify@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ULevel@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ULevel@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ULevel@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ULevel@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetLevelInfo@ULevel@@QAEPAVALevelInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GULevel@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMap@VFString@@V1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMap@VFName@@PAVAActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMap@VFString@@V1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMap@VFName@@PAVAActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??EFStaticBrushIterator@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UInput@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UInput@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UInput@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUInput@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FAlias@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UPlayer@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UPlayer@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UEngine@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UEngine@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?vtPad1@UEngine@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?vtPad2@UEngine@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?vtPad3@UEngine@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?edSetClickLocation@UEngine@@UAEXAAVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?edcamMode@UEngine@@UAEHPAVUViewport@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?vtPad4@UEngine@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?vtPad5@UEngine@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?vtPad6@UEngine@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UGameEngine@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UGameEngine@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UGameEngine@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUGameEngine@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UCanvas@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UCanvas@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UCanvas@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UCanvas@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUCanvas@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMap@VFString@@PAVUFont@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMap@VFString@@PAVUFont@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UViewport@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UViewport@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetOuterUClient@UViewport@@QBEPAVUClient@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsOrtho@UViewport@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsA@HHitProxy@@UBEHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Click@HHitProxy@@UAEXABUFHitCause@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UClient@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UClient@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAVFMeshAnimNotify@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FMeshAnimNotify@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAUFMeshVertConnect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FMeshVert@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAUFMeshVert@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAUFMeshUV@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAUFMeshTri@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UUnrealMesh@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UUnrealMesh@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UUnrealMesh@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUUnrealMesh@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UUnrealLodMesh@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UUnrealLodMesh@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UUnrealLodMesh@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UUnrealLodMesh@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUUnrealLodMesh@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UDukeMesh@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UDukeMesh@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UDukeMesh@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUDukeMesh@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMap@VFName@@V1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsBrush@AActor@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsStaticBrush@AActor@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetPlayerPawn@AActor@@QBEPAVAPlayerPawn@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetPrimitive@AActor@@UBEPAVUPrimitive@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UAudioSubsystem@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UAudioSubsystem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FSoundData@@QAE@PAVUSound@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@USound@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2USound@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1USound@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0USound@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUSound@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FSoundData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UVoiceSound@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UVoiceSound@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UVoiceSound@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUVoiceSound@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UVoiceSound@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UMusic@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UMusic@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UMusic@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UMusic@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUMusic@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FMovingBrushTrackerBase@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFMovingBrushTrackerBase@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UScriptedTexture@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UScriptedTexture@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UScriptedTexture@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PostEditChange@UScriptedTexture@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUScriptedTexture@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@URenderIterator@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2URenderIterator@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1URenderIterator@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GURenderIterator@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FActorNode@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFActorNode@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsA@HActorVertex@@UBEHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0HHitProxy@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@URenderDevice@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1URenderDevice@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?DrawStats@URenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SetSceneNode@URenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?_Validate@URenderDevice@@UAIXPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Project@FTransform@@QAEXPBUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTransform@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FOutVector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTransSample@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTransSample@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTransTexture@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTransTexture@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FSpan@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FDynamicItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Filter@FDynamicItem@@UAIXPAVUViewport@@PAUFSceneNode@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PreRender@FDynamicItem@@UAIXPAVUViewport@@PAUFSceneNode@@PAVFSpanBuffer@@HPAUFVolActorLink@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@Profile@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Collapse@Profile@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@URender@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2URender@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1URender@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GURender@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E229
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E230
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E231
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E232
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E234
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E235
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E236
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E237
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E239
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E240
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E241
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E242
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E244
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E245
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E246
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E247
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E249
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E250
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E251
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E252
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E254
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E255
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E256
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E257
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E259
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E260
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E261
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E262
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E264
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E265
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E266
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E267
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E269
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E270
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E271
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E272
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E274
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E275
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E276
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E277
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E279
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E280
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E281
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E282
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E284
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E285
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E286
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E287
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNearZ_ExecFuncCall@@YIXPAVFExecVariable@@HPAPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E289
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E290
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E292
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E293
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E294
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E295
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E297
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E298
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E299
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E300
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPixFormat@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResetStats@FPixFormat@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StaticClass@UD3DRenderDevice@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2UD3DRenderDevice@@SAPAXIPAVUObject@@VFName@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2UD3DRenderDevice@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1UD3DRenderDevice@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalConstructor@UD3DRenderDevice@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFillerDXT1@UD3DRenderDevice@@QAE@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFillerDXT1@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFillerP8_P8@UD3DRenderDevice@@QAE@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller8888_RGBA8@UD3DRenderDevice@@QAE@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller8888_RGBA8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller8888_RGBA7@UD3DRenderDevice@@QAE@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller8888_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller8888_P8@UD3DRenderDevice@@QAE@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginUpload@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller1555_RGBA7@UD3DRenderDevice@@QAE@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller1555_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller1555_P8@UD3DRenderDevice@@QAE@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BuildAlphaPalette@FTexFiller1555_P8@UD3DRenderDevice@@QAEXPAVFColor@@KKKKKKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginUpload@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanupVertexBuffers@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StaticConstructor@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0UD3DRenderDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Destroy@UD3DRenderDevice@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitD3D@UD3DRenderDevice@@SIXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@UD3DRenderDevice@@UAIHPAVUViewport@@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exit@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShutdownAfterError@UD3DRenderDevice@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateGamma@UD3DRenderDevice@@QAEXPAVUViewport@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RestoreGamma@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Flush@UD3DRenderDevice@@UAIXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PreRender@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@UD3DRenderDevice@@UAIXVFColor@@MHVFPlane@@11KPAEPAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrecacheTexture@UD3DRenderDevice@@UAIXAAUFTextureInfo@@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@UD3DRenderDevice@@UAIXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawComplexSurface@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFSurfaceInfo@@AAUFSurfaceFacet@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuePolygonDoes@UD3DRenderDevice@@UAI_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuePolygonBegin@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuePolygonEnd@UD3DRenderDevice@@UAIXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuePolygon@UD3DRenderDevice@@UAIXPAUFTextureInfo@@PAPAUFTransTexture@@HKKPAVFSpanBuffer@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuePolygonBeginFast@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuePolygonFast@UD3DRenderDevice@@UAIXPAPAUFTransTexture@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuePolygonEndFast@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RenderQueuedPolygonsForProjectors@UD3DRenderDevice@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawGouraudPolygon@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@PAPAUFTransTexture@@HKPAVFSpanBuffer@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RotateAboutOrigin2D@UD3DRenderDevice@@QAEXMMAAM0M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTextureClampMode@UD3DRenderDevice@@UAIXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawTile@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@MMMMMMMMPAVFSpanBuffer@@MVFPlane@@3KKMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoubleSineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SamplePoint@UD3DRenderDevice@@QAIMHHMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MovingGrid@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@3H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawSpline@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAVUCanvas@@PAVUTexture@@VFColor@@3MMKMMMMVFVector@@4H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dnDrawBeam@UD3DRenderDevice@@UAIXAAVABeamSystem@@PAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueueParticleShutdown@UD3DRenderDevice@@QAIXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueueParticleFlush@UD3DRenderDevice@@QAIXAAVAParticleSystem@@PAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dnDrawParticles@UD3DRenderDevice@@UAIXAAVASoftParticleSystem@@PAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuedLinesFlush@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAUFSceneNode@@PAVUTexture@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exec@UD3DRenderDevice@@UAEHPBGAAVFOutputDevice@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Validate@UD3DRenderDevice@@UAIXPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Queue3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Queued3DLinesFlush@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw2DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw2DPoint@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PushHit@UD3DRenderDevice@@UAIXPBEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PopHit@UD3DRenderDevice@@UAIXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStats@UD3DRenderDevice@@UAIXPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearZ@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadPixels@UD3DRenderDevice@@UAIXPAVFColor@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndFlash@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetZBias@UD3DRenderDevice@@QAIMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginScene@UD3DRenderDevice@@QAIJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndScene@UD3DRenderDevice@@QAIJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBlending@UD3DRenderDevice@@QAIXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseOldestTexture@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTextureNULL@UD3DRenderDevice@@QAIXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanupRenderTargetResources@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RecognizePixelFormat@UD3DRenderDevice@@QAEXAAUFPixFormat@@W4_D3DFORMAT@@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRes@UD3DRenderDevice@@UAIHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnSetRes@UD3DRenderDevice@@QAIHPBGJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateModulation@UD3DRenderDevice@@QAEKAAHAAVFPlane@@ABV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateRenderTarget@UD3DRenderDevice@@UAEPAXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DestroyRenderTarget@UD3DRenderDevice@@UAEXPAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRenderTarget@UD3DRenderDevice@@UAEXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RestoreRenderTarget@UD3DRenderDevice@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawTex@UD3DRenderDevice@@QAIXPAUFSceneNode@@MMMMMMMMPAUIDirect3DTexture8@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddProjector@UD3DRenderDevice@@UAIXPAUFSceneNode@@PAXPAUFTextureInfo@@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResetProjectors@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0UD3DRenderDevice@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4UD3DRenderDevice@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUD3DRenderDevice@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EUD3DRenderDevice@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller@UD3DRenderDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0URenderDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexInfo@UD3DRenderDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FD3DTLVertex@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FTextureInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FD3DScreenVertex@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ProjectorInfo@UD3DRenderDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0URenderDevice@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFillerDXT1@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller8888_RGBA8@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller8888_RGBA7@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller8888_P8@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller1555_RGBA7@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller1555_P8@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFillerP8_P8@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FD3DTLVertex@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4URenderDevice@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFillerDXT1@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFiller8888_RGBA8@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFiller8888_RGBA7@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFiller8888_P8@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFiller1555_RGBA7@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFiller1555_P8@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFillerP8_P8@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0USubsystem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4USubsystem@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFiller@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FExec@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4FExec@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DllMain@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E313
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E314
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E316
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E317
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E319
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E320
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@G@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@G@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@G@@QAE@W4ENoInit@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@G@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@G@@QAEAAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@G@@QBEABGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Shrink@?$TArray@G@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@G@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@G@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@E@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@E@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@E@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@E@@QAEAAEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@E@@QBEABEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@E@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@E@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@E@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@E@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@PAUFNameEntry@@@@QAEAAPAUFNameEntry@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@H@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@H@@QAEAAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@H@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@H@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddItem@?$TArray@H@@QAEHABH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFString@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFString@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@PAVUObject@@@@QAEAAPAVUObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFFieldNetCache@@@@QAEAAVFFieldNetCache@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindRef@?$TMapBase@PAVUObject@@PAVFFieldNetCache@@@@QAEPAVFFieldNetCache@@ABQAVUObject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFPackageInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFPackageInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMapBase@PAVUObject@@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMapBase@PAVUObject@@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFName@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFName@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFRepRecord@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@PAVUField@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFClassDependency@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFClassDependency@@@@QAEAAVFClassDependency@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TFieldIterator@VUProperty@@@@QAE@PAVUStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$TFieldIterator@VUProperty@@@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$TFieldIterator@VUProperty@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$TFieldIterator@VUProperty@@@@QAEPAVUProperty@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFGenerationInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFGenerationInfo@@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFGenerationInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFGenerationInfo@@@@QAEAAUFGenerationInfo@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UFGenerationInfo@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@UFGenerationInfo@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFObjectImport@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFObjectImport@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFObjectExport@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFObjectExport@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@PAVFLazyLoader@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@PAVFLazyLoader@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TTransArray@VFPoly@@@@QAE@PAVUObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TTransArray@VFPoly@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddZeroed@?$TTransArray@VFPoly@@@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TTransArray@VFPoly@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFPoly@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFPoly@@@@QAEAAVFPoly@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@VFPoly@@@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TTransArray@VFBspNode@@@@QAE@PAVUObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFBspNode@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFBspNode@@@@QAEAAVFBspNode@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TTransArray@VFVert@@@@QAE@PAVUObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFVert@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TTransArray@VFVector@@@@QAE@PAVUObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFVector@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFVector@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFVector@@@@QAEAAVFVector@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddUniqueItem@?$TArray@VFVector@@@@QAEHABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TTransArray@VFBspSurf@@@@QAE@PAVUObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFBspSurf@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFBspSurf@@@@QAEAAVFBspSurf@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFLightMapIndex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFLightMapIndex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFLightMapIndex@@@@QAEAAVFLightMapIndex@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFBox@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFBox@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFLeaf@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFLeaf@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@PAVAActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@PAVAActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@PAVAActor@@@@QAEAAPAVAActor@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFColor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFColor@@@@QAEAAVFColor@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TLazyArray@E@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TLazyArray@E@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@?$TLazyArray@E@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unload@?$TLazyArray@E@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TLazyArray@E@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMipmap@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFMipmap@@@@QAEAAUFMipmap@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@UFFontCharacter@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFFontPage@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMapBase@GH@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@M@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@M@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFMeshDecalTri@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMeshDecalTri@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@PAVAParticleCollisionActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@PAVAParticleCollisionActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TTransArray@PAVAActor@@@@QAE@PAVUObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFReachSpec@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFReachSpec@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMapBase@VFString@@V1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMapBase@VFString@@V1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMapBase@VFName@@PAVAActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMapBase@VFName@@PAVAActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMapBase@VFString@@PAVUFont@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMapBase@VFString@@PAVUFont@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@PAVUViewport@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFMeshAnimNotify@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFMeshAnimNotify@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@VFMeshAnimNotify@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TLazyArray@UFMeshVert@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@?$TLazyArray@UFMeshVert@@@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unload@?$TLazyArray@UFMeshVert@@@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TLazyArray@UFMeshTri@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@?$TLazyArray@UFMeshTri@@@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unload@?$TLazyArray@UFMeshTri@@@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFMeshAnimSeq@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TLazyArray@UFMeshVertConnect@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@?$TLazyArray@UFMeshVertConnect@@@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unload@?$TLazyArray@UFMeshVertConnect@@@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TLazyArray@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@?$TLazyArray@H@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unload@?$TLazyArray@H@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@PAVUTexture@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFMeshFace@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMeshFace@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFMeshWedge@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMeshWedge@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFMeshMaterial@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMeshMaterial@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMapBase@VFName@@V1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEAAU_D3DADAPTER_IDENTIFIER8@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddItem@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEHABU_D3DADAPTER_IDENTIFIER8@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@U_D3DDISPLAYMODE@@@@QAEAAU_D3DDISPLAYMODE@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@U_D3DDISPLAYMODE@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddItem@?$TArray@U_D3DDISPLAYMODE@@@@QAEHABU_D3DDISPLAYMODE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TIterator@?$TArray@U_D3DDISPLAYMODE@@@@QAE@AAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ETIterator@?$TArray@U_D3DDISPLAYMODE@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BTIterator@?$TArray@U_D3DDISPLAYMODE@@@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CTIterator@?$TArray@U_D3DDISPLAYMODE@@@@QBEPAU_D3DDISPLAYMODE@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEAAUProjectorInfo@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddItem@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEHABUProjectorInfo@UD3DRenderDevice@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEAAURenderTargetInfo@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddItem@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEHABURenderTargetInfo@UD3DRenderDevice@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXPAUIDirect3DDevice8@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exit@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEPAUFD3DScreenVertex@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXPAUIDirect3DDevice8@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exit@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXPAUIDirect3DDevice8@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exit@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXPAUIDirect3DDevice8@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exit@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEAAUQueuedPolygon@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEAAUQueuedParticleByTexture@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddZeroed@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEAAUQueuedLineSegment@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFD3DVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFD3DVertex@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFD3DVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFD3DVertex@@@@QAEAAUFD3DVertex@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@UFD3DVertex@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@UFD3DVertex@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0QueuedPolygon@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0QueuedPolygon@UD3DRenderDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0QueuedLineSegment@UD3DRenderDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FD3DVertex@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@G@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@E@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@E@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@E@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@H@@QBEABHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@H@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@H@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@H@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFString@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VTPair@?$TMapBase@PAVUObject@@PAVFFieldNetCache@@@@@@QAEAAVTPair@?$TMapBase@PAVUObject@@PAVFFieldNetCache@@@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFPackageInfo@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Rehash@?$TMapBase@PAVUObject@@H@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VTPair@?$TMapBase@PAVUObject@@H@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VTPair@?$TMapBase@PAVUObject@@H@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Rehash@?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VTPair@?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VTPair@?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFName@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFRepRecord@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@PAVUField@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFClassDependency@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IterateToNext@?$TFieldIterator@VUProperty@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFGenerationInfo@@@@QBEABUFGenerationInfo@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFGenerationInfo@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFObjectImport@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFObjectExport@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@PAVFLazyLoader@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TTransArray@VFPoly@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SerializeItem@?$TTransArray@VFPoly@@@@KAXAAVFArchive@@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DestructItem@?$TTransArray@VFPoly@@@@KAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFPoly@@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@VFPoly@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFPoly@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@VFPoly@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFBspNode@@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFBspNode@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFVert@@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFVert@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFVector@@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFVector@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddItem@?$TArray@VFVector@@@@QAEHABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFBspSurf@@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFBspSurf@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFLightMapIndex@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFBox@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFLeaf@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@PAVAActor@@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@PAVAActor@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFColor@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMipmap@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFFontCharacter@@@@QAEAAUFFontCharacter@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@UFFontCharacter@@@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UFFontCharacter@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFFontPage@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VTPair@?$TMapBase@GH@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@M@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMeshDecalTri@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@PAVAParticleCollisionActor@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFReachSpec@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Rehash@?$TMapBase@VFString@@V1@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VTPair@?$TMapBase@VFString@@V1@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VTPair@?$TMapBase@VFString@@V1@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Rehash@?$TMapBase@VFName@@PAVAActor@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VTPair@?$TMapBase@VFName@@PAVAActor@@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VTPair@?$TMapBase@VFName@@PAVAActor@@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Rehash@?$TMapBase@VFString@@PAVUFont@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VTPair@?$TMapBase@VFString@@PAVUFont@@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VTPair@?$TMapBase@VFString@@PAVUFont@@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@PAVUViewport@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFMeshAnimNotify@@@@QAEAAVFMeshAnimNotify@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@VFMeshAnimNotify@@@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFMeshAnimNotify@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@VFMeshAnimNotify@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMeshVert@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@UFMeshVert@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UFMeshVert@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMeshTri@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@UFMeshTri@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UFMeshTri@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFMeshAnimSeq@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMeshVertConnect@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@UFMeshVertConnect@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UFMeshVertConnect@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@PAVUTexture@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMeshFace@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMeshWedge@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMeshMaterial@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VTPair@?$TMapBase@VFName@@V1@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@U_D3DDISPLAYMODE@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@U_D3DDISPLAYMODE@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QBEABUProjectorInfo@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QBEABURenderTargetInfo@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QBEABUQueuedPolygon@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QBEABUQueuedParticleByTexture@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QBEABUQueuedLineSegment@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFD3DVertex@@@@QBEABUFD3DVertex@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFD3DVertex@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UFD3DVertex@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFGenerationInfo@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@U_D3DADAPTER_IDENTIFIER8@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@U_D3DDISPLAYMODE@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UProjectorInfo@UD3DRenderDevice@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@URenderTargetInfo@UD3DRenderDevice@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UQueuedPolygon@UD3DRenderDevice@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UQueuedParticleByTexture@UD3DRenderDevice@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UQueuedLineSegment@UD3DRenderDevice@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFD3DVertex@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFString@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFPackageInfo@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FPoly@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFBspSurf@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFMipmap@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFFontPage@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFMeshAnimSeq@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FPackageInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FBspSurf@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FMipmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FFontPage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FMeshAnimSeq@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFString@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@H@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFString@@@@QAEAAVFString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFPackageInfo@@@@QAEAAVFPackageInfo@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VTPair@?$TMapBase@PAVUObject@@H@@@@QAEAAVTPair@?$TMapBase@PAVUObject@@H@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VTPair@?$TMapBase@PAVUObject@@H@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VTPair@?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@@@QAEAAVTPair@?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VTPair@?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFDecal@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@VFPoly@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@VFVector@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFFontCharacter@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFFontPage@@@@QAEAAUFFontPage@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VTPair@?$TMapBase@GH@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VTPair@?$TMapBase@VFString@@V1@@@@@QAEAAVTPair@?$TMapBase@VFString@@V1@@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VTPair@?$TMapBase@VFString@@V1@@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@PAVAActor@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VTPair@?$TMapBase@VFName@@PAVAActor@@@@@@QAEAAVTPair@?$TMapBase@VFName@@PAVAActor@@@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VTPair@?$TMapBase@VFName@@PAVAActor@@@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VTPair@?$TMapBase@VFString@@PAVUFont@@@@@@QAEAAVTPair@?$TMapBase@VFString@@PAVUFont@@@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VTPair@?$TMapBase@VFString@@PAVUFont@@@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFMeshVert@@@@QAEAAUFMeshVert@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@UFMeshVert@@@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMeshVert@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFMeshTri@@@@QAEAAUFMeshTri@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@UFMeshTri@@@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMeshTri@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFMeshAnimSeq@@@@QAEAAVFMeshAnimSeq@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFMeshVertConnect@@@@QAEAAUFMeshVertConnect@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@UFMeshVertConnect@@@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMeshVertConnect@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VTPair@?$TMapBase@VFName@@V1@@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFPackageInfo@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFRepRecord@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@PAVUField@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFClassDependency@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFObjectImport@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFObjectExport@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@PAVFLazyLoader@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFPoly@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFBspNode@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFVert@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFVector@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFBspSurf@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFLightMapIndex@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFBox@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFLeaf@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFColor@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMipmap@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFFontCharacter@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFFontPage@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@M@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMeshDecalTri@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@PAVAParticleCollisionActor@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFReachSpec@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@PAVUViewport@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFMeshAnimNotify@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMeshVert@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMeshTri@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFMeshAnimSeq@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMeshVertConnect@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@PAVUTexture@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMeshFace@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMeshWedge@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMeshMaterial@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTPair@?$TMapBase@VFString@@V1@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTPair@?$TMapBase@VFString@@PAVUFont@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TPair@?$TMapBase@VFString@@V1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TPair@?$TMapBase@VFString@@PAVUFont@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFDecal@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFFontCharacter@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VTPair@?$TMapBase@PAVUObject@@H@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VTPair@?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VTPair@?$TMapBase@GH@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VTPair@?$TMapBase@VFString@@V1@@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VTPair@?$TMapBase@VFName@@PAVAActor@@@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VTPair@?$TMapBase@VFString@@PAVUFont@@@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VTPair@?$TMapBase@VFName@@V1@@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFDecal@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FDecal@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFDecal@@@@QAEAAVFDecal@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFDecal@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clamp@@YAHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clamp@@YAKKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@VFClassDependency@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UFGenerationInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Align@@YAPAEQAEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Abs@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clamp@@YAMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Abs@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clamp@@YANNNN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Sgn@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Max@@YAMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Min@@YAMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Square@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Square@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?New@@YAPAPAVFSpan@@AAVFMemStack@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?New@@YAPAVFSpan@@AAVFMemStack@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Max@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Min@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Min@@YAKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SafeRelease@@YAJAAPAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SafeDelete@@YAXAAPAUFTexInfo@UD3DRenderDevice@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exchange@@YAXAAM0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Abs@@YAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@E@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@H@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UFFontCharacter@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@VFMeshAnimNotify@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UProjectorInfo@UD3DRenderDevice@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UFD3DVertex@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@VFPoly@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UFMeshVert@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UFMeshTri@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UFMeshVertConnect@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EULinkerLoad@@WKE@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EULinkerSave@@WKE@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_SULevel@@6BUObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?OutXMinTab@?1??ComputeOutcode@FTransform@@QAEXPBUFSceneNode@@@Z@4QBEB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAInternetLink@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SALight@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUCanvas@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ULinkerLoad@@6BULinker@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAInventory@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ULinkerSave@@6BULinker@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAPolyMarker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAlocationid@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SARenderActor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0PAX@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_SAInfoActor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$TLazyArray@E@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFiller8888_P8@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?OutXMaxTab@?1??ComputeOutcode@FTransform@@QAEXPBUFSceneNode@@@Z@4QBEB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUObjectProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUState@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Half@?1??appFloor@@YAHM@Z@4MA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_SASpawnNotify@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUMeshInstance@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFiller8888_RGBA8@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAActorDamageEffect@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FMovingBrushTrackerBase@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SATcpLink@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAPawn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUUnrealLodMesh@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAMutator@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAMapLocations@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7UD3DRenderDevice@@6BFExec@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SABrush@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUSystem@@6BUObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAClipMarker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUPrimitive@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAPlayerPawn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAPlayerStart@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAWeapon@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SABreakableGlass@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAPathNode@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAMover@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SABoneRope@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0PAG@84
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_SAActor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SULevelSummary@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FStringOutputDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUEnum@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ULinkerSave@@6BFArchive@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0PAG@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_SACarcass@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAUdpLink@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SASavedMove@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUStrProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7UD3DRenderDevice@@6BUObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SADecal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SANavigationPoint@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUPackageMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUStructProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUFunction@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUMesh@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAZoneInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAButtonMarker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FBufferArchive@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAGameInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SATriggers@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$TLazyArray@UFMeshTri@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAPlayerReplicationInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUFontTrueType@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SASoftParticleAffector@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUClassProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SABeamSystem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUInput@@6BUObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$TLazyArray@H@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUDukeMesh@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAParticleSystem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SATeleporter@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAMeshEffect@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAFocalPoint@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAScout@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAInterpolationStation@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$TLazyArray@UFMeshVert@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SASkyZoneInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUFloatProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FDynamicSprite@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFillerP8_P8@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FDynamicItem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SURender@@6BUObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFiller8888_RGBA7@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUConst@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUGameEngine@@6BUObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7HActorVertex@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUNameProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAParticleCollisionActor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAKeypoint@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUPackage@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFillerDXT1@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAItem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUPalette@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FLazyLoader@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUMusic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAHUD@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUCommandlet@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAWarpZoneMarker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SATriggerMarker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FBufferWriter@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUBoolProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SADecoration@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAInterpolationPoint@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SADamageType@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAMaterial@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUPolys@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUUnrealMesh@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FConfigCache@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAReplicationInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUFixedArrayProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SADOTAffector@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SADoorMover@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAFlareLight@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ULinkerLoad@@6BFArchive@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SATrigger@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUArrayProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?OutYMaxTab@?1??ComputeOutcode@FTransform@@QAEXPBUFSceneNode@@@Z@4QBEB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFiller@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUVoiceSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAGameReplicationInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAMeshDecal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SATriggerLight@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FCollisionHashBase@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$TLazyArray@UFMeshVertConnect@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUIntProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUStruct@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SULinker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SADukeNet@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?OutYMinTab@?1??ComputeOutcode@FTransform@@QAEXPBUFSceneNode@@@Z@4QBEB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SASoftParticleSystem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAWarpZoneInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUTexture@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAInventorySpot@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFiller1555_RGBA7@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUModel@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFiller1555_P8@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUByteProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SALiftCenter@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CTA2PAG
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_SUScriptedTexture@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SURenderIterator@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUMapProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SALevelInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2PAG
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_SUTextBuffer@@6BUObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SACamera@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SALiftExit@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAProjectile@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUClass@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAInternetInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ, xdata$x
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?FogEnd@@3MA					; FogEnd
PUBLIC	?FogEnd_ExecVar@@3VFExecVariable@@A		; FogEnd_ExecVar
PUBLIC	?RenderParticles@@3HA				; RenderParticles
PUBLIC	?RenderParticles_ExecVar@@3VFExecVariable@@A	; RenderParticles_ExecVar
PUBLIC	?RenderMeshes@@3HA				; RenderMeshes
PUBLIC	?RenderMeshes_ExecVar@@3VFExecVariable@@A	; RenderMeshes_ExecVar
PUBLIC	?RenderSurfaces@@3HA				; RenderSurfaces
PUBLIC	?RenderSurfaces_ExecVar@@3VFExecVariable@@A	; RenderSurfaces_ExecVar
PUBLIC	?RenderLines@@3HA				; RenderLines
PUBLIC	?RenderLines_ExecVar@@3VFExecVariable@@A	; RenderLines_ExecVar
PUBLIC	?RenderTiles@@3HA				; RenderTiles
PUBLIC	?RenderTiles_ExecVar@@3VFExecVariable@@A	; RenderTiles_ExecVar
PUBLIC	?RenderPoints@@3HA				; RenderPoints
PUBLIC	?RenderPoints_ExecVar@@3VFExecVariable@@A	; RenderPoints_ExecVar
PUBLIC	?WorldDetail@@3HA				; WorldDetail
PUBLIC	?WorldDetail_ExecVar@@3VFExecVariable@@A	; WorldDetail_ExecVar
PUBLIC	?CacheBlending@@3HA				; CacheBlending
PUBLIC	?CacheBlending_ExecVar@@3VFExecVariable@@A	; CacheBlending_ExecVar
PUBLIC	?LodBias@@3MA					; LodBias
PUBLIC	?NearZ@@3MA					; NearZ
PUBLIC	?NearZ_ExecVar@@3VFExecVariable@@A		; NearZ_ExecVar
PUBLIC	?GetNearZ_ExecFunc@@3VFExecFunction@@A		; GetNearZ_ExecFunc
PUBLIC	?h@@3JA						; h
PUBLIC	?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A ; Adapters
PUBLIC	?BestAdapterIndex@@3HA				; BestAdapterIndex
PUBLIC	?DeviceCaps8@@3U_D3DCAPS8@@A			; DeviceCaps8
PUBLIC	?DeviceIdentifier@@3U_D3DADAPTER_IDENTIFIER8@@A	; DeviceIdentifier
PUBLIC	_GPackage
PUBLIC	?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A	; DisplayModes
PUBLIC	?RScale@@3PAGA					; RScale
PUBLIC	?GScale@@3PAGA					; GScale
PUBLIC	?BScale@@3PAGA					; BScale
PUBLIC	?OriginalDisplayMode@@3U_D3DDISPLAYMODE@@A	; OriginalDisplayMode
PUBLIC	?PrivateStaticClass@UD3DRenderDevice@@0VUClass@@A ; UD3DRenderDevice::PrivateStaticClass
PUBLIC	_autoclassUD3DRenderDevice
PUBLIC	_hInstance
PUBLIC	?FogStart@@3MA					; FogStart
PUBLIC	?FogStart_ExecVar@@3VFExecVariable@@A		; FogStart_ExecVar
_BSS	SEGMENT
?FogEnd_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?)	; FogEnd_ExecVar
?RenderParticles_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; RenderParticles_ExecVar
?RenderMeshes_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; RenderMeshes_ExecVar
?RenderSurfaces_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; RenderSurfaces_ExecVar
?RenderLines_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; RenderLines_ExecVar
?RenderTiles_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; RenderTiles_ExecVar
?RenderPoints_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; RenderPoints_ExecVar
?WorldDetail_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; WorldDetail_ExecVar
?CacheBlending_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; CacheBlending_ExecVar
?NearZ_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?)	; NearZ_ExecVar
?GetNearZ_ExecFunc@@3VFExecFunction@@A DB 014H DUP (?)	; GetNearZ_ExecFunc
?h@@3JA	DD	01H DUP (?)				; h
_ErrorCalled DB	01H DUP (?)
	ALIGN	4

?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A DB 0cH DUP (?) ; Adapters
?BestAdapterIndex@@3HA DD 01H DUP (?)			; BestAdapterIndex
?DeviceCaps8@@3U_D3DCAPS8@@A DB 0d4H DUP (?)		; DeviceCaps8
?DeviceIdentifier@@3U_D3DADAPTER_IDENTIFIER8@@A DB 042cH DUP (?) ; DeviceIdentifier
?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A DB 0cH DUP (?) ; DisplayModes
?RScale@@3PAGA DW 02040H DUP (?)			; RScale
?GScale@@3PAGA DW 02040H DUP (?)			; GScale
?BScale@@3PAGA DW 02040H DUP (?)			; BScale
?OriginalDisplayMode@@3U_D3DDISPLAYMODE@@A DB 010H DUP (?) ; OriginalDisplayMode
?PrivateStaticClass@UD3DRenderDevice@@0VUClass@@A DB 0528H DUP (?) ; UD3DRenderDevice::PrivateStaticClass
_autoclassUD3DRenderDevice DD 01H DUP (?)
_hInstance DD	01H DUP (?)
?FogStart_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?)	; FogStart_ExecVar
_BSS	ENDS
_DATA	SEGMENT
?FogStart@@3MA DD 042480000r			; 50	; FogStart
_DATA	ENDS
CRT$XCU	SEGMENT
_$S233	DD	FLAT:_$E232
CRT$XCU	ENDS
_DATA	SEGMENT
?FogEnd@@3MA DD	042c80000r			; 100	; FogEnd
_DATA	ENDS
CRT$XCU	SEGMENT
_$S238	DD	FLAT:_$E237
CRT$XCU	ENDS
_DATA	SEGMENT
?RenderParticles@@3HA DD 01H				; RenderParticles
_DATA	ENDS
CRT$XCU	SEGMENT
_$S243	DD	FLAT:_$E242
CRT$XCU	ENDS
_DATA	SEGMENT
?RenderMeshes@@3HA DD 01H				; RenderMeshes
_DATA	ENDS
CRT$XCU	SEGMENT
_$S248	DD	FLAT:_$E247
CRT$XCU	ENDS
_DATA	SEGMENT
?RenderSurfaces@@3HA DD 01H				; RenderSurfaces
_DATA	ENDS
CRT$XCU	SEGMENT
_$S253	DD	FLAT:_$E252
CRT$XCU	ENDS
_DATA	SEGMENT
?RenderLines@@3HA DD 01H				; RenderLines
_DATA	ENDS
CRT$XCU	SEGMENT
_$S258	DD	FLAT:_$E257
CRT$XCU	ENDS
_DATA	SEGMENT
?RenderTiles@@3HA DD 01H				; RenderTiles
_DATA	ENDS
CRT$XCU	SEGMENT
_$S263	DD	FLAT:_$E262
CRT$XCU	ENDS
_DATA	SEGMENT
?RenderPoints@@3HA DD 01H				; RenderPoints
_DATA	ENDS
CRT$XCU	SEGMENT
_$S268	DD	FLAT:_$E267
CRT$XCU	ENDS
_DATA	SEGMENT
?WorldDetail@@3HA DD 01H				; WorldDetail
_DATA	ENDS
CRT$XCU	SEGMENT
_$S273	DD	FLAT:_$E272
CRT$XCU	ENDS
_DATA	SEGMENT
?CacheBlending@@3HA DD 01H				; CacheBlending
_DATA	ENDS
CRT$XCU	SEGMENT
_$S278	DD	FLAT:_$E277
CRT$XCU	ENDS
_DATA	SEGMENT
?LodBias@@3MA DD 0bf19999ar			; -0.6	; LodBias
?NearZ@@3MA DD	043480000r			; 200	; NearZ
_DATA	ENDS
CRT$XCU	SEGMENT
_$S283	DD	FLAT:_$E282
_$S288	DD	FLAT:_$E287
CRT$XCU	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_FAR_CLIP DD	0477fff00r			; 65535
CONST	ENDS
CRT$XCU	SEGMENT
_$S291	DD	FLAT:_$E290
_$S296	DD	FLAT:_$E295
_$S301	DD	FLAT:_$E300
CRT$XCU	ENDS
_DATA	SEGMENT
_GPackage DB	'D', 00H, '3', 00H, 'D', 00H, 'D', 00H, 'r', 00H, 'v', 00H
	DB	00H, 00H
_DATA	ENDS
CRT$XCU	SEGMENT
_$S318	DD	FLAT:_$E317
_$S321	DD	FLAT:_$E320
CRT$XCU	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
PUBLIC	??_C@_17JBDG@?$AAn?$AAe?$AAw?$AA?$AA@		; `string'
EXTRN	__imp_?GMalloc@@3PAVFMalloc@@A:DWORD
;	COMDAT ??_C@_17JBDG@?$AAn?$AAe?$AAw?$AA?$AA@
; File ..\..\Core\Inc\UnFile.h
_DATA	SEGMENT
??_C@_17JBDG@?$AAn?$AAe?$AAw?$AA?$AA@ DB 'n', 00H, 'e', 00H, 'w', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_Size$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 624  : 	return appMalloc( Size, TEXT("new") );

	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _Size$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_17JBDG@?$AAn?$AAe?$AAw?$AA?$AA@ ; `string'
	push	eax
	call	DWORD PTR [edx]

; 625  : }

	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Ogty
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_Ptr$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 628  : 	appFree( Ptr );

	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _Ptr$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]

; 629  : }

	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EX0@Z@Z				; `vector constructor iterator'
; Function compile flags: /Ogty
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8
___s$ = 12
___n$ = 16
___f$ = 20
??_H@YGXPAXIHP6EX0@Z@Z PROC NEAR			; `vector constructor iterator', COMDAT
	mov	eax, DWORD PTR ___n$[esp-4]
	dec	eax
	js	SHORT $L96299
	push	ebx
	mov	ebx, DWORD PTR ___f$[esp]
	push	ebp
	mov	ebp, DWORD PTR ___s$[esp+4]
	push	esi
	mov	esi, DWORD PTR ___t$[esp+8]
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	6
$L96298:
	mov	ecx, esi
	call	ebx
	add	esi, ebp
	dec	edi
	jne	SHORT $L96298
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
$L96299:
	ret	16					; 00000010H
??_H@YGXPAXIHP6EX0@Z@Z ENDP				; `vector constructor iterator'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E232
_TEXT	SEGMENT
_$E232	PROC NEAR					; COMDAT
	call	_$E229
	jmp	_$E231
_$E232	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BC@CONI@?$AAF?$AAo?$AAg?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_11A@?$AA?$AA@				; `string'
PUBLIC	??_C@_1M@IEEK@?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$AA@ ; `string'
EXTRN	__imp_??0FExecVariable@@QAE@PAGKPAX00@Z:NEAR
;	COMDAT ??_C@_11A@?$AA?$AA@
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_BSS	SEGMENT
??_C@_11A@?$AA?$AA@ DW 01H DUP (?)			; `string'
_BSS	ENDS
;	COMDAT ??_C@_1M@IEEK@?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@IEEK@?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$AA@ DB 'f', 00H, 'l', 00H, 'o'
	DB	00H, 'a', 00H, 't', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BC@CONI@?$AAF?$AAo?$AAg?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
_DATA	SEGMENT
??_C@_1BC@CONI@?$AAF?$AAo?$AAg?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ DB 'F', 00H
	DB	'o', 00H, 'g', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E229
_TEXT	SEGMENT
_$E229	PROC NEAR					; COMDAT

; 24   : EXECVAR		(float,	FogStart,		 50.f  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_1M@IEEK@?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?FogStart@@3MA		; FogStart
	push	0
	push	OFFSET FLAT:??_C@_1BC@CONI@?$AAF?$AAo?$AAg?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?FogStart_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E229	ENDP
_TEXT	ENDS
EXTRN	_atexit:NEAR
; Function compile flags: /Ogty
;	COMDAT _$E231
_TEXT	SEGMENT
_$E231	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E230
	call	_atexit
	pop	ecx
	ret	0
_$E231	ENDP
_TEXT	ENDS
EXTRN	__imp_??1FExecVariable@@QAE@XZ:NEAR
; Function compile flags: /Ogty
;	COMDAT _$E230
_TEXT	SEGMENT
_$E230	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?FogStart_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E230	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E237
_TEXT	SEGMENT
_$E237	PROC NEAR					; COMDAT
	call	_$E234
	jmp	_$E236
_$E237	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1O@GJLM@?$AAF?$AAo?$AAg?$AAE?$AAn?$AAd?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1O@GJLM@?$AAF?$AAo?$AAg?$AAE?$AAn?$AAd?$AA?$AA@
_DATA	SEGMENT
??_C@_1O@GJLM@?$AAF?$AAo?$AAg?$AAE?$AAn?$AAd?$AA?$AA@ DB 'F', 00H, 'o', 00H
	DB	'g', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E234
_TEXT	SEGMENT
_$E234	PROC NEAR					; COMDAT

; 25   : EXECVAR		(float,	FogEnd,			 100.f );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_1M@IEEK@?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?FogEnd@@3MA		; FogEnd
	push	0
	push	OFFSET FLAT:??_C@_1O@GJLM@?$AAF?$AAo?$AAg?$AAE?$AAn?$AAd?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?FogEnd_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E234	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E236
_TEXT	SEGMENT
_$E236	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E235
	call	_atexit
	pop	ecx
	ret	0
_$E236	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E235
_TEXT	SEGMENT
_$E235	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?FogEnd_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E235	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E242
_TEXT	SEGMENT
_$E242	PROC NEAR					; COMDAT
	call	_$E239
	jmp	_$E241
_$E242	ENDP
_TEXT	ENDS
PUBLIC	??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@		; `string'
PUBLIC	??_C@_1CA@HBNN@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@
_DATA	SEGMENT
??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ DB 'I', 00H, 'N', 00H, 'T', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CA@HBNN@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1CA@HBNN@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ DB 'R'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'P', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'l', 00H, 'e'
	DB	00H, 's', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E239
_TEXT	SEGMENT
_$E239	PROC NEAR					; COMDAT

; 26   : EXECVAR		(INT,   RenderParticles, true  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?RenderParticles@@3HA	; RenderParticles
	push	0
	push	OFFSET FLAT:??_C@_1CA@HBNN@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?RenderParticles_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E239	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E241
_TEXT	SEGMENT
_$E241	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E240
	call	_atexit
	pop	ecx
	ret	0
_$E241	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E240
_TEXT	SEGMENT
_$E240	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?RenderParticles_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E240	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E247
_TEXT	SEGMENT
_$E247	PROC NEAR					; COMDAT
	call	_$E244
	jmp	_$E246
_$E247	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@FPPB@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAM?$AAe?$AAs?$AAh?$AAe?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BK@FPPB@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAM?$AAe?$AAs?$AAh?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1BK@FPPB@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAM?$AAe?$AAs?$AAh?$AAe?$AAs?$AA?$AA@ DB 'R'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'M', 00H
	DB	'e', 00H, 's', 00H, 'h', 00H, 'e', 00H, 's', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E244
_TEXT	SEGMENT
_$E244	PROC NEAR					; COMDAT

; 27   : EXECVAR		(INT,	RenderMeshes,	 true  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?RenderMeshes@@3HA		; RenderMeshes
	push	0
	push	OFFSET FLAT:??_C@_1BK@FPPB@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAM?$AAe?$AAs?$AAh?$AAe?$AAs?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?RenderMeshes_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E244	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E246
_TEXT	SEGMENT
_$E246	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E245
	call	_atexit
	pop	ecx
	ret	0
_$E246	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E245
_TEXT	SEGMENT
_$E245	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?RenderMeshes_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E245	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E252
_TEXT	SEGMENT
_$E252	PROC NEAR					; COMDAT
	call	_$E249
	jmp	_$E251
_$E252	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BO@GOHM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BO@GOHM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1BO@GOHM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAs?$AA?$AA@ DB 'R'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H, 's'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E249
_TEXT	SEGMENT
_$E249	PROC NEAR					; COMDAT

; 28   : EXECVAR		(INT,	RenderSurfaces,	 true  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?RenderSurfaces@@3HA	; RenderSurfaces
	push	0
	push	OFFSET FLAT:??_C@_1BO@GOHM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAs?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?RenderSurfaces_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E249	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E251
_TEXT	SEGMENT
_$E251	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E250
	call	_atexit
	pop	ecx
	ret	0
_$E251	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E250
_TEXT	SEGMENT
_$E250	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?RenderSurfaces_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E250	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E257
_TEXT	SEGMENT
_$E257	PROC NEAR					; COMDAT
	call	_$E254
	jmp	_$E256
_$E257	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@FDIM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAL?$AAi?$AAn?$AAe?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BI@FDIM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAL?$AAi?$AAn?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1BI@FDIM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAL?$AAi?$AAn?$AAe?$AAs?$AA?$AA@ DB 'R'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'L', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 's', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E254
_TEXT	SEGMENT
_$E254	PROC NEAR					; COMDAT

; 29   : EXECVAR		(INT,	RenderLines,	 true  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?RenderLines@@3HA		; RenderLines
	push	0
	push	OFFSET FLAT:??_C@_1BI@FDIM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAL?$AAi?$AAn?$AAe?$AAs?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?RenderLines_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E254	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E256
_TEXT	SEGMENT
_$E256	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E255
	call	_atexit
	pop	ecx
	ret	0
_$E256	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E255
_TEXT	SEGMENT
_$E255	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?RenderLines_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E255	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E262
_TEXT	SEGMENT
_$E262	PROC NEAR					; COMDAT
	call	_$E259
	jmp	_$E261
_$E262	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@PCCF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAi?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BI@PCCF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAi?$AAl?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1BI@PCCF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAi?$AAl?$AAe?$AAs?$AA?$AA@ DB 'R'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, 's', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E259
_TEXT	SEGMENT
_$E259	PROC NEAR					; COMDAT

; 30   : EXECVAR		(INT,	RenderTiles,	 true  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?RenderTiles@@3HA		; RenderTiles
	push	0
	push	OFFSET FLAT:??_C@_1BI@PCCF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAi?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?RenderTiles_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E259	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E261
_TEXT	SEGMENT
_$E261	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E260
	call	_atexit
	pop	ecx
	ret	0
_$E261	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E260
_TEXT	SEGMENT
_$E260	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?RenderTiles_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E260	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E267
_TEXT	SEGMENT
_$E267	PROC NEAR					; COMDAT
	call	_$E264
	jmp	_$E266
_$E267	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@KAKF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAo?$AAi?$AAn?$AAt?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BK@KAKF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAo?$AAi?$AAn?$AAt?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1BK@KAKF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAo?$AAi?$AAn?$AAt?$AAs?$AA?$AA@ DB 'R'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'P', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 's', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E264
_TEXT	SEGMENT
_$E264	PROC NEAR					; COMDAT

; 31   : EXECVAR		(INT,	RenderPoints,	 true  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?RenderPoints@@3HA		; RenderPoints
	push	0
	push	OFFSET FLAT:??_C@_1BK@KAKF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAo?$AAi?$AAn?$AAt?$AAs?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?RenderPoints_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E264	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E266
_TEXT	SEGMENT
_$E266	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E265
	call	_atexit
	pop	ecx
	ret	0
_$E266	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E265
_TEXT	SEGMENT
_$E265	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?RenderPoints_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E265	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E272
_TEXT	SEGMENT
_$E272	PROC NEAR					; COMDAT
	call	_$E269
	jmp	_$E271
_$E272	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@OKEE@?$AAW?$AAo?$AAr?$AAl?$AAd?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BI@OKEE@?$AAW?$AAo?$AAr?$AAl?$AAd?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?$AA@
_DATA	SEGMENT
??_C@_1BI@OKEE@?$AAW?$AAo?$AAr?$AAl?$AAd?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?$AA@ DB 'W'
	DB	00H, 'o', 00H, 'r', 00H, 'l', 00H, 'd', 00H, 'D', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E269
_TEXT	SEGMENT
_$E269	PROC NEAR					; COMDAT

; 32   : EXECVAR		(INT,	WorldDetail,	 true  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?WorldDetail@@3HA		; WorldDetail
	push	0
	push	OFFSET FLAT:??_C@_1BI@OKEE@?$AAW?$AAo?$AAr?$AAl?$AAd?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?WorldDetail_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E269	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E271
_TEXT	SEGMENT
_$E271	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E270
	call	_atexit
	pop	ecx
	ret	0
_$E271	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E270
_TEXT	SEGMENT
_$E270	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?WorldDetail_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E270	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E277
_TEXT	SEGMENT
_$E277	PROC NEAR					; COMDAT
	call	_$E274
	jmp	_$E276
_$E277	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1ME@HHPG@?$AAW?$AAh?$AAe?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAD?$AA3?$AAD?$AA?8?$AAs@ ; `string'
PUBLIC	??_C@_1BM@FL@?$AAC?$AAa?$AAc?$AAh?$AAe?$AAB?$AAl?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1ME@HHPG@?$AAW?$AAh?$AAe?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAD?$AA3?$AAD?$AA?8?$AAs@
_DATA	SEGMENT
??_C@_1ME@HHPG@?$AAW?$AAh?$AAe?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAD?$AA3?$AAD?$AA?8?$AAs@ DB 'W'
	DB	00H, 'h', 00H, 'e', 00H, 't', 00H, 'h', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't'
	DB	00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, '''', 00H, 's', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'o', 00H, 'u', 00H, 'l'
	DB	00H, 'd', 00H, ' ', 00H, 'b', 00H, 'e', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'd', 00H, '.', 00H, ' '
	DB	00H, ' ', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'f', 00H, 'u', 00H
	DB	'l', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'd'
	DB	00H, 'e', 00H, 'b', 00H, 'u', 00H, 'g', 00H, 'g', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 'm', 00H, 's', 00H, '.', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BM@FL@?$AAC?$AAa?$AAc?$AAh?$AAe?$AAB?$AAl?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AA@
_DATA	SEGMENT
??_C@_1BM@FL@?$AAC?$AAa?$AAc?$AAh?$AAe?$AAB?$AAl?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AA@ DB 'C'
	DB	00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'B', 00H, 'l', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E274
_TEXT	SEGMENT
_$E274	PROC NEAR					; COMDAT

; 33   : EXECVAR_HELP(INT,   CacheBlending,	 true, "Whether or not D3D's render states should be cached.  Useful for debugging render state problems." );

	push	OFFSET FLAT:??_C@_1ME@HHPG@?$AAW?$AAh?$AAe?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAD?$AA3?$AAD?$AA?8?$AAs@ ; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?CacheBlending@@3HA		; CacheBlending
	push	0
	push	OFFSET FLAT:??_C@_1BM@FL@?$AAC?$AAa?$AAc?$AAh?$AAe?$AAB?$AAl?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?CacheBlending_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E274	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E276
_TEXT	SEGMENT
_$E276	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E275
	call	_atexit
	pop	ecx
	ret	0
_$E276	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E275
_TEXT	SEGMENT
_$E275	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?CacheBlending_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E275	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E282
_TEXT	SEGMENT
_$E282	PROC NEAR					; COMDAT
	call	_$E279
	jmp	_$E281
_$E282	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DA@FCHG@?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAZ?$AA?5?$AAr?$AAa?$AAn@ ; `string'
PUBLIC	??_C@_1M@BODI@?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1DA@FCHG@?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAZ?$AA?5?$AAr?$AAa?$AAn@
_DATA	SEGMENT
??_C@_1DA@FCHG@?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAZ?$AA?5?$AAr?$AAa?$AAn@ DB 'D'
	DB	00H, 'e', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, ' ', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, ' ', 00H, 'Z', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, '.', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@BODI@?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@BODI@?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@ DB 'N', 00H, 'e', 00H, 'a'
	DB	00H, 'r', 00H, 'Z', 00H, 00H, 00H		; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E279
_TEXT	SEGMENT
_$E279	PROC NEAR					; COMDAT

; 50   : EXECVAR_HELP(float, NearZ, 200.f, "Detail texture Z range.");

	push	OFFSET FLAT:??_C@_1DA@FCHG@?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAZ?$AA?5?$AAr?$AAa?$AAn@ ; `string'
	push	OFFSET FLAT:??_C@_1M@IEEK@?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?NearZ@@3MA			; NearZ
	push	0
	push	OFFSET FLAT:??_C@_1M@BODI@?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?NearZ_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E279	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E281
_TEXT	SEGMENT
_$E281	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E280
	call	_atexit
	pop	ecx
	ret	0
_$E281	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E280
_TEXT	SEGMENT
_$E280	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?NearZ_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E280	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E287
_TEXT	SEGMENT
_$E287	PROC NEAR					; COMDAT
	call	_$E284
	jmp	_$E286
_$E287	ENDP
_TEXT	ENDS
PUBLIC	?GetNearZ_ExecFuncCall@@YIXPAVFExecVariable@@HPAPAG@Z ; GetNearZ_ExecFuncCall
PUBLIC	??_C@_1BC@MLDM@?$AAG?$AAe?$AAt?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@ ; `string'
EXTRN	__imp_??0FExecFunction@@QAE@PAGP6IXPAVFExecVariable@@HPAPAG@Z0@Z:NEAR
;	COMDAT ??_C@_1BC@MLDM@?$AAG?$AAe?$AAt?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@
_DATA	SEGMENT
??_C@_1BC@MLDM@?$AAG?$AAe?$AAt?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@ DB 'G', 00H
	DB	'e', 00H, 't', 00H, 'N', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'Z'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E284
_TEXT	SEGMENT
_$E284	PROC NEAR					; COMDAT

; 51   : EXECFUNC(GetNearZ)

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:?GetNearZ_ExecFuncCall@@YIXPAVFExecVariable@@HPAPAG@Z ; GetNearZ_ExecFuncCall
	push	OFFSET FLAT:??_C@_1BC@MLDM@?$AAG?$AAe?$AAt?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?GetNearZ_ExecFunc@@3VFExecFunction@@A
	call	DWORD PTR __imp_??0FExecFunction@@QAE@PAGP6IXPAVFExecVariable@@HPAPAG@Z0@Z
	ret	0
_$E284	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E286
_TEXT	SEGMENT
_$E286	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E285
	call	_atexit
	pop	ecx
	ret	0
_$E286	ENDP
_TEXT	ENDS
EXTRN	__imp_??1FExecFunction@@QAE@XZ:NEAR
; Function compile flags: /Ogty
;	COMDAT _$E285
_TEXT	SEGMENT
_$E285	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?GetNearZ_ExecFunc@@3VFExecFunction@@A
	jmp	DWORD PTR __imp_??1FExecFunction@@QAE@XZ
_$E285	ENDP
_TEXT	ENDS
PUBLIC	??_C@_15PBC@?$AA?$CF?$AAf?$AA?$AA@		; `string'
EXTRN	__fltused:NEAR
EXTRN	__imp_?GDnExec@@3PAVFDnExec@@A:DWORD
EXTRN	__imp_?Printf@FDnExec@@QAAXPAGZZ:NEAR
;	COMDAT ??_C@_15PBC@?$AA?$CF?$AAf?$AA?$AA@
_DATA	SEGMENT
??_C@_15PBC@?$AA?$CF?$AAf?$AA?$AA@ DB '%', 00H, 'f', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?GetNearZ_ExecFuncCall@@YIXPAVFExecVariable@@HPAPAG@Z
_TEXT	SEGMENT
?GetNearZ_ExecFuncCall@@YIXPAVFExecVariable@@HPAPAG@Z PROC NEAR ; GetNearZ_ExecFuncCall, COMDAT
; _argVar$ = ecx
; _argc$ = edx

; 53   : 	GDnExec->Printf(TEXT("%f"), NearZ);

	fld	DWORD PTR ?NearZ@@3MA			; NearZ
	mov	eax, DWORD PTR __imp_?GDnExec@@3PAVFDnExec@@A
	mov	ecx, DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET FLAT:??_C@_15PBC@?$AA?$CF?$AAf?$AA?$AA@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Printf@FDnExec@@QAAXPAGZZ
	add	esp, 16					; 00000010H

; 54   : }

	ret	4
?GetNearZ_ExecFuncCall@@YIXPAVFExecVariable@@HPAPAG@Z ENDP ; GetNearZ_ExecFuncCall
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E290
_TEXT	SEGMENT
_$E290	PROC NEAR					; COMDAT
	jmp	_$E289
_$E290	ENDP
_TEXT	ENDS
PUBLIC	__real@3f8147ae
_BSS	SEGMENT
_NEAR_CLIP_HACK DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@3f8147ae
CONST	SEGMENT
__real@3f8147ae DD 03f8147aer			; 1.01
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT _$E289
_TEXT	SEGMENT
_$E289	PROC NEAR					; COMDAT

; 58   : static const FLOAT NEAR_CLIP_HACK=NEAR_CLIP*1.01f; // vogel: workaround for precision issues

	fld	DWORD PTR _NEAR_CLIP
	fmul	DWORD PTR __real@3f8147ae
	fstp	DWORD PTR _NEAR_CLIP_HACK
	ret	0
_$E289	ENDP
_TEXT	ENDS
PUBLIC	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z		; GetFormatBPP
; Function compile flags: /Ogty
;	COMDAT ?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z
_TEXT	SEGMENT
_Format$ = 8
?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z PROC NEAR		; GetFormatBPP, COMDAT

; 96   : 	switch(Format)
; 97   : 	{

	mov	eax, DWORD PTR _Format$[esp-4]
	cmp	eax, 71					; 00000047H
	jg	SHORT $L133534
	je	SHORT $L121091
	add	eax, -21				; ffffffebH
	cmp	eax, 20					; 00000014H
	ja	SHORT $L121095
	movzx	eax, BYTE PTR $L133535[eax]
	jmp	DWORD PTR $L133536[eax*4]
$L121093:

; 109  : 
; 110  : 		case D3DFMT_P8:
; 111  : 			return 8;

	mov	eax, 8

; 118  : 	}
; 119  : }

	ret	0
$L133534:

; 96   : 	switch(Format)
; 97   : 	{

	cmp	eax, 75					; 0000004bH
	je	SHORT $L121091
	cmp	eax, 80					; 00000050H
	je	SHORT $L121092
	cmp	eax, 827611204				; 31545844H
	je	SHORT $L121094
$L121095:

; 115  : 	
; 116  : 		default:
; 117  : 			return 0;

	xor	eax, eax

; 118  : 	}
; 119  : }

	ret	0
$L121094:

; 112  : 	
; 113  : 		case D3DFMT_DXT1:
; 114  : 			return 4;

	mov	eax, 4

; 118  : 	}
; 119  : }

	ret	0
$L121092:

; 103  : 
; 104  : 		case D3DFMT_A1R5G5B5:
; 105  : 		case D3DFMT_R5G6B5:	
; 106  : 		case D3DFMT_X1R5G5B5:
; 107  : 		case D3DFMT_D16:
; 108  : 			return 16;

	mov	eax, 16					; 00000010H

; 118  : 	}
; 119  : }

	ret	0
$L121091:

; 98   : 		case D3DFMT_A8R8G8B8:
; 99   : 		case D3DFMT_X8R8G8B8:
; 100  : 		case D3DFMT_D24S8:
; 101  : 		case D3DFMT_D32:		
; 102  : 			return 32;

	mov	eax, 32					; 00000020H

; 118  : 	}
; 119  : }

	ret	0
	npad	3
$L133536:
	DD	$L121091
	DD	$L121092
	DD	$L121093
	DD	$L121095
$L133535:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z ENDP			; GetFormatBPP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E295
_TEXT	SEGMENT
_$E295	PROC NEAR					; COMDAT
	call	_$E292
	jmp	_$E294
_$E295	ENDP
_TEXT	ENDS
PUBLIC	??0?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ	; TArray<_D3DADAPTER_IDENTIFIER8>::TArray<_D3DADAPTER_IDENTIFIER8>
; Function compile flags: /Ogty
;	COMDAT _$E292
_TEXT	SEGMENT
_$E292	PROC NEAR					; COMDAT

; 330  : TArray<D3DADAPTER_IDENTIFIER8> Adapters;

	mov	ecx, OFFSET FLAT:?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	jmp	??0?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ ; TArray<_D3DADAPTER_IDENTIFIER8>::TArray<_D3DADAPTER_IDENTIFIER8>
_$E292	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E294
_TEXT	SEGMENT
_$E294	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E293
	call	_atexit
	pop	ecx
	ret	0
_$E294	ENDP
_TEXT	ENDS
PUBLIC	??1?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ	; TArray<_D3DADAPTER_IDENTIFIER8>::~TArray<_D3DADAPTER_IDENTIFIER8>
; Function compile flags: /Ogty
;	COMDAT _$E293
_TEXT	SEGMENT
_$E293	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	jmp	??1?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ ; TArray<_D3DADAPTER_IDENTIFIER8>::~TArray<_D3DADAPTER_IDENTIFIER8>
_$E293	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E300
_TEXT	SEGMENT
_$E300	PROC NEAR					; COMDAT
	call	_$E297
	jmp	_$E299
_$E300	ENDP
_TEXT	ENDS
PUBLIC	??0?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ		; TArray<_D3DDISPLAYMODE>::TArray<_D3DDISPLAYMODE>
; Function compile flags: /Ogty
;	COMDAT _$E297
_TEXT	SEGMENT
_$E297	PROC NEAR					; COMDAT

; 334  : TArray<D3DDISPLAYMODE>	DisplayModes;

	mov	ecx, OFFSET FLAT:?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	jmp	??0?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ	; TArray<_D3DDISPLAYMODE>::TArray<_D3DDISPLAYMODE>
_$E297	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E299
_TEXT	SEGMENT
_$E299	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E298
	call	_atexit
	pop	ecx
	ret	0
_$E299	ENDP
_TEXT	ENDS
PUBLIC	??1?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ		; TArray<_D3DDISPLAYMODE>::~TArray<_D3DDISPLAYMODE>
; Function compile flags: /Ogty
;	COMDAT _$E298
_TEXT	SEGMENT
_$E298	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	jmp	??1?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ	; TArray<_D3DDISPLAYMODE>::~TArray<_D3DDISPLAYMODE>
_$E298	ENDP
_TEXT	ENDS
PUBLIC	?StaticClass@UD3DRenderDevice@@SAPAVUClass@@XZ	; UD3DRenderDevice::StaticClass
; Function compile flags: /Ogty
;	COMDAT ?StaticClass@UD3DRenderDevice@@SAPAVUClass@@XZ
_TEXT	SEGMENT
?StaticClass@UD3DRenderDevice@@SAPAVUClass@@XZ PROC NEAR ; UD3DRenderDevice::StaticClass, COMDAT

; 381  :     DECLARE_CLASS(UD3DRenderDevice,URenderDevice,CLASS_Config)

	mov	eax, OFFSET FLAT:?PrivateStaticClass@UD3DRenderDevice@@0VUClass@@A ; UD3DRenderDevice::PrivateStaticClass
	ret	0
?StaticClass@UD3DRenderDevice@@SAPAVUClass@@XZ ENDP	; UD3DRenderDevice::StaticClass
_TEXT	ENDS
PUBLIC	??2UD3DRenderDevice@@SAPAXIPAVUObject@@VFName@@K@Z ; UD3DRenderDevice::operator new
EXTRN	__imp_?StaticAllocateObject@UObject@@SAPAV1@PAVUClass@@PAV1@VFName@@K1PAVFOutputDevice@@1@Z:NEAR
EXTRN	__imp_?GError@@3PAVFOutputDeviceError@@A:DWORD
; Function compile flags: /Ogty
;	COMDAT ??2UD3DRenderDevice@@SAPAXIPAVUObject@@VFName@@K@Z
_TEXT	SEGMENT
_Outer$ = 12
_Name$ = 16
_SetFlags$ = 20
??2UD3DRenderDevice@@SAPAXIPAVUObject@@VFName@@K@Z PROC NEAR ; UD3DRenderDevice::operator new, COMDAT

; 381  :     DECLARE_CLASS(UD3DRenderDevice,URenderDevice,CLASS_Config)

	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _SetFlags$[esp-4]
	mov	eax, DWORD PTR _Name$[esp-4]
	push	0
	push	ecx
	mov	ecx, DWORD PTR _Outer$[esp+4]
	push	0
	push	edx
	push	eax
	push	ecx
	push	OFFSET FLAT:?PrivateStaticClass@UD3DRenderDevice@@0VUClass@@A ; UD3DRenderDevice::PrivateStaticClass
	call	DWORD PTR __imp_?StaticAllocateObject@UObject@@SAPAV1@PAVUClass@@PAV1@VFName@@K1PAVFOutputDevice@@1@Z
	add	esp, 28					; 0000001cH
	ret	0
??2UD3DRenderDevice@@SAPAXIPAVUObject@@VFName@@K@Z ENDP	; UD3DRenderDevice::operator new
_TEXT	ENDS
PUBLIC	??2UD3DRenderDevice@@SAPAXIPAW4EInternal@@@Z	; UD3DRenderDevice::operator new
; Function compile flags: /Ogty
;	COMDAT ??2UD3DRenderDevice@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT
_Mem$ = 12
??2UD3DRenderDevice@@SAPAXIPAW4EInternal@@@Z PROC NEAR	; UD3DRenderDevice::operator new, COMDAT

; 381  :     DECLARE_CLASS(UD3DRenderDevice,URenderDevice,CLASS_Config)

	mov	eax, DWORD PTR _Mem$[esp-4]
	ret	0
??2UD3DRenderDevice@@SAPAXIPAW4EInternal@@@Z ENDP	; UD3DRenderDevice::operator new
_TEXT	ENDS
PUBLIC	??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ	; FD3DVertexBuffer<FD3DVertex>::~FD3DVertexBuffer<FD3DVertex>
PUBLIC	??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ	; FD3DVertexBuffer<FD3DParticle>::~FD3DVertexBuffer<FD3DParticle>
PUBLIC	?Destroy@UD3DRenderDevice@@UAEXXZ		; UD3DRenderDevice::Destroy
PUBLIC	?Init@UD3DRenderDevice@@UAIHPAVUViewport@@HHHH@Z ; UD3DRenderDevice::Init
PUBLIC	?Exit@UD3DRenderDevice@@UAIXXZ			; UD3DRenderDevice::Exit
PUBLIC	?ShutdownAfterError@UD3DRenderDevice@@UAEXXZ	; UD3DRenderDevice::ShutdownAfterError
PUBLIC	?Flush@UD3DRenderDevice@@UAIXH@Z		; UD3DRenderDevice::Flush
PUBLIC	?PreRender@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z ; UD3DRenderDevice::PreRender
PUBLIC	?Lock@UD3DRenderDevice@@UAIXVFColor@@MHVFPlane@@11KPAEPAH@Z ; UD3DRenderDevice::Lock
PUBLIC	?PrecacheTexture@UD3DRenderDevice@@UAIXAAUFTextureInfo@@KK@Z ; UD3DRenderDevice::PrecacheTexture
PUBLIC	?Unlock@UD3DRenderDevice@@UAIXH@Z		; UD3DRenderDevice::Unlock
PUBLIC	?DrawComplexSurface@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFSurfaceInfo@@AAUFSurfaceFacet@@@Z ; UD3DRenderDevice::DrawComplexSurface
PUBLIC	??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedPolygon>::~TArray<UD3DRenderDevice::QueuedPolygon>
PUBLIC	?Remove@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::QueuedPolygon>::Remove
PUBLIC	?QueuePolygonDoes@UD3DRenderDevice@@UAI_NXZ	; UD3DRenderDevice::QueuePolygonDoes
PUBLIC	?QueuePolygonBegin@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z ; UD3DRenderDevice::QueuePolygonBegin
PUBLIC	?QueuePolygonEnd@UD3DRenderDevice@@UAIXK@Z	; UD3DRenderDevice::QueuePolygonEnd
PUBLIC	?QueuePolygon@UD3DRenderDevice@@UAIXPAUFTextureInfo@@PAPAUFTransTexture@@HKKPAVFSpanBuffer@@@Z ; UD3DRenderDevice::QueuePolygon
PUBLIC	?QueuePolygonBeginFast@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z ; UD3DRenderDevice::QueuePolygonBeginFast
PUBLIC	?QueuePolygonFast@UD3DRenderDevice@@UAIXPAPAUFTransTexture@@H@Z ; UD3DRenderDevice::QueuePolygonFast
PUBLIC	?QueuePolygonEndFast@UD3DRenderDevice@@UAIXXZ	; UD3DRenderDevice::QueuePolygonEndFast
PUBLIC	?DrawGouraudPolygon@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@PAPAUFTransTexture@@HKPAVFSpanBuffer@@K@Z ; UD3DRenderDevice::DrawGouraudPolygon
PUBLIC	?SetTextureClampMode@UD3DRenderDevice@@UAIXH@Z	; UD3DRenderDevice::SetTextureClampMode
PUBLIC	?DrawTile@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@MMMMMMMMPAVFSpanBuffer@@MVFPlane@@3KKMMMM@Z ; UD3DRenderDevice::DrawTile
PUBLIC	?dnDrawBeam@UD3DRenderDevice@@UAIXAAVABeamSystem@@PAUFSceneNode@@@Z ; UD3DRenderDevice::dnDrawBeam
PUBLIC	??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::~TArray<UD3DRenderDevice::QueuedParticleByTexture>
PUBLIC	??1?$TArray@E@@QAE@XZ				; TArray<unsigned char>::~TArray<unsigned char>
PUBLIC	?Remove@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::Remove
PUBLIC	?Remove@?$TArray@E@@QAEXHH@Z			; TArray<unsigned char>::Remove
PUBLIC	??1UD3DRenderDevice@@UAE@XZ			; UD3DRenderDevice::~UD3DRenderDevice
PUBLIC	?dnDrawParticles@UD3DRenderDevice@@UAIXAAVASoftParticleSystem@@PAUFSceneNode@@@Z ; UD3DRenderDevice::dnDrawParticles
PUBLIC	??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::ProjectorInfo>::~TArray<UD3DRenderDevice::ProjectorInfo>
PUBLIC	??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedLineSegment>::~TArray<UD3DRenderDevice::QueuedLineSegment>
PUBLIC	?Remove@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::ProjectorInfo>::Remove
PUBLIC	?Remove@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::Remove
PUBLIC	?Exec@UD3DRenderDevice@@UAEHPBGAAVFOutputDevice@@@Z ; UD3DRenderDevice::Exec
PUBLIC	??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::RenderTargetInfo>::~TArray<UD3DRenderDevice::RenderTargetInfo>
PUBLIC	?_Validate@UD3DRenderDevice@@UAIXPADH@Z		; UD3DRenderDevice::_Validate
PUBLIC	??1?$TArray@UFD3DVertex@@@@QAE@XZ		; TArray<FD3DVertex>::~TArray<FD3DVertex>
PUBLIC	?Remove@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::RenderTargetInfo>::Remove
PUBLIC	?Remove@?$TArray@UFD3DVertex@@@@QAEXHH@Z	; TArray<FD3DVertex>::Remove
PUBLIC	?Queue3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z ; UD3DRenderDevice::Queue3DLine
PUBLIC	?Queued3DLinesFlush@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z ; UD3DRenderDevice::Queued3DLinesFlush
PUBLIC	?Draw3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z ; UD3DRenderDevice::Draw3DLine
PUBLIC	?Draw2DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z ; UD3DRenderDevice::Draw2DLine
PUBLIC	?Draw2DPoint@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KMMMMM@Z ; UD3DRenderDevice::Draw2DPoint
PUBLIC	?PushHit@UD3DRenderDevice@@UAIXPBEH@Z		; UD3DRenderDevice::PushHit
PUBLIC	?PopHit@UD3DRenderDevice@@UAIXHH@Z		; UD3DRenderDevice::PopHit
PUBLIC	?GetStats@UD3DRenderDevice@@UAIXPAG@Z		; UD3DRenderDevice::GetStats
PUBLIC	?ClearZ@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z	; UD3DRenderDevice::ClearZ
PUBLIC	?ReadPixels@UD3DRenderDevice@@UAIXPAVFColor@@H@Z ; UD3DRenderDevice::ReadPixels
PUBLIC	?EndFlash@UD3DRenderDevice@@UAIXXZ		; UD3DRenderDevice::EndFlash
PUBLIC	?SetRes@UD3DRenderDevice@@UAIHHHHH@Z		; UD3DRenderDevice::SetRes
PUBLIC	?CreateRenderTarget@UD3DRenderDevice@@UAEPAXHH@Z ; UD3DRenderDevice::CreateRenderTarget
PUBLIC	?DestroyRenderTarget@UD3DRenderDevice@@UAEXPAPAX@Z ; UD3DRenderDevice::DestroyRenderTarget
PUBLIC	?SetRenderTarget@UD3DRenderDevice@@UAEXPAX0@Z	; UD3DRenderDevice::SetRenderTarget
PUBLIC	?RestoreRenderTarget@UD3DRenderDevice@@UAEXXZ	; UD3DRenderDevice::RestoreRenderTarget
PUBLIC	?AddProjector@UD3DRenderDevice@@UAIXPAUFSceneNode@@PAXPAUFTextureInfo@@MMM@Z ; UD3DRenderDevice::AddProjector
PUBLIC	?ResetProjectors@UD3DRenderDevice@@UAIXXZ	; UD3DRenderDevice::ResetProjectors
PUBLIC	??_7UD3DRenderDevice@@6BUObject@@@		; UD3DRenderDevice::`vftable'
PUBLIC	??_7UD3DRenderDevice@@6BFExec@@@		; UD3DRenderDevice::`vftable'
PUBLIC	??_EUD3DRenderDevice@@UAEPAXI@Z			; UD3DRenderDevice::`vector deleting destructor'
PUBLIC	??1?$TArray@H@@QAE@XZ				; TArray<int>::~TArray<int>
PUBLIC	??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DScreenVertex>::~FD3DVertexBuffer<FD3DScreenVertex>
PUBLIC	??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ	; FD3DVertexBuffer<FD3DTLVertex>::~FD3DVertexBuffer<FD3DTLVertex>
PUBLIC	?Remove@?$TArray@H@@QAEXHH@Z			; TArray<int>::Remove
EXTRN	__imp_??1URenderDevice@@UAE@XZ:NEAR
EXTRN	__imp_??1FString@@QAE@XZ:NEAR
EXTRN	?Draw2DClippedLine@URenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z:NEAR ; URenderDevice::Draw2DClippedLine
EXTRN	__imp_??_7URenderDevice@@6BUObject@@@:BYTE
EXTRN	__imp_??_7URenderDevice@@6BFExec@@@:DWORD
EXTRN	?ProcessEvent@UObject@@UAEXPAVUFunction@@PAX1@Z:NEAR ; UObject::ProcessEvent
EXTRN	?ProcessState@UObject@@UAEXM@Z:NEAR		; UObject::ProcessState
EXTRN	?ProcessRemoteFunction@UObject@@UAEHPAVUFunction@@PAXPAUFFrame@@@Z:NEAR ; UObject::ProcessRemoteFunction
EXTRN	?Modify@UObject@@UAEXXZ:NEAR			; UObject::Modify
EXTRN	?PostLoad@UObject@@UAEXXZ:NEAR			; UObject::PostLoad
EXTRN	?Serialize@UObject@@UAEXAAVFArchive@@@Z:NEAR	; UObject::Serialize
EXTRN	?GotoLabel@UObject@@UAEHVFName@@@Z:NEAR		; UObject::GotoLabel
EXTRN	?InitExecution@UObject@@UAEXXZ:NEAR		; UObject::InitExecution
EXTRN	?PostEditChange@UObject@@UAEXXZ:NEAR		; UObject::PostEditChange
EXTRN	?CallFunction@UObject@@UAEXAAUFFrame@@QAXPAVUFunction@@@Z:NEAR ; UObject::CallFunction
EXTRN	?ScriptConsoleExec@UObject@@UAEHPBGAAVFOutputDevice@@PAV1@@Z:NEAR ; UObject::ScriptConsoleExec
EXTRN	?Register@UObject@@UAEXXZ:NEAR			; UObject::Register
EXTRN	?LanguageChange@UObject@@UAEXXZ:NEAR		; UObject::LanguageChange
EXTRN	__imp_?ConditionalDestroy@UObject@@QAEHXZ:NEAR
EXTRN	?DrawStats@URenderDevice@@UAIXPAUFSceneNode@@@Z:NEAR ; URenderDevice::DrawStats
EXTRN	?SetSceneNode@URenderDevice@@UAIXPAUFSceneNode@@@Z:NEAR ; URenderDevice::SetSceneNode
EXTRN	__imp_??1USubsystem@@UAE@XZ:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	__imp_??1FArray@@QAE@XZ:NEAR
EXTRN	?IsPendingKill@UObject@@UAEHXZ:NEAR		; UObject::IsPendingKill
EXTRN	?GetName@UObject@@UBEPBGXZ:NEAR			; UObject::GetName
EXTRN	?Tick@USubsystem@@UAIXM@Z:NEAR			; USubsystem::Tick
;	COMDAT xdata$x
; File ..\..\Engine\Inc\UnRenDev.h
xdata$x	SEGMENT
$T133756 DD	0ffffffffH
	DD	FLAT:$L133576
	DD	00H
	DD	FLAT:$L133577
	DD	01H
	DD	FLAT:$L133578
	DD	02H
	DD	FLAT:$L133579
	DD	03H
	DD	FLAT:$L133580
	DD	04H
	DD	FLAT:$L133581
	DD	05H
	DD	FLAT:$L133582
	DD	06H
	DD	FLAT:$L133583
	DD	07H
	DD	FLAT:$L133584
	DD	08H
	DD	FLAT:$L133585
	DD	09H
	DD	FLAT:$L133586
	DD	0aH
	DD	FLAT:$L133587
	DD	0bH
	DD	FLAT:$L133588
	DD	0bH
	DD	FLAT:$L133590
	DD	0aH
	DD	FLAT:$L133602
	DD	09H
	DD	FLAT:$L133614
	DD	08H
	DD	FLAT:$L133626
	DD	07H
	DD	FLAT:$L133631
	DD	02H
	DD	FLAT:$L133724
	DD	01H
	DD	FLAT:$L133736
	DD	00H
	DD	FLAT:$L133741
	DD	0ffffffffH
	DD	FLAT:$L133746
	DD	015H
	DD	FLAT:$L133747
$T133753 DD	019930520H
	DD	017H
	DD	FLAT:$T133756
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7UD3DRenderDevice@@6BUObject@@@
CONST	SEGMENT
??_7UD3DRenderDevice@@6BUObject@@@ DD FLAT:??_EUD3DRenderDevice@@UAEPAXI@Z ; UD3DRenderDevice::`vftable'
	DD	FLAT:?ProcessEvent@UObject@@UAEXPAVUFunction@@PAX1@Z
	DD	FLAT:?ProcessState@UObject@@UAEXM@Z
	DD	FLAT:?ProcessRemoteFunction@UObject@@UAEHPAVUFunction@@PAXPAUFFrame@@@Z
	DD	FLAT:?Modify@UObject@@UAEXXZ
	DD	FLAT:?PostLoad@UObject@@UAEXXZ
	DD	FLAT:?Destroy@UD3DRenderDevice@@UAEXXZ
	DD	FLAT:?Serialize@UObject@@UAEXAAVFArchive@@@Z
	DD	FLAT:?IsPendingKill@UObject@@UAEHXZ
	DD	FLAT:?GotoLabel@UObject@@UAEHVFName@@@Z
	DD	FLAT:?InitExecution@UObject@@UAEXXZ
	DD	FLAT:?ShutdownAfterError@UD3DRenderDevice@@UAEXXZ
	DD	FLAT:?PostEditChange@UObject@@UAEXXZ
	DD	FLAT:?CallFunction@UObject@@UAEXAAUFFrame@@QAXPAVUFunction@@@Z
	DD	FLAT:?ScriptConsoleExec@UObject@@UAEHPBGAAVFOutputDevice@@PAV1@@Z
	DD	FLAT:?Register@UObject@@UAEXXZ
	DD	FLAT:?LanguageChange@UObject@@UAEXXZ
	DD	FLAT:?GetName@UObject@@UBEPBGXZ
	DD	FLAT:?Tick@USubsystem@@UAIXM@Z
	DD	FLAT:?Init@UD3DRenderDevice@@UAIHPAVUViewport@@HHHH@Z
	DD	FLAT:?SetRes@UD3DRenderDevice@@UAIHHHHH@Z
	DD	FLAT:?Exit@UD3DRenderDevice@@UAIXXZ
	DD	FLAT:?Flush@UD3DRenderDevice@@UAIXH@Z
	DD	FLAT:?Lock@UD3DRenderDevice@@UAIXVFColor@@MHVFPlane@@11KPAEPAH@Z
	DD	FLAT:?Unlock@UD3DRenderDevice@@UAIXH@Z
	DD	FLAT:?DrawComplexSurface@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFSurfaceInfo@@AAUFSurfaceFacet@@@Z
	DD	FLAT:?DrawGouraudPolygon@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@PAPAUFTransTexture@@HKPAVFSpanBuffer@@K@Z
	DD	FLAT:?QueuePolygonDoes@UD3DRenderDevice@@UAI_NXZ
	DD	FLAT:?QueuePolygonBegin@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z
	DD	FLAT:?QueuePolygonEnd@UD3DRenderDevice@@UAIXK@Z
	DD	FLAT:?QueuePolygon@UD3DRenderDevice@@UAIXPAUFTextureInfo@@PAPAUFTransTexture@@HKKPAVFSpanBuffer@@@Z
	DD	FLAT:?QueuePolygonBeginFast@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z
	DD	FLAT:?QueuePolygonEndFast@UD3DRenderDevice@@UAIXXZ
	DD	FLAT:?QueuePolygonFast@UD3DRenderDevice@@UAIXPAPAUFTransTexture@@H@Z
	DD	FLAT:?DrawTile@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@MMMMMMMMPAVFSpanBuffer@@MVFPlane@@3KKMMMM@Z
	DD	FLAT:?PreRender@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
	DD	FLAT:?dnDrawParticles@UD3DRenderDevice@@UAIXAAVASoftParticleSystem@@PAUFSceneNode@@@Z
	DD	FLAT:?dnDrawBeam@UD3DRenderDevice@@UAIXAAVABeamSystem@@PAUFSceneNode@@@Z
	DD	FLAT:?Draw3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
	DD	FLAT:?Queue3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
	DD	FLAT:?Queued3DLinesFlush@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
	DD	FLAT:?Draw2DClippedLine@URenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
	DD	FLAT:?Draw2DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
	DD	FLAT:?Draw2DPoint@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KMMMMM@Z
	DD	FLAT:?ClearZ@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
	DD	FLAT:?PushHit@UD3DRenderDevice@@UAIXPBEH@Z
	DD	FLAT:?PopHit@UD3DRenderDevice@@UAIXHH@Z
	DD	FLAT:?GetStats@UD3DRenderDevice@@UAIXPAG@Z
	DD	FLAT:?ReadPixels@UD3DRenderDevice@@UAIXPAVFColor@@H@Z
	DD	FLAT:?EndFlash@UD3DRenderDevice@@UAIXXZ
	DD	FLAT:?DrawStats@URenderDevice@@UAIXPAUFSceneNode@@@Z
	DD	FLAT:?SetSceneNode@URenderDevice@@UAIXPAUFSceneNode@@@Z
	DD	FLAT:?PrecacheTexture@UD3DRenderDevice@@UAIXAAUFTextureInfo@@KK@Z
	DD	FLAT:?SetTextureClampMode@UD3DRenderDevice@@UAIXH@Z
	DD	FLAT:?_Validate@UD3DRenderDevice@@UAIXPADH@Z
	DD	FLAT:?CreateRenderTarget@UD3DRenderDevice@@UAEPAXHH@Z
	DD	FLAT:?DestroyRenderTarget@UD3DRenderDevice@@UAEXPAPAX@Z
	DD	FLAT:?SetRenderTarget@UD3DRenderDevice@@UAEXPAX0@Z
	DD	FLAT:?RestoreRenderTarget@UD3DRenderDevice@@UAEXXZ
	DD	FLAT:?AddProjector@UD3DRenderDevice@@UAIXPAUFSceneNode@@PAXPAUFTextureInfo@@MMM@Z
	DD	FLAT:?ResetProjectors@UD3DRenderDevice@@UAIXXZ
CONST	ENDS
;	COMDAT ??_7UD3DRenderDevice@@6BFExec@@@
CONST	SEGMENT
??_7UD3DRenderDevice@@6BFExec@@@ DD FLAT:?Exec@UD3DRenderDevice@@UAEHPBGAAVFOutputDevice@@@Z ; UD3DRenderDevice::`vftable'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ??1UD3DRenderDevice@@UAE@XZ
_TEXT	SEGMENT
$T133600 = -16
$T133612 = -16
$T133624 = -16
$T133629 = -16
$T133634 = -16
$T133734 = -16
$T133739 = -16
$T133744 = -16
__$EHRec$ = -12
_this$ = -20
??1UD3DRenderDevice@@UAE@XZ PROC NEAR			; UD3DRenderDevice::~UD3DRenderDevice, COMDAT
; _this$ = ecx

; 381  :     DECLARE_CLASS(UD3DRenderDevice,URenderDevice,CLASS_Config)

	push	-1
	push	$L133754
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+36], esi
	mov	DWORD PTR [esi], OFFSET FLAT:??_7UD3DRenderDevice@@6BUObject@@@ ; UD3DRenderDevice::`vftable'
	mov	DWORD PTR [esi+40], OFFSET FLAT:??_7UD3DRenderDevice@@6BFExec@@@ ; UD3DRenderDevice::`vftable'
	mov	ebp, DWORD PTR __imp_?ConditionalDestroy@UObject@@QAEHXZ
	mov	DWORD PTR __$EHRec$[esp+44], 12		; 0000000cH
	call	ebp
	lea	edi, DWORD PTR [esi+675248]
	mov	DWORD PTR $T133600[esp+36], edi
	mov	eax, DWORD PTR [edi+4]
	push	eax
	xor	ebx, ebx
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 13		; 0000000dH
	call	?Remove@?$TArray@UFD3DVertex@@@@QAEXHH@Z ; TArray<FD3DVertex>::Remove
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 11		; 0000000bH
	je	SHORT $L133599
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L133599:
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+4], ebx
	lea	edi, DWORD PTR [esi+675236]
	mov	DWORD PTR $T133612[esp+36], edi
	mov	eax, DWORD PTR [edi+4]
	push	eax
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 14		; 0000000eH
	call	?Remove@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::Remove
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 10		; 0000000aH
	je	SHORT $L133610
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L133610:
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+4], ebx
	lea	edi, DWORD PTR [esi+675224]
	mov	DWORD PTR $T133624[esp+36], edi
	mov	eax, DWORD PTR [edi+4]
	push	eax
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 15		; 0000000fH
	call	?Remove@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::Remove
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 9
	je	SHORT $L133622
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L133622:
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+4], ebx
	lea	edi, DWORD PTR [esi+675212]
	mov	DWORD PTR $T133629[esp+36], edi
	mov	eax, DWORD PTR [edi+4]
	push	eax
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 16		; 00000010H
	call	?Remove@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::QueuedPolygon>::Remove
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+44], 8
	call	DWORD PTR __imp_??1FArray@@QAE@XZ
	lea	edi, DWORD PTR [esi+675112]
	mov	DWORD PTR $T133634[esp+36], edi
	mov	ecx, DWORD PTR [edi+4]
	push	ecx
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 17		; 00000011H
	call	?Remove@?$TArray@E@@QAEXHH@Z		; TArray<unsigned char>::Remove
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+44], 7
	call	DWORD PTR __imp_??1FArray@@QAE@XZ
	mov	eax, DWORD PTR [esi+16744]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 6
	je	SHORT $L133653
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+16744], ebx
$L133653:
	mov	eax, DWORD PTR [esi+16724]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 5
	je	SHORT $L133675
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+16724], ebx
$L133675:
	mov	eax, DWORD PTR [esi+16704]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 4
	je	SHORT $L133699
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+16704], ebx
$L133699:
	mov	eax, DWORD PTR [esi+16684]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 3
	je	SHORT $L133721
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+16684], ebx
$L133721:
	lea	edi, DWORD PTR [esi+224]
	mov	DWORD PTR $T133734[esp+36], edi
	mov	edx, DWORD PTR [edi+4]
	push	edx
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 18		; 00000012H
	call	?Remove@?$TArray@H@@QAEXHH@Z		; TArray<int>::Remove
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 2
	je	SHORT $L133732
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L133732:
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+4], ebx
	lea	edi, DWORD PTR [esi+212]
	mov	DWORD PTR $T133739[esp+36], edi
	mov	eax, DWORD PTR [edi+4]
	push	eax
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 19		; 00000013H
	call	?Remove@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::RenderTargetInfo>::Remove
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+44], 1
	call	DWORD PTR __imp_??1FArray@@QAE@XZ
	lea	edi, DWORD PTR [esi+200]
	mov	DWORD PTR $T133744[esp+36], edi
	mov	ecx, DWORD PTR [edi+4]
	push	ecx
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 20		; 00000014H
	call	?Remove@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::ProjectorInfo>::Remove
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+44], bl
	call	DWORD PTR __imp_??1FArray@@QAE@XZ
	mov	edx, DWORD PTR __imp_??_7URenderDevice@@6BUObject@@@
	mov	DWORD PTR [esi], edx
	mov	eax, DWORD PTR __imp_??_7URenderDevice@@6BFExec@@@
	mov	DWORD PTR [esi+40], eax
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+44], 22		; 00000016H
	call	ebp
	lea	ecx, DWORD PTR [esi+52]
	mov	BYTE PTR __$EHRec$[esp+44], 21		; 00000015H
	call	DWORD PTR __imp_??1FString@@QAE@XZ
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+44], -1
	call	DWORD PTR __imp_??1USubsystem@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[esp+36]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 20					; 00000014H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L133576:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1URenderDevice@@UAE@XZ
$L133577:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	jmp	??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::ProjectorInfo>::~TArray<UD3DRenderDevice::ProjectorInfo>
$L133578:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	jmp	??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::RenderTargetInfo>::~TArray<UD3DRenderDevice::RenderTargetInfo>
$L133579:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	jmp	??1?$TArray@H@@QAE@XZ			; TArray<int>::~TArray<int>
$L133580:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16680				; 00004128H
	jmp	??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DScreenVertex>::~FD3DVertexBuffer<FD3DScreenVertex>
$L133581:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16700				; 0000413cH
	jmp	??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DTLVertex>::~FD3DVertexBuffer<FD3DTLVertex>
$L133582:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16720				; 00004150H
	jmp	??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DVertex>::~FD3DVertexBuffer<FD3DVertex>
$L133583:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16740				; 00004164H
	jmp	??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ ; FD3DVertexBuffer<FD3DParticle>::~FD3DVertexBuffer<FD3DParticle>
$L133584:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675112				; 000a4d28H
	jmp	??1?$TArray@E@@QAE@XZ			; TArray<unsigned char>::~TArray<unsigned char>
$L133585:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675212				; 000a4d8cH
	jmp	??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedPolygon>::~TArray<UD3DRenderDevice::QueuedPolygon>
$L133586:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675224				; 000a4d98H
	jmp	??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::~TArray<UD3DRenderDevice::QueuedParticleByTexture>
$L133587:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675236				; 000a4da4H
	jmp	??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedLineSegment>::~TArray<UD3DRenderDevice::QueuedLineSegment>
$L133588:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675248				; 000a4db0H
	jmp	??1?$TArray@UFD3DVertex@@@@QAE@XZ	; TArray<FD3DVertex>::~TArray<FD3DVertex>
$L133590:
	mov	ecx, DWORD PTR $T133600[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L133602:
	mov	ecx, DWORD PTR $T133612[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L133614:
	mov	ecx, DWORD PTR $T133624[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L133626:
	mov	ecx, DWORD PTR $T133629[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L133631:
	mov	ecx, DWORD PTR $T133634[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L133724:
	mov	ecx, DWORD PTR $T133734[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L133736:
	mov	ecx, DWORD PTR $T133739[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L133741:
	mov	ecx, DWORD PTR $T133744[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L133746:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1USubsystem@@UAE@XZ
$L133747:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	DWORD PTR __imp_??1FString@@QAE@XZ
$L133754:
	mov	eax, OFFSET FLAT:$T133753
	jmp	___CxxFrameHandler
text$x	ENDS
??1UD3DRenderDevice@@UAE@XZ ENDP			; UD3DRenderDevice::~UD3DRenderDevice
PUBLIC	??0UD3DRenderDevice@@QAE@XZ			; UD3DRenderDevice::UD3DRenderDevice
PUBLIC	?InternalConstructor@UD3DRenderDevice@@SAXPAX@Z	; UD3DRenderDevice::InternalConstructor
; Function compile flags: /Ogty
;	COMDAT ?InternalConstructor@UD3DRenderDevice@@SAXPAX@Z
_TEXT	SEGMENT
_X$ = 8
?InternalConstructor@UD3DRenderDevice@@SAXPAX@Z PROC NEAR ; UD3DRenderDevice::InternalConstructor, COMDAT

; 381  :     DECLARE_CLASS(UD3DRenderDevice,URenderDevice,CLASS_Config)

	mov	ecx, DWORD PTR _X$[esp-4]
	test	ecx, ecx
	je	SHORT $L133764
	jmp	??0UD3DRenderDevice@@QAE@XZ		; UD3DRenderDevice::UD3DRenderDevice
$L133764:
	ret	0
?InternalConstructor@UD3DRenderDevice@@SAXPAX@Z ENDP	; UD3DRenderDevice::InternalConstructor
_TEXT	ENDS
PUBLIC	?CleanupVertexBuffers@UD3DRenderDevice@@QAEXXZ	; UD3DRenderDevice::CleanupVertexBuffers
; Function compile flags: /Ogty
;	COMDAT ?CleanupVertexBuffers@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT
?CleanupVertexBuffers@UD3DRenderDevice@@QAEXXZ PROC NEAR ; UD3DRenderDevice::CleanupVertexBuffers, COMDAT
; _this$ = ecx

; 651  : 	{

	push	esi
	mov	esi, ecx

; 652  : 		WorldVertices.Exit();

	mov	eax, DWORD PTR [esi+16684]
	push	edi
	xor	edi, edi
	cmp	eax, edi
	je	SHORT $L133783
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+16684], edi
$L133783:

; 653  : 		ActorVertices.Exit();

	mov	eax, DWORD PTR [esi+16704]
	cmp	eax, edi
	je	SHORT $L133796
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+16704], edi
$L133796:

; 654  : 		LineVertices.Exit();

	mov	eax, DWORD PTR [esi+16724]
	cmp	eax, edi
	je	SHORT $L133809
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+16724], edi
$L133809:

; 655  : 		ParticleVertices.Exit();

	mov	eax, DWORD PTR [esi+16744]
	cmp	eax, edi
	je	SHORT $L133822
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+16744], edi
$L133822:
	pop	edi
	pop	esi

; 656  : 	
; 657  : 	#ifdef BATCH_PROJECTOR_POLYS
; 658  : 		ProjectorVertices.Exit();
; 659  : 	#endif
; 660  : 	}

	ret	0
?CleanupVertexBuffers@UD3DRenderDevice@@QAEXXZ ENDP	; UD3DRenderDevice::CleanupVertexBuffers
_TEXT	ENDS
PUBLIC	??_C@_1BK@BJII@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@NGFL@?$AAU?$AAs?$AAe?$AAE?$AAd?$AAi?$AAt?$AAo?$AAr?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AAe?$AAc@ ; `string'
PUBLIC	??_C@_1CG@HKBJ@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAp?$AAl?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@ ; `string'
PUBLIC	?StaticConstructor@UD3DRenderDevice@@QAEXXZ	; UD3DRenderDevice::StaticConstructor
PUBLIC	??_C@_1BC@CAKA@?$AAU?$AAs?$AAe?$AAV?$AAS?$AAy?$AAn?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@DADG@?$AAU?$AAs?$AAe?$AAP?$AAr?$AAe?$AAc?$AAa?$AAc?$AAh?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@LCJN@?$AAU?$AAs?$AAe?$AA2?$AAn?$AAd?$AAT?$AAi?$AAe?$AAr?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAC?$AAa?$AAc@ ; `string'
PUBLIC	??_C@_1CC@FKDE@?$AAU?$AAs?$AAe?$AA3?$AA2?$AAB?$AAi?$AAt?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_SUBoolProperty@@6B@				; UBoolProperty::`local vftable'
PUBLIC	??_GUBoolProperty@@UAEPAXI@Z			; UBoolProperty::`scalar deleting destructor'
PUBLIC	??_EUBoolProperty@@UAEPAXI@Z			; UBoolProperty::`vector deleting destructor'
EXTRN	?Serialize@UBoolProperty@@UAEXAAVFArchive@@@Z:NEAR ; UBoolProperty::Serialize
EXTRN	?Link@UBoolProperty@@UAEXAAVFArchive@@PAVUProperty@@@Z:NEAR ; UBoolProperty::Link
EXTRN	?Identical@UBoolProperty@@UBEHPBX0@Z:NEAR	; UBoolProperty::Identical
EXTRN	?SerializeItem@UBoolProperty@@UBEXAAVFArchive@@PAX@Z:NEAR ; UBoolProperty::SerializeItem
EXTRN	?NetSerializeItem@UBoolProperty@@UBEHAAVFArchive@@PAVUPackageMap@@PAX@Z:NEAR ; UBoolProperty::NetSerializeItem
EXTRN	?ExportCppItem@UBoolProperty@@UBEXAAVFOutputDevice@@@Z:NEAR ; UBoolProperty::ExportCppItem
EXTRN	?ExportTextItem@UBoolProperty@@UBEXPAGPAE1H@Z:NEAR ; UBoolProperty::ExportTextItem
EXTRN	?ImportText@UBoolProperty@@UBEPBGPBGPAEH@Z:NEAR	; UBoolProperty::ImportText
EXTRN	?CopySingleValue@UBoolProperty@@UBEXPAX0@Z:NEAR	; UBoolProperty::CopySingleValue
EXTRN	?ExportCpp@UProperty@@UBEXAAVFOutputDevice@@HH@Z:NEAR ; UProperty::ExportCpp
EXTRN	?ExportText@UProperty@@UBEHHPAGPAE1H@Z:NEAR	; UProperty::ExportText
EXTRN	?CopyCompleteValue@UProperty@@UBEXPAX0@Z:NEAR	; UProperty::CopyCompleteValue
EXTRN	?DestroyValue@UProperty@@UBEXPAX@Z:NEAR		; UProperty::DestroyValue
EXTRN	?Port@UProperty@@UBEHXZ:NEAR			; UProperty::Port
EXTRN	?GetID@UProperty@@UBEEXZ:NEAR			; UProperty::GetID
EXTRN	?Destroy@UObject@@UAEXXZ:NEAR			; UObject::Destroy
EXTRN	?ShutdownAfterError@UObject@@UAEXXZ:NEAR	; UObject::ShutdownAfterError
EXTRN	__imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A:BYTE
EXTRN	__imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z:NEAR
EXTRN	__imp_?GetClass@UObject@@QBEPAVUClass@@XZ:NEAR
EXTRN	?PostLoad@UField@@UAEXXZ:NEAR			; UField::PostLoad
EXTRN	?Register@UField@@UAEXXZ:NEAR			; UField::Register
EXTRN	?AddCppProperty@UField@@UAEXPAVUProperty@@@Z:NEAR ; UField::AddCppProperty
EXTRN	?MergeBools@UField@@UAEHXZ:NEAR			; UField::MergeBools
EXTRN	?Bind@UField@@UAEXXZ:NEAR			; UField::Bind
EXTRN	?GetOwnerClass@UField@@UAEPAVUClass@@XZ:NEAR	; UField::GetOwnerClass
EXTRN	?GetPropertiesSize@UField@@UAEHXZ:NEAR		; UField::GetPropertiesSize
EXTRN	__imp_??0FName@@QAE@PBGW4EFindName@@@Z:NEAR
;	COMDAT ??_C@_1BK@BJII@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@
; File ..\..\Core\Inc\UnClass.h
_DATA	SEGMENT
??_C@_1BK@BJII@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@ DB 'U'
	DB	00H, 's', 00H, 'e', 00H, 'T', 00H, 'r', 00H, 'i', 00H, 'l', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ DB 'O', 00H, 'p'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_SUBoolProperty@@6B@
CONST	SEGMENT
??_SUBoolProperty@@6B@ DD FLAT:??_EUBoolProperty@@UAEPAXI@Z ; UBoolProperty::`local vftable'
	DD	FLAT:?ProcessEvent@UObject@@UAEXPAVUFunction@@PAX1@Z
	DD	FLAT:?ProcessState@UObject@@UAEXM@Z
	DD	FLAT:?ProcessRemoteFunction@UObject@@UAEHPAVUFunction@@PAXPAUFFrame@@@Z
	DD	FLAT:?Modify@UObject@@UAEXXZ
	DD	FLAT:?PostLoad@UField@@UAEXXZ
	DD	FLAT:?Destroy@UObject@@UAEXXZ
	DD	FLAT:?Serialize@UBoolProperty@@UAEXAAVFArchive@@@Z
	DD	FLAT:?IsPendingKill@UObject@@UAEHXZ
	DD	FLAT:?GotoLabel@UObject@@UAEHVFName@@@Z
	DD	FLAT:?InitExecution@UObject@@UAEXXZ
	DD	FLAT:?ShutdownAfterError@UObject@@UAEXXZ
	DD	FLAT:?PostEditChange@UObject@@UAEXXZ
	DD	FLAT:?CallFunction@UObject@@UAEXAAUFFrame@@QAXPAVUFunction@@@Z
	DD	FLAT:?ScriptConsoleExec@UObject@@UAEHPBGAAVFOutputDevice@@PAV1@@Z
	DD	FLAT:?Register@UField@@UAEXXZ
	DD	FLAT:?LanguageChange@UObject@@UAEXXZ
	DD	FLAT:?GetName@UObject@@UBEPBGXZ
	DD	FLAT:?AddCppProperty@UField@@UAEXPAVUProperty@@@Z
	DD	FLAT:?MergeBools@UField@@UAEHXZ
	DD	FLAT:?Bind@UField@@UAEXXZ
	DD	FLAT:?GetOwnerClass@UField@@UAEPAVUClass@@XZ
	DD	FLAT:?GetPropertiesSize@UField@@UAEHXZ
	DD	FLAT:?Link@UBoolProperty@@UAEXAAVFArchive@@PAVUProperty@@@Z
	DD	FLAT:?Identical@UBoolProperty@@UBEHPBX0@Z
	DD	FLAT:?ExportCpp@UProperty@@UBEXAAVFOutputDevice@@HH@Z
	DD	FLAT:?ExportCppItem@UBoolProperty@@UBEXAAVFOutputDevice@@@Z
	DD	FLAT:?SerializeItem@UBoolProperty@@UBEXAAVFArchive@@PAX@Z
	DD	FLAT:?NetSerializeItem@UBoolProperty@@UBEHAAVFArchive@@PAVUPackageMap@@PAX@Z
	DD	FLAT:?ExportTextItem@UBoolProperty@@UBEXPAGPAE1H@Z
	DD	FLAT:?ImportText@UBoolProperty@@UBEPBGPBGPAEH@Z
	DD	FLAT:?ExportText@UProperty@@UBEHHPAGPAE1H@Z
	DD	FLAT:?CopySingleValue@UBoolProperty@@UBEXPAX0@Z
	DD	FLAT:?CopyCompleteValue@UProperty@@UBEXPAX0@Z
	DD	FLAT:?DestroyValue@UProperty@@UBEXPAX@Z
	DD	FLAT:?Port@UProperty@@UBEHXZ
	DD	FLAT:?GetID@UProperty@@UBEEXZ
CONST	ENDS
;	COMDAT ??_C@_1DC@NGFL@?$AAU?$AAs?$AAe?$AAE?$AAd?$AAi?$AAt?$AAo?$AAr?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AAe?$AAc@
_DATA	SEGMENT
??_C@_1DC@NGFL@?$AAU?$AAs?$AAe?$AAE?$AAd?$AAi?$AAt?$AAo?$AAr?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AAe?$AAc@ DB 'U'
	DB	00H, 's', 00H, 'e', 00H, 'E', 00H, 'd', 00H, 'i', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, 'G', 00H, 'a', 00H, 'm', 00H, 'm', 00H, 'a'
	DB	00H, 'C', 00H, 'o', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CG@HKBJ@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAp?$AAl?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@
_DATA	SEGMENT
??_C@_1CG@HKBJ@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAp?$AAl?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@ DB 'U'
	DB	00H, 's', 00H, 'e', 00H, 'T', 00H, 'r', 00H, 'i', 00H, 'p', 00H
	DB	'l', 00H, 'e', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BC@CAKA@?$AAU?$AAs?$AAe?$AAV?$AAS?$AAy?$AAn?$AAc?$AA?$AA@
_DATA	SEGMENT
??_C@_1BC@CAKA@?$AAU?$AAs?$AAe?$AAV?$AAS?$AAy?$AAn?$AAc?$AA?$AA@ DB 'U', 00H
	DB	's', 00H, 'e', 00H, 'V', 00H, 'S', 00H, 'y', 00H, 'n', 00H, 'c'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BI@DADG@?$AAU?$AAs?$AAe?$AAP?$AAr?$AAe?$AAc?$AAa?$AAc?$AAh?$AAe?$AA?$AA@
_DATA	SEGMENT
??_C@_1BI@DADG@?$AAU?$AAs?$AAe?$AAP?$AAr?$AAe?$AAc?$AAa?$AAc?$AAh?$AAe?$AA?$AA@ DB 'U'
	DB	00H, 's', 00H, 'e', 00H, 'P', 00H, 'r', 00H, 'e', 00H, 'c', 00H
	DB	'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CO@LCJN@?$AAU?$AAs?$AAe?$AA2?$AAn?$AAd?$AAT?$AAi?$AAe?$AAr?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAC?$AAa?$AAc@
_DATA	SEGMENT
??_C@_1CO@LCJN@?$AAU?$AAs?$AAe?$AA2?$AAn?$AAd?$AAT?$AAi?$AAe?$AAr?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAC?$AAa?$AAc@ DB 'U'
	DB	00H, 's', 00H, 'e', 00H, '2', 00H, 'n', 00H, 'd', 00H, 'T', 00H
	DB	'i', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'c', 00H
	DB	'h', 00H, 'e', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CC@FKDE@?$AAU?$AAs?$AAe?$AA3?$AA2?$AAB?$AAi?$AAt?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1CC@FKDE@?$AAU?$AAs?$AAe?$AA3?$AA2?$AAB?$AAi?$AAt?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAs?$AA?$AA@ DB 'U'
	DB	00H, 's', 00H, 'e', 00H, '3', 00H, '2', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 00H, 00H		; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?StaticConstructor@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT
$T133863 = -4
$T133873 = -4
$T133883 = -4
$T133893 = -4
$T133903 = -4
$T133913 = -4
$T133923 = -4
?StaticConstructor@UD3DRenderDevice@@QAEXXZ PROC NEAR	; UD3DRenderDevice::StaticConstructor, COMDAT
; _this$ = ecx

; 790  : 	{

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi

; 791  : 		new(GetClass(),TEXT("UseTrilinear"),            RF_Public)UBoolProperty( CPP_PROPERTY(UseTrilinear				), TEXT("Options"), CPF_Config );

	mov	edi, DWORD PTR __imp_??0FName@@QAE@PBGW4EFindName@@@Z
	push	1
	mov	esi, ecx
	push	OFFSET FLAT:??_C@_1BK@BJII@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR $T133863[esp+28]
	call	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T133863[esp+20]
	mov	ebx, DWORD PTR __imp_?StaticAllocateObject@UObject@@SAPAV1@PAVUClass@@PAV1@VFName@@K1PAVFOutputDevice@@1@Z
	push	0
	push	edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A
	push	0
	push	4
	push	ecx
	push	eax
	push	edx
	call	ebx
	mov	ebp, eax
	add	esp, 28					; 0000001cH
	test	ebp, ebp
	je	SHORT $L133829
	push	16384					; 00004000H
	push	OFFSET FLAT:??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
	push	19128					; 00004ab8H
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
	mov	DWORD PTR [ebp], OFFSET FLAT:??_SUBoolProperty@@6B@ ; UBoolProperty::`local vftable'
$L133829:

; 792  : 		new(GetClass(),TEXT("UseEditorGammaCorrection"),RF_Public)UBoolProperty( CPP_PROPERTY(UseEditorGammaCorrection	), TEXT("Options"), CPF_Config );

	push	1
	push	OFFSET FLAT:??_C@_1DC@NGFL@?$AAU?$AAs?$AAe?$AAE?$AAd?$AAi?$AAt?$AAo?$AAr?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AAe?$AAc@ ; `string'
	lea	ecx, DWORD PTR $T133873[esp+28]
	call	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T133873[esp+20]
	push	0
	push	edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A
	push	0
	push	4
	push	ecx
	push	eax
	push	edx
	call	ebx
	mov	ebp, eax
	add	esp, 28					; 0000001cH
	test	ebp, ebp
	je	SHORT $L133833
	push	16384					; 00004000H
	push	OFFSET FLAT:??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
	push	19132					; 00004abcH
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
	mov	DWORD PTR [ebp], OFFSET FLAT:??_SUBoolProperty@@6B@ ; UBoolProperty::`local vftable'
$L133833:

; 793  : 		new(GetClass(),TEXT("UseTripleBuffering"),      RF_Public)UBoolProperty( CPP_PROPERTY(UseTripleBuffering		), TEXT("Options"), CPF_Config );

	push	1
	push	OFFSET FLAT:??_C@_1CG@HKBJ@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAp?$AAl?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR $T133883[esp+28]
	call	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T133883[esp+20]
	push	0
	push	edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A
	push	0
	push	4
	push	ecx
	push	eax
	push	edx
	call	ebx
	mov	ebp, eax
	add	esp, 28					; 0000001cH
	test	ebp, ebp
	je	SHORT $L133837
	push	16384					; 00004000H
	push	OFFSET FLAT:??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
	push	19140					; 00004ac4H
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
	mov	DWORD PTR [ebp], OFFSET FLAT:??_SUBoolProperty@@6B@ ; UBoolProperty::`local vftable'
$L133837:

; 794  : 		new(GetClass(),TEXT("UseVSync"),                RF_Public)UBoolProperty( CPP_PROPERTY(UseVSync					), TEXT("Options"), CPF_Config );

	push	1
	push	OFFSET FLAT:??_C@_1BC@CAKA@?$AAU?$AAs?$AAe?$AAV?$AAS?$AAy?$AAn?$AAc?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR $T133893[esp+28]
	call	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T133893[esp+20]
	push	0
	push	edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A
	push	0
	push	4
	push	ecx
	push	eax
	push	edx
	call	ebx
	mov	ebp, eax
	add	esp, 28					; 0000001cH
	test	ebp, ebp
	je	SHORT $L133841
	push	16384					; 00004000H
	push	OFFSET FLAT:??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
	push	19144					; 00004ac8H
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
	mov	DWORD PTR [ebp], OFFSET FLAT:??_SUBoolProperty@@6B@ ; UBoolProperty::`local vftable'
$L133841:

; 795  : 		new(GetClass(),TEXT("UsePrecache"),             RF_Public)UBoolProperty( CPP_PROPERTY(UsePrecache				), TEXT("Options"), CPF_Config );

	push	1
	push	OFFSET FLAT:??_C@_1BI@DADG@?$AAU?$AAs?$AAe?$AAP?$AAr?$AAe?$AAc?$AAa?$AAc?$AAh?$AAe?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR $T133903[esp+28]
	call	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T133903[esp+20]
	push	0
	push	edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A
	push	0
	push	4
	push	ecx
	push	eax
	push	edx
	call	ebx
	mov	ebp, eax
	add	esp, 28					; 0000001cH
	test	ebp, ebp
	je	SHORT $L133845
	push	16384					; 00004000H
	push	OFFSET FLAT:??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
	push	19152					; 00004ad0H
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
	mov	DWORD PTR [ebp], OFFSET FLAT:??_SUBoolProperty@@6B@ ; UBoolProperty::`local vftable'
$L133845:

; 796  : 		new(GetClass(),TEXT("Use2ndTierTextureCache"),	RF_Public)UBoolProperty( CPP_PROPERTY(Use2ndTierTextureCache	), TEXT("Options"), CPF_Config );

	push	1
	push	OFFSET FLAT:??_C@_1CO@LCJN@?$AAU?$AAs?$AAe?$AA2?$AAn?$AAd?$AAT?$AAi?$AAe?$AAr?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAC?$AAa?$AAc@ ; `string'
	lea	ecx, DWORD PTR $T133913[esp+28]
	call	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T133913[esp+20]
	push	0
	push	edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A
	push	0
	push	4
	push	ecx
	push	eax
	push	edx
	call	ebx
	mov	ebp, eax
	add	esp, 28					; 0000001cH
	test	ebp, ebp
	je	SHORT $L133849
	push	16384					; 00004000H
	push	OFFSET FLAT:??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
	push	19156					; 00004ad4H
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
	mov	DWORD PTR [ebp], OFFSET FLAT:??_SUBoolProperty@@6B@ ; UBoolProperty::`local vftable'
$L133849:

; 797  : 		new(GetClass(),TEXT("Use32BitTextures"),		RF_Public)UBoolProperty( CPP_PROPERTY(Use32BitTextures			), TEXT("Options"), CPF_Config );

	mov	ebp, 1
	push	ebp
	push	OFFSET FLAT:??_C@_1CC@FKDE@?$AAU?$AAs?$AAe?$AA3?$AA2?$AAB?$AAi?$AAt?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAs?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR $T133923[esp+28]
	call	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T133923[esp+20]
	push	0
	push	edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A
	push	0
	push	4
	push	ecx
	push	eax
	push	edx
	call	ebx
	mov	edi, eax
	add	esp, 28					; 0000001cH
	test	edi, edi
	je	SHORT $L133853
	push	16384					; 00004000H
	push	OFFSET FLAT:??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
	push	19160					; 00004ad8H
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
	mov	DWORD PTR [edi], OFFSET FLAT:??_SUBoolProperty@@6B@ ; UBoolProperty::`local vftable'
$L133853:

; 798  : 
; 799  : 		DetailTextures			= TRUE;
; 800  : 		SpanBased				= FALSE;
; 801  : 		SupportsFogMaps			= TRUE;
; 802  : 		MaxResWidth				= MAXINT;

	mov	eax, 2147483647				; 7fffffffH
	pop	edi
	mov	DWORD PTR [esi+104], ebp
	mov	DWORD PTR [esi+72], ebp
	mov	DWORD PTR [esi+68], 0
	mov	DWORD PTR [esi+19164], eax

; 803  : 		MaxResHeight			= MAXINT;

	mov	DWORD PTR [esi+19168], eax
	pop	esi
	pop	ebp
	pop	ebx

; 804  : 	}

	pop	ecx
	ret	0
?StaticConstructor@UD3DRenderDevice@@QAEXXZ ENDP	; UD3DRenderDevice::StaticConstructor
_TEXT	ENDS
EXTRN	__imp_??1UBoolProperty@@UAE@XZ:NEAR
; Function compile flags: /Ogty
;	COMDAT ??_GUBoolProperty@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GUBoolProperty@@UAEPAXI@Z PROC NEAR			; UBoolProperty::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??1UBoolProperty@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $L133932
	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	esi
	call	DWORD PTR [edx+8]
$L133932:
	mov	eax, esi
	pop	esi
	ret	4
??_GUBoolProperty@@UAEPAXI@Z ENDP			; UBoolProperty::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller::BeginUpload
PUBLIC	?UploadMipmap@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ; UD3DRenderDevice::FTexFiller::UploadMipmap
PUBLIC	?UploadMipmap@FTexFillerDXT1@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ; UD3DRenderDevice::FTexFillerDXT1::UploadMipmap
PUBLIC	??_7FTexFillerDXT1@UD3DRenderDevice@@6B@	; UD3DRenderDevice::FTexFillerDXT1::`vftable'
PUBLIC	??_7FTexFillerP8_P8@UD3DRenderDevice@@6B@	; UD3DRenderDevice::FTexFillerP8_P8::`vftable'
PUBLIC	?UploadMipmap@FTexFiller8888_RGBA8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ; UD3DRenderDevice::FTexFiller8888_RGBA8::UploadMipmap
PUBLIC	??_7FTexFiller8888_RGBA8@UD3DRenderDevice@@6B@	; UD3DRenderDevice::FTexFiller8888_RGBA8::`vftable'
PUBLIC	?UploadMipmap@FTexFiller8888_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ; UD3DRenderDevice::FTexFiller8888_RGBA7::UploadMipmap
PUBLIC	??_7FTexFiller8888_RGBA7@UD3DRenderDevice@@6B@	; UD3DRenderDevice::FTexFiller8888_RGBA7::`vftable'
PUBLIC	?UploadMipmap@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ; UD3DRenderDevice::FTexFiller8888_P8::UploadMipmap
PUBLIC	?BeginUpload@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller8888_P8::BeginUpload
PUBLIC	??_7FTexFiller8888_P8@UD3DRenderDevice@@6B@	; UD3DRenderDevice::FTexFiller8888_P8::`vftable'
PUBLIC	?UploadMipmap@FTexFiller1555_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ; UD3DRenderDevice::FTexFiller1555_RGBA7::UploadMipmap
PUBLIC	??_7FTexFiller1555_RGBA7@UD3DRenderDevice@@6B@	; UD3DRenderDevice::FTexFiller1555_RGBA7::`vftable'
PUBLIC	?UploadMipmap@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ; UD3DRenderDevice::FTexFiller1555_P8::UploadMipmap
PUBLIC	?BeginUpload@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller1555_P8::BeginUpload
PUBLIC	??_7FTexFiller1555_P8@UD3DRenderDevice@@6B@	; UD3DRenderDevice::FTexFiller1555_P8::`vftable'
EXTRN	__imp_??0FString@@QAE@XZ:NEAR
EXTRN	__imp_??0USubsystem@@IAE@XZ:NEAR
EXTRN	__imp_??0FArray@@QAE@XZ:NEAR
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	SEGMENT
$T134207 DD	0ffffffffH
	DD	FLAT:$L133950
	DD	0ffffffffH
	DD	FLAT:$L133936
	DD	01H
	DD	FLAT:$L133937
	DD	02H
	DD	FLAT:$L133938
	DD	03H
	DD	FLAT:$L133939
	DD	04H
	DD	FLAT:$L133940
	DD	05H
	DD	FLAT:$L133941
	DD	06H
	DD	FLAT:$L133942
	DD	07H
	DD	FLAT:$L133943
	DD	08H
	DD	FLAT:$L133944
	DD	09H
	DD	FLAT:$L133945
	DD	0aH
	DD	FLAT:$L133946
	DD	0bH
	DD	FLAT:$L133947
$T134203 DD	019930520H
	DD	0dH
	DD	FLAT:$T134207
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7FTexFillerDXT1@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFillerDXT1@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFillerDXT1::`vftable'
	DD	FLAT:?UploadMipmap@FTexFillerDXT1@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
CONST	ENDS
;	COMDAT ??_7FTexFiller8888_RGBA8@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFiller8888_RGBA8@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller8888_RGBA8::`vftable'
	DD	FLAT:?UploadMipmap@FTexFiller8888_RGBA8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
CONST	ENDS
;	COMDAT ??_7FTexFiller8888_RGBA7@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFiller8888_RGBA7@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller8888_RGBA7::`vftable'
	DD	FLAT:?UploadMipmap@FTexFiller8888_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
CONST	ENDS
;	COMDAT ??_7FTexFiller8888_P8@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFiller8888_P8@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller8888_P8::`vftable'
	DD	FLAT:?UploadMipmap@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
CONST	ENDS
;	COMDAT ??_7FTexFiller1555_RGBA7@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFiller1555_RGBA7@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller1555_RGBA7::`vftable'
	DD	FLAT:?UploadMipmap@FTexFiller1555_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
CONST	ENDS
;	COMDAT ??_7FTexFiller1555_P8@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFiller1555_P8@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller1555_P8::`vftable'
	DD	FLAT:?UploadMipmap@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
CONST	ENDS
;	COMDAT ??_7FTexFillerP8_P8@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFillerP8_P8@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFillerP8_P8::`vftable'
	DD	FLAT:?UploadMipmap@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ??0UD3DRenderDevice@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??0UD3DRenderDevice@@QAE@XZ PROC NEAR			; UD3DRenderDevice::UD3DRenderDevice, COMDAT
; _this$ = ecx

; 815  : 	{

	push	-1
	push	$L134206
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+32], esi
	call	DWORD PTR __imp_??0USubsystem@@IAE@XZ
	xor	ebx, ebx
	lea	ecx, DWORD PTR [esi+52]
	mov	DWORD PTR __$EHRec$[esp+40], ebx
	call	DWORD PTR __imp_??0FString@@QAE@XZ
	mov	eax, DWORD PTR __imp_??_7URenderDevice@@6BUObject@@@
	mov	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR __imp_??_7URenderDevice@@6BFExec@@@
	mov	DWORD PTR [esi+40], ecx
	lea	ecx, DWORD PTR [esi+200]
	mov	DWORD PTR __$EHRec$[esp+40], 1
	call	DWORD PTR __imp_??0FArray@@QAE@XZ
	lea	ecx, DWORD PTR [esi+212]
	mov	BYTE PTR __$EHRec$[esp+40], 2
	call	DWORD PTR __imp_??0FArray@@QAE@XZ
	lea	ecx, DWORD PTR [esi+224]
	mov	BYTE PTR __$EHRec$[esp+40], 3
	call	DWORD PTR __imp_??0FArray@@QAE@XZ
	mov	DWORD PTR [esi+16688], ebx
	mov	DWORD PTR [esi+16696], ebx
	mov	DWORD PTR [esi+16684], ebx
	mov	DWORD PTR [esi+16680], ebx
	mov	DWORD PTR [esi+16708], ebx
	mov	DWORD PTR [esi+16716], ebx
	mov	DWORD PTR [esi+16704], ebx
	mov	DWORD PTR [esi+16700], ebx
	mov	DWORD PTR [esi+16728], ebx
	mov	DWORD PTR [esi+16736], ebx
	mov	DWORD PTR [esi+16724], ebx
	mov	DWORD PTR [esi+16720], ebx
	mov	DWORD PTR [esi+16748], ebx
	mov	DWORD PTR [esi+16756], ebx
	mov	DWORD PTR [esi+16744], ebx
	mov	DWORD PTR [esi+16740], ebx
	xor	eax, eax
	lea	edi, DWORD PTR [esi+16780]
	mov	ecx, 13					; 0000000dH
	rep stosd
	lea	edx, DWORD PTR [esi+16884]
	lea	edi, DWORD PTR [esi+16832]
	mov	ecx, 13					; 0000000dH
	rep stosd
	lea	ebp, DWORD PTR [esi+16936]
	mov	ecx, 13					; 0000000dH
	mov	edi, edx
	rep stosd
	mov	ecx, 13					; 0000000dH
	mov	edi, ebp
	rep stosd
	mov	DWORD PTR [esi+16992], OFFSET FLAT:??_7FTexFillerDXT1@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFillerDXT1::`vftable'
	lea	eax, DWORD PTR [esi+16780]
	mov	DWORD PTR [esi+16996], eax
	mov	DWORD PTR [esi+17000], OFFSET FLAT:??_7FTexFiller8888_RGBA8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller8888_RGBA8::`vftable'
	mov	DWORD PTR [esi+17004], edx
	mov	DWORD PTR [esi+17008], OFFSET FLAT:??_7FTexFiller8888_RGBA7@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller8888_RGBA7::`vftable'
	mov	DWORD PTR [esi+17012], edx
	mov	DWORD PTR [esi+17016], OFFSET FLAT:??_7FTexFiller8888_P8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller8888_P8::`vftable'
	mov	DWORD PTR [esi+17020], edx
	mov	DWORD PTR [esi+18048], OFFSET FLAT:??_7FTexFiller1555_RGBA7@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller1555_RGBA7::`vftable'
	mov	DWORD PTR [esi+18052], ebp
	mov	DWORD PTR [esi+18056], OFFSET FLAT:??_7FTexFiller1555_P8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller1555_P8::`vftable'
	mov	DWORD PTR [esi+18060], ebp
	lea	eax, DWORD PTR [esi+16832]
	mov	DWORD PTR [esi+19088], OFFSET FLAT:??_7FTexFillerP8_P8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFillerP8_P8::`vftable'
	mov	DWORD PTR [esi+19092], eax
	mov	DWORD PTR [esi+675112], ebx
	mov	DWORD PTR [esi+675116], ebx
	mov	DWORD PTR [esi+675120], ebx
	mov	DWORD PTR [esi+675212], ebx
	mov	DWORD PTR [esi+675216], ebx
	mov	DWORD PTR [esi+675220], ebx
	mov	DWORD PTR [esi+675224], ebx
	mov	DWORD PTR [esi+675228], ebx
	mov	DWORD PTR [esi+675232], ebx
	lea	ecx, DWORD PTR [esi+675236]
	mov	BYTE PTR __$EHRec$[esp+40], 11		; 0000000bH
	call	DWORD PTR __imp_??0FArray@@QAE@XZ
	lea	ecx, DWORD PTR [esi+675248]
	mov	BYTE PTR __$EHRec$[esp+40], 12		; 0000000cH
	call	DWORD PTR __imp_??0FArray@@QAE@XZ

; 816  : 		VALIDATE;
; 817  : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+32]
	pop	edi
	mov	DWORD PTR [esi], OFFSET FLAT:??_7UD3DRenderDevice@@6BUObject@@@ ; UD3DRenderDevice::`vftable'
	mov	DWORD PTR [esi+40], OFFSET FLAT:??_7UD3DRenderDevice@@6BFExec@@@ ; UD3DRenderDevice::`vftable'
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L133950:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1USubsystem@@UAE@XZ
$L133936:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1URenderDevice@@UAE@XZ
$L133937:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	jmp	??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::ProjectorInfo>::~TArray<UD3DRenderDevice::ProjectorInfo>
$L133938:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	jmp	??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::RenderTargetInfo>::~TArray<UD3DRenderDevice::RenderTargetInfo>
$L133939:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	jmp	??1?$TArray@H@@QAE@XZ			; TArray<int>::~TArray<int>
$L133940:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16680				; 00004128H
	jmp	??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DScreenVertex>::~FD3DVertexBuffer<FD3DScreenVertex>
$L133941:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16700				; 0000413cH
	jmp	??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DTLVertex>::~FD3DVertexBuffer<FD3DTLVertex>
$L133942:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16720				; 00004150H
	jmp	??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DVertex>::~FD3DVertexBuffer<FD3DVertex>
$L133943:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16740				; 00004164H
	jmp	??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ ; FD3DVertexBuffer<FD3DParticle>::~FD3DVertexBuffer<FD3DParticle>
$L133944:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675112				; 000a4d28H
	jmp	??1?$TArray@E@@QAE@XZ			; TArray<unsigned char>::~TArray<unsigned char>
$L133945:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675212				; 000a4d8cH
	jmp	??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedPolygon>::~TArray<UD3DRenderDevice::QueuedPolygon>
$L133946:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675224				; 000a4d98H
	jmp	??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::~TArray<UD3DRenderDevice::QueuedParticleByTexture>
$L133947:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675236				; 000a4da4H
	jmp	??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedLineSegment>::~TArray<UD3DRenderDevice::QueuedLineSegment>
$L134206:
	mov	eax, OFFSET FLAT:$T134203
	jmp	___CxxFrameHandler
text$x	ENDS
??0UD3DRenderDevice@@QAE@XZ ENDP			; UD3DRenderDevice::UD3DRenderDevice
; Function compile flags: /Ogty
;	COMDAT ?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z
_TEXT	SEGMENT
?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller::BeginUpload, COMDAT
; _this$ = ecx

; 424  : 		virtual void BeginUpload( FTexInfo* Tex, const FTextureInfo& Info, DWORD PolyFlags, DWORD PolyFlagsEx ) {}

	ret	16					; 00000010H
?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ENDP ; UD3DRenderDevice::FTexFiller::BeginUpload
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT
?UploadMipmap@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller::UploadMipmap, COMDAT
; _this$ = ecx

; 425  : 		virtual void UploadMipmap( FTexInfo* Tex, FRainbowPtr Dest, INT Stride, const FTextureInfo& Info, INT MipIndex, DWORD PolyFlags ) {}

	ret	24					; 00000018H
?UploadMipmap@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ENDP ; UD3DRenderDevice::FTexFiller::UploadMipmap
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFillerDXT1@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT
$T134238 = 24
$T134239 = 20
_Dest$ = 12
_Info$ = 20
_MipIndex$ = 24
?UploadMipmap@FTexFillerDXT1@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z PROC NEAR ; UD3DRenderDevice::FTexFillerDXT1::UploadMipmap, COMDAT
; _this$ = ecx

; 453  : 			INT USize = Max(Info.Mips[MipIndex]->USize, 4);

	mov	eax, DWORD PTR _MipIndex$[esp-4]
	mov	ecx, DWORD PTR _Info$[esp-4]
	mov	ecx, DWORD PTR [ecx+eax*4+80]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, 4
	mov	edx, eax
	jge	SHORT $L134224
	mov	edx, 4
$L134224:

; 454  : 			INT VSize = Max(Info.Mips[MipIndex]->VSize, 4);

	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, 4
	jge	SHORT $L134232
	mov	eax, 4
$L134232:

; 455  : 			appMemcpy( Dest.PtrVOID, Info.Mips[MipIndex]->DataPtr, (USize * VSize)/2 );

	imul	eax, edx
	cdq
	push	ebx
	sub	eax, edx
	mov	edx, DWORD PTR [ecx]
	push	esi
	sar	eax, 1
	push	edi
	mov	DWORD PTR $T134239[esp+8], eax
	mov	DWORD PTR $T134238[esp+8], edx
	mov	ecx, DWORD PTR $T134239[esp+8]
	mov	esi, DWORD PTR $T134238[esp+8]
	mov	edi, DWORD PTR _Dest$[esp+8]
	mov	ebx, ecx
	shr	ecx, 2
	and	ebx, 3
	rep	 movsd
	mov	ecx, ebx
	rep	 movsb
	pop	edi
	pop	esi
	pop	ebx

; 456  : 		}

	ret	24					; 00000018H
?UploadMipmap@FTexFillerDXT1@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ENDP ; UD3DRenderDevice::FTexFillerDXT1::UploadMipmap
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller8888_RGBA8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT
_Dest$ = 12
_Stride$ = 16
_Info$ = 20
_MipIndex$ = 24
?UploadMipmap@FTexFiller8888_RGBA8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller8888_RGBA8::UploadMipmap, COMDAT
; _this$ = ecx

; 478  : 			INT  USize      = Info.Mips[MipIndex]->USize;

	mov	ecx, DWORD PTR _Info$[esp-4]
	mov	eax, DWORD PTR _MipIndex$[esp-4]
	mov	eax, DWORD PTR [ecx+eax*4+80]
	mov	edx, DWORD PTR [eax+4]

; 479  : 			INT  VSize      = Info.Mips[MipIndex]->VSize;
; 480  : 			FRainbowPtr Src = Info.Mips[MipIndex]->DataPtr;

	mov	ecx, DWORD PTR [eax]

; 481  : 			for( INT j=VSize-1; j>=0; j--,Dest.PtrDWORD += Stride-USize*sizeof(DWORD) )

	mov	eax, DWORD PTR [eax+8]
	dec	eax
	js	SHORT $L122880
	push	ebx
	push	ebp
	push	esi

; 482  : 				for( INT k=USize-1; k>=0; k--,Dest.PtrDWORD++ )

	mov	esi, DWORD PTR _Stride$[esp+8]
	push	edi
	lea	edi, DWORD PTR [edx-1]
	shl	edx, 2
	sub	esi, edx
	lea	ebx, DWORD PTR [eax+1]
	mov	eax, DWORD PTR _Dest$[esp+12]
	shl	esi, 2
$L122878:
	test	edi, edi
	jl	SHORT $L122879
	lea	edx, DWORD PTR [edi+1]
$L122882:

; 483  : 				{
; 484  : 					*Dest.PtrDWORD = *Src.PtrDWORD++;

	mov	ebp, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ebp
	add	ecx, 4
	add	eax, 4
	dec	edx
	jne	SHORT $L122882
$L122879:

; 481  : 			for( INT j=VSize-1; j>=0; j--,Dest.PtrDWORD += Stride-USize*sizeof(DWORD) )

	add	eax, esi
	dec	ebx
	jne	SHORT $L122878
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
$L122880:

; 485  : 					//*Dest.PtrDWORD|=0xFF000000; 
; 486  : 				}
; 487  : 		}

	ret	24					; 00000018H
?UploadMipmap@FTexFiller8888_RGBA8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ENDP ; UD3DRenderDevice::FTexFiller8888_RGBA8::UploadMipmap
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller8888_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT
_Info$ = 20
_MipIndex$ = 24
_v$ = 20
?UploadMipmap@FTexFiller8888_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller8888_RGBA7::UploadMipmap, COMDAT
; _this$ = ecx

; 493  : 		{

	push	ebx
	push	ebp
	push	esi

; 494  : 
; 495  : 			DWORD*		TempBuffer = new DWORD[Info.Mips[MipIndex]->USize * Info.Mips[MipIndex]->VSize];

	mov	esi, DWORD PTR _Info$[esp+8]
	push	edi
	mov	edi, DWORD PTR _MipIndex$[esp+12]
	mov	ecx, DWORD PTR [esi+edi*4+80]
	mov	eax, DWORD PTR [ecx+8]
	imul	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	shl	eax, 2
	push	OFFSET FLAT:??_C@_17JBDG@?$AAn?$AAe?$AAw?$AA?$AA@ ; `string'
	push	eax
	call	DWORD PTR [edx]

; 496  : 			FRainbowPtr	RealDest = Dest;
; 497  : 
; 498  : 			Dest.PtrDWORD = TempBuffer;
; 499  : 			Stride = Info.Mips[MipIndex]->USize * 4;

	mov	ecx, DWORD PTR [esi+edi*4+80]
	mov	ebx, DWORD PTR [ecx+4]

; 500  : 
; 501  : 			FRainbowPtr Src  = Info.Mips[MipIndex]->DataPtr;
; 502  : 			for( INT v=0; v<Info.VClamp; v++,Dest.PtrBYTE+=Stride-Info.UClamp*sizeof(DWORD),Src.PtrDWORD+=Info.USize-Info.UClamp )

	mov	edx, DWORD PTR [esi+60]
	mov	ecx, DWORD PTR [ecx]
	shl	ebx, 2
	xor	ebp, ebp
	test	edx, edx
	jle	SHORT $L122898
	mov	edi, DWORD PTR [esi+56]
$L122896:

; 503  : 				for( INT u=0; u<Info.UClamp; u++,Src.PtrDWORD++,Dest.PtrDWORD++ )

	xor	edx, edx
	test	edi, edi
	jle	SHORT $L122897

; 505  : 
; 506  : 		}

	npad	6
$L122900:

; 504  : 					*Dest.PtrDWORD = *Src.PtrDWORD*2;

	mov	edi, DWORD PTR [ecx]
	shl	edi, 1
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [esi+56]
	inc	edx
	add	ecx, 4
	add	eax, 4
	cmp	edx, edi
	jl	SHORT $L122900
$L122897:

; 500  : 
; 501  : 			FRainbowPtr Src  = Info.Mips[MipIndex]->DataPtr;
; 502  : 			for( INT v=0; v<Info.VClamp; v++,Dest.PtrBYTE+=Stride-Info.UClamp*sizeof(DWORD),Src.PtrDWORD+=Info.USize-Info.UClamp )

	mov	edi, DWORD PTR [esi+56]
	inc	ebp
	mov	DWORD PTR _v$[esp+12], ebp
	lea	edx, DWORD PTR [edi*4]
	mov	ebp, ebx
	sub	ebp, edx
	mov	edx, DWORD PTR [esi+48]
	sub	edx, edi
	add	eax, ebp
	mov	ebp, DWORD PTR _v$[esp+12]
	lea	ecx, DWORD PTR [ecx+edx*4]
	cmp	ebp, DWORD PTR [esi+60]
	jl	SHORT $L122896
$L122898:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 505  : 
; 506  : 		}

	ret	24					; 00000018H
?UploadMipmap@FTexFiller8888_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ENDP ; UD3DRenderDevice::FTexFiller8888_RGBA7::UploadMipmap
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT
_Dest$ = 12
_Stride$ = 16
_Info$ = 20
_MipIndex$ = 24
?UploadMipmap@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller8888_P8::UploadMipmap, COMDAT
; _this$ = ecx

; 515  : 			INT		USize      = Info.Mips[MipIndex]->USize;

	mov	edx, DWORD PTR _Info$[esp-4]
	mov	eax, DWORD PTR _MipIndex$[esp-4]
	mov	eax, DWORD PTR [edx+eax*4+80]

; 516  : 			INT		VSize      = Info.Mips[MipIndex]->VSize;
; 517  : 
; 518  : 			FRainbowPtr Src = Info.Mips[MipIndex]->DataPtr;

	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]

; 519  : 			for( INT j=VSize-1; j>=0; j--,Dest.PtrBYTE+=Stride-USize*sizeof(DWORD) )

	mov	eax, DWORD PTR [eax+8]
	dec	eax
	js	SHORT $L122914
	push	ebx
	push	ebp
	lea	ebx, DWORD PTR [esi-1]
	push	edi

; 520  : 				for( INT k=USize-1; k>=0; k--,Dest.PtrDWORD++ )

	shl	esi, 2
	lea	edi, DWORD PTR [eax+1]
	mov	eax, DWORD PTR _Dest$[esp+12]
	mov	DWORD PTR 24+[esp+12], esi

; 522  : 
; 523  : 		}

	npad	4

; 520  : 				for( INT k=USize-1; k>=0; k--,Dest.PtrDWORD++ )

$L122912:
	test	ebx, ebx
	jl	SHORT $L122913
	lea	esi, DWORD PTR [ebx+1]
$L122916:

; 521  : 					*Dest.PtrDWORD = AlphaPalette[*Src.PtrBYTE++];

	movzx	ebp, BYTE PTR [edx]
	mov	ebp, DWORD PTR [ecx+ebp*4+8]
	mov	DWORD PTR [eax], ebp
	inc	edx
	add	eax, 4
	dec	esi
	jne	SHORT $L122916
$L122913:

; 519  : 			for( INT j=VSize-1; j>=0; j--,Dest.PtrBYTE+=Stride-USize*sizeof(DWORD) )

	mov	esi, DWORD PTR _Stride$[esp+12]
	sub	esi, DWORD PTR 24+[esp+12]
	add	eax, esi
	dec	edi
	jne	SHORT $L122912
	pop	edi
	pop	ebp
	pop	ebx
$L122914:
	pop	esi

; 522  : 
; 523  : 		}

	ret	24					; 00000018H
?UploadMipmap@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ENDP ; UD3DRenderDevice::FTexFiller8888_P8::UploadMipmap
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?BeginUpload@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z
_TEXT	SEGMENT
_Info$ = 12
_PolyFlags$ = 16
?BeginUpload@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller8888_P8::BeginUpload, COMDAT
; _this$ = ecx

; 525  : 		{

	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _Info$[esp+8]

; 526  : 			// Compute the alpha palette:
; 527  : 			for( INT i=0; i<NUM_PAL_COLORS; i++ )

	lea	ebp, DWORD PTR [ecx+8]
	xor	edx, edx
	mov	esi, ebp
	push	ebx

; 532  : 		}

	npad	1

; 526  : 			// Compute the alpha palette:
; 527  : 			for( INT i=0; i<NUM_PAL_COLORS; i++ )

$L122922:

; 528  : 				AlphaPalette[i] = D3DCOLOR_RGBA(Info.Palette[i].R,Info.Palette[i].G,Info.Palette[i].B,Info.Palette[i].A);

	mov	eax, DWORD PTR [edi+72]
	movzx	ebx, BYTE PTR [eax+edx+1]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax+edx+3]
	add	eax, edx
	add	edx, 4
	add	esi, 4
	mov	cl, BYTE PTR [eax]
	movzx	eax, BYTE PTR [eax+2]
	shl	ecx, 8
	or	ecx, ebx
	shl	ecx, 8
	or	ecx, eax
	cmp	edx, 1024				; 00000400H
	mov	DWORD PTR [esi-4], ecx
	jl	SHORT $L122922

; 529  : 			
; 530  : 			if( PolyFlags & PF_Masked )

	test	BYTE PTR _PolyFlags$[esp+12], 2
	pop	ebx
	je	SHORT $L122926

; 531  : 				AlphaPalette[0] = 0;

	mov	DWORD PTR [ebp], 0
$L122926:
	pop	edi
	pop	esi
	pop	ebp

; 532  : 		}

	ret	16					; 00000010H
?BeginUpload@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ENDP ; UD3DRenderDevice::FTexFiller8888_P8::BeginUpload
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller1555_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT
_Dest$ = 12
_Stride$ = 16
_Info$ = 20
_MipIndex$ = 24
_RPtr$ = -8
_GPtr$ = -12
_BPtr$ = -4
_v$ = 20
?UploadMipmap@FTexFiller1555_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller1555_RGBA7::UploadMipmap, COMDAT
; _this$ = ecx

; 538  : 		{

	sub	esp, 12					; 0000000cH

; 539  : 			_WORD*      RPtr     = RScale + PYR(Info.MaxColor->R/2);

	mov	ecx, DWORD PTR _Info$[esp+8]
	push	esi
	mov	esi, DWORD PTR [ecx+32]
	movzx	edx, BYTE PTR [esi]
	shr	edx, 1
	lea	eax, DWORD PTR [edx+1]
	imul	eax, edx
	cdq
	sub	eax, edx

; 540  : 			_WORD*      GPtr     = GScale + PYR(Info.MaxColor->G/2);

	movzx	edx, BYTE PTR [esi+1]
	sar	eax, 1
	lea	eax, DWORD PTR ?RScale@@3PAGA[eax*2]
	mov	DWORD PTR _RPtr$[esp+16], eax
	shr	edx, 1
	lea	eax, DWORD PTR [edx+1]
	imul	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	edx, DWORD PTR ?GScale@@3PAGA[eax*2]
	mov	DWORD PTR _GPtr$[esp+16], edx

; 541  : 			_WORD*      BPtr     = BScale + PYR(Info.MaxColor->B/2);

	movzx	edx, BYTE PTR [esi+2]
	shr	edx, 1
	lea	eax, DWORD PTR [edx+1]
	imul	eax, edx
	cdq
	sub	eax, edx

; 542  : 			FRainbowPtr Src      = Info.Mips[MipIndex]->DataPtr;

	mov	edx, DWORD PTR _MipIndex$[esp+12]
	sar	eax, 1
	lea	eax, DWORD PTR ?BScale@@3PAGA[eax*2]
	mov	DWORD PTR _BPtr$[esp+16], eax
	mov	eax, DWORD PTR [ecx+edx*4+80]

; 543  : 			for( INT v=0; v<Info.VClamp; v++,Dest.PtrBYTE+=Stride-Info.UClamp*2,Src .PtrDWORD+=Info.USize-Info.UClamp )

	mov	edx, DWORD PTR [ecx+60]
	test	edx, edx
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _v$[esp+12], 0
	jle	SHORT $L122938
	mov	edx, DWORD PTR _Dest$[esp+12]
	push	ebx
	push	ebp
	push	edi
	mov	edi, DWORD PTR [ecx+56]
$L122936:

; 544  : 				for( INT u=0; u<Info.UClamp; u++,Src.PtrDWORD++ )

	xor	esi, esi
	test	edi, edi
	jle	SHORT $L122937
$L122940:

; 545  : 					*Dest.PtrWORD++ = BPtr[Src.PtrBYTE[0]] + GPtr[Src.PtrBYTE[1]] + RPtr[Src.PtrBYTE[2]];

	movzx	edi, BYTE PTR [eax+1]
	movzx	ebx, BYTE PTR [eax+2]
	mov	ebp, DWORD PTR _GPtr$[esp+28]
	mov	di, WORD PTR [ebp+edi*2]
	mov	ebp, DWORD PTR _RPtr$[esp+28]
	add	di, WORD PTR [ebp+ebx*2]
	movzx	ebx, BYTE PTR [eax]
	mov	ebp, DWORD PTR _BPtr$[esp+28]
	add	di, WORD PTR [ebp+ebx*2]
	add	edx, 2
	mov	WORD PTR [edx-2], di
	mov	edi, DWORD PTR [ecx+56]
	inc	esi
	add	eax, 4
	cmp	esi, edi
	jl	SHORT $L122940
$L122937:

; 543  : 			for( INT v=0; v<Info.VClamp; v++,Dest.PtrBYTE+=Stride-Info.UClamp*2,Src .PtrDWORD+=Info.USize-Info.UClamp )

	mov	edi, DWORD PTR [ecx+56]
	mov	ebp, DWORD PTR _Stride$[esp+24]
	mov	esi, DWORD PTR _v$[esp+24]
	lea	ebx, DWORD PTR [edi+edi]
	sub	ebp, ebx
	mov	ebx, DWORD PTR [ecx+48]
	sub	ebx, edi
	inc	esi
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR [ecx+60]
	add	edx, ebp
	cmp	esi, ebx
	mov	DWORD PTR _v$[esp+24], esi
	jl	SHORT $L122936
	pop	edi
	pop	ebp
	pop	ebx
$L122938:
	pop	esi

; 546  : 		}

	add	esp, 12					; 0000000cH
	ret	24					; 00000018H
?UploadMipmap@FTexFiller1555_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ENDP ; UD3DRenderDevice::FTexFiller1555_RGBA7::UploadMipmap
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT
_k$122954 = 24
_Dest$ = 12
_Stride$ = 16
_Info$ = 20
_MipIndex$ = 24
?UploadMipmap@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller1555_P8::UploadMipmap, COMDAT
; _this$ = ecx

; 554  : 		{

	push	ebx

; 555  : 			INT  USize      = Info.Mips[MipIndex]->USize;

	mov	ebx, DWORD PTR _MipIndex$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _Info$[esp+8]
	mov	eax, DWORD PTR [edi+ebx*4+80]
	mov	esi, DWORD PTR [eax+4]

; 556  : 			INT  VSize      = Info.Mips[MipIndex]->VSize;
; 557  : 			FRainbowPtr Src = Info.Mips[MipIndex]->DataPtr;

	mov	edx, DWORD PTR [eax]

; 558  : 
; 559  : 			for( INT j=VSize-1; j>=0; j--,Dest.PtrBYTE+=Stride-Info.Mips[MipIndex]->USize*2 )

	mov	eax, DWORD PTR [eax+8]
	dec	eax
	js	SHORT $L122953
	dec	esi
	inc	eax
	mov	DWORD PTR 20+[esp+8], eax
	mov	eax, DWORD PTR _Dest$[esp+8]
	push	ebp
	mov	DWORD PTR _k$122954[esp+12], esi
	jmp	SHORT $L122951
$L134309:

; 555  : 			INT  USize      = Info.Mips[MipIndex]->USize;

	mov	esi, DWORD PTR _k$122954[esp+12]

; 562  : 		}

	npad	1
$L122951:

; 560  : 				for( INT k=USize-1; k>=0; k-- )

	test	esi, esi
	jl	SHORT $L122952
	inc	esi
$L122955:

; 561  : 					*Dest.PtrWORD++ = AlphaPalette[*Src.PtrBYTE++];

	movzx	ebp, BYTE PTR [edx]
	mov	bp, WORD PTR [ecx+ebp*4+8]
	mov	WORD PTR [eax], bp
	add	eax, 2
	inc	edx
	dec	esi
	jne	SHORT $L122955
$L122952:

; 558  : 
; 559  : 			for( INT j=VSize-1; j>=0; j--,Dest.PtrBYTE+=Stride-Info.Mips[MipIndex]->USize*2 )

	mov	esi, DWORD PTR [edi+ebx*4+80]
	mov	esi, DWORD PTR [esi+4]
	mov	ebp, DWORD PTR _Stride$[esp+12]
	shl	esi, 1
	sub	ebp, esi
	mov	esi, DWORD PTR 20+[esp+12]
	add	eax, ebp
	dec	esi
	mov	DWORD PTR 20+[esp+12], esi
	jne	SHORT $L134309
	pop	ebp
$L122953:
	pop	edi
	pop	esi
	pop	ebx

; 562  : 		}

	ret	24					; 00000018H
?UploadMipmap@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ENDP ; UD3DRenderDevice::FTexFiller1555_P8::UploadMipmap
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?BeginUpload@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z
_TEXT	SEGMENT
_End$134436 = -4
_ti$ = 8
_Info$ = 12
_PolyFlags$ = 16
_PolyFlagsEx$ = 20
?BeginUpload@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller1555_P8::BeginUpload, COMDAT
; _this$ = ecx

; 579  : 			// Convert lighten and darknen modulate as a modulated texture, but don't add one.
; 580  : 			if(PolyFlagsEx&(PFX_LightenModulate|PFX_DarkenModulate))

	mov	al, BYTE PTR _PolyFlagsEx$[esp-4]
	sub	esp, 8
	test	al, 48					; 00000030H
	push	ebx
	push	ebp
	push	esi
	push	edi
	je	$L122984

; 581  : 			{
; 582  : 				FColor* Pal = Info.Palette;

	mov	eax, DWORD PTR _Info$[esp+20]
	mov	edx, DWORD PTR [eax+72]

; 583  : 				DWORD* Dest = AlphaPalette;

	add	ecx, 8

; 584  : 
; 585  : 				for( FColor *End=Pal+NUM_PAL_COLORS; Pal<End; Pal++ )

	lea	ebp, DWORD PTR [edx+1024]
	cmp	edx, ebp
	mov	DWORD PTR 12+[esp+20], ecx
	mov	ebx, ecx
	jae	$L134439
$L122988:

; 586  : 				{
; 587  : 					*Dest++
; 588  : 					=((Min<INT>(0x80000000,(Pal->A*0x01000000)&0x80000000))
; 589  : 					| (Min<INT>(0x7C000000,(Pal->R*0x007fffff)&0x7C000000))
; 590  : 					| (Min<INT>(0x03E00000,(Pal->G*0x0003ffff)&0x03E00000))
; 591  : 					| (Min<INT>(0x001F0000,(Pal->B*0x00001fff)&0x001F0000)) )>>16;

	movzx	eax, BYTE PTR [edx+3]
	shl	eax, 24					; 00000018H
	and	eax, -2147483648			; 80000000H
	cmp	eax, -2147483648			; 80000000H
	jl	SHORT $L134318
	mov	eax, -2147483648			; 80000000H
$L134318:
	movzx	ecx, BYTE PTR [edx]
	imul	ecx, 8388607				; 007fffffH
	and	ecx, 2080374784				; 7c000000H
	cmp	ecx, 2080374784				; 7c000000H
	mov	edi, 2080374784				; 7c000000H
	jge	SHORT $L134326
	mov	edi, ecx
$L134326:
	movzx	ecx, BYTE PTR [edx+1]
	imul	ecx, 262143				; 0003ffffH
	and	ecx, 65011712				; 03e00000H
	cmp	ecx, 65011712				; 03e00000H
	mov	esi, 65011712				; 03e00000H
	jge	SHORT $L134334
	mov	esi, ecx
$L134334:
	movzx	ecx, BYTE PTR [edx+2]
	imul	ecx, 8191				; 00001fffH
	and	ecx, 2031616				; 001f0000H
	cmp	ecx, 2031616				; 001f0000H
	jl	SHORT $L134342
	mov	ecx, 2031616				; 001f0000H
$L134342:
	or	eax, ecx
	or	eax, esi
	or	eax, edi
	sar	eax, 16					; 00000010H
	mov	DWORD PTR [ebx], eax
	add	edx, 4
	add	ebx, 4
	cmp	edx, ebp
	jb	$L122988

; 592  : 				}
; 593  : 			} else

	jmp	$L134439
$L122984:

; 594  : 			// Have to add one to the texture, so we can darken it down by half an element later.
; 595  : 			if((PolyFlags & (PF_Modulated|PF_Translucent)) == PF_Modulated)// Prevent brightness adjustment when modulating 

	mov	edx, DWORD PTR _PolyFlags$[esp+20]
	and	edx, 68					; 00000044H
	cmp	dl, 64					; 00000040H
	jne	$L123008

; 596  : 			{
; 597  : 				FColor* Pal = Info.Palette;

	mov	eax, DWORD PTR _Info$[esp+20]
	mov	edx, DWORD PTR [eax+72]

; 598  : 				DWORD* Dest = AlphaPalette;

	lea	eax, DWORD PTR [ecx+8]

; 599  : 
; 600  : 				for( FColor *End=Pal+NUM_PAL_COLORS; Pal<End; Pal++ )

	lea	ebp, DWORD PTR [edx+1024]
	cmp	edx, ebp
	mov	DWORD PTR 12+[esp+20], eax
	mov	edi, eax
	jae	$L134439

; 623  : 		}

	npad	1
$L123012:

; 601  : 				{
; 602  : 					*Dest++
; 603  : 					=((Min<INT>(0x80000000,(Pal->A*0x01000000)&0x80000000))
; 604  : 					| (Min<INT>(0x7C000000,((Pal->R+1)*0x007fffff)&0x7C000000))
; 605  : 					| (Min<INT>(0x03E00000,((Pal->G+1)*0x0003ffff)&0x03E00000))
; 606  : 					| (Min<INT>(0x001F0000,((Pal->B+1)*0x00001fff)&0x001F0000)) )>>16;

	movzx	eax, BYTE PTR [edx+3]
	shl	eax, 24					; 00000018H
	and	eax, -2147483648			; 80000000H
	cmp	eax, -2147483648			; 80000000H
	mov	ebx, -2147483648			; 80000000H
	jge	SHORT $L134350
	mov	ebx, eax
$L134350:
	movzx	eax, BYTE PTR [edx]
	inc	eax
	imul	eax, 8388607				; 007fffffH
	and	eax, 2080374784				; 7c000000H
	cmp	eax, 2080374784				; 7c000000H
	mov	esi, 2080374784				; 7c000000H
	jge	SHORT $L134358
	mov	esi, eax
$L134358:
	movzx	eax, BYTE PTR [edx+1]
	inc	eax
	imul	eax, 262143				; 0003ffffH
	and	eax, 65011712				; 03e00000H
	cmp	eax, 65011712				; 03e00000H
	mov	ecx, 65011712				; 03e00000H
	jge	SHORT $L134366
	mov	ecx, eax
$L134366:
	movzx	eax, BYTE PTR [edx+2]
	inc	eax
	imul	eax, 8191				; 00001fffH
	and	eax, 2031616				; 001f0000H
	cmp	eax, 2031616				; 001f0000H
	jl	SHORT $L134374
	mov	eax, 2031616				; 001f0000H
$L134374:
	or	eax, ecx
	or	eax, esi
	or	eax, ebx
	sar	eax, 16					; 00000010H
	mov	DWORD PTR [edi], eax
	add	edx, 4
	add	edi, 4
	cmp	edx, ebp
	jb	$L123012

; 607  : 				}
; 608  : 			} else

	jmp	$L134439
$L123008:

; 609  : 			BuildAlphaPalette
; 610  : 			(
; 611  : 				Info.Palette,
; 612  : 				0x1000000, 0x80000000,
; 613  : 				/*appRound(*/0x07fffffff/Max<INT>(ti->MaxColor.R,1)/*)*/, 0x7C000000,
; 614  : 				/*appRound(*/0x003ffffff/Max<INT>(ti->MaxColor.G,1)/*)*/, 0x03E00000,
; 615  : 				/*appRound(*/0x0001fffff/Max<INT>(ti->MaxColor.B,1)/*)*/, 0x001F0000
; 616  : 				/* Adjustment of 1.4* for 16-bit rendering modes to make 
; 617  : 				   brightness scaling of world textures comparable to that of 3dfx.
; 618  : 				   NJS: removed the 1.4 scaling.
; 619  : 				*/
; 620  : 			);

	mov	edx, DWORD PTR _ti$[esp+20]
	movzx	eax, BYTE PTR [edx+34]
	mov	edi, 1
	cmp	eax, edi
	mov	DWORD PTR 20+[esp+20], eax
	jge	SHORT $L134382
	mov	DWORD PTR 20+[esp+20], edi
$L134382:
	movzx	eax, BYTE PTR [edx+33]
	cmp	eax, edi
	mov	ebp, eax
	jge	SHORT $L134390
	mov	ebp, edi
$L134390:
	movzx	eax, BYTE PTR [edx+32]
	cmp	eax, edi
	jl	SHORT $L134398
	mov	edi, eax
$L134398:
	mov	edx, DWORD PTR _Info$[esp+20]
	mov	esi, DWORD PTR [edx+72]
	lea	eax, DWORD PTR [esi+1024]
	cmp	esi, eax
	lea	ebx, DWORD PTR [ecx+8]
	mov	DWORD PTR 12+[esp+20], ebx
	mov	DWORD PTR _End$134436[esp+24], eax
	jae	$L134439
	mov	eax, 2147483647				; 7fffffffH
	cdq
	idiv	edi
	mov	DWORD PTR 8+[esp+20], eax
	mov	eax, 67108863				; 03ffffffH
	cdq
	idiv	ebp
	mov	DWORD PTR -8+[esp+24], eax
	mov	eax, 2097151				; 001fffffH
	cdq
	idiv	DWORD PTR 20+[esp+20]
$L134437:
	movzx	ebp, BYTE PTR [esi+3]
	shl	ebp, 24					; 00000018H
	cmp	ebp, -2147483648			; 80000000H
	jb	SHORT $L134443
	mov	ebp, -2147483648			; 80000000H
$L134443:
	movzx	edi, BYTE PTR [esi]
	imul	edi, DWORD PTR 8+[esp+20]
	cmp	edi, 2080374784				; 7c000000H
	jb	SHORT $L134447
	mov	edi, 2080374784				; 7c000000H
$L134447:
	movzx	ecx, BYTE PTR [esi+1]
	imul	ecx, DWORD PTR -8+[esp+24]
	cmp	ecx, 65011712				; 03e00000H
	jb	SHORT $L134451
	mov	ecx, 65011712				; 03e00000H
$L134451:
	movzx	edx, BYTE PTR [esi+2]
	imul	edx, eax
	cmp	edx, 2031616				; 001f0000H
	jb	SHORT $L134455
	mov	edx, 2031616				; 001f0000H
$L134455:
	and	ecx, 65011712				; 03e00000H
	and	ebp, -2147418113			; 8000ffffH
	or	ecx, ebp
	and	edx, 2031616				; 001f0000H
	or	ecx, edx
	and	edi, 2080374784				; 7c000000H
	or	ecx, edi
	shr	ecx, 16					; 00000010H
	mov	DWORD PTR [ebx], ecx
	mov	ecx, DWORD PTR _End$134436[esp+24]
	add	esi, 4
	add	ebx, 4
	cmp	esi, ecx
	jb	$L134437
$L134439:

; 621  : 			if( PolyFlags & PF_Masked )

	test	BYTE PTR _PolyFlags$[esp+20], 2
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	je	SHORT $L123044

; 622  : 				AlphaPalette[0] = 0; //0x3DEF;

	mov	eax, DWORD PTR 12+[esp+4]
	mov	DWORD PTR [eax], 0
$L123044:

; 623  : 		}

	add	esp, 8
	ret	16					; 00000010H
?BeginUpload@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ENDP ; UD3DRenderDevice::FTexFiller1555_P8::BeginUpload
_TEXT	ENDS
EXTRN	__imp_?Destroy@UObject@@UAEXXZ:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Destroy@UD3DRenderDevice@@UAEXXZ
_TEXT	SEGMENT
?Destroy@UD3DRenderDevice@@UAEXXZ PROC NEAR		; UD3DRenderDevice::Destroy, COMDAT
; _this$ = ecx

; 821  : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 822  : 		QueueParticleShutdown();

	mov	eax, DWORD PTR [esi+675228]
	xor	ebx, ebx
	test	eax, eax
	jle	SHORT $L134489
	push	edi
	xor	edi, edi
$L134487:
	mov	eax, DWORD PTR [esi+675224]
	mov	edx, DWORD PTR [eax+edi+4]
	add	eax, edi
	test	edx, edx
	je	SHORT $L134488
	mov	ecx, DWORD PTR [eax+12]
	test	ecx, ecx
	je	SHORT $L134488
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR [eax+8]
$L134488:
	mov	eax, DWORD PTR [esi+675228]
	inc	ebx
	add	edi, 16					; 00000010H
	cmp	ebx, eax
	jl	SHORT $L134487
	pop	edi
$L134489:

; 823  : 
; 824  : 		// Punt to my superclass:  FIXME: don't think this is a good idea with virtual destructors.
; 825  : 		Super::Destroy();

	mov	ecx, esi
	pop	esi
	pop	ebx
	jmp	DWORD PTR __imp_?Destroy@UObject@@UAEXXZ
?Destroy@UD3DRenderDevice@@UAEXXZ ENDP			; UD3DRenderDevice::Destroy
_TEXT	ENDS
PUBLIC	?InitD3D@UD3DRenderDevice@@SIXXZ		; UD3DRenderDevice::InitD3D
PUBLIC	??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
PUBLIC	??_C@_0CL@LFAA@Direct3D8?$DNDirect3DCreate8?$CID3D_SD@ ; `string'
PUBLIC	??_C@_1DI@KLIH@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe@ ; `string'
PUBLIC	??_C@_1NE@JBN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1DA@PCNO@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs@ ; `string'
PUBLIC	??_C@_1DG@FNMM@?$AAN?$AAo?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs@ ; `string'
PUBLIC	??_C@_1BA@DMBD@?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1MC@CDHI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1FG@EPEG@?$AAD?$AAu?$AAk?$AAe?$AAF?$AAo?$AAr?$AAe?$AAv?$AAe?$AAr?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD@ ; `string'
PUBLIC	??_C@_1ME@PLCP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
EXTRN	__imp_?Logf@FOutputDevice@@QAAXPBGZZ:NEAR
EXTRN	__imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ:NEAR
EXTRN	_Direct3DCreate8@4:NEAR
EXTRN	?DXGetErrorString8W@@YGPBGJ@Z:NEAR		; DXGetErrorString8W
EXTRN	__imp_?GLog@@3PAVFOutputDevice@@A:DWORD
EXTRN	__imp_?appFailAssert@@YAXPBD0H@Z:NEAR
EXTRN	__imp_?appFromAnsi@@YAPBGPBD@Z:NEAR
EXTRN	__imp_?appStrstr@@YAPAGPBG0@Z:NEAR
EXTRN	__imp_?Add@FArray@@QAEHHH@Z:NEAR
EXTRN	__imp_?Realloc@FArray@@IAEXH@Z:NEAR
_BSS	SEGMENT
_Direct3D8 DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ DB 'D:\DEV\DNF2001'
	DB	'\Stable\D3DDrv\Src\Direct3D8.cpp', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CL@LFAA@Direct3D8?$DNDirect3DCreate8?$CID3D_SD@
_DATA	SEGMENT
??_C@_0CL@LFAA@Direct3D8?$DNDirect3DCreate8?$CID3D_SD@ DB 'Direct3D8=Dire'
	DB	'ct3DCreate8(D3D_SDK_VERSION)', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DI@KLIH@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe@
_DATA	SEGMENT
??_C@_1DI@KLIH@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe@ DB 'D'
	DB	00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3', 00H
	DB	'D', 00H, ' ', 00H, 'a', 00H, 'd', 00H, 'a', 00H, 'p', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, ':'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1NE@JBN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1NE@JBN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3'
	DB	00H, 'D', 00H, '8', 00H, '-', 00H, '>', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'A', 00H, 'd', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'I', 00H, 'd', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'i', 00H, 'f', 00H, 'i', 00H, 'e', 00H, 'r', 00H, '(', 00H, 'I'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ',', 00H, 'D', 00H
	DB	'3', 00H, 'D', 00H, 'E', 00H, 'N', 00H, 'U', 00H, 'M', 00H, '_'
	DB	00H, 'N', 00H, 'O', 00H, '_', 00H, 'W', 00H, 'H', 00H, 'Q', 00H
	DB	'L', 00H, '_', 00H, 'L', 00H, 'E', 00H, 'V', 00H, 'E', 00H, 'L'
	DB	00H, ',', 00H, '&', 00H, 'A', 00H, 'd', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'I', 00H, 'd', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, 'i', 00H, 'f', 00H, 'i', 00H, 'e', 00H, 'r', 00H
	DB	')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '%', 00H, 's'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DA@PCNO@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs@
_DATA	SEGMENT
??_C@_1DA@PCNO@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs@ DB 'A'
	DB	00H, 'd', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'D', 00H, 'e', 00H, 't', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	'/', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DG@FNMM@?$AAN?$AAo?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs@
_DATA	SEGMENT
??_C@_1DG@FNMM@?$AAN?$AAo?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs@ DB 'N'
	DB	00H, 'o', 00H, ' ', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'a', 00H, 'd'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'e', 00H, 'r', 00H, 's', 00H
	DB	' ', 00H, 'f', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BA@DMBD@?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AA?$AA@
_DATA	SEGMENT
??_C@_1BA@DMBD@?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AA?$AA@ DB 'P', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1MC@CDHI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1MC@CDHI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3'
	DB	00H, 'D', 00H, '8', 00H, '-', 00H, '>', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e'
	DB	00H, 'C', 00H, 'a', 00H, 'p', 00H, 's', 00H, '(', 00H, 'B', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, 'A', 00H, 'd', 00H, 'a', 00H, 'p'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'I', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'x', 00H, ',', 00H, 'D', 00H, '3', 00H, 'D', 00H, 'D'
	DB	00H, 'E', 00H, 'V', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'_', 00H, 'H', 00H, 'A', 00H, 'L', 00H, ',', 00H, '&', 00H, 'D'
	DB	00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'C', 00H
	DB	'a', 00H, 'p', 00H, 's', 00H, '8', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1FG@EPEG@?$AAD?$AAu?$AAk?$AAe?$AAF?$AAo?$AAr?$AAe?$AAv?$AAe?$AAr?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD@
_DATA	SEGMENT
??_C@_1FG@EPEG@?$AAD?$AAu?$AAk?$AAe?$AAF?$AAo?$AAr?$AAe?$AAv?$AAe?$AAr?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD@ DB 'D'
	DB	00H, 'u', 00H, 'k', 00H, 'e', 00H, 'F', 00H, 'o', 00H, 'r', 00H
	DB	'e', 00H, 'v', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3', 00H, 'D', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r'
	DB	00H, 't', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, '.', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1ME@PLCP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1ME@PLCP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3'
	DB	00H, 'D', 00H, '8', 00H, '-', 00H, '>', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'A', 00H, 'd', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H
	DB	'a', 00H, 'y', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '('
	DB	00H, 'B', 00H, 'e', 00H, 's', 00H, 't', 00H, 'A', 00H, 'd', 00H
	DB	'a', 00H, 'p', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'I', 00H, 'n'
	DB	00H, 'd', 00H, 'e', 00H, 'x', 00H, ',', 00H, '&', 00H, 'O', 00H
	DB	'r', 00H, 'i', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 'l'
	DB	00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?InitD3D@UD3DRenderDevice@@SIXXZ
_TEXT	SEGMENT
_AdapterIdentifier$123143 = -1068
_A$ = -1084
?InitD3D@UD3DRenderDevice@@SIXXZ PROC NEAR		; UD3DRenderDevice::InitD3D, COMDAT

; 830  : 		// Have we already been initialized?
; 831  : 		if(Direct3D8) 

	mov	eax, DWORD PTR _Direct3D8
	sub	esp, 1084				; 0000043cH
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	jne	$L123193

; 832  : 			return;
; 833  : 
; 834  : 		// Create the Direct3D object.
; 835  : 		verify(Direct3D8=Direct3DCreate8(D3D_SDK_VERSION));

	push	120					; 00000078H
	call	_Direct3DCreate8@4
	cmp	eax, ebx
	mov	DWORD PTR _Direct3D8, eax
	jne	SHORT $L123134
	push	835					; 00000343H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0CL@LFAA@Direct3D8?$DNDirect3DCreate8?$CID3D_SD@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	eax, DWORD PTR _Direct3D8
	add	esp, 12					; 0000000cH
$L123134:

; 836  : 
; 837  : 		// Enumerate Direct3D adapters.
; 838  : 		INT	NumAdapters = Direct3D8->GetAdapterCount();

	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	esi
	push	edi
	push	eax
	call	DWORD PTR [ecx+16]
	mov	ebp, eax

; 839  : 		Adapters.Empty(NumAdapters);

	push	1068					; 0000042cH
	mov	ecx, OFFSET FLAT:?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	mov	DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+4, ebx
	mov	DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+8, ebp
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z

; 840  : 
; 841  : 		debugf(NAME_Init,TEXT("Direct3D adapters detected:"));

	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1DI@KLIH@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe@ ; `string'
	push	762					; 000002faH
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 12					; 0000000cH

; 842  : 
; 843  : 		for(INT Index=0;Index<NumAdapters;Index++)

	cmp	ebp, ebx
	jle	$L123142

; 885  : 	}

	npad	2
$L123144:

; 844  : 		{
; 845  : 			D3DADAPTER_IDENTIFIER8 AdapterIdentifier;
; 846  : 
; 847  : 			D3D_CHECK(Direct3D8->GetAdapterIdentifier(Index,D3DENUM_NO_WHQL_LEVEL,&AdapterIdentifier));

	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _AdapterIdentifier$123143[esp+1100]
	push	edx
	push	2
	push	ebx
	push	eax
	call	DWORD PTR [ecx+20]
	test	eax, eax
	jge	SHORT $L134631
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	esi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	push	eax
	push	847					; 0000034fH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	esi
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1NE@JBN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
	jmp	SHORT $L123145
$L134631:
	mov	esi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
$L123145:

; 848  : 
; 849  : 			debugf(TEXT("Adaptor Detected: %s/%s"),appFromAnsi(AdapterIdentifier.Driver),appFromAnsi(AdapterIdentifier.Description));

	lea	edx, DWORD PTR _AdapterIdentifier$123143[esp+1612]
	push	edx
	call	esi
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _AdapterIdentifier$123143[esp+1104]
	push	eax
	call	esi
	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1DA@PCNO@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 16					; 00000010H

; 850  : 			Adapters.AddItem(AdapterIdentifier);

	push	1068					; 0000042cH
	push	1
	mov	ecx, OFFSET FLAT:?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	edx, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	mov	edi, eax
	imul	edi, 1068				; 0000042cH
	add	edi, edx
	inc	ebx
	cmp	ebx, ebp
	mov	ecx, 267				; 0000010bH
	lea	esi, DWORD PTR _AdapterIdentifier$123143[esp+1100]
	rep movsd
	jl	$L123144
$L123142:

; 851  : 		}
; 852  : 
; 853  : 		if(!Adapters.Num())

	mov	eax, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+4
	test	eax, eax
	jne	SHORT $L123152

; 854  : 			appErrorf(TEXT("No Direct3D adapters found"));

	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1DG@FNMM@?$AAN?$AAo?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L123152:

; 855  : 
; 856  : 		// Find best Direct3D adapter.
; 857  : 		for(Index = 0;Index < Adapters.Num();Index++)

	mov	eax, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+4
	xor	edi, edi
	test	eax, eax
	jle	SHORT $L123159
	mov	ebx, DWORD PTR __imp_?appStrstr@@YAPAGPBG0@Z
	xor	esi, esi

; 885  : 	}

	npad	6

; 855  : 
; 856  : 		// Find best Direct3D adapter.
; 857  : 		for(Index = 0;Index < Adapters.Num();Index++)

$L123154:

; 858  : 			if(appStrstr(appFromAnsi(Adapters(Index).Description),TEXT("Primary")))

	mov	edx, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	lea	eax, DWORD PTR [esi+edx+512]
	push	OFFSET FLAT:??_C@_1BA@DMBD@?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AA?$AA@ ; `string'
	push	eax
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	call	ebx
	add	esp, 8
	test	eax, eax
	je	SHORT $L123155

; 859  : 				BestAdapterIndex = Index;

	mov	DWORD PTR ?BestAdapterIndex@@3HA, edi	; BestAdapterIndex
$L123155:

; 855  : 
; 856  : 		// Find best Direct3D adapter.
; 857  : 		for(Index = 0;Index < Adapters.Num();Index++)

	mov	eax, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+4
	inc	edi
	add	esi, 1068				; 0000042cH
	cmp	edi, eax
	jl	SHORT $L123154

; 885  : 	}

	npad	4
$L123159:

; 860  : 
; 861  : 		// Get the Direct3D caps for the best adapter.
; 862  : 		D3D_CHECK(Direct3D8->GetDeviceCaps(BestAdapterIndex,D3DDEVTYPE_HAL,&DeviceCaps8));

	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:?DeviceCaps8@@3U_D3DCAPS8@@A ; DeviceCaps8
	push	1
	push	edx
	push	eax
	call	DWORD PTR [ecx+52]
	test	eax, eax
	jge	SHORT $L123160
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	862					; 0000035eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MC@CDHI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L123160:

; 863  : 
; 864  : 		// Get device identifier.
; 865  : 		// szDriver, szDescription aren't guaranteed consistent (might change by mfgr, distrubutor, language, etc). Don't do any compares on these.
; 866  : 		// liDriverVersion is safe to do QWORD comparisons on.
; 867  : 		// User has changed drivers/cards iff guidDeviceIdentifier changes.
; 868  : 		DeviceIdentifier = Adapters(BestAdapterIndex);

	mov	esi, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	edi, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	imul	esi, 1068				; 0000042cH

; 869  : 
; 870  : 		debugf(NAME_Init,TEXT("DukeForever Direct3D support initializing."));

	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	add	esi, edi
	mov	ecx, 267				; 0000010bH
	mov	edi, OFFSET FLAT:?DeviceIdentifier@@3U_D3DADAPTER_IDENTIFIER8@@A ; DeviceIdentifier
	push	OFFSET FLAT:??_C@_1FG@EPEG@?$AAD?$AAu?$AAk?$AAe?$AAF?$AAo?$AAr?$AAe?$AAv?$AAe?$AAr?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD@ ; `string'
	rep movsd
	mov	eax, DWORD PTR [edx]
	push	762					; 000002faH
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 12					; 0000000cH

; 871  : 
; 872  : 		// Init pyramic-compressed scaling tables.
; 873  : 		for( INT A=0; A<128; A++ )

	xor	ebp, ebp
	xor	edx, edx
	mov	DWORD PTR _A$[esp+1100], edx
$L123168:

; 874  : 		{
; 875  : 			for( INT B=0; B<=A; B++ )

	cmp	edx, ebp
	jl	$L123169
	lea	ecx, DWORD PTR [edx+1]
	mov	eax, ecx
	imul	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	shl	eax, 1
	mov	DWORD PTR -1076+[esp+1100], ebp
	mov	DWORD PTR -1080+[esp+1100], ebp
	lea	esi, DWORD PTR ?BScale@@3PAGA[eax]
	lea	ebx, DWORD PTR ?GScale@@3PAGA[eax]
	lea	edi, DWORD PTR ?RScale@@3PAGA[eax]
	mov	DWORD PTR -1072+[esp+1100], ecx
$L123172:

; 876  : 			{
; 877  : 				INT M=Max(A,1);

	mov	ecx, DWORD PTR _A$[esp+1100]
	cmp	ecx, 1
	jge	SHORT $L134587
	mov	ecx, 1
$L134587:

; 878  : 				RScale[PYR(A)+B] = (Min((B*0x08000)/M,0x7C00) & 0xf800);

	mov	eax, DWORD PTR -1080+[esp+1100]
	cdq
	idiv	ecx
	cmp	eax, 31744				; 00007c00H
	jle	SHORT $L134594
	mov	eax, 31744				; 00007c00H
$L134594:
	and	eax, 63488				; 0000f800H
	mov	WORD PTR [edi], ax

; 879  : 				GScale[PYR(A)+B] = (Min((B*0x00400)/M,0x03e0) & 0x07e0);

	mov	eax, ebp
	cdq
	idiv	ecx
	cmp	eax, 992				; 000003e0H
	jle	SHORT $L134602
	mov	eax, 992				; 000003e0H
$L134602:
	and	eax, 2016				; 000007e0H
	mov	WORD PTR [ebx], ax

; 880  : 				BScale[PYR(A)+B] = (Min((B*0x00020)/M,0x001f) & 0x001f);

	mov	eax, DWORD PTR -1076+[esp+1100]
	cdq
	idiv	ecx
	cmp	eax, 31					; 0000001fH
	jle	SHORT $L134610
	mov	eax, 31					; 0000001fH
$L134610:
	mov	ecx, DWORD PTR -1076+[esp+1100]
	and	eax, 31					; 0000001fH
	mov	WORD PTR [esi], ax
	add	DWORD PTR -1080+[esp+1100], 32768	; 00008000H
	mov	eax, DWORD PTR -1072+[esp+1100]
	add	ecx, 32					; 00000020H
	add	edi, 2
	add	ebx, 2
	add	esi, 2
	add	ebp, 1024				; 00000400H
	dec	eax
	mov	DWORD PTR -1076+[esp+1100], ecx
	mov	DWORD PTR -1072+[esp+1100], eax
	jne	$L123172
	mov	edx, DWORD PTR _A$[esp+1100]
	xor	ebp, ebp
$L123169:
	inc	edx
	cmp	edx, 128				; 00000080H
	mov	DWORD PTR _A$[esp+1100], edx
	jl	$L123168

; 881  : 			}
; 882  : 		}
; 883  : 
; 884  : 		D3D_CHECK(Direct3D8->GetAdapterDisplayMode(BestAdapterIndex,&OriginalDisplayMode));

	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:?OriginalDisplayMode@@3U_D3DDISPLAYMODE@@A ; OriginalDisplayMode
	push	edx
	push	eax
	call	DWORD PTR [ecx+32]
	pop	edi
	pop	esi
	cmp	eax, ebp
	pop	ebp
	jge	SHORT $L123193
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	884					; 00000374H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1ME@PLCP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L123193:
	pop	ebx

; 885  : 	}

	add	esp, 1084				; 0000043cH
	ret	0
?InitD3D@UD3DRenderDevice@@SIXXZ ENDP			; UD3DRenderDevice::InitD3D
_TEXT	ENDS
PUBLIC	?Add@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEHHH@Z ; TArray<_D3DADAPTER_IDENTIFIER8>::Add
EXTRN	__imp_?appStrlen@@YAHPBG@Z:NEAR
EXTRN	__imp_?Empty@FArray@@QAEXHH@Z:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Init@UD3DRenderDevice@@UAIHPAVUViewport@@HHHH@Z
_TEXT	SEGMENT
_InViewport$ = -1072
_NewX$ = 8
_NewY$ = 12
_NewColorBytes$ = 16
_Fullscreen$ = 20
_this$ = -1080
_AdapterIdentifier$134712 = -1068
_A$134728 = -1088
$T134793 = -1084
$T134794 = -1092
$T134808 = -1088
?Init@UD3DRenderDevice@@UAIHPAVUViewport@@HHHH@Z PROC NEAR ; UD3DRenderDevice::Init, COMDAT
; _this$ = ecx
; _InViewport$ = edx

; 888  : 	{

	sub	esp, 1092				; 00000444H
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 889  : 		DescFlags=RDDESCF_Certified;

	mov	DWORD PTR [edi+64], 1

; 890  : 
; 891  : 		// Ensure that D3D has been properly initialized:
; 892  : 		InitD3D();

	mov	eax, DWORD PTR _Direct3D8
	test	eax, eax
	mov	DWORD PTR _InViewport$[esp+1104], edx
	mov	DWORD PTR _this$[esp+1104], edi
	jne	$L134738
	push	120					; 00000078H
	call	_Direct3DCreate8@4
	test	eax, eax
	mov	DWORD PTR _Direct3D8, eax
	jne	SHORT $L134706
	push	835					; 00000343H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0CL@LFAA@Direct3D8?$DNDirect3DCreate8?$CID3D_SD@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	eax, DWORD PTR _Direct3D8
	add	esp, 12					; 0000000cH
$L134706:
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	eax
	call	DWORD PTR [ecx+16]
	mov	ebp, eax
	push	ebp
	push	1068					; 0000042cH
	mov	ecx, OFFSET FLAT:?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1DI@KLIH@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe@ ; `string'
	push	762					; 000002faH
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 12					; 0000000cH
	xor	ebx, ebx
	test	ebp, ebp
	jle	$L134711
$L134713:
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _AdapterIdentifier$134712[esp+1108]
	push	edx
	push	2
	push	ebx
	push	eax
	call	DWORD PTR [ecx+20]
	test	eax, eax
	jge	SHORT $L134825
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	esi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	push	eax
	push	847					; 0000034fH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	esi
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1NE@JBN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
	jmp	SHORT $L134714
$L134825:
	mov	esi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
$L134714:
	lea	edx, DWORD PTR _AdapterIdentifier$134712[esp+1620]
	push	edx
	call	esi
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _AdapterIdentifier$134712[esp+1112]
	push	eax
	call	esi
	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1DA@PCNO@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 16					; 00000010H
	push	1
	push	1
	mov	ecx, OFFSET FLAT:?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	call	?Add@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEHHH@Z ; TArray<_D3DADAPTER_IDENTIFIER8>::Add
	mov	edx, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	mov	edi, eax
	imul	edi, 1068				; 0000042cH
	add	edi, edx
	inc	ebx
	cmp	ebx, ebp
	mov	ecx, 267				; 0000010bH
	lea	esi, DWORD PTR _AdapterIdentifier$134712[esp+1108]
	rep movsd
	jl	$L134713
$L134711:
	mov	eax, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+4
	test	eax, eax
	jne	SHORT $L134718
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1DG@FNMM@?$AAN?$AAo?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L134718:
	mov	eax, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+4
	xor	edi, edi
	test	eax, eax
	jle	SHORT $L134723
	mov	ebx, DWORD PTR __imp_?appStrstr@@YAPAGPBG0@Z
	xor	esi, esi

; 901  : 	}

	npad	6

; 890  : 
; 891  : 		// Ensure that D3D has been properly initialized:
; 892  : 		InitD3D();

$L134719:
	mov	edx, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	lea	eax, DWORD PTR [esi+edx+512]
	push	OFFSET FLAT:??_C@_1BA@DMBD@?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AA?$AA@ ; `string'
	push	eax
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	call	ebx
	add	esp, 8
	test	eax, eax
	je	SHORT $L134720
	mov	DWORD PTR ?BestAdapterIndex@@3HA, edi	; BestAdapterIndex
$L134720:
	mov	eax, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+4
	inc	edi
	add	esi, 1068				; 0000042cH
	cmp	edi, eax
	jl	SHORT $L134719

; 901  : 	}

	npad	4

; 890  : 
; 891  : 		// Ensure that D3D has been properly initialized:
; 892  : 		InitD3D();

$L134723:
	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:?DeviceCaps8@@3U_D3DCAPS8@@A ; DeviceCaps8
	push	1
	push	edx
	push	eax
	call	DWORD PTR [ecx+52]
	test	eax, eax
	jge	SHORT $L134724
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	862					; 0000035eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MC@CDHI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L134724:
	mov	esi, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	edi, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	imul	esi, 1068				; 0000042cH
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	add	esi, edi
	mov	ecx, 267				; 0000010bH
	mov	edi, OFFSET FLAT:?DeviceIdentifier@@3U_D3DADAPTER_IDENTIFIER8@@A ; DeviceIdentifier
	push	OFFSET FLAT:??_C@_1FG@EPEG@?$AAD?$AAu?$AAk?$AAe?$AAF?$AAo?$AAr?$AAe?$AAv?$AAe?$AAr?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD@ ; `string'
	rep movsd
	mov	eax, DWORD PTR [edx]
	push	762					; 000002faH
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 12					; 0000000cH
	xor	edx, edx
	mov	DWORD PTR _A$134728[esp+1108], edx
$L134729:
	xor	ebp, ebp
	cmp	edx, ebp
	jl	$L134730
	lea	ecx, DWORD PTR [edx+1]
	mov	eax, ecx
	imul	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	shl	eax, 1
	mov	DWORD PTR -1092+[esp+1108], ebp
	mov	DWORD PTR -1076+[esp+1108], ebp
	lea	esi, DWORD PTR ?BScale@@3PAGA[eax]
	lea	ebx, DWORD PTR ?GScale@@3PAGA[eax]
	lea	edi, DWORD PTR ?RScale@@3PAGA[eax]
	mov	DWORD PTR -1084+[esp+1108], ecx
$L134733:
	mov	ecx, DWORD PTR _A$134728[esp+1108]
	cmp	ecx, 1
	jge	SHORT $L134768
	mov	ecx, 1
$L134768:
	mov	eax, DWORD PTR -1076+[esp+1108]
	cdq
	idiv	ecx
	cmp	eax, 31744				; 00007c00H
	jle	SHORT $L134772
	mov	eax, 31744				; 00007c00H
$L134772:
	and	eax, 63488				; 0000f800H
	mov	WORD PTR [edi], ax
	mov	eax, ebp
	cdq
	idiv	ecx
	cmp	eax, 992				; 000003e0H
	jle	SHORT $L134776
	mov	eax, 992				; 000003e0H
$L134776:
	and	eax, 2016				; 000007e0H
	mov	WORD PTR [ebx], ax
	mov	eax, DWORD PTR -1092+[esp+1108]
	cdq
	idiv	ecx
	cmp	eax, 31					; 0000001fH
	jle	SHORT $L134780
	mov	eax, 31					; 0000001fH
$L134780:
	mov	ecx, DWORD PTR -1092+[esp+1108]
	and	eax, 31					; 0000001fH
	mov	WORD PTR [esi], ax
	add	DWORD PTR -1076+[esp+1108], 32768	; 00008000H
	mov	eax, DWORD PTR -1084+[esp+1108]
	add	ecx, 32					; 00000020H
	add	edi, 2
	add	ebx, 2
	add	esi, 2
	add	ebp, 1024				; 00000400H
	dec	eax
	mov	DWORD PTR -1092+[esp+1108], ecx
	mov	DWORD PTR -1084+[esp+1108], eax
	jne	$L134733
	mov	edx, DWORD PTR _A$134728[esp+1108]
$L134730:
	inc	edx
	cmp	edx, 128				; 00000080H
	mov	DWORD PTR _A$134728[esp+1108], edx
	jl	$L134729
	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:?OriginalDisplayMode@@3U_D3DDISPLAYMODE@@A ; OriginalDisplayMode
	push	edx
	push	eax
	call	DWORD PTR [ecx+32]
	test	eax, eax
	pop	ebp
	jge	SHORT $L134830
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	884					; 00000374H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1ME@PLCP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L134830:
	mov	edi, DWORD PTR _this$[esp+1104]
$L134738:

; 893  : 
; 894  : 		Description=appFromAnsi(DeviceIdentifier.Description);

	push	OFFSET FLAT:?DeviceIdentifier@@3U_D3DADAPTER_IDENTIFIER8@@A+512
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR [edi+52]
	lea	esi, DWORD PTR [edi+52]
	add	esp, 4
	cmp	ecx, eax
	mov	DWORD PTR $T134808[esp+1104], eax
	je	SHORT $L134806
	cmp	WORD PTR [eax], 0
	je	SHORT $L134799
	push	eax
	call	DWORD PTR __imp_?appStrlen@@YAHPBG@Z
	add	esp, 4
	inc	eax
	jmp	SHORT $L134800
$L134799:
	xor	eax, eax
$L134800:
	push	2
	mov	ecx, esi
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+4], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L134806
	lea	edx, DWORD PTR [eax+eax]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR $T134794[esp+1104], edx
	mov	DWORD PTR $T134793[esp+1104], eax
	mov	ecx, DWORD PTR $T134794[esp+1104]
	mov	esi, DWORD PTR $T134808[esp+1104]
	mov	edi, DWORD PTR $T134793[esp+1104]
	mov	ebx, ecx
	shr	ecx, 2
	and	ebx, 3
	rep	 movsd
	mov	ecx, ebx
	rep	 movsb
	mov	edi, DWORD PTR _this$[esp+1104]
$L134806:

; 895  : 
; 896  : 		// Local settings:
; 897  : 		Viewport=InViewport;

	mov	ecx, DWORD PTR _InViewport$[esp+1104]

; 898  : 		DistanceFogEnabled=UseDistanceFog=FALSE;
; 899  : 
; 900  : 		return SetRes( NewX, NewY, NewColorBytes, Fullscreen );

	mov	edx, DWORD PTR _NewColorBytes$[esp+1100]
	mov	DWORD PTR [edi+48], ecx
	mov	ecx, DWORD PTR _Fullscreen$[esp+1100]
	push	ecx
	mov	ecx, DWORD PTR _NewY$[esp+1104]
	xor	eax, eax
	push	edx
	mov	edx, DWORD PTR _NewX$[esp+1108]
	mov	DWORD PTR [edi+675196], eax
	mov	DWORD PTR [edi+675192], eax
	mov	eax, DWORD PTR [edi]
	push	ecx
	mov	ecx, edi
	call	DWORD PTR [eax+80]
	pop	edi
	pop	esi
	pop	ebx

; 901  : 	}

	add	esp, 1092				; 00000444H
	ret	16					; 00000010H
?Init@UD3DRenderDevice@@UAIHPAVUViewport@@HHHH@Z ENDP	; UD3DRenderDevice::Init
_TEXT	ENDS
PUBLIC	??_C@_1FE@FDHJ@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAS?$AAa?$AAf?$AAe?$AAR?$AAe?$AAl@ ; `string'
PUBLIC	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
PUBLIC	?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ; UD3DRenderDevice::ShutdownRenderTargetRes
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	SEGMENT
$T135024 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$T135026 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L134836
$T135025 DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:$T135026
$T135018 DD	019930520H
	DD	02H
	DD	FLAT:$T135024
	DD	01H
	DD	FLAT:$T135025
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_1FE@FDHJ@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAS?$AAa?$AAf?$AAe?$AAR?$AAe?$AAl@
_DATA	SEGMENT
??_C@_1FE@FDHJ@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAS?$AAa?$AAf?$AAe?$AAR?$AAe?$AAl@ DB 'E'
	DB	00H, 'x', 00H, 'c', 00H, 'e', 00H, 'p', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, ' ', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'S'
	DB	00H, 'a', 00H, 'f', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'l', 00H
	DB	'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, '(', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3', 00H, 'D', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '8'
	DB	00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?Exit@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT
_Ramp$135005 = -1552
__$EHRec$ = -16
?Exit@UD3DRenderDevice@@UAIXXZ PROC NEAR		; UD3DRenderDevice::Exit, COMDAT
; _this$ = ecx

; 904  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L135023
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 1540				; 00000604H
	push	ebx
	push	esi
	mov	esi, ecx

; 905  : 		UnSetRes(NULL,0);  

	mov	eax, DWORD PTR [esi+675184]
	test	eax, eax
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	je	SHORT $L134897
	dec	eax
	mov	DWORD PTR [esi+675184], eax
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]
$L134897:
	mov	eax, DWORD PTR [esi]
	xor	edx, edx
	mov	ecx, esi
	call	DWORD PTR [eax+88]
	mov	eax, DWORD PTR [esi+216]
	xor	edi, edi
	test	eax, eax
	jle	SHORT $L134902
	xor	ebx, ebx

; 914  : 		}
; 915  : 	}

	npad	3

; 905  : 		UnSetRes(NULL,0);  

$L134900:
	mov	ecx, DWORD PTR [esi+212]
	add	ecx, ebx
	push	ecx
	mov	ecx, esi
	call	?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ; UD3DRenderDevice::ShutdownRenderTargetRes
	mov	eax, DWORD PTR [esi+216]
	inc	edi
	add	ebx, 20					; 00000014H
	cmp	edi, eax
	jl	SHORT $L134900
$L134902:
	mov	eax, DWORD PTR [esi+19112]
	test	eax, eax
	je	SHORT $L134910
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+19112], 0
$L134910:
	lea	edi, DWORD PTR [esi+16684]
	push	edi
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	lea	ebx, DWORD PTR [esi+16704]
	push	ebx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	lea	eax, DWORD PTR [esi+16724]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	lea	eax, DWORD PTR [esi+16744]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease

; 906  : 
; 907  : 		if(Viewport) Flush(0); // (Unsetres calls flush anyways)

	mov	eax, DWORD PTR [esi+48]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $L123203
	mov	eax, DWORD PTR [esi]
	xor	edx, edx
	mov	ecx, esi
	call	DWORD PTR [eax+88]

; 912  : 			
; 913  : 			SAFETRY(SafeRelease(Direct3DDevice8));

$L135014:

; 914  : 		}
; 915  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L123203:

; 908  : 		else
; 909  : 		{
; 910  : 			CleanupVertexBuffers();

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $L134982
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi], 0
$L134982:
	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $L134988
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [ebx], 0
$L134988:
	mov	eax, DWORD PTR [esi+16724]
	test	eax, eax
	je	SHORT $L134994
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+16724], 0
$L134994:
	mov	eax, DWORD PTR [esi+16744]
	test	eax, eax
	je	SHORT $L135000
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+16744], 0
$L135000:

; 911  : 			RestoreGamma();

	mov	edx, DWORD PTR [esi+19124]
	test	edx, edx
	je	SHORT $L135004
	test	DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+12, 131072 ; 00020000H
	je	SHORT $L135004
	xor	eax, eax

; 914  : 		}
; 915  : 	}

	npad	4

; 911  : 			RestoreGamma();

$L135007:
	mov	ecx, eax
	shl	ecx, 8
	mov	WORD PTR _Ramp$135005[ebp+eax*2+1024], cx
	mov	WORD PTR _Ramp$135005[ebp+eax*2+512], cx
	mov	WORD PTR _Ramp$135005[ebp+eax*2], cx
	inc	eax
	cmp	eax, 256				; 00000100H
	jl	SHORT $L135007
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR _Ramp$135005[ebp]
	push	ecx
	push	1
	push	edx
	call	DWORD PTR [eax+72]
$L135004:

; 912  : 			
; 913  : 			SAFETRY(SafeRelease(Direct3DDevice8));

	mov	eax, DWORD PTR [esi+19124]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	je	$L135014
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]

; 914  : 		}
; 915  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	mov	DWORD PTR [esi+19124], 0
	pop	esi
	mov	DWORD PTR fs:__except_list, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L134836:

; 912  : 			
; 913  : 			SAFETRY(SafeRelease(Direct3DDevice8));

	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1FE@FDHJ@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAS?$AAa?$AAf?$AAe?$AAR?$AAe?$AAl@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	mov	eax, $L135014
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L135023:
	mov	eax, OFFSET FLAT:$T135018
	jmp	___CxxFrameHandler
text$x	ENDS
?Exit@UD3DRenderDevice@@UAIXXZ ENDP			; UD3DRenderDevice::Exit
PUBLIC	??_C@_1EK@CFJJ@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?3?$AAS?$AAh@ ; `string'
PUBLIC	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z	; SafeRelease
PUBLIC	??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
PUBLIC	?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z	; SafeRelease
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	SEGMENT
$T135201 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$T135203 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L135032
$T135202 DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:$T135203
$T135197 DD	019930520H
	DD	02H
	DD	FLAT:$T135201
	DD	01H
	DD	FLAT:$T135202
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_1EK@CFJJ@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?3?$AAS?$AAh@
_DATA	SEGMENT
??_C@_1EK@CFJJ@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?3?$AAS?$AAh@ DB 'U'
	DB	00H, 'D', 00H, '3', 00H, 'D', 00H, 'R', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i'
	DB	00H, 'c', 00H, 'e', 00H, ':', 00H, ':', 00H, 'S', 00H, 'h', 00H
	DB	'u', 00H, 't', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'A'
	DB	00H, 'f', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'E', 00H, 'r', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@
_DATA	SEGMENT
??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ DB 'S'
	DB	00H, 'h', 00H, 'u', 00H, 't', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	'n', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, ':', 00H, ' ', 00H, 'R', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 's'
	DB	00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, '.', 00H, 00H, 00H	; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?ShutdownAfterError@UD3DRenderDevice@@UAEXXZ
_TEXT	SEGMENT
_i$135163 = -24
__$EHRec$ = -16
?ShutdownAfterError@UD3DRenderDevice@@UAEXXZ PROC NEAR	; UD3DRenderDevice::ShutdownAfterError, COMDAT
; _this$ = ecx

; 917  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L135200
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 12					; 0000000cH

; 918  : 		ErrorCalled=true;
; 919  : 		debugf(NAME_Exit, TEXT("UD3DRenderDevice::ShutdownAfterError"));

	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	push	OFFSET FLAT:??_C@_1EK@CFJJ@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?3?$AAS?$AAh@ ; `string'
	mov	esi, ecx
	mov	BYTE PTR _ErrorCalled, 1
	mov	ecx, DWORD PTR [eax]
	push	763					; 000002fbH
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ

; 920  : 		UnSetRes(NULL,0);

	mov	eax, DWORD PTR [esi+675184]
	xor	ebx, ebx
	add	esp, 12					; 0000000cH
	cmp	eax, ebx
	je	SHORT $L135160
	dec	eax
	mov	DWORD PTR [esi+675184], eax
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+140]
$L135160:
	mov	eax, DWORD PTR [esi]
	xor	edx, edx
	mov	ecx, esi
	call	DWORD PTR [eax+88]
	cmp	DWORD PTR [esi+216], ebx
	mov	DWORD PTR _i$135163[ebp], ebx
	jle	SHORT $L135166
	mov	DWORD PTR -20+[ebp], ebx

; 923  : 	}

	npad	2

; 920  : 		UnSetRes(NULL,0);

$L135164:
	mov	edi, DWORD PTR [esi+212]
	mov	ecx, DWORD PTR -20+[ebp]
	mov	eax, DWORD PTR [edi+ecx]
	add	edi, ecx
	cmp	eax, ebx
	jne	SHORT $L135173
	cmp	DWORD PTR [edi+8], ebx
	jne	SHORT $L135175
	cmp	DWORD PTR [edi+4], ebx
	je	SHORT $L135165
$L135175:
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	jmp	SHORT $L135165
$L135173:
	lea	ebx, DWORD PTR [edi+8]
	push	ebx
	call	?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z ; SafeRelease
	add	edi, 4
	push	edi
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	add	esp, 8
	mov	DWORD PTR [ebx], 0
	mov	DWORD PTR [edi], 0
	xor	ebx, ebx
$L135165:
	mov	eax, DWORD PTR _i$135163[ebp]
	mov	edx, DWORD PTR -20+[ebp]
	mov	ecx, DWORD PTR [esi+216]
	inc	eax
	add	edx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$135163[ebp], eax
	mov	DWORD PTR -20+[ebp], edx
	jl	SHORT $L135164
$L135166:
	mov	eax, DWORD PTR [esi+19112]
	cmp	eax, ebx
	je	SHORT $L135179
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+19112], ebx
$L135179:
	lea	edx, DWORD PTR [esi+16684]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	eax, DWORD PTR [esi+16704]
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $L135142
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+16704], ebx
$L135142:
	mov	eax, DWORD PTR [esi+16724]
	cmp	eax, ebx
	je	SHORT $L135148
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+16724], ebx
$L135148:
	mov	eax, DWORD PTR [esi+16744]
	cmp	eax, ebx
	je	SHORT $L135158
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+16744], ebx
$L135158:

; 921  : 
; 922  : 		SAFETRY(SafeRelease(Direct3DDevice8));

	mov	eax, DWORD PTR [esi+19124]
	cmp	eax, ebx
	mov	DWORD PTR __$EHRec$[ebp+12], ebx
	je	SHORT $L135194
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+19124], ebx
$L135194:

; 923  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:__except_list, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L135032:

; 921  : 
; 922  : 		SAFETRY(SafeRelease(Direct3DDevice8));

	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1FE@FDHJ@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAS?$AAa?$AAf?$AAe?$AAR?$AAe?$AAl@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	mov	eax, $L135194
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L135200:
	mov	eax, OFFSET FLAT:$T135197
	jmp	___CxxFrameHandler
text$x	ENDS
?ShutdownAfterError@UD3DRenderDevice@@UAEXXZ ENDP	; UD3DRenderDevice::ShutdownAfterError
PUBLIC	__real@00000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3f70101010101010
PUBLIC	__real@40efffe000000000
PUBLIC	?UpdateGamma@UD3DRenderDevice@@QAEXPAVUViewport@@@Z ; UD3DRenderDevice::UpdateGamma
EXTRN	__CIpow:NEAR
EXTRN	__ftol:NEAR
EXTRN	__imp_?GIsEditor@@3HA:DWORD
;	COMDAT __real@00000000
; File ..\..\Core\Inc\UnTemplate.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f70101010101010
CONST	SEGMENT
__real@3f70101010101010 DQ 03f70101010101010r	; 0.00392157
CONST	ENDS
;	COMDAT __real@40efffe000000000
CONST	SEGMENT
__real@40efffe000000000 DQ 040efffe000000000r	; 65535
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?UpdateGamma@UD3DRenderDevice@@QAEXPAVUViewport@@@Z
_TEXT	SEGMENT
_Viewport$ = 8
_Ramp$123225 = -1536
_x$123226 = -1548
?UpdateGamma@UD3DRenderDevice@@QAEXPAVUViewport@@@Z PROC NEAR ; UD3DRenderDevice::UpdateGamma, COMDAT
; _this$ = ecx

; 927  : 		UBOOL UseWindowedGamma = UseEditorGammaCorrection && GIsEditor;

	mov	eax, DWORD PTR [ecx+19132]
	sub	esp, 1548				; 0000060cH
	test	eax, eax
	je	SHORT $L135208
	mov	eax, DWORD PTR __imp_?GIsEditor@@3HA
	cmp	DWORD PTR [eax], 0
	je	SHORT $L135208
	mov	eax, 1
	jmp	SHORT $L135209
$L135208:
	xor	eax, eax
$L135209:
	push	edi

; 928  : 
; 929  : 		if( Direct3DDevice8 && (ViewportFullscreen||UseWindowedGamma) && (DeviceCaps8.Caps2 & D3DCAPS2_FULLSCREENGAMMA) )

	mov	edi, DWORD PTR [ecx+19124]
	test	edi, edi
	je	$L123221
	mov	edx, DWORD PTR [ecx+16776]
	test	edx, edx
	jne	SHORT $L123222
	test	eax, eax
	je	$L123221
$L123222:
	test	DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+12, 131072 ; 00020000H
	je	$L123221

; 930  : 		{
; 931  : 			FLOAT Brightness = Viewport->GetOuterUClient()->Brightness;
; 932  : 
; 933  : 			Brightness*=2;

	mov	ecx, DWORD PTR _Viewport$[esp+1548]
	mov	edx, DWORD PTR [ecx+24]
	fld	DWORD PTR [edx+112]
	fadd	ST(0), ST(0)

; 934  : 			if(Brightness<=0) Brightness=0.01f;

	fcom	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L123224
	fstp	ST(0)
	fld	DWORD PTR __real@3c23d70a
$L123224:
	fdivr	QWORD PTR __real@3ff0000000000000
	push	esi

; 935  : 			D3DGAMMARAMP Ramp;
; 936  : 			for( INT x=0; x<256; x++ )

	xor	esi, esi
	mov	DWORD PTR _x$123226[esp+1556], esi
	fstp	QWORD PTR -1544+[esp+1556]

; 941  : 		}
; 942  : 	}

	npad	7

; 935  : 			D3DGAMMARAMP Ramp;
; 936  : 			for( INT x=0; x<256; x++ )

$L123227:

; 937  : 			{
; 938  : 					Ramp.red[x] = Ramp.green[x] = Ramp.blue[x] = Clamp<INT>(appPow(x/255.0,1.0/Brightness)*65535.0,0,65535);

	fild	DWORD PTR _x$123226[esp+1556]
	fmul	QWORD PTR __real@3f70101010101010
	fld	QWORD PTR -1544+[esp+1556]
	call	__CIpow
	fmul	QWORD PTR __real@40efffe000000000
	call	__ftol
	test	eax, eax
	jge	SHORT $L135230
	xor	eax, eax
	jmp	SHORT $L135229
$L135230:
	cmp	eax, 65535				; 0000ffffH
	jl	SHORT $L135229
	mov	eax, 65535				; 0000ffffH
$L135229:
	mov	WORD PTR _Ramp$123225[esp+esi*2+2580], ax
	mov	WORD PTR _Ramp$123225[esp+esi*2+2068], ax
	mov	WORD PTR _Ramp$123225[esp+esi*2+1556], ax
	inc	esi
	cmp	esi, 256				; 00000100H
	mov	DWORD PTR _x$123226[esp+1556], esi
	jl	SHORT $L123227

; 939  : 			}
; 940  : 			Direct3DDevice8->SetGammaRamp(D3DSGR_CALIBRATE, &Ramp);

	mov	eax, DWORD PTR [edi]
	lea	ecx, DWORD PTR _Ramp$123225[esp+1556]
	push	ecx
	push	1
	push	edi
	call	DWORD PTR [eax+72]
	pop	esi
$L123221:
	pop	edi

; 941  : 		}
; 942  : 	}

	add	esp, 1548				; 0000060cH
	ret	4
?UpdateGamma@UD3DRenderDevice@@QAEXPAVUViewport@@@Z ENDP ; UD3DRenderDevice::UpdateGamma
_TEXT	ENDS
PUBLIC	?RestoreGamma@UD3DRenderDevice@@QAEXXZ		; UD3DRenderDevice::RestoreGamma
; Function compile flags: /Ogty
;	COMDAT ?RestoreGamma@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT
_Ramp$123238 = -1536
?RestoreGamma@UD3DRenderDevice@@QAEXXZ PROC NEAR	; UD3DRenderDevice::RestoreGamma, COMDAT
; _this$ = ecx

; 946  : 		if( Direct3DDevice8 && (DeviceCaps8.Caps2 & D3DCAPS2_FULLSCREENGAMMA) )

	mov	edx, DWORD PTR [ecx+19124]
	sub	esp, 1536				; 00000600H
	test	edx, edx
	je	SHORT $L123237
	test	DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+12, 131072 ; 00020000H
	je	SHORT $L123237

; 947  : 		{
; 948  : 			D3DGAMMARAMP Ramp;
; 949  : 			for( INT x=0; x<256; x++ )

	xor	eax, eax

; 952  : 		}
; 953  : 	}

	npad	2
$L123240:

; 950  : 				Ramp.red[x] = Ramp.green[x] = Ramp.blue[x] = x << 8;

	mov	ecx, eax
	shl	ecx, 8
	mov	WORD PTR _Ramp$123238[esp+eax*2+2560], cx
	mov	WORD PTR _Ramp$123238[esp+eax*2+2048], cx
	mov	WORD PTR _Ramp$123238[esp+eax*2+1536], cx
	inc	eax
	cmp	eax, 256				; 00000100H
	jl	SHORT $L123240

; 951  : 			Direct3DDevice8->SetGammaRamp(D3DSGR_CALIBRATE, &Ramp);		

	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR _Ramp$123238[esp+1536]
	push	ecx
	push	1
	push	edx
	call	DWORD PTR [eax+72]
$L123237:

; 952  : 		}
; 953  : 	}

	add	esp, 1536				; 00000600H
	ret	0
?RestoreGamma@UD3DRenderDevice@@QAEXXZ ENDP		; UD3DRenderDevice::RestoreGamma
_TEXT	ENDS
PUBLIC	??_C@_1HC@JJLK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_0CM@ILAF@?$CIdwStage?$DO?$DN0?$CJ?$CG?$CG?$CIdwStage?$DMARRAY_COU@ ; `string'
;	COMDAT ??_C@_0CM@ILAF@?$CIdwStage?$DO?$DN0?$CJ?$CG?$CG?$CIdwStage?$DMARRAY_COU@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0CM@ILAF@?$CIdwStage?$DO?$DN0?$CJ?$CG?$CG?$CIdwStage?$DMARRAY_COU@ DB '('
	DB	'dwStage>=0)&&(dwStage<ARRAY_COUNT(Stages))', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1HC@JJLK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1HC@JJLK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'S', 00H, 'a', 00H, 'f', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'l'
	DB	00H, 'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, '(', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-'
	DB	00H, '>', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H
	DB	'r', 00H, 'e', 00H, '8', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?Flush@UD3DRenderDevice@@UAIXH@Z
_TEXT	SEGMENT
_AllowPrecache$ = -1548
_Ramp$123277 = -1536
_x$123279 = -1552
?Flush@UD3DRenderDevice@@UAIXH@Z PROC NEAR		; UD3DRenderDevice::Flush, COMDAT
; _this$ = ecx
; _AllowPrecache$ = edx

; 956  : 	{

	sub	esp, 1552				; 00000610H
	push	ebx
	mov	ebx, ecx

; 957  : 		if( Direct3DDevice8 )

	mov	eax, DWORD PTR [ebx+19124]
	test	eax, eax
	mov	DWORD PTR _AllowPrecache$[esp+1556], edx
	je	$L123245

; 958  : 		{
; 959  : 			for( DWORD i=0; i<DeviceCaps8.MaxSimultaneousTextures; i++ )

	mov	eax, DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+152
	push	ebp
	push	esi
	xor	esi, esi
	test	eax, eax
	push	edi
	jbe	SHORT $L135307
	lea	ebp, DWORD PTR [ebx+16624]
	lea	edi, DWORD PTR [ebx+19712]
$L123247:

; 960  : 			{
; 961  : 				SetTextureNULL(i);

	cmp	esi, 8
	jb	SHORT $L135263
	push	4813					; 000012cdH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0CM@ILAF@?$CIdwStage?$DO?$DN0?$CJ?$CG?$CG?$CIdwStage?$DMARRAY_COU@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L135263:
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	esi
	push	eax
	call	DWORD PTR [ecx+244]
	mov	DWORD PTR [edi], ebp
	mov	eax, DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+152
	inc	esi
	add	edi, 4
	cmp	esi, eax
	jb	SHORT $L123247
$L135307:

; 962  : 			}
; 963  : 
; 964  : 			while(CachedTextures)

	mov	esi, DWORD PTR [ebx+236]
	test	esi, esi
	je	$L123252
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	ebp, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z

; 1009 : 	}

	npad	3

; 962  : 			}
; 963  : 
; 964  : 			while(CachedTextures)

$L123251:

; 965  : 			{
; 966  : 				FTexInfo*	TexInfo = CachedTextures;
; 967  : 
; 968  : 				CachedTextures = TexInfo->NextTexture;

	mov	edx, DWORD PTR [esi+52]
	mov	DWORD PTR [ebx+236], edx

; 969  : 
; 970  : 				TexInfo->Filler->PixelFormat->ActiveRAM=0; 

	mov	eax, DWORD PTR [esi+40]
	mov	edx, DWORD PTR [eax+4]
	xor	ecx, ecx
	mov	DWORD PTR [edx+36], ecx

; 971  : 				TexInfo->Filler->PixelFormat->BinnedRAM=0; 

	mov	eax, DWORD PTR [esi+40]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+24], ecx

; 972  : 				TexInfo->Filler->PixelFormat->Active=0; 

	mov	eax, DWORD PTR [esi+40]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+32], ecx

; 973  : 				TexInfo->Filler->PixelFormat->Binned=0; 

	mov	eax, DWORD PTR [esi+40]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+20], ecx

; 974  : 				if(TexInfo->Texture8)

	mov	eax, DWORD PTR [esi]
	cmp	eax, ecx
	je	SHORT $L123257

; 975  : 					D3D_CHECK(SafeRelease(TexInfo->Texture8));

	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	test	eax, eax
	mov	DWORD PTR [esi], 0
	jge	SHORT $L123257
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	975					; 000003cfH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebp
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HC@JJLK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L123257:

; 976  : 
; 977  : 				SafeDelete(TexInfo);

	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	esi
	call	DWORD PTR [edx+8]
	mov	esi, DWORD PTR [ebx+236]
	test	esi, esi
	jne	$L123251
$L123252:

; 978  : 			};
; 979  : 
; 980  : 			PaletteIndex = 0;

	xor	esi, esi

; 981  : 
; 982  : 			for( i=0; i<ARRAY_COUNT(TextureHash); i++ )
; 983  : 				TextureHash[i]=NULL;

	xor	eax, eax
	lea	edi, DWORD PTR [ebx+240]
	mov	ecx, 4096				; 00001000H
	mov	DWORD PTR [ebx+675160], esi
	rep stosd

; 984  : 
; 985  : 			UBOOL UseWindowedGamma = UseEditorGammaCorrection && GIsEditor;

	cmp	DWORD PTR [ebx+19132], esi
	je	SHORT $L135258
	mov	eax, DWORD PTR __imp_?GIsEditor@@3HA
	cmp	DWORD PTR [eax], esi
	je	SHORT $L135258
	mov	eax, 1
	jmp	SHORT $L135259
$L135258:
	xor	eax, eax
$L135259:

; 986  : 
; 987  : 			if( (ViewportFullscreen||UseWindowedGamma) && DeviceCaps8.Caps2 & D3DCAPS2_FULLSCREENGAMMA)

	cmp	DWORD PTR [ebx+16776], esi
	jne	SHORT $L123275
	cmp	eax, esi
	je	$L123274
$L123275:
	test	DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+12, 131072 ; 00020000H
	je	$L123274

; 988  : 			{
; 989  : 				FLOAT Brightness = Viewport->GetOuterUClient()->Brightness;
; 990  : 
; 991  : 				D3DGAMMARAMP Ramp;
; 992  : 				Brightness*=2;

	mov	ecx, DWORD PTR [ebx+48]
	mov	edx, DWORD PTR [ecx+24]
	fld	DWORD PTR [edx+112]
	fadd	ST(0), ST(0)

; 993  : 			    if(Brightness<=0) Brightness=0.01;

	fcom	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L123278
	fstp	ST(0)
	fld	DWORD PTR __real@3c23d70a
$L123278:
	fdivr	QWORD PTR __real@3ff0000000000000

; 994  : 
; 995  : 				for( INT x=0; x<256; x++ )

	mov	DWORD PTR _x$123279[esp+1568], esi
	fstp	QWORD PTR -1544+[esp+1568]

; 1009 : 	}

	npad	6

; 994  : 
; 995  : 				for( INT x=0; x<256; x++ )

$L123280:

; 996  : 				{
; 997  : 						Ramp.red[x] = Ramp.green[x] = Ramp.blue[x] = Clamp<INT>(appPow(x/255.0,1.0/Brightness)*65535.0,0,65535);

	fild	DWORD PTR _x$123279[esp+1568]
	fmul	QWORD PTR __real@3f70101010101010
	fld	QWORD PTR -1544+[esp+1568]
	call	__CIpow
	fmul	QWORD PTR __real@40efffe000000000
	call	__ftol
	test	eax, eax
	jge	SHORT $L135302
	xor	eax, eax
	jmp	SHORT $L135301
$L135302:
	cmp	eax, 65535				; 0000ffffH
	jl	SHORT $L135301
	mov	eax, 65535				; 0000ffffH
$L135301:
	mov	WORD PTR _Ramp$123277[esp+esi*2+2592], ax
	mov	WORD PTR _Ramp$123277[esp+esi*2+2080], ax
	mov	WORD PTR _Ramp$123277[esp+esi*2+1568], ax
	inc	esi
	cmp	esi, 256				; 00000100H
	mov	DWORD PTR _x$123279[esp+1568], esi
	jl	SHORT $L123280

; 998  : 
; 999  : 				}
; 1000 : 				Direct3DDevice8->SetGammaRamp(D3DSGR_CALIBRATE, &Ramp);				

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _Ramp$123277[esp+1568]
	push	edx
	push	1
	push	eax
	call	DWORD PTR [ecx+72]
$L123274:

; 1001 : 			}
; 1002 : 
; 1003 : 			Direct3DDevice8->SetStreamSource(0,NULL,0);

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+332]

; 1004 : 			Direct3DDevice8->SetIndices(NULL,0);

	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+340]
	pop	edi
	pop	esi
	pop	ebp
$L123245:

; 1005 : 		}
; 1006 : 
; 1007 : 		if( AllowPrecache )

	mov	eax, DWORD PTR _AllowPrecache$[esp+1556]
	test	eax, eax
	je	SHORT $L123288

; 1008 : 			PrecacheOnFlip = UsePrecache;

	mov	eax, DWORD PTR [ebx+19152]
	mov	DWORD PTR [ebx+100], eax
$L123288:
	pop	ebx

; 1009 : 	}

	add	esp, 1552				; 00000610H
	ret	0
?Flush@UD3DRenderDevice@@UAIXH@Z ENDP			; UD3DRenderDevice::Flush
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@3f91df46a2529d39
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3f400000
PUBLIC	__real@405ca5dc1a63c1f8
PUBLIC	__real@3f81df46a2529d39
EXTRN	_D3DXMatrixMultiply@12:NEAR
EXTRN	_D3DXMatrixInverse@12:NEAR
;	COMDAT __real@3f800000
; File ..\..\Core\Inc\UnFile.h
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f91df46a2529d39
CONST	SEGMENT
__real@3f91df46a2529d39 DQ 03f91df46a2529d39r	; 0.0174533
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@405ca5dc1a63c1f8
CONST	SEGMENT
__real@405ca5dc1a63c1f8 DQ 0405ca5dc1a63c1f8r	; 114.592
CONST	ENDS
;	COMDAT __real@3f81df46a2529d39
CONST	SEGMENT
__real@3f81df46a2529d39 DQ 03f81df46a2529d39r	; 0.00872665
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?PreRender@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT
_View$ = -64
_wNear$123302 = -76
_wFar$123303 = -72
_NegativeMatrix$123304 = -64
?PreRender@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::PreRender, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 1012 : 	{

	sub	esp, 76					; 0000004cH
	push	ebx
	mov	ebx, ecx
	push	ebp
	mov	ebp, edx
	push	esi
	push	edi

; 1013 : 		// Setup view matrix.
; 1014 : 		memset( &ViewMatrix, 0, sizeof(ViewMatrix));

	lea	esi, DWORD PTR [ebx+19260]
	xor	eax, eax
	mov	ecx, 16					; 00000010H
	mov	edi, esi
	rep stosd

; 1015 : 		ViewMatrix._11 = Frame->Coords.XAxis.X;

	mov	eax, DWORD PTR [ebp+64]
	mov	DWORD PTR [esi], eax

; 1016 : 		ViewMatrix._12 = -Frame->Coords.YAxis.X;
; 1017 : 		ViewMatrix._13 = Frame->Coords.ZAxis.X;
; 1018 : 		ViewMatrix._21 = Frame->Coords.XAxis.Y;
; 1019 : 		ViewMatrix._22 = -Frame->Coords.YAxis.Y;
; 1020 : 		ViewMatrix._23 = Frame->Coords.ZAxis.Y;
; 1021 : 		ViewMatrix._31 = Frame->Coords.XAxis.Z;
; 1022 : 		ViewMatrix._32 = -Frame->Coords.YAxis.Z;
; 1023 : 		ViewMatrix._33 = Frame->Coords.ZAxis.Z;
; 1024 : 		ViewMatrix._41 = Frame->Coords.XAxis | -Frame->Coords.Origin;

	lea	edi, DWORD PTR [ebp+52]
	fld	DWORD PTR [ebp+76]

; 1025 : 		ViewMatrix._42 = Frame->Coords.YAxis | Frame->Coords.Origin;
; 1026 : 		ViewMatrix._43 = Frame->Coords.ZAxis | -Frame->Coords.Origin;
; 1027 : 		ViewMatrix._44 = 1;
; 1028 : 
; 1029 : 		// Setup inverse view matrix.
; 1030 : 		D3DXMatrixInverse( &InvViewMatrix, NULL, &ViewMatrix );

	push	esi
	fchs
	push	0
	fstp	DWORD PTR [ebx+19264]
	mov	ecx, DWORD PTR [ebp+88]
	mov	DWORD PTR [ebx+19268], ecx
	mov	edx, DWORD PTR [ebp+68]
	mov	DWORD PTR [ebx+19276], edx
	fld	DWORD PTR [ebp+80]
	fchs
	fstp	DWORD PTR [ebx+19280]
	mov	eax, DWORD PTR [ebp+92]
	mov	DWORD PTR [ebx+19284], eax
	mov	ecx, DWORD PTR [ebp+72]
	mov	DWORD PTR [ebx+19292], ecx
	fld	DWORD PTR [ebp+84]
	fchs
	lea	eax, DWORD PTR [ebx+19388]
	fstp	DWORD PTR [ebx+19296]
	mov	edx, DWORD PTR [ebp+96]
	mov	DWORD PTR [ebx+19300], edx
	fld	DWORD PTR [edi]
	fchs
	fld	DWORD PTR [edi+4]
	fchs
	fld	DWORD PTR [edi+8]
	fchs
	fmul	DWORD PTR [ebp+72]
	fxch	ST(1)
	fmul	DWORD PTR [ebp+68]
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	DWORD PTR [ebp+64]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR [ebx+19308]
	fld	DWORD PTR [edi+8]
	fmul	DWORD PTR [ebp+84]
	fld	DWORD PTR [edi+4]
	fmul	DWORD PTR [ebp+80]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [ebp+76]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR [ebx+19312]
	fld	DWORD PTR [edi]
	fchs
	fld	DWORD PTR [edi+4]
	fchs
	fld	DWORD PTR [edi+8]
	fchs
	fmul	DWORD PTR [ebp+96]
	fxch	ST(1)
	fmul	DWORD PTR [ebp+92]
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	DWORD PTR [ebp+88]
	mov	DWORD PTR [ebx+19320], 1065353216	; 3f800000H
	faddp	ST(1), ST(0)
	fstp	DWORD PTR [ebx+19316]
	push	eax
	call	_D3DXMatrixInverse@12

; 1031 : 		Direct3DDevice8->SetTransform( D3DTS_VIEW, &ViewMatrix );

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	2
	push	eax
	call	DWORD PTR [ecx+148]

; 1032 : 
; 1033 : 		// ONLY X-movement seems correct...
; 1034 : 		// _Not_ just transpose of the Viewmatrix above ???
; 1035 : 		// Alternative arrangement for vertex shader.
; 1036 : 		// just output Y and Z reversed works!!!
; 1037 : 		FCoords View = Frame->Coords;

	mov	esi, edi
	mov	ecx, 12					; 0000000cH
	lea	edi, DWORD PTR _View$[esp+92]
	rep movsd

; 1038 : 		ViewMatrix4x3._11 =  View.XAxis.X;
; 1039 : 		ViewMatrix4x3._12 =  View.XAxis.Y;
; 1040 : 		ViewMatrix4x3._13 =  View.XAxis.Z;
; 1041 : 		ViewMatrix4x3._14 = -View.XAxis | View.Origin;

	fld	DWORD PTR _View$[esp+104]
	fchs
	fld	DWORD PTR _View$[esp+108]
	fchs
	fld	DWORD PTR _View$[esp+112]
	fchs
	fld	DWORD PTR _View$[esp+100]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _View$[esp+96]
	fmul	ST(0), ST(3)
	mov	eax, DWORD PTR _View$[esp+104]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _View$[esp+108]
	fxch	ST(3)
	lea	edx, DWORD PTR [ebx+19324]
	fmul	DWORD PTR _View$[esp+92]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _View$[esp+112]
	mov	DWORD PTR [ebx+19332], eax
	faddp	ST(3), ST(0)

; 1042 : 		ViewMatrix4x3._21 = -View.YAxis.X;
; 1043 : 		ViewMatrix4x3._22 = -View.YAxis.Y;
; 1044 : 		ViewMatrix4x3._23 = -View.YAxis.Z;
; 1045 : 		ViewMatrix4x3._24 =  View.YAxis | View.Origin;
; 1046 : 		ViewMatrix4x3._31 = -View.ZAxis.X;
; 1047 : 		ViewMatrix4x3._32 = -View.ZAxis.Y;
; 1048 : 		ViewMatrix4x3._33 = -View.ZAxis.Z;
; 1049 : 		ViewMatrix4x3._34 =  View.ZAxis | View.Origin;
; 1050 : 		ViewMatrix4x3._41 = 0.0f;

	xor	eax, eax
	fxch	ST(2)
	mov	DWORD PTR [ebx+19328], ecx
	fstp	DWORD PTR [ebx+19336]
	fstp	ST(1)
	mov	DWORD PTR [ebx+19372], eax
	fstp	ST(0)

; 1051 : 		ViewMatrix4x3._42 = 0.0f;

	mov	DWORD PTR [ebx+19376], eax
	fld	DWORD PTR _View$[esp+116]

; 1052 : 		ViewMatrix4x3._43 = 0.0f;

	mov	DWORD PTR [ebx+19380], eax
	fchs

; 1053 : 		ViewMatrix4x3._44 = 1.0f;

	mov	DWORD PTR [ebx+19384], 1065353216	; 3f800000H
	fstp	DWORD PTR [ebx+19340]
	fld	DWORD PTR _View$[esp+120]
	fchs
	fstp	DWORD PTR [ebx+19344]
	fld	DWORD PTR _View$[esp+124]
	fchs
	fstp	DWORD PTR [ebx+19348]
	fld	DWORD PTR _View$[esp+100]
	fmul	DWORD PTR _View$[esp+124]
	fld	DWORD PTR _View$[esp+96]
	fmul	DWORD PTR _View$[esp+120]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _View$[esp+92]
	fmul	DWORD PTR _View$[esp+116]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR [ebx+19352]
	fld	DWORD PTR _View$[esp+128]
	fchs
	fstp	DWORD PTR [ebx+19356]
	fld	DWORD PTR _View$[esp+132]
	fchs
	fstp	DWORD PTR [ebx+19360]
	fld	DWORD PTR _View$[esp+136]
	fchs
	fstp	DWORD PTR [ebx+19364]
	fld	DWORD PTR _View$[esp+100]
	fmul	DWORD PTR _View$[esp+136]
	fld	DWORD PTR _View$[esp+96]
	fmul	DWORD PTR _View$[esp+132]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _View$[esp+92]
	fmul	DWORD PTR _View$[esp+128]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR [ebx+19368]

; 1054 : 
; 1055 : 		if(Frame->Viewport->IsOrtho())

	mov	eax, DWORD PTR [ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR [ecx+7504]
	cmp	ecx, 13					; 0000000dH
	je	SHORT $L135383
	cmp	ecx, 14					; 0000000eH
	je	SHORT $L135383
	cmp	ecx, 15					; 0000000fH
	jne	SHORT $L123295
$L135383:

; 1056 : 		{
; 1057 : 			FLOAT	Width = Frame->Zoom * Frame->FX2,

	fld	DWORD PTR [ebp+200]

; 1058 : 					Height = Frame->Zoom * Frame->FY2;
; 1059 : 
; 1060 : 			appMemzero( &ProjectionMatrix, sizeof(ProjectionMatrix));

	lea	esi, DWORD PTR [ebx+19452]
	fmul	DWORD PTR [ebp+208]
	mov	ecx, 16					; 00000010H
	fld	DWORD PTR [ebp+204]
	xor	eax, eax
	fmul	DWORD PTR [ebp+208]
	mov	edi, esi

; 1061 : 			ProjectionMatrix._11 = 1.0f / Width;

	fld	DWORD PTR __real@3f800000
	rep stosd
	fdiv	ST(0), ST(2)

; 1062 : 			ProjectionMatrix._22 = 1.0f / Height;
; 1063 : 			ProjectionMatrix._44 = 1.0f;

	mov	DWORD PTR [ebx+19512], 1065353216	; 3f800000H
	fstp	DWORD PTR [esi]
	fld	DWORD PTR __real@3f800000
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [ebx+19472]
	fstp	ST(0)
	fstp	ST(0)

; 1064 : 		}
; 1065 : 		else

	jmp	$L123298
$L123295:

; 1066 : 		{
; 1067 : 			// Compute Hor+ FOV.
; 1068 : 			FLOAT Ratio = (Frame->Viewport->SizeX / (FLOAT)Frame->Viewport->SizeY) / (4 / 3.f);
; 1069 : 			FLOAT FOV   = (180.f / PI) * 2 * appAtan(appTan((Frame->Viewport->Actor->FovAngle * PI / 180.f) / 2) * Ratio);

	mov	ecx, DWORD PTR [eax+48]
	fld	DWORD PTR [ecx+7240]

; 1070 : 
; 1071 : 			// Setup projection matrix.
; 1072 : 			appMemzero( &ProjectionMatrix, sizeof(ProjectionMatrix));

	lea	esi, DWORD PTR [ebx+19452]
	fmul	QWORD PTR __real@3f91df46a2529d39
	mov	ecx, 16					; 00000010H
	mov	edi, esi

; 1073 : 			FLOAT wNear=NEAR_CLIP, wFar=FAR_CLIP;
; 1074 : 			FOV *= PI/360.f;
; 1075 : 			ProjectionMatrix._11 = 1/appTan( FOV );
; 1076 : 			ProjectionMatrix._22 = Frame->FX / appTan( FOV ) / Frame->FY;
; 1077 : 			ProjectionMatrix._33 = wFar / (wFar - wNear);
; 1078 : 			ProjectionMatrix._34 = 1.f;
; 1079 : 			ProjectionMatrix._43 = -ProjectionMatrix._33 * wNear;
; 1080 : 			ProjectionMatrix._44 = 0.f;
; 1081 : 
; 1082 : 			// Hacked part-negative matrix for skeletal -> FIX at skeletal shader(viewmatrix?) level instead!
; 1083 : 			D3DXMATRIX NegativeMatrix;
; 1084 : 			appMemzero( &NegativeMatrix, sizeof(NegativeMatrix) );
; 1085 : 			NegativeMatrix._11 = 1/appTan( FOV );
; 1086 : 			NegativeMatrix._22 = Frame->FX / appTan( FOV ) / Frame->FY;
; 1087 : 			NegativeMatrix._33 =- wFar / (wFar - wNear);
; 1088 : 			NegativeMatrix._34 =- 1.f;
; 1089 : 			NegativeMatrix._43 =- -NegativeMatrix._33 * wNear;
; 1090 : 			NegativeMatrix._44 =- 0.f;
; 1091 : 			D3DXMatrixMultiply(&ProjViewMatrix, &NegativeMatrix, &ViewMatrix4x3);

	push	edx
	fmul	QWORD PTR __real@3fe0000000000000
	lea	edx, DWORD PTR [ebx+19516]
	fptan
	fstp	ST(0)
	fild	DWORD PTR [eax+112]
	fidiv	DWORD PTR [eax+116]
	xor	eax, eax
	rep stosd
	mov	eax, DWORD PTR _NEAR_CLIP
	mov	ecx, DWORD PTR _FAR_CLIP
	mov	DWORD PTR _wFar$123303[esp+96], ecx
	mov	DWORD PTR _wNear$123302[esp+96], eax
	xor	eax, eax
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR _NegativeMatrix$123304[esp+96]
	rep stosd
	lea	ecx, DWORD PTR _NegativeMatrix$123304[esp+96]
	push	ecx
	push	edx
	mov	DWORD PTR _NegativeMatrix$123304[esp+148], -1082130432 ; bf800000H
	mov	DWORD PTR _NegativeMatrix$123304[esp+164], 0
	fmul	DWORD PTR __real@3f400000
	fmulp	ST(1), ST(0)
	fld1
	fpatan
	fmul	QWORD PTR __real@405ca5dc1a63c1f8
	fmul	QWORD PTR __real@3f81df46a2529d39
	fptan
	fstp	ST(0)
	fld	QWORD PTR __real@3ff0000000000000
	fdiv	ST(0), ST(1)
	fst	DWORD PTR -68+[esp+104]
	fstp	DWORD PTR [esi]
	mov	eax, DWORD PTR -68+[esp+104]
	mov	DWORD PTR _NegativeMatrix$123304[esp+104], eax
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR [ebp+184]
	fmul	ST(0), ST(1)
	fdiv	DWORD PTR [ebp+188]
	mov	DWORD PTR [ebx+19496], 1065353216	; 3f800000H
	mov	DWORD PTR [ebx+19512], 0
	fstp	DWORD PTR [ebx+19472]
	fld	DWORD PTR _wFar$123303[esp+104]
	fsub	DWORD PTR _wNear$123302[esp+104]
	fdivr	DWORD PTR _wFar$123303[esp+104]
	fst	DWORD PTR [ebx+19492]
	fld	DWORD PTR _wNear$123302[esp+104]
	fmul	ST(0), ST(1)
	fchs
	fstp	DWORD PTR [ebx+19508]
	fld	DWORD PTR [ebp+184]
	fmul	ST(0), ST(2)
	fdiv	DWORD PTR [ebp+188]
	fstp	DWORD PTR _NegativeMatrix$123304[esp+124]
	fchs
	fstp	DWORD PTR _NegativeMatrix$123304[esp+144]
	fstp	ST(0)
	fld	DWORD PTR _NegativeMatrix$123304[esp+144]
	fmul	DWORD PTR _wNear$123302[esp+104]
	fstp	DWORD PTR _NegativeMatrix$123304[esp+160]
	call	_D3DXMatrixMultiply@12
$L123298:

; 1092 : 		}
; 1093 : 
; 1094 : 		Direct3DDevice8->SetTransform( D3DTS_PROJECTION, &ProjectionMatrix );

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	3
	push	eax
	call	DWORD PTR [ecx+148]

; 1095 : 
; 1096 : 		// disable hardware lighting mode
; 1097 : 		Direct3DDevice8->SetRenderState( D3DRS_LIGHTING, 0 ); 

	mov	ebx, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [ebx]
	push	0
	push	137					; 00000089H
	push	ebx
	call	DWORD PTR [edx+200]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1098 : 	}

	add	esp, 76					; 0000004cH
	ret	0
?PreRender@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z ENDP	; UD3DRenderDevice::PreRender
_TEXT	ENDS
PUBLIC	??_C@_0BA@FEJO@Direct3DDevice8?$AA@		; `string'
PUBLIC	??_C@_1EC@LPJP@?$AAT?$AAe?$AAs?$AAt?$AAC?$AAo?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAe?$AAv?$AAe?$AAl@ ; `string'
PUBLIC	__real@442f0000
PUBLIC	??_C@_1CI@LMHM@?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DI@DLMG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd@ ; `string'
PUBLIC	??_C@_1CO@DHDA@?$AAB?$AAe?$AAg?$AAi?$AAn?$AAS?$AAc?$AAe?$AAn?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AA?$CF@ ; `string'
PUBLIC	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
PUBLIC	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
PUBLIC	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z	; UD3DRenderDevice::SetAlphaBlendEnable
PUBLIC	?SetBlending@UD3DRenderDevice@@QAIXKK@Z		; UD3DRenderDevice::SetBlending
PUBLIC	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z	; UD3DRenderDevice::SetDistanceFog
EXTRN	__imp_??0FColor@@QAE@ABVFPlane@@@Z:NEAR
;	COMDAT __real@442f0000
CONST	SEGMENT
__real@442f0000 DD 0442f0000r			; 700
CONST	ENDS
;	COMDAT ??_C@_0BA@FEJO@Direct3DDevice8?$AA@
_DATA	SEGMENT
??_C@_0BA@FEJO@Direct3DDevice8?$AA@ DB 'Direct3DDevice8', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EC@LPJP@?$AAT?$AAe?$AAs?$AAt?$AAC?$AAo?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAe?$AAv?$AAe?$AAl@
_DATA	SEGMENT
??_C@_1EC@LPJP@?$AAT?$AAe?$AAs?$AAt?$AAC?$AAo?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAe?$AAv?$AAe?$AAl@ DB 'T'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, 'C', 00H, 'o', 00H, 'o', 00H
	DB	'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'v'
	DB	00H, 'e', 00H, 'L', 00H, 'e', 00H, 'v', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CI@LMHM@?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@
_DATA	SEGMENT
??_C@_1CI@LMHM@?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ DB 'R'
	DB	00H, 'e', 00H, 's', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, ' ', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DI@DLMG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd@
_DATA	SEGMENT
??_C@_1DI@DLMG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ' ', 00H, 'm', 00H, 'o', 00H, 'd', 00H
	DB	'e', 00H, '.', 00H, ' ', 00H, '(', 00H, '%', 00H, 's', 00H, ')'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CO@DHDA@?$AAB?$AAe?$AAg?$AAi?$AAn?$AAS?$AAc?$AAe?$AAn?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AA?$CF@
_DATA	SEGMENT
??_C@_1CO@DHDA@?$AAB?$AAe?$AAg?$AAi?$AAn?$AAS?$AAc?$AAe?$AAn?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AA?$CF@ DB 'B'
	DB	00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'S', 00H, 'c', 00H
	DB	'e', 00H, 'n', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	's', 00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?Lock@UD3DRenderDevice@@UAIXVFColor@@MHVFPlane@@11KPAEPAH@Z
_TEXT	SEGMENT
_FogColor$ = 8
_FogDensity$ = 12
_FogDistance$ = -4
_InFlashScale$ = 16
_InFlashFog$ = 32
_ScreenClear$ = 48
_InLockFlags$ = 64
_InHitData$ = 68
_InHitSize$ = 72
$T135442 = 64
_Xor$135451 = -12
_FailCount$ = -8
_D$135513 = 8
_BackBuffer$123342 = 12
_Rect$123343 = 16
?Lock@UD3DRenderDevice@@UAIXVFColor@@MHVFPlane@@11KPAEPAH@Z PROC NEAR ; UD3DRenderDevice::Lock, COMDAT
; _this$ = ecx
; _FogDistance$ = edx

; 1101 : 	{

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	push	edi

; 1102 : 		LockCount++; 

	mov	edi, DWORD PTR [esi+675188]
	mov	DWORD PTR _FogDistance$[esp+28], edx

; 1103 : 		if(!GIsEditor) 
; 1104 : 		{
; 1105 : 			//check(LockCount==1);
; 1106 : 		}
; 1107 : 
; 1108 : 		INT FailCount=0;
; 1109 : 		FrameCounter++;

	mov	edx, DWORD PTR [esi+675104]
	inc	edi
	xor	ebp, ebp
	inc	edx
	mov	DWORD PTR [esi+675188], edi
	mov	DWORD PTR [esi+675104], edx

; 1110 : 
; 1111 : 		// NJS: Deal with multi-viewport strangeness in the editor:
; 1112 : 		if(GIsEditor)

	mov	eax, DWORD PTR __imp_?GIsEditor@@3HA
	cmp	DWORD PTR [eax], ebp
	mov	DWORD PTR _FailCount$[esp+28], ebp
	je	$L135502

; 1113 : 		{			
; 1114 : 			ZBias=-1.f;	// Set ZBias to an invalid state to force it to be reset next time SetZBias is called
; 1115 : 			AlphaBlendEnable=-1;
; 1116 : 			// BeginSceneCount=0;	// Should match up reguardless
; 1117 : 			SrcBlend=(D3DBLEND)0; // Setting Src Blending to an invalid state will force it to be reset next time SetSrcBlend is called.
; 1118 : 			DstBlend=(D3DBLEND)0; // Setting Dst Blending to an invalid state will force it to be reset next time SetSrcBlend is called.
; 1119 : 			SetBlending(0xFFFFFFFF,0xFFFFFFFF);	// NJS: FIXME

	mov	eax, DWORD PTR [esi+19616]
	mov	ebx, DWORD PTR [esi+19620]
	xor	eax, -1073741827			; bffffffdH
	or	edi, -1
	test	ah, 1
	mov	DWORD PTR [esi+675164], -1082130432	; bf800000H
	mov	DWORD PTR [esi+675176], edi
	mov	DWORD PTR [esi+675168], ebp
	mov	DWORD PTR [esi+675172], ebp
	mov	DWORD PTR _Xor$135451[esp+28], eax
	not	ebx
	je	SHORT $L135453
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$135451[esp+28]
$L135453:
	test	bl, 2
	je	SHORT $L135454
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$135451[esp+28]
$L135454:
	test	bl, 8
	je	SHORT $L135455
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$135451[esp+28]
$L135455:
	test	eax, -754972601				; d3000847H
	jne	SHORT $L135457
	test	bl, 113					; 00000071H
	je	$L135493
$L135457:
	test	eax, 268435525				; 10000045H
	jne	SHORT $L135459
	test	bl, 113					; 00000071H
	je	SHORT $L135479
$L135459:
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR _Xor$135451[esp+28]
$L135479:
	test	al, 1
	je	SHORT $L135480
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR _Xor$135451[esp+28]
$L135480:
	test	eax, eax
	jns	SHORT $L135482
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$135451[esp+28]
$L135482:
	test	al, 2
	je	SHORT $L135485
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$135451[esp+28]
$L135485:
	test	ah, 8
	je	SHORT $L135486
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	16					; 00000010H
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	17					; 00000011H
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR _Xor$135451[esp+28]
$L135486:
	test	eax, 1073741824				; 40000000H
	je	SHORT $L135487
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$135451[esp+28]
$L135487:
	test	eax, 50331648				; 03000000H
	je	SHORT $L135493
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	4
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L135493:

; 1120 : 			SetBlending(0,0);					// NJS: FIXME

	push	ebp
	xor	edx, edx
	mov	ecx, esi
	mov	DWORD PTR [esi+19616], -1073741827	; bffffffdH
	mov	DWORD PTR [esi+19620], edi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 1121 : 			SetDistanceFog(true);

	push	1
	mov	ecx, esi
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog

; 1122 : 			SetDistanceFog(false);

	push	ebp
	mov	ecx, esi
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog

; 1123 : 			SetTextureNULL(0);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	ebp
	push	eax
	call	DWORD PTR [ecx+244]

; 1124 : 			SetTextureNULL(1);

	push	ebp
	lea	edi, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+19712], edi
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [edx+244]
	mov	DWORD PTR [esi+19716], edi
$L135502:

; 1125 : 		}
; 1126 : 
; 1127 : 		{
; 1128 : 			DistanceFogColor=FogColor;
; 1129 : 			DistanceFogBegin=FogDistance;

	fild	DWORD PTR _FogDistance$[esp+28]
	mov	eax, DWORD PTR _FogColor$[esp+24]
	mov	DWORD PTR [esi+675208], eax
	fst	DWORD PTR [esi+675200]

; 1130 : 			FLOAT FogDensitySquared=FogDensity*FogDensity;
; 1131 : 			if(!FogDensitySquared) FogDensitySquared=0.001f;
; 1132 : 			if(FogDensity<DistanceFogBegin) DistanceFogEnd=DistanceFogBegin+700.f;

	fld	DWORD PTR _FogDensity$[esp+24]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L123314
	fadd	DWORD PTR __real@442f0000
	fstp	DWORD PTR [esi+675204]

; 1133 : 			else DistanceFogEnd=FogDensity;

	jmp	SHORT $L123315
$L123314:
	mov	ecx, DWORD PTR _FogDensity$[esp+24]
	fstp	ST(0)
	mov	DWORD PTR [esi+675204], ecx
$L123315:

; 1134 : 		}
; 1135 : 
; 1136 : 		UseDistanceFog=(bool)((LockFlags&LOCKR_LightDiminish));

	mov	edx, DWORD PTR [esi+19612]
	shr	edx, 1
	and	edx, 1

; 1137 : 		SetDistanceFog(false);

	push	ebp
	mov	ecx, esi
	mov	DWORD PTR [esi+675196], edx
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog

; 1138 : 
; 1139 : 		// Remember parameters.
; 1140 : 		LockFlags  = InLockFlags;

	mov	eax, DWORD PTR _InLockFlags$[esp+24]

; 1141 : 		FlashScale = InFlashScale;

	mov	edx, DWORD PTR _InFlashScale$[esp+24]
	mov	DWORD PTR [esi+19612], eax
	mov	eax, DWORD PTR _InFlashScale$[esp+28]
	lea	ecx, DWORD PTR [esi+19580]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _InFlashScale$[esp+32]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _InFlashScale$[esp+36]
	mov	DWORD PTR [ecx+8], edx

; 1142 : 		FlashFog   = InFlashFog;

	mov	edx, DWORD PTR _InFlashFog$[esp+24]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _InFlashFog$[esp+28]
	lea	ecx, DWORD PTR [esi+19596]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _InFlashFog$[esp+32]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _InFlashFog$[esp+36]
	mov	DWORD PTR [ecx+8], edx

; 1143 : 
; 1144 : 		// Hit detection.
; 1145 : 		HitCount   = 0;
; 1146 : 		HitData    = InHitData;
; 1147 : 		HitSize    = InHitSize;

	mov	edx, DWORD PTR _InHitSize$[esp+24]
	mov	DWORD PTR [ecx+12], eax

; 1148 : 
; 1149 : 		// Check cooperative level.
; 1150 : 		HRESULT hr=NULL, hr2=NULL;
; 1151 : 		verify(Direct3DDevice8);

	cmp	DWORD PTR [esi+19124], ebp
	mov	ecx, DWORD PTR _InHitData$[esp+24]
	mov	DWORD PTR [esi+675132], ebp
	mov	DWORD PTR [esi+675124], ecx
	mov	DWORD PTR [esi+675128], edx
	jne	SHORT $L123319
	push	1151					; 0000047fH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEJO@Direct3DDevice8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L123319:

; 1152 : 		hr=Direct3DDevice8->TestCooperativeLevel();

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+12]

; 1153 : 		if( hr!=D3D_OK )

	cmp	eax, ebp
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	je	SHORT $L123339

; 1154 : 		{
; 1155 : 			debugf(TEXT("TestCooperativeLevel failed (%s)"),DXGetErrorString8(hr));

	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1EC@LPJP@?$AAT?$AAe?$AAs?$AAt?$AAC?$AAo?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAe?$AAv?$AAe?$AAl@ ; `string'
	push	eax
	call	edi
	add	esp, 12					; 0000000cH
	jmp	$Failed$123324
$L123339:

; 1173 : 					}
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 		// Lock the back buffer to prevent the driver from queueing frames, causing 'input lag':
; 1178 : 		if(!GIsEditor)

	mov	ecx, DWORD PTR __imp_?GIsEditor@@3HA
	cmp	DWORD PTR [ecx], ebp
	jne	SHORT $L135508

; 1179 : 		{
; 1180 : 			IDirect3DSurface8 *BackBuffer;
; 1181 : 			Direct3DDevice8->GetBackBuffer(0,D3DBACKBUFFER_TYPE_MONO,&BackBuffer);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _BackBuffer$123342[esp+24]
	push	ecx
	push	ebp
	push	ebp
	push	eax
	call	DWORD PTR [edx+64]

; 1182 : 			D3DLOCKED_RECT Rect;
; 1183 : 			BackBuffer->LockRect(&Rect,NULL,D3DLOCK_READONLY|D3DLOCK_NO_DIRTY_UPDATE );

	mov	eax, DWORD PTR _BackBuffer$123342[esp+24]
	mov	edx, DWORD PTR [eax]
	push	32784					; 00008010H
	push	ebp
	lea	ecx, DWORD PTR _Rect$123343[esp+32]
	push	ecx
	push	eax
	call	DWORD PTR [edx+36]

; 1184 : 			BackBuffer->UnlockRect();

	mov	eax, DWORD PTR _BackBuffer$123342[esp+24]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+40]

; 1185 : 			SafeRelease(BackBuffer);

	mov	eax, DWORD PTR _BackBuffer$123342[esp+24]
	cmp	eax, ebp
	je	SHORT $L135508
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR _BackBuffer$123342[esp+24], ebp
$L135508:

; 1186 : 		}
; 1187 : 		
; 1188 : 		// Clear the Z-buffer.
; 1189 : 		Direct3DDevice8->Clear( 0, NULL, D3DCLEAR_ZBUFFER | ((LockFlags & LOCKR_ClearScreen) ? D3DCLEAR_TARGET : 0), (D3DCOLOR)FColor(ScreenClear).TrueColor(), 1.f, 0 );

	lea	edx, DWORD PTR _ScreenClear$[esp+24]
	push	edx
	lea	ecx, DWORD PTR $T135442[esp+28]
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _D$135513[esp+24], eax
	xor	ebx, ebx
	mov	bl, BYTE PTR _D$135513[esp+26]
	mov	edi, eax
	and	edi, 255				; 000000ffH
	and	eax, 65280				; 0000ff00H
	push	ebp
	shl	edi, 16					; 00000010H
	push	1065353216				; 3f800000H
	add	ebx, edi
	add	ebx, eax
	mov	eax, DWORD PTR [esi+19612]
	push	ebx
	and	eax, 1
	or	eax, 2
	push	eax
	push	ebp
	push	ebp
	push	ecx
	call	DWORD PTR [edx+144]

; 1190 : 
; 1191 : 		// Init stats.
; 1192 : 		memset( &Stats, 0, sizeof(Stats) );

	xor	eax, eax
	mov	ecx, 22					; 00000016H
	lea	edi, DWORD PTR [esi+19624]
	rep stosd

; 1193 : 		for( FPixFormat* Fmt=FirstPixelFormat; Fmt; Fmt=Fmt->Next )

	mov	eax, DWORD PTR [esi+16988]
	cmp	eax, ebp
	je	SHORT $L123353
$L123351:

; 1194 : 			Fmt->ResetStats();

	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+36], ebp
	mov	DWORD PTR [eax+32], ebp
	mov	DWORD PTR [eax+48], ebp
	mov	DWORD PTR [eax+44], ebp
	mov	DWORD PTR [eax+40], ebp
	mov	eax, DWORD PTR [eax+8]
	cmp	eax, ebp
	jne	SHORT $L123351
$L123353:

; 1195 : 
; 1196 : 		// Begin scene.
; 1197 : 		//check(BeginSceneCount==0);
; 1198 : 		if( FAILED(h=Direct3DDevice8->BeginScene()) )

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+136]
	cmp	eax, ebp
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	$L135523

; 1199 : 		{
; 1200 : 			if( ++FailCount==1 )

	mov	ecx, DWORD PTR _FailCount$[esp+28]
	inc	ecx
	cmp	ecx, 1
	mov	DWORD PTR _FailCount$[esp+28], ecx
	jne	$L123356
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
$Failed$123324:

; 1156 : 			Failed:
; 1157 : 			// D3DERR_DEVICELOST is returned if the device was lost, but exclusive mode isn't available again yet.
; 1158 : 			// D3DERR_DEVICENOTRESET is returned if the device was lost, but can be reset.
; 1159 : 
; 1160 : 			// Wait to regain exclusive access to the device.
; 1161 : 
; 1162 : 			do hr2=Direct3DDevice8->TestCooperativeLevel();

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+12]

; 1163 : 			while(hr2==D3DERR_DEVICELOST);

	cmp	eax, -2005530520			; 88760868H
	je	SHORT $Failed$123324

; 1164 : 
; 1165 : 			if(hr2==D3DERR_DEVICENOTRESET)

	cmp	eax, -2005530519			; 88760869H
	jne	$L123339

; 1166 : 			{
; 1167 : 				debugf(TEXT("Resetting mode (%s)"),DXGetErrorString8(hr2));

	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1CI@LMHM@?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
	push	eax
	call	edi

; 1168 : 				if( !SetRes(ViewportX, ViewportY, ViewportColorBits/8, ViewportFullscreen) )

	mov	ecx, DWORD PTR [esi+16776]
	mov	edx, DWORD PTR [esi+16772]
	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR [esi+16764]
	shr	edx, 3
	push	edx
	mov	edx, DWORD PTR [esi+16760]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR [eax+80]
	test	eax, eax
	jne	$L123339

; 1169 : 					if(!ErrorCalled)

	mov	al, BYTE PTR _ErrorCalled
	test	al, al
	jne	$L123339

; 1170 : 					{
; 1171 : 						ErrorCalled=true;
; 1172 : 						appErrorf(TEXT("Failed resetting mode. (%s)"),DXGetErrorString8(hr2));

	push	-2005530519				; 88760869H
	mov	BYTE PTR _ErrorCalled, 1
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1DI@DLMG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd@ ; `string'
	push	eax
	call	edi
	add	esp, 12					; 0000000cH
	jmp	$L123339
$L123356:

; 1201 : 				goto Failed;
; 1202 : 
; 1203 : 			appErrorf(TEXT("BeginScene failed (%s)"),DXGetErrorString8(h));

	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	OFFSET FLAT:??_C@_1CO@DHDA@?$AAB?$AAe?$AAg?$AAi?$AAn?$AAS?$AAc?$AAe?$AAn?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AA?$CF@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 12					; 0000000cH
$L135523:

; 1204 : 		}
; 1205 : 
; 1206 : 		BeginSceneCount++;

	mov	eax, DWORD PTR [esi+675184]
	pop	edi
	inc	eax
	mov	DWORD PTR [esi+675184], eax
	pop	esi
	pop	ebp
	pop	ebx

; 1207 : 	}

	add	esp, 12					; 0000000cH
	ret	68					; 00000044H
?Lock@UD3DRenderDevice@@UAIXVFColor@@MHVFPlane@@11KPAEPAH@Z ENDP ; UD3DRenderDevice::Lock
_TEXT	ENDS
PUBLIC	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
; Function compile flags: /Ogty
;	COMDAT ?PrecacheTexture@UD3DRenderDevice@@UAIXAAUFTextureInfo@@KK@Z
_TEXT	SEGMENT
_PolyFlags$ = 8
_PolyFlagsEx$ = 12
?PrecacheTexture@UD3DRenderDevice@@UAIXAAUFTextureInfo@@KK@Z PROC NEAR ; UD3DRenderDevice::PrecacheTexture, COMDAT
; _this$ = ecx
; _Info$ = edx

; 1211 : 		SetTexture( 0, Info, PolyFlags|Info.Texture->PolyFlags, 1, PolyFlagsEx|Info.Texture->PolyFlagsEx );

	mov	eax, DWORD PTR [edx]
	push	esi
	push	edi
	mov	edi, DWORD PTR _PolyFlagsEx$[esp+4]
	mov	esi, ecx
	mov	ecx, DWORD PTR [eax+196]
	mov	eax, DWORD PTR [eax+132]
	push	0
	or	ecx, edi
	push	ecx
	mov	ecx, DWORD PTR _PolyFlags$[esp+12]
	push	1
	or	eax, ecx
	push	eax
	push	edx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	pop	edi

; 1212 : 		PrecacheCycle = 1;

	mov	DWORD PTR [esi+675108], 1
	pop	esi

; 1213 : 	}

	ret	8
?PrecacheTexture@UD3DRenderDevice@@UAIXAAUFTextureInfo@@KK@Z ENDP ; UD3DRenderDevice::PrecacheTexture
_TEXT	ENDS
PUBLIC	??_C@_0BC@CHAC@HitStack?4Num?$CI?$CJ?$DN?$DN0?$AA@ ; `string'
;	COMDAT ??_C@_0BC@CHAC@HitStack?4Num?$CI?$CJ?$DN?$DN0?$AA@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0BC@CHAC@HitStack?4Num?$CI?$CJ?$DN?$DN0?$AA@ DB 'HitStack.Num()==0', 00H ; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?Unlock@UD3DRenderDevice@@UAIXH@Z
_TEXT	SEGMENT
?Unlock@UD3DRenderDevice@@UAIXH@Z PROC NEAR		; UD3DRenderDevice::Unlock, COMDAT
; _this$ = ecx
; _Blit$ = edx

; 1216 : 	{

	push	ebx

; 1217 : 		LockCount--; 
; 1218 : 		if(!GIsEditor)
; 1219 : 		{
; 1220 : 			//check(LockCount==0);
; 1221 : 		}
; 1222 : 
; 1223 : 		check(Direct3DDevice8);

	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+675188]
	mov	eax, DWORD PTR [esi+19124]
	dec	ecx
	test	eax, eax
	push	edi
	mov	edi, edx
	mov	DWORD PTR [esi+675188], ecx
	jne	SHORT $L123363
	push	1223					; 000004c7H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEJO@Direct3DDevice8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L123363:

; 1224 : 
; 1225 : 	#ifdef BATCH_PROJECTOR_POLYS
; 1226 : 		FlushProjectorPolys();
; 1227 : 	#endif
; 1228 : 
; 1229 : 		//Direct3DDevice8->EndScene();
; 1230 : 		EndScene();

	dec	DWORD PTR [esi+675184]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]

; 1231 : 
; 1232 : 		if( PrecacheCycle )

	mov	eax, DWORD PTR [esi+675108]
	test	eax, eax
	je	SHORT $L123364

; 1233 : 		{
; 1234 : 			PrecacheCycle = 0;

	mov	DWORD PTR [esi+675108], 0
$L123364:

; 1235 : 		}
; 1236 : 		if( Blit )

	test	edi, edi
	je	SHORT $L123365

; 1237 : 			Direct3DDevice8->Present(NULL,NULL,NULL,NULL);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+60]
$L123365:

; 1238 : 
; 1239 : 		// Hit detection.
; 1240 : 		check(HitStack.Num()==0);

	mov	eax, DWORD PTR [esi+675116]
	test	eax, eax
	je	SHORT $L123366
	push	1240					; 000004d8H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0BC@CHAC@HitStack?4Num?$CI?$CJ?$DN?$DN0?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L123366:

; 1241 : 		if( HitSize )

	mov	eax, DWORD PTR [esi+675128]
	test	eax, eax
	je	SHORT $L123368

; 1242 : 			*HitSize = HitCount;

	mov	ecx, DWORD PTR [esi+675132]
	mov	DWORD PTR [eax], ecx
$L123368:
	pop	edi
	pop	esi
	pop	ebx

; 1243 : 	}

	ret	0
?Unlock@UD3DRenderDevice@@UAIXH@Z ENDP			; UD3DRenderDevice::Unlock
_TEXT	ENDS
PUBLIC	?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z ; FD3DVertexBuffer<FD3DTLVertex>::Lock
PUBLIC	?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DTLVertex>::Unlock
PUBLIC	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ	; FD3DVertexBuffer<FD3DTLVertex>::Set
PUBLIC	?Clamp@@YAHHHH@Z				; Clamp
PUBLIC	?Clamp@@YAMMMM@Z				; Clamp
PUBLIC	??_C@_0O@DFJN@VertexBuffer8?$AA@		; `string'
PUBLIC	??_C@_06CAAP@Length?$AA@			; `string'
PUBLIC	??_C@_0L@GIGE@Num?$DMLength?$AA@		; `string'
PUBLIC	??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_06NBPC@Device?$AA@			; `string'
PUBLIC	??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_0BA@BICI@Surface?4Texture?$AA@		; `string'
PUBLIC	??_C@_0BB@KKDE@Surface?4LightMap?$AA@		; `string'
PUBLIC	??_C@_09PNHJ@Stages?$FL0?$FN?$AA@		; `string'
PUBLIC	??_C@_09OLND@Stages?$FL1?$FN?$AA@		; `string'
PUBLIC	??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_04GHEP@V?9?$DOU?$AA@			; `string'
PUBLIC	??_C@_05MGNJ@V?9?$DOU2?$AA@			; `string'
PUBLIC	??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_0BF@MPKE@n?$DMARRAY_COUNT?$CIVerts?$CJ?$AA@ ; `string'
PUBLIC	__real@3b808081
PUBLIC	__real@43800000
PUBLIC	__real@3f000000
PUBLIC	__real@3faaaa9f7b5aea31
PUBLIC	__real@42c80000
PUBLIC	?SetZBias@UD3DRenderDevice@@QAIMM@Z		; UD3DRenderDevice::SetZBias
PUBLIC	?Half@?1??appFloor@@YAHM@Z@4MA			; `appFloor'::`2'::Half
PUBLIC	?Lock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEPAUFD3DScreenVertex@@HH@Z ; FD3DVertexBuffer<FD3DScreenVertex>::Lock
PUBLIC	?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DScreenVertex>::Unlock
PUBLIC	?Set@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DScreenVertex>::Set
EXTRN	__imp_??0FVector@@QAE@MMM@Z:NEAR
EXTRN	__imp_?TransformPointBy@FVector@@QBE?AV1@ABVFCoords@@@Z:NEAR
EXTRN	__imp_?TrueColor@FColor@@QBEKXZ:NEAR
EXTRN	__imp__GTimestamp:DWORD
EXTRN	__imp_??0FPlane@@QAE@MMMM@Z:NEAR
;	COMDAT ??_C@_06NBPC@Device?$AA@
; File ..\..\Core\Inc\UnVcWin32.h
_DATA	SEGMENT
??_C@_06NBPC@Device?$AA@ DB 'Device', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@DFJN@VertexBuffer8?$AA@
_DATA	SEGMENT
??_C@_0O@DFJN@VertexBuffer8?$AA@ DB 'VertexBuffer8', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '-'
	DB	00H, '>', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, '(', 00H, 'D', 00H, '3', 00H, 'D', 00H
	DB	'R', 00H, 'S', 00H, '_', 00H, 'S', 00H, 'O', 00H, 'F', 00H, 'T'
	DB	00H, 'W', 00H, 'A', 00H, 'R', 00H, 'E', 00H, 'V', 00H, 'E', 00H
	DB	'R', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'P', 00H, 'R', 00H, 'O'
	DB	00H, 'C', 00H, 'E', 00H, 'S', 00H, 'S', 00H, 'I', 00H, 'N', 00H
	DB	'G', 00H, ',', 00H, 'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H, 'E'
	DB	00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '%', 00H
	DB	's', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '-'
	DB	00H, '>', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'V', 00H, 'e', 00H
	DB	'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'S', 00H, 'h', 00H, 'a'
	DB	00H, 'd', 00H, 'e', 00H, 'r', 00H, '(', 00H, 'T', 00H, ':', 00H
	DB	':', 00H, 'F', 00H, 'V', 00H, 'F', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '-'
	DB	00H, '>', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'S', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'm', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, '(', 00H, '0', 00H, ',', 00H
	DB	'V', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '8', 00H
	DB	',', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f'
	DB	00H, '(', 00H, 'T', 00H, ')', 00H, ')', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_06CAAP@Length?$AA@
_DATA	SEGMENT
??_C@_06CAAP@Length?$AA@ DB 'Length', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@GIGE@Num?$DMLength?$AA@
_DATA	SEGMENT
??_C@_0L@GIGE@Num?$DMLength?$AA@ DB 'Num<Length', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'V', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '8', 00H
	DB	'-', 00H, '>', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'R', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'*', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o'
	DB	00H, 'f', 00H, '(', 00H, 'T', 00H, ')', 00H, ',', 00H, 'N', 00H
	DB	'u', 00H, 'm', 00H, ' ', 00H, '*', 00H, ' ', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 'T', 00H
	DB	')', 00H, ',', 00H, '(', 00H, 'B', 00H, 'Y', 00H, 'T', 00H, 'E'
	DB	00H, '*', 00H, '*', 00H, ')', 00H, ' ', 00H, '&', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'D', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, ',', 00H, 'D', 00H, '3', 00H, 'D', 00H
	DB	'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, '_', 00H, 'N', 00H, 'O'
	DB	00H, 'O', 00H, 'V', 00H, 'E', 00H, 'R', 00H, 'W', 00H, 'R', 00H
	DB	'I', 00H, 'T', 00H, 'E', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'V', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '8', 00H
	DB	'-', 00H, '>', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, '0', 00H, ',', 00H, 'N', 00H, 'u', 00H, 'm', 00H, ' ', 00H
	DB	'*', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o'
	DB	00H, 'f', 00H, '(', 00H, 'T', 00H, ')', 00H, ',', 00H, '(', 00H
	DB	'B', 00H, 'Y', 00H, 'T', 00H, 'E', 00H, '*', 00H, '*', 00H, ')'
	DB	00H, ' ', 00H, '&', 00H, 'V', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, ','
	DB	00H, 'D', 00H, '3', 00H, 'D', 00H, 'L', 00H, 'O', 00H, 'C', 00H
	DB	'K', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'S', 00H, 'C', 00H, 'A'
	DB	00H, 'R', 00H, 'D', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT __real@3b808081
CONST	SEGMENT
__real@3b808081 DD 03b808081r			; 0.00392157
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT ?Half@?1??appFloor@@YAHM@Z@4MA
_DATA	SEGMENT
?Half@?1??appFloor@@YAHM@Z@4MA DD 03f000000r	; 0.5	; `appFloor'::`2'::Half
_DATA	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_C@_0BA@BICI@Surface?4Texture?$AA@
_DATA	SEGMENT
??_C@_0BA@BICI@Surface?4Texture?$AA@ DB 'Surface.Texture', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KKDE@Surface?4LightMap?$AA@
_DATA	SEGMENT
??_C@_0BB@KKDE@Surface?4LightMap?$AA@ DB 'Surface.LightMap', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09PNHJ@Stages?$FL0?$FN?$AA@
_DATA	SEGMENT
??_C@_09PNHJ@Stages?$FL0?$FN?$AA@ DB 'Stages[0]', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09OLND@Stages?$FL1?$FN?$AA@
_DATA	SEGMENT
??_C@_09OLND@Stages?$FL1?$FN?$AA@ DB 'Stages[1]', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_04GHEP@V?9?$DOU?$AA@
_DATA	SEGMENT
??_C@_04GHEP@V?9?$DOU?$AA@ DB 'V->U', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MGNJ@V?9?$DOU2?$AA@
_DATA	SEGMENT
??_C@_05MGNJ@V?9?$DOU2?$AA@ DB 'V->U2', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MPKE@n?$DMARRAY_COUNT?$CIVerts?$CJ?$AA@
_DATA	SEGMENT
??_C@_0BF@MPKE@n?$DMARRAY_COUNT?$CIVerts?$CJ?$AA@ DB 'n<ARRAY_COUNT(Verts'
	DB	')', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'V', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '8', 00H
	DB	'-', 00H, '>', 00H, 'U', 00H, 'n', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT __real@3faaaa9f7b5aea31
CONST	SEGMENT
__real@3faaaa9f7b5aea31 DQ 03faaaa9f7b5aea31r	; 0.052083
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?DrawComplexSurface@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFSurfaceInfo@@AAUFSurfaceFacet@@@Z
_TEXT	SEGMENT
$T136170 = -180
$T136193 = -256
_D$136200 = -256
_Xor$136251 = -268
$T136305 = -180
_Frame$ = -220
_Surface$ = 8
$T136328 = -256
_Facet$ = 12
_D$136335 = -256
_VertexData$136343 = -264
_Xor$136387 = -268
$T136434 = -160
$T136451 = -256
_VertexData$136462 = -264
_VertexData$136514 = -264
_I$136551 = -164
$T136552 = -184
$T135549 = -264
$T135550 = -260
$T135554 = -200
$T135555 = -256
$T135560 = -180
$T135562 = -224
_bHeatVision$ = -236
$T135565 = -200
_bNightVision$ = -216
_myFinalColor$ = -268
_D$136585 = -256
_L$135571 = -212
_H$135572 = -256
_VertexCount$ = -204
_Poly$ = -220
_VertexData$136591 = -264
_IsSelected$ = -212
_SurfPolyFlags$ = -224
_SurfPolyFlagsEx$ = -244
_StoreVertInfo$ = -208
_clr$123395 = -260
_n$123409 = -248
_Poly$123410 = -268
_i$123414 = -264
_R$123419 = -236
_Z$123420 = -256
_Y$123421 = -184
_X$123422 = -164
_u$123426 = -244
_v$123427 = -216
_ModulateThings$123453 = -248
_FinalColor$123454 = -200
_Clr$123457 = -260
_n$123468 = -240
$T136678 = -256
_i$123473 = -268
_XorEx$135668 = -248
_I$136686 = -184
_R$123480 = -236
_Z$123481 = -256
_u$123485 = -232
_v$123486 = -216
_L$136701 = -264
_H$136702 = -256
_Clr$123494 = -236
_Clr$123512 = -236
_LocalNearZ$123532 = -208
_AreDetailing$123534 = -240
_InvZ$123538 = -224
_SZ$123539 = -256
_n$123540 = -260
_Xor$135733 = -260
_Poly$123541 = -268
_XorEx$135734 = -248
_IsNear$123545 = -128
_NumNear$123552 = -252
_i$123556 = -228
_Clr$123581 = -228
_VertexData$135782 = -232
_First$123630 = -256
$T135824 = -160
_i$123632 = -228
_Mask$123636 = -236
_n$123642 = -248
_j$123647 = -264
_P$123651 = -160
$T135846 = -180
$T135873 = -264
$T135891 = -264
$T135909 = -264
$T135916 = -264
_I$135923 = -232
_I$135933 = -232
_I$135943 = -232
_I$135947 = -232
_XorEx$136025 = -240
_Xor$136075 = -260
$T136119 = -252
_VertexData$136133 = -264
?DrawComplexSurface@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFSurfaceInfo@@AAUFSurfaceFacet@@@Z PROC NEAR ; UD3DRenderDevice::DrawComplexSurface, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 1246 : 	{

	sub	esp, 268				; 0000010cH

; 1247 : 		if(!RenderSurfaces) 

	mov	eax, DWORD PTR ?RenderSurfaces@@3HA	; RenderSurfaces
	push	ebp
	push	esi
	push	edi
	xor	ebp, ebp
	cmp	eax, ebp
	mov	edi, edx
	mov	DWORD PTR _Frame$[esp+280], edi
	mov	esi, ecx
	je	$L123370

; 1248 : 			return;
; 1249 : 
; 1250 : 		clock(Stats.SurfTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ebp
	mov	DWORD PTR _L$135571[esp+280], ebp
	je	SHORT $L135573
	rdtsc
	mov	DWORD PTR _L$135571[esp+280], eax
	mov	DWORD PTR _H$135572[esp+280], edx
$L135573:
	mov	edx, DWORD PTR [esi+19624]
	mov	ecx, DWORD PTR _L$135571[esp+280]

; 1251 : 		Stats.Surfs++;

	mov	eax, DWORD PTR [esi+19664]
	sub	edx, ecx
	inc	eax
	mov	DWORD PTR [esi+19624], edx
	mov	DWORD PTR [esi+19664], eax

; 1252 : 
; 1253 : 		PreRender(Frame);

	mov	eax, DWORD PTR [esi]
	push	ebx
	mov	edx, edi
	mov	ecx, esi
	call	DWORD PTR [eax+140]

; 1254 : 		UBOOL bHeatVision  = (Frame->Viewport->Actor->CameraStyle == PCS_HeatVision);  

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+48]
	mov	al, BYTE PTR [edx+7280]

; 1255 : 		UBOOL bNightVision = (Frame->Viewport->Actor->CameraStyle == PCS_NightVision); 
; 1256 : 		
; 1257 : 		FColor myFinalColor( 255, 255, 255, 0 );
; 1258 : 		if(bHeatVision)

	mov	ebx, DWORD PTR _Surface$[esp+280]
	xor	ecx, ecx
	cmp	al, 1
	sete	cl
	xor	edx, edx
	cmp	al, 2
	sete	dl
	mov	BYTE PTR _myFinalColor$[esp+284], 255	; 000000ffH
	mov	BYTE PTR _myFinalColor$[esp+285], 255	; 000000ffH
	mov	BYTE PTR _myFinalColor$[esp+286], 255	; 000000ffH
	cmp	ecx, ebp
	mov	DWORD PTR _bHeatVision$[esp+284], ecx
	mov	BYTE PTR _myFinalColor$[esp+287], 0
	mov	eax, edx
	mov	DWORD PTR _bNightVision$[esp+284], eax
	je	SHORT $L123375

; 1259 : 		{
; 1260 : 			myFinalColor.R = 7.5f;

	mov	BYTE PTR _myFinalColor$[esp+284], 7

; 1261 : 			myFinalColor.G = 0.f;

	mov	BYTE PTR _myFinalColor$[esp+285], 0

; 1262 : 			myFinalColor.B = 38.f;

	mov	BYTE PTR _myFinalColor$[esp+286], 38	; 00000026H

; 1263 : 			Surface.PolyFlags&=~PF_FlatShaded;
; 1264 : 		} else if(bNightVision) 

	jmp	SHORT $L136887
$L123375:
	cmp	eax, ebp
	je	SHORT $L123377

; 1265 : 		{
; 1266 : 			myFinalColor.R = 0.f;

	mov	BYTE PTR _myFinalColor$[esp+284], 0

; 1267 : 			myFinalColor.G = 128.f;

	mov	BYTE PTR _myFinalColor$[esp+285], 128	; 00000080H

; 1268 : 			myFinalColor.B = 0.f;

	mov	BYTE PTR _myFinalColor$[esp+286], 0
$L136887:

; 1269 : 			Surface.PolyFlags&=~PF_FlatShaded;

	and	DWORD PTR [ebx], -1073741825		; bfffffffH
$L123377:

; 1270 : 		}
; 1271 : 
; 1272 : 		// Mutually exclusive effects.
; 1273 : 		if((Surface.DetailTexture && Surface.FogMap) || (!DetailTextures))

	cmp	DWORD PTR [ebx+28], ebp
	je	SHORT $L123380
	cmp	DWORD PTR [ebx+32], ebp
	jne	SHORT $L123379
$L123380:
	cmp	DWORD PTR [esi+104], ebp
	jne	SHORT $L123378
$L123379:

; 1274 : 			Surface.DetailTexture = NULL;

	mov	DWORD PTR [ebx+28], ebp
$L123378:

; 1275 : 
; 1276 : 		INT VertexCount=0;
; 1277 : 		for( FSavedPoly* Poly=Facet.Polys; Poly; Poly = Poly->Next )

	mov	eax, DWORD PTR _Facet$[esp+280]
	mov	eax, DWORD PTR [eax+100]
	xor	ecx, ecx
	cmp	eax, ebp
	mov	DWORD PTR _VertexCount$[esp+284], ecx
	je	SHORT $L123385
$L123383:

; 1278 : 			VertexCount += Poly->NumPts;

	mov	edi, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax]
	add	ecx, edi
	cmp	eax, ebp
	jne	SHORT $L123383
	mov	DWORD PTR _VertexCount$[esp+284], ecx
$L123385:

; 1279 : 		UBOOL IsSelected = GIsEditor && (( Surface.PolyFlags & PF_Selected )!= 0);

	mov	ecx, DWORD PTR __imp_?GIsEditor@@3HA
	cmp	DWORD PTR [ecx], ebp
	je	SHORT $L135547
	test	DWORD PTR [ebx], 33554432		; 02000000H
	mov	DWORD PTR _IsSelected$[esp+284], 1
	jne	SHORT $L135548
$L135547:
	mov	DWORD PTR _IsSelected$[esp+284], ebp
$L135548:

; 1280 : 		DWORD SurfPolyFlags   = ( Surface.PolyFlags & ~PF_Selected ) | PF_TwoSided | (Surface.Texture->Texture->PolyFlags);

	mov	edx, DWORD PTR [ebx+16]
	mov	eax, DWORD PTR [edx]
	mov	ebp, DWORD PTR [eax+132]
	mov	ecx, DWORD PTR [ebx]

; 1281 : 		DWORD SurfPolyFlagsEx = Surface.PolyFlagsEx | (Surface.Texture->Texture->PolyFlagsEx);

	mov	eax, DWORD PTR [eax+196]
	and	ecx, -33554433				; fdffffffH
	or	ebp, ecx
	mov	ecx, DWORD PTR [ebx+4]
	or	ebp, 256				; 00000100H
	or	eax, ecx

; 1282 : 
; 1283 : 		SetDistanceFog(!(SurfPolyFlags&PF_Unlit));

	mov	edi, ebp
	not	edi
	shr	edi, 22					; 00000016H
	mov	DWORD PTR _SurfPolyFlagsEx$[esp+284], eax
	mov	eax, DWORD PTR [esi+675196]
	and	edi, 1
	test	eax, eax
	mov	DWORD PTR _SurfPolyFlags$[esp+284], ebp
	je	$L135581
	cmp	edi, DWORD PTR [esi+675192]
	je	$L135581
	test	edi, edi
	mov	eax, DWORD PTR [esi+19124]
	je	$L135582
	mov	edx, DWORD PTR [eax]
	push	1
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	48					; 00000030H
	push	eax
	call	DWORD PTR [ecx+200]
	movzx	ebx, BYTE PTR [esi+675210]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	xor	ecx, ecx
	mov	ch, BYTE PTR [esi+675208]
	mov	cl, BYTE PTR [esi+675209]
	shl	ecx, 8
	or	ecx, ebx
	push	ecx
	push	34					; 00000022H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	35					; 00000023H
	push	eax
	call	DWORD PTR [edx+200]
	mov	edx, DWORD PTR [esi+675200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	36					; 00000024H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	edx, DWORD PTR [esi+675204]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	37					; 00000025H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ebx, DWORD PTR _Surface$[esp+280]
	jmp	SHORT $L135583
$L135582:
	mov	ecx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
$L135583:
	mov	DWORD PTR [esi+675192], edi
$L135581:

; 1284 : 		SetZBias(0);

	fld	DWORD PTR [esi+675164]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L135608
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L135607
$L135608:
	mov	eax, DWORD PTR [esi+19124]
	push	0
	push	47					; 0000002fH
	mov	DWORD PTR [esi+675164], 0
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+200]
$L135607:

; 1285 : 
; 1286 : 		INT StoreVertInfo = (IsSelected) + (Surface.LightMap!=NULL) + (Surface.MacroTexture!=NULL) + (Surface.DetailTexture!=NULL) + (Surface.FogMap!=NULL) + (ProjectorArray.Num() > 0);		

	mov	ecx, DWORD PTR [ebx+20]
	mov	edi, DWORD PTR [esi+204]
	xor	eax, eax
	test	ecx, ecx
	setne	al
	xor	ecx, ecx
	test	edi, edi
	mov	edi, DWORD PTR [ebx+32]
	setg	cl
	xor	edx, edx

; 1937 : 
; 1938 : 		VALIDATE;
; 1939 : 
; 1940 : 		unclock(Stats.SurfTime);

	add	eax, ecx
	test	edi, edi
	mov	edi, DWORD PTR [ebx+28]
	setne	dl
	xor	ecx, ecx
	add	eax, edx
	mov	edx, DWORD PTR _IsSelected$[esp+284]
	test	edi, edi
	mov	edi, DWORD PTR [ebx+24]
	setne	cl
	add	ecx, edx
	xor	edx, edx
	test	edi, edi
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	setne	dl
	add	ecx, eax
	mov	eax, DWORD PTR [esi+16680]
	add	edx, ecx
	test	eax, eax
	mov	DWORD PTR _StoreVertInfo$[esp+284], edx
	jne	SHORT $L135616
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L135616:
	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	jne	SHORT $L135619
	push	319					; 0000013fH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH

; 1941 : 	}

	npad	1

; 1937 : 
; 1938 : 		VALIDATE;
; 1939 : 
; 1940 : 		unclock(Stats.SurfTime);

$L135619:
	mov	eax, DWORD PTR [esi+16680]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [ecx+200]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	jge	SHORT $L135620
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L135620:
	mov	eax, DWORD PTR [esi+16680]
	mov	ecx, DWORD PTR [eax]
	push	580					; 00000244H
	push	eax
	call	DWORD PTR [ecx+304]
	test	eax, eax
	jge	SHORT $L135625
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L135625:
	mov	edx, DWORD PTR [esi+16684]
	mov	eax, DWORD PTR [esi+16680]
	mov	ecx, DWORD PTR [eax]
	push	36					; 00000024H
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+332]
	test	eax, eax
	jge	SHORT $L135630
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	324					; 00000144H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L135630:
	mov	eax, DWORD PTR [ebx+20]
	test	eax, eax
	je	$L123390
	mov	eax, DWORD PTR [ebx+24]
	test	eax, eax
	jne	$L123390
	mov	edx, DWORD PTR _StoreVertInfo$[esp+284]
	dec	edx
	mov	eax, ebp
	and	eax, 1073741824				; 40000000H
	mov	DWORD PTR _StoreVertInfo$[esp+284], edx
	mov	DWORD PTR -228+[esp+284], eax
	je	$L123391
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	xor	ebp, ebp
	push	ebp
	push	ebp
	push	eax
	call	DWORD PTR [edx+244]
	push	ebp
	lea	edi, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+19712], edi
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [ecx+244]
	mov	DWORD PTR [esi+19716], edi
	mov	ebx, DWORD PTR [esi+19616]
	mov	edx, DWORD PTR [esi+19620]
	xor	ebx, -2147483648			; 80000000H
	test	bh, 1
	mov	DWORD PTR _XorEx$135668[esp+284], edx
	je	SHORT $L135669
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
$L135669:
	mov	al, BYTE PTR _XorEx$135668[esp+284]
	test	al, 2
	je	SHORT $L135670
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [edx+200]
	mov	al, BYTE PTR _XorEx$135668[esp+284]
$L135670:

; 1287 : 
; 1288 : 		WorldVertices.Set();
; 1289 : 
; 1290 : 		// Render texture and lightmap. 
; 1291 : 		if( /*UseMultitexture &&*/ Surface.LightMap!=NULL && Surface.MacroTexture==NULL )
; 1292 : 		{
; 1293 : 			StoreVertInfo--;
; 1294 : 			// Use multitexturing when rendering base + lightmap.			
; 1295 : 			if(SurfPolyFlags&PF_FlatShaded)
; 1296 : 			{
; 1297 : 				SetTextureNULL( 0 );
; 1298 : 				SetTextureNULL( 1 );
; 1299 : 				SetBlending();

	test	al, 8
	je	SHORT $L135671
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	al, BYTE PTR _XorEx$135668[esp+284]
$L135671:
	test	ebx, -754972601				; d3000847H
	jne	SHORT $L135673
	test	al, 113					; 00000071H
	je	$L135709
$L135673:
	test	ebx, 268435525				; 10000045H
	jne	SHORT $L135675
	test	al, 113					; 00000071H
	je	SHORT $L135659
$L135675:
	test	al, 1
	je	SHORT $L135676
	cmp	DWORD PTR [esi+19128], ebp
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L135677
	mov	edx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L135678
$L135677:
	mov	ecx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
$L135678:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L135676:
	cmp	DWORD PTR [esi+675176], ebp
	jne	SHORT $L135660
	cmp	DWORD PTR ?CacheBlending@@3HA, ebp	; CacheBlending
	jne	SHORT $L135659
$L135660:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675176], ebp
$L135659:
	test	bl, 1
	je	SHORT $L135696
	xor	edx, edx
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L135696:
	test	ebx, ebx
	jns	SHORT $L135698
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [ecx+200]
$L135698:
	test	bl, 2
	je	SHORT $L135701
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
$L135701:
	test	bh, 8
	je	SHORT $L135702
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
$L135702:
	test	ebx, 1073741824				; 40000000H
	je	SHORT $L135703
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [ecx+200]
$L135703:
	test	ebx, 50331648				; 03000000H
	je	SHORT $L135709
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
$L135709:
	mov	DWORD PTR [esi+19616], -2147483648	; 80000000H
	mov	DWORD PTR [esi+19620], ebp

; 1300 : 			}
; 1301 : 			else

	jmp	$L135727
$L123391:

; 1302 : 			{
; 1303 : 				SetTexture( 0, *Surface.Texture, SurfPolyFlags, 0, SurfPolyFlagsEx );

	mov	edx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR [ebx+16]
	push	0
	push	edx
	push	0
	push	ebp
	push	eax
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1304 : 				SetTexture( 1, *Surface.LightMap, 0, 0, true );

	mov	ecx, DWORD PTR [ebx+20]
	push	0
	push	1
	push	0
	push	0
	push	ecx
	mov	edx, 1
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1305 : 				// PF_Memorize to signify multitexturing.
; 1306 : 				SetBlending( SurfPolyFlags|PF_Memorized, SurfPolyFlagsEx );

	mov	ebx, ebp
	or	ebx, 16777216				; 01000000H
	mov	edx, ebx
	and	edx, 1073741892				; 40000044H
	cmp	edx, 1073741824				; 40000000H
	jne	SHORT $L135729
	mov	eax, DWORD PTR [esi+19148]
	test	eax, eax
	jne	SHORT $L135728
$L135729:
	and	ebx, -1073741825			; bfffffffH
$L135728:
	test	bl, 68					; 00000044H
	jne	SHORT $L135730
	test	BYTE PTR _SurfPolyFlagsEx$[esp+284], 113 ; 00000071H
	jne	SHORT $L135730
	or	ebx, -2147483648			; 80000000H
	jmp	SHORT $L135732
$L135730:
	test	bl, 4
	je	SHORT $L135732
	and	ebx, -3					; fffffffdH
$L135732:
	mov	ecx, DWORD PTR [esi+19616]
	mov	eax, DWORD PTR [esi+19620]
	mov	edi, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	xor	ecx, ebx
	xor	eax, edi
	test	ch, 1
	mov	DWORD PTR _Xor$135733[esp+284], ecx
	mov	DWORD PTR _XorEx$135734[esp+284], eax
	je	SHORT $L135735
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	mov	edx, ebx
	not	edx
	and	edx, 256				; 00000100H
	or	edx, 128				; 00000080H
	shr	edx, 7
	push	edx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _XorEx$135734[esp+284]
$L135735:
	test	al, 2
	je	SHORT $L135736
	mov	edx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, 1
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _XorEx$135734[esp+284]
$L135736:
	test	al, 8
	je	SHORT $L135737
	mov	edx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _XorEx$135734[esp+284]
$L135737:
	mov	ecx, DWORD PTR _Xor$135733[esp+284]
	test	ecx, -754972601				; d3000847H
	jne	SHORT $L135739
	test	al, 113					; 00000071H
	je	$L135775
$L135739:
	test	ecx, 268435525				; 10000045H
	jne	SHORT $L135741
	test	al, 113					; 00000071H
	je	$L135761
$L135741:
	test	al, 1
	je	SHORT $L135742
	test	BYTE PTR _SurfPolyFlagsEx$[esp+284], 1
	jne	SHORT $L135742
	mov	eax, DWORD PTR [esi+19128]
	test	eax, eax
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L135743
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	jmp	SHORT $L135744
$L135743:
	mov	edx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L135744:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
$L135742:
	test	ebx, 268435525				; 10000045H
	mov	al, BYTE PTR _SurfPolyFlagsEx$[esp+284]
	jne	SHORT $L135745
	test	al, 113					; 00000071H
	jne	SHORT $L135745
	mov	eax, DWORD PTR [esi+675176]
	test	eax, eax
	jne	SHORT $L135726
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L135761
$L135726:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675176], 0
	jmp	$L135761
$L135745:
	test	al, 64					; 00000040H
	je	SHORT $L135747
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
$L136888:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L135761
$L135747:
	test	bl, 1
	je	SHORT $L135749
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
$L136890:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L135761
$L135749:
	test	al, 32					; 00000020H
	je	SHORT $L135751
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L135761
$L135751:
	test	al, 16					; 00000010H
	je	SHORT $L135753
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	SHORT $L136890
$L135753:
	test	bl, 4
	je	SHORT $L135755
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	$L136888
$L135755:
	test	bl, 64					; 00000040H
	je	SHORT $L135757
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L135761
$L135757:
	test	ebx, 268435456				; 10000000H
	je	SHORT $L135759
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L135761
$L135759:
	test	al, 1
	je	$L135761
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	4
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	5
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	6
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L135761:
	test	BYTE PTR _Xor$135733[esp+284], 1
	je	SHORT $L135762
	mov	edx, ebx
	and	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L135762:
	mov	eax, DWORD PTR _Xor$135733[esp+284]
	test	eax, eax
	jns	SHORT $L135764
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	mov	edx, ebx
	shr	edx, 31					; 0000001fH
	push	edx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [ecx+200]
$L135764:
	test	BYTE PTR _Xor$135733[esp+284], 2
	je	SHORT $L135767
	test	bl, 2
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L135766
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	jmp	SHORT $L135767
$L135766:
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
$L135767:
	mov	eax, DWORD PTR _Xor$135733[esp+284]
	test	ah, 8
	je	SHORT $L135768
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	mov	edi, ebx
	and	edi, 2048				; 00000800H
	neg	edi
	sbb	edi, edi
	add	edi, 2
	push	edi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L135768:
	test	DWORD PTR _Xor$135733[esp+284], 1073741824 ; 40000000H
	je	SHORT $L135769
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	mov	edx, ebx
	shr	edx, 30					; 0000001eH
	and	edx, 1
	push	edx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [ecx+200]
$L135769:
	test	DWORD PTR _Xor$135733[esp+284], 50331648 ; 03000000H
	je	SHORT $L135775
	test	ebx, 16777216				; 01000000H
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	je	SHORT $L135772
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	push	3
	jmp	SHORT $L136891
$L135772:
	test	ebx, 33554432				; 02000000H
	je	SHORT $L135774
	push	3
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	push	2
	jmp	SHORT $L136891
$L135774:
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	push	1
$L136891:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L135775:
	mov	eax, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	DWORD PTR [esi+19616], ebx
	mov	DWORD PTR [esi+19620], eax
	xor	ebp, ebp
$L135727:

; 1307 : 			}
; 1308 : 			// Set up all poly vertices.
; 1309 : 			FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

	cmp	DWORD PTR [esi+16684], ebp
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L135779
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L135779:
	cmp	DWORD PTR [esi+16688], ebp
	jne	SHORT $L135780
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L135780:
	mov	edi, DWORD PTR _VertexCount$[esp+284]
	cmp	edi, DWORD PTR [esi+16688]
	jl	SHORT $L135783
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L135783:
	mov	eax, DWORD PTR [esi+16696]
	mov	edx, DWORD PTR [esi+16688]
	lea	ecx, DWORD PTR [eax+edi]
	cmp	ecx, edx
	jge	SHORT $L135797
	mov	edx, DWORD PTR [esi+16684]
	mov	ebx, DWORD PTR [edx]
	push	4096					; 00001000H
	lea	ecx, DWORD PTR [edi+edi*8]
	shl	ecx, 2
	lea	ebp, DWORD PTR _VertexData$135782[esp+288]
	push	ebp
	lea	eax, DWORD PTR [eax+eax*8]
	push	ecx
	shl	eax, 2
	push	eax
	push	edx
	mov	DWORD PTR -252+[esp+304], ecx
	call	DWORD PTR [ebx+44]
	xor	ebp, ebp
	cmp	eax, ebp
	jge	SHORT $L135792
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L135792:
	mov	eax, DWORD PTR [esi+16696]
	mov	DWORD PTR [esi+16692], eax
	add	eax, edi
	mov	DWORD PTR [esi+16696], eax
	jmp	SHORT $L135796
$L135797:
	mov	ecx, DWORD PTR [esi+16684]
	mov	edx, DWORD PTR [ecx]
	push	8192					; 00002000H
	lea	eax, DWORD PTR [edi+edi*8]
	shl	eax, 2
	lea	ebx, DWORD PTR _VertexData$135782[esp+288]
	push	ebx
	push	eax
	push	ebp
	push	ecx
	mov	DWORD PTR -252+[esp+304], eax
	call	DWORD PTR [edx+44]
	cmp	eax, ebp
	jge	SHORT $L135798
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L135798:
	mov	DWORD PTR [esi+16692], ebp
	mov	DWORD PTR [esi+16696], edi
$L135796:

; 1310 : 			D3DCOLOR clr;
; 1311 : 
; 1312 : 			if(Surface.PolyFlags&PF_FlatShaded)

	mov	eax, DWORD PTR _Surface$[esp+280]
	test	DWORD PTR [eax], 1073741824		; 40000000H
	mov	edi, DWORD PTR _VertexData$135782[esp+284]
	je	SHORT $L123396

; 1313 : 				clr = FColor( Surface.FlatColor).TrueColor() | 0xff000000;

	mov	eax, DWORD PTR [eax+8]
	xor	edx, edx
	mov	DWORD PTR $T135549[esp+284], eax
	mov	dl, BYTE PTR $T135549[esp+286]
	mov	ecx, eax
	shl	ecx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	edx, ecx
	add	edx, eax
	or	edx, -16777216				; ff000000H
	mov	DWORD PTR _clr$123395[esp+284], edx

; 1314 : 			else

	jmp	$L123398
$L123396:

; 1315 : 				clr = FColor(Stages[0]->MaxColor.Plane() * Stages[1]->MaxColor.Plane()).TrueColor() | 0xff000000;

	mov	eax, DWORD PTR [esi+19716]
	movzx	edx, BYTE PTR [eax+32]
	movzx	ecx, BYTE PTR [eax+33]
	add	eax, 32					; 00000020H
	mov	DWORD PTR -264+[esp+284], edx
	movzx	edx, BYTE PTR [eax+2]
	fild	DWORD PTR -264+[esp+284]
	mov	eax, DWORD PTR [esi+19712]
	fmul	DWORD PTR __real@3b808081
	mov	DWORD PTR -264+[esp+284], ecx
	movzx	ecx, BYTE PTR [eax+32]
	fild	DWORD PTR -264+[esp+284]
	mov	DWORD PTR -264+[esp+284], edx
	fmul	DWORD PTR __real@3b808081
	movzx	edx, BYTE PTR [eax+33]
	fild	DWORD PTR -264+[esp+284]
	add	eax, 32					; 00000020H
	fmul	DWORD PTR __real@3b808081
	movzx	eax, BYTE PTR [eax+2]
	mov	DWORD PTR -264+[esp+284], ecx
	fstp	DWORD PTR $T135824[esp+292]
	fild	DWORD PTR -264+[esp+284]
	mov	DWORD PTR -264+[esp+284], edx
	fmul	DWORD PTR __real@3b808081
	fild	DWORD PTR -264+[esp+284]
	mov	DWORD PTR -264+[esp+284], eax
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR $T135846[esp+288]
	fild	DWORD PTR -264+[esp+284]
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR $T135846[esp+292]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T135554[esp+284]
	fld	DWORD PTR $T135846[esp+288]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T135554[esp+288]
	fstp	ST(0)
	fstp	ST(0)
	fld	DWORD PTR $T135846[esp+292]
	fmul	DWORD PTR $T135824[esp+292]
	fstp	DWORD PTR $T135554[esp+292]
	fld	DWORD PTR $T135554[esp+284]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T135873[esp+284]
	fld	DWORD PTR $T135873[esp+284]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$135923[esp+284]
	mov	eax, DWORD PTR _I$135923[esp+284]
	cmp	eax, ebp
	jge	SHORT $L135928
	mov	BYTE PTR $T135550[esp+284], 0
	jmp	SHORT $L135927
$L135928:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T135550[esp+284], al
	jl	SHORT $L135927
	mov	BYTE PTR $T135550[esp+284], 255		; 000000ffH
$L135927:
	fld	DWORD PTR $T135554[esp+288]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T135891[esp+284]
	fld	DWORD PTR $T135891[esp+284]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$135933[esp+284]
	mov	eax, DWORD PTR _I$135933[esp+284]
	cmp	eax, ebp
	jge	SHORT $L135938
	mov	BYTE PTR $T135550[esp+285], 0
	jmp	SHORT $L135937
$L135938:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T135550[esp+285], al
	jl	SHORT $L135937
	mov	BYTE PTR $T135550[esp+285], 255		; 000000ffH
$L135937:
	fld	DWORD PTR $T135554[esp+292]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T135909[esp+284]
	fld	DWORD PTR $T135909[esp+284]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$135943[esp+284]
	mov	ecx, DWORD PTR _I$135943[esp+284]
	push	255					; 000000ffH
	push	ebp
	push	ecx
	call	?Clamp@@YAHHHH@Z			; Clamp
	mov	bl, al
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T135550[esp+286], bl
	mov	DWORD PTR $T135916[esp+284], 0
	fld	DWORD PTR $T135916[esp+284]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$135947[esp+284]
	mov	edx, DWORD PTR _I$135947[esp+284]
	push	255					; 000000ffH
	push	ebp
	push	edx
	call	?Clamp@@YAHHHH@Z			; Clamp
	xor	ecx, ecx
	mov	cl, bl
	mov	BYTE PTR $T135550[esp+299], al
	mov	eax, DWORD PTR $T135550[esp+296]
	mov	edx, eax
	shl	edx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	esp, 12					; 0000000cH
	add	ecx, edx
	add	ecx, eax
	or	ecx, -16777216				; ff000000H
	mov	DWORD PTR _clr$123395[esp+284], ecx
$L123398:

; 1316 : 
; 1317 : 			if(bHeatVision||bNightVision)

	cmp	DWORD PTR _bHeatVision$[esp+284], ebp
	jne	SHORT $L123405
	cmp	DWORD PTR _bNightVision$[esp+284], ebp
	je	SHORT $L123404
$L123405:

; 1318 : 			{
; 1319 : 				clr=myFinalColor.TrueColor() | 0xFF000000;

	mov	ecx, DWORD PTR _myFinalColor$[esp+284]
	xor	eax, eax
	mov	al, BYTE PTR _myFinalColor$[esp+286]
	shl	ecx, 16					; 00000010H
	mov	ah, BYTE PTR _myFinalColor$[esp+285]
	add	eax, ecx
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR _clr$123395[esp+284], eax
$L123404:

; 1320 : 			}
; 1321 : 
; 1322 : 			if(SurfPolyFlagsEx&(PFX_LightenModulate|PFX_DarkenModulate))

	test	BYTE PTR _SurfPolyFlagsEx$[esp+284], 48	; 00000030H
	je	SHORT $L123406

; 1323 : 			{
; 1324 : 				clr=0xFFFFFFFF;

	mov	DWORD PTR _clr$123395[esp+284], -1

; 1325 : 			}
; 1326 : 			else if(SurfPolyFlags&PF_Modulated)

	jmp	SHORT $L123408
$L123406:
	test	BYTE PTR _SurfPolyFlags$[esp+284], 64	; 00000040H
	je	SHORT $L123408

; 1327 : 			{
; 1328 : 				clr = (0xFF<<24)|(248<<16)|(248<<8)|248;	// NJS: 248 is the darkening correction needed to remove boxes from modulated decals, etc

	mov	DWORD PTR _clr$123395[esp+284], -460552	; fff8f8f8H
$L123408:

; 1329 : 			}
; 1330 : 
; 1331 : 			INT n=0;
; 1332 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	eax, DWORD PTR [edx+100]
	cmp	eax, ebp
	mov	DWORD PTR _n$123409[esp+284], ebp
	mov	DWORD PTR _Poly$123410[esp+284], eax
	je	$L123413
$L123411:

; 1333 : 			{
; 1334 : 				for( INT i=0; i<Poly->NumPts; i++, n++, V++ )

	mov	eax, DWORD PTR _Poly$123410[esp+284]
	mov	ecx, DWORD PTR [eax+12]
	test	ecx, ecx
	mov	DWORD PTR _i$123414[esp+284], 0
	jle	$L123412
	mov	eax, DWORD PTR _n$123409[esp+284]
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR _Poly$123410[esp+284]
	lea	edx, DWORD PTR [esi+ecx*8+19748]
	mov	DWORD PTR -240+[esp+284], edx
	lea	ebp, DWORD PTR [eax+16]
$L123415:

; 1335 : 				{
; 1336 : 					GET_COLOR_DWORD(V->Color)   = clr;

	mov	ecx, DWORD PTR _clr$123395[esp+284]

; 1337 : 					FLOAT R = V->Position.W   = Poly->Pts[i]->RZ * Frame->RProj.Z;

	mov	eax, DWORD PTR _Frame$[esp+284]
	mov	DWORD PTR [edi+16], ecx
	mov	edx, DWORD PTR [ebp]
	fld	DWORD PTR [edx+28]

; 1338 : 					FLOAT Z = V->Position.Z    = ProjectionMatrix._33 + ProjectionMatrix._43 * R;					
; 1339 : 					FLOAT Y = V->Position.Y    = Poly->Pts[i]->ScreenY + Frame->YB - 0.5f; 
; 1340 : 					FLOAT X = V->Position.X    = Poly->Pts[i]->ScreenX + Frame->XB - 0.5f;
; 1341 : 					
; 1342 : 					//X=V->Position.X+= (appSin(Poly->Pts[i]->Point.Y+appSeconds()*2.2f)*3.1f);  // NJS: Caustics simulation
; 1343 : 					
; 1344 : 					FVector TexPlane = (*(FVector*)Poly->Pts[i] - Facet.MapCoords.Origin);
; 1345 : 					FLOAT u  = Facet.MapCoords.XAxis | TexPlane;
; 1346 : 					FLOAT v  = Facet.MapCoords.YAxis | TexPlane;
; 1347 : 
; 1348 : 					// *************************
; 1349 : 					// NJS: Been getting random crashes around here recently, so just be sure of a few things:
; 1350 : 					check(Surface.Texture);

	mov	ebx, DWORD PTR _Surface$[esp+280]
	fmul	DWORD PTR [eax+232]
	fst	DWORD PTR [edi+12]
	fst	DWORD PTR _R$123419[esp+284]
	fmul	DWORD PTR [esi+19508]
	fadd	DWORD PTR [esi+19492]
	fst	DWORD PTR [edi+8]
	mov	ecx, DWORD PTR [ebp]
	fstp	DWORD PTR _Z$123420[esp+284]
	fild	DWORD PTR [eax+180]
	fadd	DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _Facet$[esp+280]
	fsub	DWORD PTR __real@3f000000
	fst	DWORD PTR [edi+4]
	mov	edx, DWORD PTR [ebp]
	fstp	DWORD PTR _Y$123421[esp+284]
	fild	DWORD PTR [eax+176]
	fadd	DWORD PTR [edx+16]
	fsub	DWORD PTR __real@3f000000
	fst	DWORD PTR [edi]
	mov	eax, DWORD PTR [ebp]
	fstp	DWORD PTR _X$123422[esp+284]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ebx+16]
	test	eax, eax
	fsub	DWORD PTR [ecx+8]
	fld	ST(2)
	fmul	DWORD PTR [ecx+12]
	fld	ST(1)
	fmul	DWORD PTR [ecx+20]
	faddp	ST(1), ST(0)
	fld	ST(2)
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _u$123426[esp+284]
	fmul	DWORD PTR [ecx+32]
	fxch	ST(1)
	fmul	DWORD PTR [ecx+28]
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	DWORD PTR [ecx+24]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _v$123427[esp+284]
	jne	SHORT $L123428
	push	1350					; 00000546H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@BICI@Surface?4Texture?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L123428:

; 1351 : 					check(Surface.LightMap);

	mov	eax, DWORD PTR [ebx+20]
	test	eax, eax
	jne	SHORT $L123430
	push	1351					; 00000547H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0BB@KKDE@Surface?4LightMap?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L123430:

; 1352 : 					check(Stages[0]);

	mov	eax, DWORD PTR [esi+19712]
	test	eax, eax
	jne	SHORT $L123432
	push	1352					; 00000548H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_09PNHJ@Stages?$FL0?$FN?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L123432:

; 1353 : 					check(Stages[1]);

	mov	eax, DWORD PTR [esi+19716]
	test	eax, eax
	jne	SHORT $L123434
	push	1353					; 00000549H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_09OLND@Stages?$FL1?$FN?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L123434:
	lea	eax, DWORD PTR [edi+20]

; 1354 : 					check(V);
; 1355 : 					check(V->U);

	test	eax, eax
	jne	SHORT $L123438
	push	1355					; 0000054bH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_04GHEP@V?9?$DOU?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L123438:
	lea	ebx, DWORD PTR [edi+28]

; 1356 : 					check(V->U2);

	test	ebx, ebx
	jne	SHORT $L123440
	push	1356					; 0000054cH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_05MGNJ@V?9?$DOU2?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L123440:

; 1357 : 					// *************************
; 1358 : 
; 1359 : 					V->U [0] = (u - Surface.Texture->Pan.X                                   ) * Stages[0]->UScale;

	mov	ecx, DWORD PTR _Surface$[esp+280]
	fld	DWORD PTR _u$123426[esp+284]
	mov	eax, DWORD PTR [ecx+16]
	fsub	DWORD PTR [eax+20]
	mov	edx, DWORD PTR [esi+19712]
	fmul	DWORD PTR [edx+24]
	fstp	DWORD PTR [edi+20]

; 1360 : 					V->U [1] = (v - Surface.Texture->Pan.Y                                   ) * Stages[0]->VScale;

	mov	eax, DWORD PTR [ecx+16]
	fld	DWORD PTR _v$123427[esp+284]
	mov	edx, DWORD PTR [esi+19712]
	fsub	DWORD PTR [eax+24]
	fmul	DWORD PTR [edx+28]
	fstp	DWORD PTR [edi+24]

; 1361 : 					V->U2[0] = (u - Surface.LightMap->Pan.X + 0.5f * Surface.LightMap->UScale) * Stages[1]->UScale;

	mov	eax, DWORD PTR [ecx+20]
	fld	DWORD PTR _u$123426[esp+284]
	fsub	DWORD PTR [eax+20]
	fld	DWORD PTR [eax+40]
	mov	eax, DWORD PTR [esi+19716]
	fmul	DWORD PTR __real@3f000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR [eax+24]
	fstp	DWORD PTR [ebx]

; 1362 : 					V->U2[1] = (v - Surface.LightMap->Pan.Y + 0.5f * Surface.LightMap->VScale) * Stages[1]->VScale;

	mov	eax, DWORD PTR [ecx+20]
	fld	DWORD PTR _v$123427[esp+284]
	mov	ecx, DWORD PTR [esi+19716]
	fsub	DWORD PTR [eax+24]
	fld	DWORD PTR [eax+44]

; 1363 : 
; 1364 : 					//V->U[2] = 1.0f;
; 1365 : 					//V->U[3] = 1.0f;
; 1366 : 					
; 1367 : 					if( StoreVertInfo ) 

	mov	eax, DWORD PTR _StoreVertInfo$[esp+284]
	test	eax, eax
	fmul	DWORD PTR __real@3f000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR [ecx+28]
	fstp	DWORD PTR [edi+32]
	je	SHORT $L136822

; 1368 : 					{
; 1369 : 						check(n<ARRAY_COUNT(Verts));

	cmp	DWORD PTR _n$123409[esp+284], 16384	; 00004000H
	jb	SHORT $L123443
	push	1369					; 00000559H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0BF@MPKE@n?$DMARRAY_COUNT?$CIVerts?$CJ?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L123443:

; 1370 : 						Verts[n].Position.X = X;    

	mov	eax, DWORD PTR -240+[esp+284]
	mov	edx, DWORD PTR _X$123422[esp+284]

; 1371 : 						Verts[n].Position.Y = Y;

	mov	ecx, DWORD PTR _Y$123421[esp+284]
	mov	DWORD PTR [eax-4], edx

; 1372 : 						Verts[n].Position.Z = Z;

	mov	edx, DWORD PTR _Z$123420[esp+284]
	mov	DWORD PTR [eax], ecx

; 1373 : 						Verts[n].Position.W = R;

	mov	ecx, DWORD PTR _R$123419[esp+284]
	mov	DWORD PTR [eax+4], edx

; 1374 : 						Verts[n].U[0]= u;

	mov	edx, DWORD PTR _u$123426[esp+284]
	mov	DWORD PTR [eax+8], ecx

; 1375 : 						Verts[n].U[1]= v;

	mov	ecx, DWORD PTR _v$123427[esp+284]
	mov	DWORD PTR [eax+20], edx
	mov	DWORD PTR [eax+24], ecx
	jmp	SHORT $L123416
$L136822:
	mov	eax, DWORD PTR -240+[esp+284]
$L123416:

; 1333 : 			{
; 1334 : 				for( INT i=0; i<Poly->NumPts; i++, n++, V++ )

	mov	ecx, DWORD PTR _i$123414[esp+284]
	mov	edx, DWORD PTR _n$123409[esp+284]
	inc	ecx
	add	ebp, 4
	inc	edx
	add	eax, 40					; 00000028H
	mov	DWORD PTR _n$123409[esp+284], edx
	mov	edx, DWORD PTR _Poly$123410[esp+284]
	mov	DWORD PTR -240+[esp+284], eax
	mov	eax, DWORD PTR [edx+12]
	add	edi, 36					; 00000024H
	cmp	ecx, eax
	mov	DWORD PTR _i$123414[esp+284], ecx
	jl	$L123415
$L123412:

; 1329 : 			}
; 1330 : 
; 1331 : 			INT n=0;
; 1332 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	eax, DWORD PTR _Poly$123410[esp+284]
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	mov	DWORD PTR _Poly$123410[esp+284], eax
	jne	$L123411
$L123413:

; 1376 : 					}			
; 1377 : 				}
; 1378 : 			}
; 1379 : 
; 1380 : 			// Draw base texture + lightmap.
; 1381 : 			INT First = WorldVertices.Unlock();

	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	jne	SHORT $L135980
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L135980:
	mov	eax, DWORD PTR [esi+16684]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L135981
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L135981:

; 1382 : 		
; 1383 : 			for( Poly=Facet.Polys; Poly; Poly=Poly->Next)

	mov	ecx, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [ecx+100]
	test	edi, edi
	mov	ebp, DWORD PTR [esi+16692]
	je	SHORT $L123448

; 1941 : 	}

	npad	7
$L123446:

; 1384 : 			{
; 1385 : 				Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, Poly->NumPts - 2 );

	mov	ecx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	sub	ecx, 2
	push	ecx
	push	ebp
	push	6
	push	eax
	call	DWORD PTR [edx+280]

; 1386 : 				First += Poly->NumPts;

	mov	edx, DWORD PTR [edi+12]

; 1387 : 				Stats.Polys++;

	mov	ecx, DWORD PTR [esi+19668]
	add	ebp, edx
	inc	ecx
	mov	DWORD PTR [esi+19668], ecx
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $L123446
$L123448:

; 1388 : 			}
; 1389 : 
; 1390 : 			SetTextureNULL(1);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	1
	push	eax
	call	DWORD PTR [edx+244]
	lea	eax, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+19716], eax

; 1391 : 			// Handle depth buffering the appropriate areas of masked textures.
; 1392 : 			if( SurfPolyFlags & PF_Masked )

	mov	eax, DWORD PTR _SurfPolyFlags$[esp+284]
	and	eax, 2
	mov	DWORD PTR -232+[esp+284], eax
	je	$L123528

; 1393 : 				Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_EQUAL );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]

; 1394 : 		}
; 1395 : 		else

	jmp	$L123528
$L123390:

; 1396 : 		{
; 1397 : 			// Set up all poly vertices.
; 1398 : 			if(SurfPolyFlags&PF_FlatShaded)

	mov	eax, ebp
	and	eax, 1073741824				; 40000000H
	mov	DWORD PTR -228+[esp+284], eax
	je	$L123451

; 1399 : 			{
; 1400 : 				SetTextureNULL(0);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	xor	ebp, ebp
	push	ebp
	push	ebp
	push	eax
	call	DWORD PTR [edx+244]

; 1401 : 				SetTextureNULL(1);

	push	ebp
	lea	edi, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+19712], edi
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [ecx+244]
	mov	DWORD PTR [esi+19716], edi

; 1402 : 				SetBlending();

	mov	ebx, DWORD PTR [esi+19616]
	mov	edx, DWORD PTR [esi+19620]
	xor	ebx, -2147483648			; 80000000H
	test	bh, 1
	mov	DWORD PTR _XorEx$136025[esp+284], edx
	je	SHORT $L136026
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
$L136026:
	mov	al, BYTE PTR _XorEx$136025[esp+284]
	test	al, 2
	je	SHORT $L136027
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [edx+200]
	mov	al, BYTE PTR _XorEx$136025[esp+284]
$L136027:
	test	al, 8
	je	SHORT $L136028
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	al, BYTE PTR _XorEx$136025[esp+284]
$L136028:
	test	ebx, -754972601				; d3000847H
	jne	SHORT $L136030
	test	al, 113					; 00000071H
	je	$L136066
$L136030:
	test	ebx, 268435525				; 10000045H
	jne	SHORT $L136032
	test	al, 113					; 00000071H
	je	SHORT $L136016
$L136032:
	test	al, 1
	je	SHORT $L136033
	cmp	DWORD PTR [esi+19128], ebp
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L136034
	mov	edx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L136035
$L136034:
	mov	ecx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
$L136035:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L136033:
	cmp	DWORD PTR [esi+675176], ebp
	jne	SHORT $L136017
	cmp	DWORD PTR ?CacheBlending@@3HA, ebp	; CacheBlending
	jne	SHORT $L136016
$L136017:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675176], ebp
$L136016:
	test	bl, 1
	je	SHORT $L136053
	xor	edx, edx
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L136053:
	test	ebx, ebx
	jns	SHORT $L136055
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [ecx+200]
$L136055:
	test	bl, 2
	je	SHORT $L136058
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
$L136058:
	test	bh, 8
	je	SHORT $L136059
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
$L136059:
	test	ebx, 1073741824				; 40000000H
	je	SHORT $L136060
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [ecx+200]
$L136060:
	test	ebx, 50331648				; 03000000H
	je	SHORT $L136066
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
$L136066:
	mov	DWORD PTR [esi+19616], -2147483648	; 80000000H
	mov	DWORD PTR [esi+19620], ebp

; 1403 : 			} else

	jmp	$L136069
$L123451:

; 1404 : 			{
; 1405 : 				SetTexture( 0, *Surface.Texture, SurfPolyFlags, 0 );

	mov	edx, DWORD PTR [ebx+16]
	push	0
	push	0
	push	0
	push	ebp
	push	edx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1406 : 				SetBlending( SurfPolyFlags&~PF_Memorized, SurfPolyFlagsEx );

	and	ebp, -16777217				; feffffffH
	mov	DWORD PTR $T136119[esp+284], ebp
	and	ebp, 1073741892				; 40000044H
	cmp	ebp, 1073741824				; 40000000H
	jne	SHORT $L136071
	mov	eax, DWORD PTR [esi+19148]
	test	eax, eax
	jne	SHORT $L136851
$L136071:
	mov	eax, DWORD PTR $T136119[esp+284]
	and	eax, -1073741825			; bfffffffH
	mov	DWORD PTR $T136119[esp+284], eax
	jmp	SHORT $L136070
$L136851:
	mov	eax, DWORD PTR $T136119[esp+284]
$L136070:
	test	al, 68					; 00000044H
	mov	ecx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	jne	SHORT $L136072
	test	cl, 113					; 00000071H
	jne	SHORT $L136072
	or	eax, -2147483648			; 80000000H
	jmp	SHORT $L136892
$L136072:
	test	al, 4
	je	SHORT $L136074
	and	eax, -3					; fffffffdH
$L136892:
	mov	DWORD PTR $T136119[esp+284], eax
$L136074:
	mov	edx, DWORD PTR [esi+19616]
	mov	ebx, DWORD PTR [esi+19620]
	xor	edx, eax
	xor	ebx, ecx
	test	dh, 1
	mov	DWORD PTR _Xor$136075[esp+284], edx
	je	SHORT $L136077
	mov	edx, DWORD PTR $T136119[esp+284]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	not	edx
	and	edx, 256				; 00000100H
	or	edx, 128				; 00000080H
	shr	edx, 7
	push	edx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR $T136119[esp+284]
$L136077:
	test	bl, 2
	je	SHORT $L136078
	mov	edx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, 1
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR $T136119[esp+284]
$L136078:
	test	bl, 8
	je	SHORT $L136079
	mov	edx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR $T136119[esp+284]
$L136079:
	test	DWORD PTR _Xor$136075[esp+284], -754972601 ; d3000847H
	jne	SHORT $L136081
	test	bl, 113					; 00000071H
	je	$L136118
	mov	ecx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR $T136119[esp+284]
$L136081:
	test	DWORD PTR _Xor$136075[esp+284], 268435525 ; 10000045H
	jne	SHORT $L136083
	test	bl, 113					; 00000071H
	je	$L136104
$L136083:
	test	bl, 1
	je	SHORT $L136084
	test	cl, 1
	jne	SHORT $L136084
	mov	eax, DWORD PTR [esi+19128]
	test	eax, eax
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L136085
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	jmp	SHORT $L136086
$L136085:
	mov	edx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L136086:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	ecx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR $T136119[esp+284]
$L136084:
	test	eax, 268435525				; 10000045H
	jne	SHORT $L136087
	test	cl, 113					; 00000071H
	jne	SHORT $L136087
	xor	edx, edx
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	jmp	$L136104
$L136087:
	test	cl, 64					; 00000040H
	je	SHORT $L136089
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
$L136893:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L136104
$L136089:
	test	al, 1
	je	SHORT $L136091
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
$L136895:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L136104
$L136091:
	test	cl, 32					; 00000020H
	je	SHORT $L136094
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L136104
$L136094:
	test	cl, 16					; 00000010H
	je	SHORT $L136096
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	SHORT $L136895
$L136096:
	test	al, 4
	je	SHORT $L136098
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	$L136893
$L136098:
	test	al, 64					; 00000040H
	je	SHORT $L136100
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L136104
$L136100:
	test	eax, 268435456				; 10000000H
	je	SHORT $L136102
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L136104
$L136102:
	test	cl, 1
	je	$L136104
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	5
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	6
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L136104:
	test	BYTE PTR _Xor$136075[esp+284], 1
	je	SHORT $L136105
	mov	edx, DWORD PTR $T136119[esp+284]
	and	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L136105:
	mov	eax, DWORD PTR _Xor$136075[esp+284]
	test	eax, eax
	jns	SHORT $L136107
	mov	ecx, DWORD PTR $T136119[esp+284]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	shr	ecx, 31					; 0000001fH
	push	ecx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
$L136107:
	test	BYTE PTR _Xor$136075[esp+284], 2
	je	SHORT $L136110
	test	BYTE PTR $T136119[esp+284], 2
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L136109
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	jmp	SHORT $L136110
$L136109:
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L136110:
	mov	ebp, DWORD PTR _Xor$136075[esp+284]
	test	ebp, 2048				; 00000800H
	mov	ebx, DWORD PTR $T136119[esp+284]
	je	SHORT $L136111
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	mov	edi, ebx
	and	edi, 2048				; 00000800H
	neg	edi
	sbb	edi, edi
	add	edi, 2
	push	edi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L136111:
	test	ebp, 1073741824				; 40000000H
	je	SHORT $L136112
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	mov	ecx, ebx
	shr	ecx, 30					; 0000001eH
	and	ecx, 1
	push	ecx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
$L136112:
	test	ebp, 50331648				; 03000000H
	je	SHORT $L136118
	test	ebx, 16777216				; 01000000H
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	je	SHORT $L136115
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	3
	jmp	SHORT $L136896
$L136115:
	test	ebx, 33554432				; 02000000H
	je	SHORT $L136117
	push	3
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	2
	jmp	SHORT $L136896
$L136117:
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	1
$L136896:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
$L136118:
	mov	edx, DWORD PTR $T136119[esp+284]
	mov	eax, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	DWORD PTR [esi+19616], edx
	mov	DWORD PTR [esi+19620], eax
$L136069:

; 1407 : 			}
; 1408 : 
; 1409 : 			// Count things to draw to plan when to do the final color-scaling pass.
; 1410 : 			INT ModulateThings = (Surface.Texture!=NULL) + (Surface.LightMap!=NULL) + (Surface.MacroTexture!=NULL);

	mov	ebp, DWORD PTR _Surface$[esp+280]
	mov	edx, DWORD PTR [ebp+20]
	mov	eax, DWORD PTR [ebp+24]
	mov	edi, DWORD PTR [ebp+16]
	xor	ecx, ecx
	test	edx, edx
	setne	cl

; 1411 : 			FPlane FinalColor(1,1,1,1);			
; 1412 : 			FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	xor	edx, edx
	test	eax, eax
	setne	dl
	xor	eax, eax
	mov	DWORD PTR _FinalColor$123454[esp+284], 1065353216 ; 3f800000H
	mov	DWORD PTR _FinalColor$123454[esp+288], 1065353216 ; 3f800000H
	mov	DWORD PTR _FinalColor$123454[esp+292], 1065353216 ; 3f800000H
	mov	DWORD PTR _FinalColor$123454[esp+296], 1065353216 ; 3f800000H
	add	ecx, edx
	test	edi, edi
	setne	al
	add	ecx, eax
	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	mov	DWORD PTR _ModulateThings$123453[esp+284], ecx
	jne	SHORT $L136130
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L136130:
	mov	eax, DWORD PTR [esi+16688]
	test	eax, eax
	jne	SHORT $L136131
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L136131:
	mov	edi, DWORD PTR _VertexCount$[esp+284]
	cmp	edi, DWORD PTR [esi+16688]
	jl	SHORT $L136134
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L136134:
	mov	eax, DWORD PTR [esi+16696]
	mov	edx, DWORD PTR [esi+16688]
	lea	ecx, DWORD PTR [eax+edi]
	cmp	ecx, edx
	jge	SHORT $L136148
	mov	ecx, DWORD PTR [esi+16684]
	mov	ebx, DWORD PTR [ecx]
	push	4096					; 00001000H
	lea	edx, DWORD PTR [edi+edi*8]
	shl	edx, 2
	lea	ebp, DWORD PTR _VertexData$136133[esp+288]
	push	ebp
	push	edx
	mov	DWORD PTR -252+[esp+296], edx
	lea	edx, DWORD PTR [eax+eax*8]
	shl	edx, 2
	push	edx
	push	ecx
	call	DWORD PTR [ebx+44]
	test	eax, eax
	jge	SHORT $L136143
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136143:
	mov	eax, DWORD PTR [esi+16696]
	mov	ebp, DWORD PTR _Surface$[esp+280]
	mov	DWORD PTR [esi+16692], eax
	add	eax, edi
	mov	DWORD PTR [esi+16696], eax
	jmp	SHORT $L136147
$L136148:
	mov	eax, DWORD PTR [esi+16684]
	mov	edx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	ecx, DWORD PTR [edi+edi*8]
	shl	ecx, 2
	lea	ebx, DWORD PTR _VertexData$136133[esp+288]
	push	ebx
	push	ecx
	push	0
	push	eax
	mov	DWORD PTR -252+[esp+304], ecx
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L136149
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136149:
	mov	DWORD PTR [esi+16692], 0
	mov	DWORD PTR [esi+16696], edi
$L136147:

; 1413 : 			D3DCOLOR Clr;
; 1414 : 			if( SurfPolyFlags & PF_FlatShaded )

	mov	eax, DWORD PTR -228+[esp+284]
	mov	edi, DWORD PTR _VertexData$136133[esp+284]
	or	ebx, -1
	test	eax, eax
	je	SHORT $L123458

; 1415 : 				Clr = FColor( Surface.FlatColor).TrueColor() | 0xff000000;

	mov	eax, DWORD PTR [ebp+8]
	xor	edx, edx
	mov	DWORD PTR $T135555[esp+284], eax
	mov	dl, BYTE PTR $T135555[esp+286]
	mov	ecx, eax
	shl	ecx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	edx, ecx
	add	edx, eax
	or	edx, -16777216				; ff000000H
	mov	DWORD PTR _Clr$123457[esp+284], edx

; 1416 : 			else

	jmp	$L136195
$L123458:

; 1417 : 				Clr = UpdateModulation( ModulateThings, FinalColor, Stages[0]->MaxColor.Plane() );

	mov	eax, DWORD PTR [esi+19712]
	movzx	edx, BYTE PTR [eax+34]
	movzx	ecx, BYTE PTR [eax+33]
	add	eax, 32					; 00000020H
	mov	DWORD PTR -256+[esp+284], edx
	movzx	edx, BYTE PTR [eax]
	fild	DWORD PTR -256+[esp+284]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR __real@3b808081
	mov	DWORD PTR -256+[esp+296], ecx
	lea	ecx, DWORD PTR $T136170[esp+296]
	fstp	DWORD PTR [esp+8]
	fild	DWORD PTR -256+[esp+296]
	mov	DWORD PTR -256+[esp+296], edx
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR [esp+4]
	fild	DWORD PTR -256+[esp+296]
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T136170[esp+284]
	fmul	DWORD PTR _FinalColor$123454[esp+284]
	mov	eax, DWORD PTR _ModulateThings$123453[esp+284]
	dec	eax
	mov	DWORD PTR _ModulateThings$123453[esp+284], eax
	fstp	DWORD PTR _FinalColor$123454[esp+284]
	fld	DWORD PTR $T136170[esp+288]
	fmul	DWORD PTR _FinalColor$123454[esp+288]
	fstp	DWORD PTR _FinalColor$123454[esp+288]
	fld	DWORD PTR $T136170[esp+292]
	fmul	DWORD PTR _FinalColor$123454[esp+292]
	fstp	DWORD PTR _FinalColor$123454[esp+292]
	je	SHORT $L136194
	mov	DWORD PTR _Clr$123457[esp+284], ebx
	jmp	SHORT $L136195
$L136194:
	lea	eax, DWORD PTR _FinalColor$123454[esp+284]
	push	eax
	lea	ecx, DWORD PTR $T136193[esp+288]
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	eax, DWORD PTR [eax]
	xor	ecx, ecx
	mov	DWORD PTR _D$136200[esp+284], eax
	mov	cl, BYTE PTR _D$136200[esp+286]
	mov	edx, eax
	shl	edx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	ecx, edx
	add	ecx, eax
	or	ecx, -16777216				; ff000000H
	mov	DWORD PTR _Clr$123457[esp+284], ecx
$L136195:

; 1418 : 
; 1419 : 			if(bHeatVision||bNightVision)

	mov	eax, DWORD PTR _bHeatVision$[esp+284]
	test	eax, eax
	jne	SHORT $L123464
	mov	eax, DWORD PTR _bNightVision$[esp+284]
	test	eax, eax
	je	SHORT $L123463
$L123464:

; 1420 : 			{
; 1421 : 				Clr=myFinalColor.TrueColor() | 0xFF000000;

	mov	ecx, DWORD PTR _myFinalColor$[esp+284]
	xor	eax, eax
	mov	al, BYTE PTR _myFinalColor$[esp+286]
	shl	ecx, 16					; 00000010H
	mov	ah, BYTE PTR _myFinalColor$[esp+285]
	add	eax, ecx
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR _Clr$123457[esp+284], eax
$L123463:

; 1422 : 			}
; 1423 : 
; 1424 : 			if(SurfPolyFlagsEx&(PFX_LightenModulate|PFX_DarkenModulate))

	test	BYTE PTR _SurfPolyFlagsEx$[esp+284], 48	; 00000030H
	je	SHORT $L123465

; 1425 : 			{
; 1426 : 				Clr=0xFFFFFFFF;

	mov	DWORD PTR _Clr$123457[esp+284], ebx

; 1427 : 			}
; 1428 : 			else if(SurfPolyFlags&PF_Modulated)

	jmp	SHORT $L123467
$L123465:
	test	BYTE PTR _SurfPolyFlags$[esp+284], 64	; 00000040H
	je	SHORT $L123467

; 1429 : 			{
; 1430 : 				Clr = (0xFF<<24)|(248<<16)|(248<<8)|248;

	mov	DWORD PTR _Clr$123457[esp+284], -460552	; fff8f8f8H
$L123467:

; 1431 : 			}
; 1432 : 
; 1433 : 			INT n=0;
; 1434 : 			//Queued3DLinesFlush(Frame);
; 1435 : 
; 1436 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	ebp, DWORD PTR [edx+100]
	test	ebp, ebp
	mov	DWORD PTR _n$123468[esp+284], 0
	je	$L123472
$L123470:

; 1437 : 			{
; 1438 : 				// Set up vertices.
; 1439 : 				for( INT i=0; i<Poly->NumPts; i++, n++, V++ )

	mov	eax, DWORD PTR [ebp+12]
	test	eax, eax
	mov	DWORD PTR _i$123473[esp+284], 0
	jle	$L123471
	mov	eax, DWORD PTR _n$123468[esp+284]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	edx, DWORD PTR [esi+eax*8+19748]
	lea	eax, DWORD PTR [ebp+16]
$L123474:

; 1440 : 				{
; 1441 : 					GET_COLOR_DWORD(V->Color) = Clr;

	mov	ecx, DWORD PTR _Clr$123457[esp+284]
	mov	DWORD PTR [edi+16], ecx

; 1442 : 					//GET_COLOR_DWORD(V->Color) =appRand() ^ (appRand()<<16);
; 1443 : 					FLOAT X = V->Position.X  = Poly->Pts[i]->ScreenX + Frame->XB - 0.5f;

	mov	ebx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Frame$[esp+284]
	fild	DWORD PTR [ecx+176]
	fadd	DWORD PTR [ebx+16]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [edi]

; 1444 : 					FLOAT Y = V->Position.Y  = Poly->Pts[i]->ScreenY + Frame->YB - 0.5f;

	mov	ebx, DWORD PTR [eax]
	fild	DWORD PTR [ecx+180]
	fadd	DWORD PTR [ebx+20]
	fsub	DWORD PTR __real@3f000000
	fst	DWORD PTR [edi+4]

; 1445 : 					FLOAT R = V->Position.W = Poly->Pts[i]->RZ * Frame->RProj.Z;

	mov	ebx, DWORD PTR [eax]
	fld	DWORD PTR [ebx+28]

; 1446 : 					FLOAT Z = V->Position.Z  = ProjectionMatrix._33 + ProjectionMatrix._43 * R;
; 1447 : 					FVector TexPlane = (*(FVector*)Poly->Pts[i] - Facet.MapCoords.Origin);

	mov	ebx, DWORD PTR _Facet$[esp+280]
	fmul	DWORD PTR [ecx+232]
	fst	DWORD PTR [edi+12]
	fst	DWORD PTR _R$123480[esp+284]
	fmul	DWORD PTR [esi+19508]
	fadd	DWORD PTR [esi+19492]
	fst	DWORD PTR [edi+8]
	mov	ecx, DWORD PTR [eax]
	fstp	DWORD PTR _Z$123481[esp+284]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [ebx]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR [ebx+4]
	fld	DWORD PTR [ecx+8]

; 1448 : 					FLOAT u  = Facet.MapCoords.XAxis | TexPlane;
; 1449 : 					FLOAT v  = Facet.MapCoords.YAxis | TexPlane;
; 1450 : 					V->U[0] = (u - Surface.Texture->Pan.X) * Stages[0]->UScale;

	mov	ecx, DWORD PTR _Surface$[esp+280]
	fsub	DWORD PTR [ebx+8]
	fld	ST(0)
	fmul	DWORD PTR [ebx+20]
	fld	ST(2)
	fmul	DWORD PTR [ebx+16]
	faddp	ST(1), ST(0)
	fld	ST(3)
	fmul	DWORD PTR [ebx+12]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _u$123485[esp+284]
	fxch	ST(2)
	fmul	DWORD PTR [ebx+24]
	fxch	ST(2)
	fmul	DWORD PTR [ebx+32]
	faddp	ST(2), ST(0)
	fmul	DWORD PTR [ebx+28]
	mov	ebx, DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _v$123486[esp+284]
	fld	DWORD PTR _u$123485[esp+284]
	fsub	DWORD PTR [ebx+20]
	mov	ebx, DWORD PTR [esi+19712]
	fmul	DWORD PTR [ebx+24]
	fstp	DWORD PTR [edi+20]

; 1451 : 					V->U[1] = (v - Surface.Texture->Pan.Y) * Stages[0]->VScale;

	mov	ecx, DWORD PTR [ecx+16]
	fld	DWORD PTR _v$123486[esp+284]
	fsub	DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [esi+19712]
	fmul	DWORD PTR [ecx+28]

; 1452 : 
; 1453 : 					if( StoreVertInfo )

	mov	ecx, DWORD PTR _StoreVertInfo$[esp+284]
	test	ecx, ecx
	fstp	DWORD PTR [edi+24]
	je	SHORT $L136802

; 1454 : 					{
; 1455 : 						Verts[n].Position.X = X;    

	fld	DWORD PTR [edi]

; 1456 : 						Verts[n].Position.Y = Y;
; 1457 : 						Verts[n].Position.Z = Z;

	mov	ecx, DWORD PTR _Z$123481[esp+284]
	mov	DWORD PTR [edx+4], ecx

; 1458 : 						Verts[n].Position.W = R;

	mov	ecx, DWORD PTR _R$123480[esp+284]
	mov	DWORD PTR [edx+8], ecx

; 1459 : 						Verts[n].U[0]= u;

	mov	ecx, DWORD PTR _u$123485[esp+284]
	fstp	DWORD PTR [edx-4]
	mov	DWORD PTR [edx+20], ecx

; 1460 : 						Verts[n].U[1]= v;

	mov	ecx, DWORD PTR _v$123486[esp+284]
	fstp	DWORD PTR [edx]
	mov	DWORD PTR [edx+24], ecx
	jmp	SHORT $L123475
$L136802:
	fstp	ST(0)
$L123475:

; 1437 : 			{
; 1438 : 				// Set up vertices.
; 1439 : 				for( INT i=0; i<Poly->NumPts; i++, n++, V++ )

	mov	ecx, DWORD PTR _i$123473[esp+284]
	mov	ebx, DWORD PTR _n$123468[esp+284]
	inc	ecx
	add	eax, 4
	inc	ebx
	mov	DWORD PTR _n$123468[esp+284], ebx
	mov	ebx, DWORD PTR [ebp+12]
	add	edx, 40					; 00000028H
	add	edi, 36					; 00000024H
	cmp	ecx, ebx
	mov	DWORD PTR _i$123473[esp+284], ecx
	jl	$L123474
$L123471:

; 1431 : 			}
; 1432 : 
; 1433 : 			INT n=0;
; 1434 : 			//Queued3DLinesFlush(Frame);
; 1435 : 
; 1436 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	ebp, DWORD PTR [ebp]
	test	ebp, ebp
	jne	$L123470
$L123472:

; 1461 : 					}
; 1462 : 				}
; 1463 : 			}
; 1464 : 
; 1465 : 			// Draw bare base texture.
; 1466 : 			INT First = WorldVertices.Unlock();

	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	jne	SHORT $L136230
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L136230:
	mov	eax, DWORD PTR [esi+16684]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+48]
	test	eax, eax
	jge	SHORT $L136231
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136231:

; 1467 : 			//WorldVertices.Set();
; 1468 : 			for( Poly=Facet.Polys; Poly; n+=Poly->NumPts,Poly=Poly->Next)

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [edx+100]
	test	edi, edi
	mov	ebp, DWORD PTR [esi+16692]
	je	SHORT $L123491

; 1941 : 	}

	npad	4
$L123489:

; 1469 : 			{
; 1470 : 				Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, Poly->NumPts - 2 );

	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	sub	edx, 2
	push	edx
	push	ebp
	push	6
	push	eax
	call	DWORD PTR [ecx+280]

; 1471 : 				First += Poly->NumPts;

	mov	edx, DWORD PTR [edi+12]

; 1472 : 				Stats.Polys++;

	mov	ecx, DWORD PTR [esi+19668]
	add	ebp, edx
	inc	ecx
	mov	DWORD PTR [esi+19668], ecx
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $L123489
$L123491:

; 1473 : 			}
; 1474 : 
; 1475 : 			SetDistanceFog(false);

	mov	eax, DWORD PTR [esi+675196]
	test	eax, eax
	je	SHORT $L136240
	mov	eax, DWORD PTR [esi+675192]
	test	eax, eax
	je	SHORT $L136240
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675192], 0
$L136240:

; 1476 : 
; 1477 : 			// Handle depth buffering the appropriate areas of masked textures.
; 1478 : 			if( SurfPolyFlags & PF_Masked )

	mov	eax, DWORD PTR _SurfPolyFlags$[esp+284]
	and	eax, 2
	mov	DWORD PTR -232+[esp+284], eax
	je	SHORT $L123492

; 1479 : 				Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_EQUAL );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [edx+200]
$L123492:

; 1480 : 			
; 1481 : 			// Macrotexture.
; 1482 : 			if( Surface.MacroTexture )

	mov	eax, DWORD PTR _Surface$[esp+280]
	mov	ecx, DWORD PTR [eax+24]
	test	ecx, ecx
	je	$L123510

; 1483 : 			{
; 1484 : 				// Set the macrotexture.
; 1485 : 				SetBlending( PF_Modulated );

	mov	eax, DWORD PTR [esi+19616]
	mov	ebx, DWORD PTR [esi+19620]
	xor	eax, 64					; 00000040H
	test	ah, 1
	mov	DWORD PTR _Xor$136251[esp+284], eax
	je	SHORT $L136253
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$136251[esp+284]
$L136253:
	test	bl, 2
	je	SHORT $L136254
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$136251[esp+284]
$L136254:
	test	bl, 8
	je	SHORT $L136255
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$136251[esp+284]
$L136255:
	test	eax, -754972601				; d3000847H
	jne	SHORT $L136257
	test	bl, 113					; 00000071H
	je	$L136293
$L136257:
	test	eax, 268435525				; 10000045H
	jne	SHORT $L136259
	test	bl, 113					; 00000071H
	je	$L136277
$L136259:
	test	bl, 1
	je	SHORT $L136260
	mov	eax, DWORD PTR [esi+19128]
	test	eax, eax
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L136261
	mov	edx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L136262
$L136261:
	mov	ecx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L136262:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L136260:
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR _Xor$136251[esp+284]
$L136277:
	test	al, 1
	je	SHORT $L136280
	xor	edx, edx
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR _Xor$136251[esp+284]
$L136280:
	test	eax, eax
	jns	SHORT $L136282
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$136251[esp+284]
$L136282:
	test	al, 2
	je	SHORT $L136285
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$136251[esp+284]
$L136285:
	test	ah, 8
	je	SHORT $L136286
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR _Xor$136251[esp+284]
$L136286:
	test	eax, 1073741824				; 40000000H
	je	SHORT $L136287
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$136251[esp+284]
$L136287:
	test	eax, 50331648				; 03000000H
	je	SHORT $L136293
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L136293:

; 1486 : 				SetTexture( 0, *Surface.MacroTexture, 0, 0 );

	mov	eax, DWORD PTR _Surface$[esp+280]
	xor	ebp, ebp
	push	ebp
	push	ebp
	push	ebp
	mov	DWORD PTR [esi+19616], 64		; 00000040H
	mov	DWORD PTR [esi+19620], ebp
	mov	ecx, DWORD PTR [eax+24]
	push	ebp
	push	ecx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1487 : 				D3DCOLOR Clr = UpdateModulation( ModulateThings, FinalColor, Stages[0]->MaxColor.Plane() );

	mov	eax, DWORD PTR [esi+19712]
	movzx	edx, BYTE PTR [eax+34]
	movzx	ecx, BYTE PTR [eax+33]
	add	eax, 32					; 00000020H
	mov	DWORD PTR -256+[esp+284], edx
	movzx	edx, BYTE PTR [eax]
	fild	DWORD PTR -256+[esp+284]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR __real@3b808081
	mov	DWORD PTR -256+[esp+296], ecx
	lea	ecx, DWORD PTR $T136305[esp+296]
	fstp	DWORD PTR [esp+8]
	fild	DWORD PTR -256+[esp+296]
	mov	DWORD PTR -256+[esp+296], edx
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR [esp+4]
	fild	DWORD PTR -256+[esp+296]
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T136305[esp+284]
	fmul	DWORD PTR _FinalColor$123454[esp+284]
	mov	eax, DWORD PTR _ModulateThings$123453[esp+284]
	dec	eax
	mov	DWORD PTR _ModulateThings$123453[esp+284], eax
	fstp	DWORD PTR _FinalColor$123454[esp+284]
	fld	DWORD PTR $T136305[esp+288]
	fmul	DWORD PTR _FinalColor$123454[esp+288]
	fstp	DWORD PTR _FinalColor$123454[esp+288]
	fld	DWORD PTR $T136305[esp+292]
	fmul	DWORD PTR _FinalColor$123454[esp+292]
	fstp	DWORD PTR _FinalColor$123454[esp+292]
	je	SHORT $L136329
	mov	DWORD PTR _Clr$123494[esp+284], -1
	jmp	SHORT $L136330
$L136329:
	lea	eax, DWORD PTR _FinalColor$123454[esp+284]
	push	eax
	lea	ecx, DWORD PTR $T136328[esp+288]
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	eax, DWORD PTR [eax]
	xor	ecx, ecx
	mov	DWORD PTR _D$136335[esp+284], eax
	mov	cl, BYTE PTR _D$136335[esp+286]
	mov	edx, eax
	shl	edx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	ecx, edx
	add	ecx, eax
	or	ecx, -16777216				; ff000000H
	mov	DWORD PTR _Clr$123494[esp+284], ecx
$L136330:

; 1488 : 				FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

	cmp	DWORD PTR [esi+16684], ebp
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L136340
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136340:
	cmp	DWORD PTR [esi+16688], ebp
	jne	SHORT $L136341
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136341:
	mov	ebx, DWORD PTR _VertexCount$[esp+284]
	cmp	ebx, DWORD PTR [esi+16688]
	jl	SHORT $L136344
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136344:
	mov	ecx, DWORD PTR [esi+16696]
	mov	edx, DWORD PTR [esi+16688]
	lea	eax, DWORD PTR [ecx+ebx]
	cmp	eax, edx
	mov	eax, DWORD PTR [esi+16684]
	jge	SHORT $L136358
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$136343[esp+288]
	push	edi
	mov	edi, DWORD PTR -252+[esp+292]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	push	edi
	shl	ecx, 2
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	cmp	eax, ebp
	jge	SHORT $L136353
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136353:
	mov	eax, DWORD PTR [esi+16696]
	mov	DWORD PTR [esi+16692], eax
	add	eax, ebx
	mov	DWORD PTR [esi+16696], eax
	jmp	SHORT $L136357

; 1941 : 	}

	npad	3

; 1488 : 				FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

$L136358:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$136343[esp+288]
	push	edx
	mov	edx, DWORD PTR -252+[esp+292]
	push	edx
	push	ebp
	push	eax
	call	DWORD PTR [ecx+44]
	cmp	eax, ebp
	jge	SHORT $L136359
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136359:
	mov	DWORD PTR [esi+16692], ebp
	mov	DWORD PTR [esi+16696], ebx
$L136357:

; 1489 : 				INT n=0;
; 1490 : 				for( Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [edx+100]
	cmp	edi, ebp
	mov	eax, DWORD PTR _VertexData$136343[esp+284]
	je	$L123502

; 1941 : 	}

	npad	3
$L123500:

; 1491 : 				{
; 1492 : 					for( INT i=0; i<Poly->NumPts; i++,n++,V++ )

	mov	ecx, DWORD PTR [edi+12]
	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $L123501
	lea	ecx, DWORD PTR [ebp+ebp*4]
	lea	ecx, DWORD PTR [esi+ecx*8+19748]
$L123504:

; 1493 : 					{
; 1494 : 						V->Color = Clr;

	mov	ebx, DWORD PTR _Clr$123494[esp+284]
	mov	DWORD PTR [eax+16], ebx

; 1495 : 						V->Position.X = Verts[n].Position.X;    

	mov	ebx, DWORD PTR [ecx-4]
	mov	DWORD PTR [eax], ebx

; 1496 : 						V->Position.Y = Verts[n].Position.Y;

	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], ebx

; 1497 : 						V->Position.W = Verts[n].Position.W;

	mov	ebx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], ebx

; 1498 : 						V->Position.Z = Verts[n].Position.Z;

	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], ebx

; 1499 : 						V->U[0] = (Verts[n].U[0] - Surface.MacroTexture->Pan.X) * Stages[0]->UScale;

	fld	DWORD PTR [ecx+20]
	mov	ebx, DWORD PTR _Surface$[esp+280]
	mov	ebx, DWORD PTR [ebx+24]
	fsub	DWORD PTR [ebx+20]
	mov	ebx, DWORD PTR [esi+19712]
	inc	edx
	inc	ebp
	fmul	DWORD PTR [ebx+24]

; 1500 : 						V->U[1] = (Verts[n].U[1] - Surface.MacroTexture->Pan.Y) * Stages[0]->VScale;

	mov	ebx, DWORD PTR _Surface$[esp+280]
	add	ecx, 40					; 00000028H
	fstp	DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ebx+24]
	fld	DWORD PTR [ecx-16]
	add	eax, 36					; 00000024H
	fsub	DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [esi+19712]
	fmul	DWORD PTR [ebx+28]
	fstp	DWORD PTR [eax-12]
	mov	ebx, DWORD PTR [edi+12]
	cmp	edx, ebx
	jl	SHORT $L123504
$L123501:

; 1489 : 				INT n=0;
; 1490 : 				for( Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $L123500
$L123502:

; 1501 : 					}
; 1502 : 				}
; 1503 : 
; 1504 : 				// Draw.
; 1505 : 				INT First = WorldVertices.Unlock();

	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	jne	SHORT $L136373
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L136373:
	mov	eax, DWORD PTR [esi+16684]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+48]
	test	eax, eax
	jge	SHORT $L136374
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136374:

; 1506 : 
; 1507 : 				for( Poly=Facet.Polys; Poly; n+=Poly->NumPts,Poly=Poly->Next)

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [edx+100]
	test	edi, edi
	mov	ebx, DWORD PTR [esi+16692]
	je	SHORT $L123510
$L123508:

; 1508 : 				{
; 1509 : 					Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN,  First, Poly->NumPts - 2 );

	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	sub	edx, 2
	push	edx
	push	ebx
	push	6
	push	eax
	call	DWORD PTR [ecx+280]

; 1510 : 					First += Poly->NumPts;

	mov	edx, DWORD PTR [edi+12]

; 1511 : 					Stats.Polys++;

	mov	ecx, DWORD PTR [esi+19668]
	add	ebx, edx
	inc	ecx
	mov	DWORD PTR [esi+19668], ecx
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $L123508
$L123510:

; 1512 : 				}
; 1513 : 			}
; 1514 : 
; 1515 : 			// Non-multitextured light map.
; 1516 : 			if( Surface.LightMap )

	mov	eax, DWORD PTR _Surface$[esp+280]
	mov	ecx, DWORD PTR [eax+20]
	test	ecx, ecx
	je	$L123528

; 1517 : 			{
; 1518 : 				// Set the light map.
; 1519 : 				SetBlending( PF_Modulated );

	mov	eax, DWORD PTR [esi+19616]
	mov	ebx, DWORD PTR [esi+19620]
	xor	eax, 64					; 00000040H
	test	ah, 1
	mov	DWORD PTR _Xor$136387[esp+284], eax
	je	SHORT $L136389
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$136387[esp+284]
$L136389:
	test	bl, 2
	je	SHORT $L136390
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$136387[esp+284]
$L136390:
	test	bl, 8
	je	SHORT $L136391
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$136387[esp+284]
$L136391:
	test	eax, -754972601				; d3000847H
	jne	SHORT $L136393
	test	bl, 113					; 00000071H
	je	$L136429
$L136393:
	test	eax, 268435525				; 10000045H
	jne	SHORT $L136395
	test	bl, 113					; 00000071H
	je	$L136413
$L136395:
	test	bl, 1
	je	SHORT $L136396
	mov	eax, DWORD PTR [esi+19128]
	test	eax, eax
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L136397
	mov	edx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L136398
$L136397:
	mov	ecx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L136398:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L136396:
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR _Xor$136387[esp+284]
$L136413:
	test	al, 1
	je	SHORT $L136416
	xor	edx, edx
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR _Xor$136387[esp+284]
$L136416:
	test	eax, eax
	jns	SHORT $L136418
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$136387[esp+284]
$L136418:
	test	al, 2
	je	SHORT $L136421
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$136387[esp+284]
$L136421:
	test	ah, 8
	je	SHORT $L136422
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR _Xor$136387[esp+284]
$L136422:
	test	eax, 1073741824				; 40000000H
	je	SHORT $L136423
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$136387[esp+284]
$L136423:
	test	eax, 50331648				; 03000000H
	je	SHORT $L136429
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L136429:

; 1520 : 				SetTexture( 0, *Surface.LightMap, 0, 0 );

	mov	eax, DWORD PTR _Surface$[esp+280]
	xor	ebp, ebp
	push	ebp
	push	ebp
	push	ebp
	mov	DWORD PTR [esi+19616], 64		; 00000040H
	mov	DWORD PTR [esi+19620], ebp
	mov	ecx, DWORD PTR [eax+20]
	push	ebp
	push	ecx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1521 : 				D3DCOLOR Clr = UpdateModulation( ModulateThings, FinalColor, Stages[0]->MaxColor.Plane() );

	mov	eax, DWORD PTR [esi+19712]
	movzx	edx, BYTE PTR [eax+35]
	movzx	ecx, BYTE PTR [eax+34]
	add	eax, 32					; 00000020H
	mov	DWORD PTR -256+[esp+284], edx
	movzx	edx, BYTE PTR [eax+1]
	fild	DWORD PTR -256+[esp+284]
	movzx	eax, BYTE PTR [eax]
	fmul	QWORD PTR __real@3f70101010101010
	sub	esp, 16					; 00000010H
	mov	DWORD PTR -256+[esp+300], ecx
	lea	ecx, DWORD PTR $T136434[esp+300]
	fstp	DWORD PTR [esp+12]
	fild	DWORD PTR -256+[esp+300]
	mov	DWORD PTR -256+[esp+300], edx
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR [esp+8]
	fild	DWORD PTR -256+[esp+300]
	mov	DWORD PTR -256+[esp+300], eax
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR [esp+4]
	fild	DWORD PTR -256+[esp+300]
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FPlane@@QAE@MMMM@Z
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR $T135560[esp+284], ecx
	fld	DWORD PTR $T135560[esp+284]
	fmul	DWORD PTR _FinalColor$123454[esp+284]
	mov	ecx, DWORD PTR _ModulateThings$123453[esp+284]
	mov	DWORD PTR $T135560[esp+288], edx
	mov	DWORD PTR $T135560[esp+292], eax
	fstp	DWORD PTR _FinalColor$123454[esp+284]
	dec	ecx
	test	ecx, ecx
	fld	DWORD PTR $T135560[esp+288]
	fmul	DWORD PTR _FinalColor$123454[esp+288]
	fstp	DWORD PTR _FinalColor$123454[esp+288]
	fld	DWORD PTR $T135560[esp+292]
	fmul	DWORD PTR _FinalColor$123454[esp+292]
	fstp	DWORD PTR _FinalColor$123454[esp+292]
	je	SHORT $L136452
	mov	DWORD PTR _Clr$123512[esp+284], -1
	jmp	SHORT $L136453
$L136452:
	lea	edx, DWORD PTR _FinalColor$123454[esp+284]
	push	edx
	lea	ecx, DWORD PTR $T136451[esp+288]
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR _Clr$123512[esp+284], eax
$L136453:

; 1522 : 				FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

	cmp	DWORD PTR [esi+16684], ebp
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L136459
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136459:
	cmp	DWORD PTR [esi+16688], ebp
	jne	SHORT $L136460
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136460:
	mov	ebx, DWORD PTR _VertexCount$[esp+284]
	cmp	ebx, DWORD PTR [esi+16688]
	jl	SHORT $L136463
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136463:
	mov	ecx, DWORD PTR [esi+16696]
	mov	edx, DWORD PTR [esi+16688]
	lea	eax, DWORD PTR [ecx+ebx]
	cmp	eax, edx
	mov	eax, DWORD PTR [esi+16684]
	jge	SHORT $L136477
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$136462[esp+288]
	push	edi
	mov	edi, DWORD PTR -252+[esp+292]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	push	edi
	shl	ecx, 2
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	cmp	eax, ebp
	jge	SHORT $L136472
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136472:
	mov	eax, DWORD PTR [esi+16696]
	mov	DWORD PTR [esi+16692], eax
	add	eax, ebx
	mov	DWORD PTR [esi+16696], eax
	jmp	SHORT $L136476

; 1941 : 	}

	npad	7

; 1522 : 				FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

$L136477:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$136462[esp+288]
	push	edx
	mov	edx, DWORD PTR -252+[esp+292]
	push	edx
	push	ebp
	push	eax
	call	DWORD PTR [ecx+44]
	cmp	eax, ebp
	jge	SHORT $L136478
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136478:
	mov	DWORD PTR [esi+16692], ebp
	mov	DWORD PTR [esi+16696], ebx
$L136476:

; 1523 : 				INT n=0;
; 1524 : 				for( Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	ebp, DWORD PTR [edx+100]
	mov	eax, DWORD PTR _VertexData$136462[esp+284]
	xor	ebx, ebx
	test	ebp, ebp
	je	$L123520

; 1941 : 	}

	npad	1
$L123518:

; 1525 : 				{
; 1526 : 					for( INT i=0; i<Poly->NumPts; i++,n++,V++ )

	mov	ecx, DWORD PTR [ebp+12]
	xor	edi, edi
	test	ecx, ecx
	jle	$L123519
	lea	ecx, DWORD PTR [ebx+ebx*4]
	lea	ecx, DWORD PTR [esi+ecx*8+19748]
$L123522:

; 1527 : 					{
; 1528 : 						V->Color = Clr;

	mov	edx, DWORD PTR _Clr$123512[esp+284]
	mov	DWORD PTR [eax+16], edx

; 1529 : 						V->Position.X  = Verts[n].Position.X;    

	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR [eax], edx

; 1530 : 						V->Position.Y  = Verts[n].Position.Y;

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 1531 : 						V->Position.W = Verts[n].Position.W;

	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx

; 1532 : 						V->Position.Z  = Verts[n].Position.Z;

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 1533 : 						V->U[0] = (Verts[n].U[0] - Surface.LightMap->Pan.X + 0.5f * Surface.LightMap->UScale) * Stages[0]->UScale;

	fld	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _Surface$[esp+280]
	mov	edx, DWORD PTR [edx+20]
	fsub	DWORD PTR [edx+20]
	inc	edi
	fld	DWORD PTR [edx+40]
	mov	edx, DWORD PTR [esi+19712]
	fmul	DWORD PTR __real@3f000000
	inc	ebx
	add	ecx, 40					; 00000028H
	add	eax, 36					; 00000024H
	faddp	ST(1), ST(0)
	fmul	DWORD PTR [edx+24]

; 1534 : 						V->U[1] = (Verts[n].U[1] - Surface.LightMap->Pan.Y + 0.5f * Surface.LightMap->VScale) * Stages[0]->VScale;

	mov	edx, DWORD PTR _Surface$[esp+280]
	fstp	DWORD PTR [eax-16]
	mov	edx, DWORD PTR [edx+20]
	fld	DWORD PTR [ecx-16]
	fsub	DWORD PTR [edx+24]
	fld	DWORD PTR [edx+44]
	mov	edx, DWORD PTR [esi+19712]
	fmul	DWORD PTR __real@3f000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR [edx+28]
	fstp	DWORD PTR [eax-12]
	mov	edx, DWORD PTR [ebp+12]
	cmp	edi, edx
	jl	SHORT $L123522
$L123519:

; 1523 : 				INT n=0;
; 1524 : 				for( Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	ebp, DWORD PTR [ebp]
	test	ebp, ebp
	jne	$L123518
$L123520:

; 1535 : 					}
; 1536 : 				}
; 1537 : 
; 1538 : 				// Draw.
; 1539 : 				INT First = WorldVertices.Unlock();

	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	jne	SHORT $L136492
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH

; 1941 : 	}

	npad	2

; 1535 : 					}
; 1536 : 				}
; 1537 : 
; 1538 : 				// Draw.
; 1539 : 				INT First = WorldVertices.Unlock();

$L136492:
	mov	eax, DWORD PTR [esi+16684]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L136493
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136493:

; 1540 : 
; 1541 : 				for( Poly=Facet.Polys; Poly; n+=Poly->NumPts,Poly=Poly->Next)

	mov	ecx, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [ecx+100]
	test	edi, edi
	mov	ebx, DWORD PTR [esi+16692]
	je	SHORT $L123528
$L123526:

; 1542 : 				{
; 1543 : 					Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, Poly->NumPts - 2 );

	mov	ecx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	sub	ecx, 2
	push	ecx
	push	ebx
	push	6
	push	eax
	call	DWORD PTR [edx+280]

; 1544 : 					First += Poly->NumPts;

	mov	edx, DWORD PTR [edi+12]

; 1545 : 					Stats.Polys++;

	mov	ecx, DWORD PTR [esi+19668]
	add	ebx, edx
	inc	ecx
	mov	DWORD PTR [esi+19668], ecx
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $L123526
$L123528:

; 1546 : 				}
; 1547 : 			}
; 1548 : 		}
; 1549 : 
; 1550 : 		SetDistanceFog(false);

	mov	eax, DWORD PTR [esi+675196]
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $L136501
	cmp	DWORD PTR [esi+675192], ebx
	je	SHORT $L136501
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675192], ebx
$L136501:

; 1551 : 
; 1552 : 		// Draw detail texture overlaid.
; 1553 : 		if(Surface.DetailTexture&&!(SurfPolyFlags&PF_FlatShaded)) 

	mov	edi, DWORD PTR _Surface$[esp+280]
	mov	eax, DWORD PTR [edi+28]
	cmp	eax, ebx
	je	$L123529
	cmp	DWORD PTR -228+[esp+284], ebx
	jne	$L123529

; 1554 : 		{			
; 1555 : 			INT DetailMax = 1; 
; 1556 : 
; 1557 : 			FLOAT DetailScale=1.f; 
; 1558 : 			FLOAT LocalNearZ=NearZ; //380.0f;

	mov	ecx, DWORD PTR ?NearZ@@3MA

; 1559 : 			//if( !GIsEditor )
; 1560 : 				*Surface.DetailTexture->MaxColor = FColor(255,255,255,255);
; 1561 : 			
; 1562 : 			INT AreDetailing = 0;			
; 1563 : 			while( DetailMax-- > 0 )			
; 1564 : 			{				
; 1565 : 				FLOAT InvZ = (1.f/LocalNearZ);

	fld	DWORD PTR __real@3f800000
	mov	DWORD PTR _LocalNearZ$123532[esp+284], ecx
	fdiv	DWORD PTR _LocalNearZ$123532[esp+284]
	mov	edx, DWORD PTR [eax+32]

; 1566 : 				FLOAT SZ = ProjectionMatrix._33 + ProjectionMatrix._43 * InvZ;
; 1567 : 
; 1568 : 				INT n=0;
; 1569 : 				for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	ecx, DWORD PTR _Facet$[esp+280]
	mov	BYTE PTR $T135562[esp+284], 255		; 000000ffH
	mov	BYTE PTR $T135562[esp+285], 255		; 000000ffH
	mov	BYTE PTR $T135562[esp+286], 255		; 000000ffH
	mov	BYTE PTR $T135562[esp+287], 255		; 000000ffH
	mov	eax, DWORD PTR $T135562[esp+284]
	mov	DWORD PTR [edx], eax
	mov	ebp, DWORD PTR [ecx+100]
	cmp	ebp, ebx
	mov	DWORD PTR _AreDetailing$123534[esp+284], ebx
	mov	DWORD PTR _n$123540[esp+284], ebx
	mov	DWORD PTR _Poly$123541[esp+284], ebp
	fst	DWORD PTR _InvZ$123538[esp+284]
	fmul	DWORD PTR [esi+19508]
	fadd	DWORD PTR [esi+19492]
	fstp	DWORD PTR _SZ$123539[esp+284]
	je	$L123544
	jmp	SHORT $L123542
$L136837:
	mov	ebp, DWORD PTR _Poly$123541[esp+284]
$L123542:

; 1572 : 					// Any textures close enough that they need detail texturing ?
; 1573 : 					for( INT i=0; i<Poly->NumPts; i++ )

	mov	edx, DWORD PTR [ebp+12]
	xor	ebx, ebx
	xor	ecx, ecx
	test	edx, edx
	jle	$L123551

; 1570 : 				{
; 1571 : 					UBOOL IsNear[32], CountNear = 0;				

	lea	edi, DWORD PTR [ebp+16]

; 1941 : 	}

	npad	6
$L123548:

; 1574 : 					{
; 1575 : 						IsNear[i] = Poly->Pts[i]->Point.Z < LocalNearZ;

	mov	eax, DWORD PTR [edi]
	fld	DWORD PTR [eax+8]
	fcomp	DWORD PTR _LocalNearZ$123532[esp+284]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L135563
	mov	eax, 1
	jmp	SHORT $L135564
$L135563:
	xor	eax, eax
$L135564:

; 1576 : 						CountNear += IsNear[i];

	add	ebx, eax
	mov	DWORD PTR _IsNear$123545[esp+ecx*4+284], eax
	inc	ecx
	add	edi, 4
	cmp	ecx, edx
	jl	SHORT $L123548

; 1577 : 					}										
; 1578 : 					if( CountNear )

	test	ebx, ebx
	je	$L123551

; 1579 : 					{
; 1580 : 						INT NumNear = 0;
; 1581 : 						FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(32);  // Safe upper limit for (clipped) facet's triangles * 3						

	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR _NumNear$123552[esp+284], 0
	jne	SHORT $L136511
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136511:
	mov	eax, DWORD PTR [esi+16688]
	test	eax, eax
	jne	SHORT $L136512
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136512:
	mov	eax, DWORD PTR [esi+16688]
	mov	ebx, 32					; 00000020H
	cmp	eax, ebx
	jg	SHORT $L136515
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136515:
	mov	ecx, DWORD PTR [esi+16696]
	mov	eax, DWORD PTR [esi+16688]
	lea	edx, DWORD PTR [ecx+32]
	cmp	edx, eax
	mov	eax, DWORD PTR [esi+16684]
	jge	SHORT $L136529
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$136514[esp+288]
	push	edi
	lea	ecx, DWORD PTR [ecx+ecx*8]
	push	1152					; 00000480H
	shl	ecx, 2
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L136524
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136524:
	mov	eax, DWORD PTR [esi+16696]
	mov	DWORD PTR [esi+16692], eax
	add	eax, 32					; 00000020H
	mov	DWORD PTR [esi+16696], eax
	jmp	SHORT $L136528
$L136529:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$136514[esp+288]
	push	edx
	push	1152					; 00000480H
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	SHORT $L136530
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136530:
	mov	DWORD PTR [esi+16692], 0
	mov	DWORD PTR [esi+16696], ebx
$L136528:

; 1582 : 						// Prepare state, minimize changes.
; 1583 : 						if( AreDetailing==0 ) 

	mov	eax, DWORD PTR _AreDetailing$123534[esp+284]
	test	eax, eax
	mov	edi, DWORD PTR _VertexData$136514[esp+284]
	jne	$L123555

; 1584 : 						{
; 1585 : 							SetBlending( PF_Modulated );

	push	0
	mov	edx, 64					; 00000040H
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 1586 : 							Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_BLENDDIFFUSEALPHA );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	12					; 0000000cH
	push	1
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 1587 : 							SetZBias(15.f);

	push	1098907648				; 41800000H
	push	0
	push	1097859072				; 41700000H
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [esi+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L136542
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L136803
$L136542:
	mov	ebx, DWORD PTR [esi+19124]
	fst	DWORD PTR [esi+675164]
	mov	ebp, DWORD PTR [ebx]
	call	__ftol
	push	eax
	push	47					; 0000002fH
	push	ebx
	call	DWORD PTR [ebp+200]
	mov	ebp, DWORD PTR _Poly$123541[esp+284]
	jmp	SHORT $L136541
$L136803:
	fstp	ST(0)
$L136541:

; 1588 : 							SetTexture( 0, *Surface.DetailTexture, 0, 0 );

	mov	eax, DWORD PTR _Surface$[esp+280]
	mov	ecx, DWORD PTR [eax+28]
	push	0
	push	0
	push	0
	push	0
	push	ecx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1589 : 							AreDetailing = 1;

	mov	DWORD PTR _AreDetailing$123534[esp+284], 1
$L123555:

; 1590 : 						}
; 1591 : 						// j = one before i; m is one before n;  n is the index into serialized predigested vertex MasterU/V
; 1592 : 						for( INT i=0, j=Poly->NumPts-1, m=n+Poly->NumPts-1; i<Poly->NumPts; j=i++, m=n++ )

	mov	eax, DWORD PTR [ebp+12]
	test	eax, eax
	mov	edx, DWORD PTR _n$123540[esp+284]
	mov	DWORD PTR _i$123556[esp+284], 0
	lea	edx, DWORD PTR [edx+eax-1]
	jle	$L123561
	lea	ecx, DWORD PTR [ebp+16]
	mov	ebx, -19768				; ffffb2c8H
	sub	ebx, esi
	mov	DWORD PTR -248+[esp+284], ecx
	mov	ecx, DWORD PTR _n$123540[esp+284]
	mov	DWORD PTR -216+[esp+284], ebx
	lea	edx, DWORD PTR [edx+edx*4]
	mov	ebx, -16				; fffffff0H
	shl	edx, 3
	sub	ebx, ebp
	mov	ebp, DWORD PTR _i$123556[esp+284]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [eax*4-4]
	lea	ecx, DWORD PTR [esi+ecx*8+19768]
	mov	DWORD PTR -236+[esp+284], ebx

; 1941 : 	}

	npad	6

; 1590 : 						}
; 1591 : 						// j = one before i; m is one before n;  n is the index into serialized predigested vertex MasterU/V
; 1592 : 						for( INT i=0, j=Poly->NumPts-1, m=n+Poly->NumPts-1; i<Poly->NumPts; j=i++, m=n++ )

$L123559:

; 1593 : 						{	
; 1594 : 							// Extra vertex if needed to create a new boundary of visible detailing.
; 1595 : 							if( IsNear[i] ^ IsNear[j] )

	mov	ebp, DWORD PTR _IsNear$123545[esp+ebp*4+284]
	mov	ebx, DWORD PTR _IsNear$123545[esp+eax+284]
	xor	ebx, ebp

; 1596 : 							{
; 1597 : 								// near-point-to-detailboundary distance divided by full edge Z distance.
; 1598 : 								// slip Z, X and Y up to that point.
; 1599 : 								FLOAT G    = (Poly->Pts[i]->Point.Z - LocalNearZ) / (Poly->Pts[i]->Point.Z - Poly->Pts[j]->Point.Z);

	mov	ebx, DWORD PTR -248+[esp+284]
	je	$L136806
	mov	ebx, DWORD PTR [ebx]
	fld	DWORD PTR [ebx+8]
	mov	ebp, DWORD PTR _Poly$123541[esp+284]
	fsub	DWORD PTR _LocalNearZ$123532[esp+284]
	mov	ebp, DWORD PTR [eax+ebp+16]
	fld	DWORD PTR [ebx+8]

; 1600 : 								FLOAT F    = 1.f - G;
; 1601 : 								V->Position.W = InvZ;

	mov	ebx, DWORD PTR _InvZ$123538[esp+284]
	fsub	DWORD PTR [ebp+8]
	mov	DWORD PTR [edi+12], ebx

; 1602 : 								V->Position.Z = SZ;

	mov	ebx, DWORD PTR _SZ$123539[esp+284]
	fdivp	ST(1), ST(0)
	mov	DWORD PTR [edi+8], ebx

; 1603 : 								V->Position.X = (F * Poly->Pts[i]->ScreenX * Poly->Pts[i]->Point.Z + G * Poly->Pts[j]->ScreenX * Poly->Pts[j]->Point.Z) * InvZ + Frame->XB - 0.5f;

	mov	ebx, DWORD PTR _Poly$123541[esp+284]
	mov	ebp, DWORD PTR [ebx+eax+16]
	mov	ebx, ebp
	fld	DWORD PTR __real@3f800000
	fsub	ST(0), ST(1)
	fld	DWORD PTR [ebp+16]
	fmul	DWORD PTR [ebx+8]
	mov	ebx, DWORD PTR -248+[esp+284]
	mov	ebx, DWORD PTR [ebx]
	fmul	ST(0), ST(2)
	fld	DWORD PTR [ebx+16]
	fmul	DWORD PTR [ebx+8]
	mov	ebx, DWORD PTR _Frame$[esp+284]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _InvZ$123538[esp+284]
	fiadd	DWORD PTR [ebx+176]

; 1604 : 								V->Position.Y = (F * Poly->Pts[i]->ScreenY * Poly->Pts[i]->Point.Z + G * Poly->Pts[j]->ScreenY * Poly->Pts[j]->Point.Z) * InvZ + Frame->YB - 0.5f;

	mov	ebx, DWORD PTR _Poly$123541[esp+284]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [edi]
	mov	ebp, DWORD PTR [ebx+eax+16]
	fld	DWORD PTR [ebp+20]
	mov	ebx, DWORD PTR -248+[esp+284]
	mov	eax, ebp
	fmul	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ebx]
	fmul	ST(0), ST(2)
	fld	DWORD PTR [eax+20]
	fmul	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _Frame$[esp+284]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _InvZ$123538[esp+284]
	fiadd	DWORD PTR [eax+180]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [edi+4]

; 1605 : 								if(!WorldDetail)

	mov	eax, DWORD PTR ?WorldDetail@@3HA	; WorldDetail

; 1606 : 								{
; 1607 : 									V->U[0] = (F * Verts[n].U[0] + G * Verts[m].U[0] - Surface.DetailTexture->Pan.X) * Stages[0]->UScale * DetailScale;

	fld	ST(1)
	test	eax, eax
	fmul	DWORD PTR [edx+esi+19768]
	mov	eax, DWORD PTR _Surface$[esp+280]
	mov	ebp, DWORD PTR [eax+28]
	fld	ST(1)
	fmul	DWORD PTR [ecx]
	faddp	ST(1), ST(0)
	fsub	DWORD PTR [ebp+20]
	jne	SHORT $L123565
	mov	ebp, DWORD PTR [esi+19712]
	fmul	DWORD PTR [ebp+24]
	fstp	DWORD PTR [edi+20]

; 1608 : 									V->U[1] = (F * Verts[n].U[1] + G * Verts[m].U[1] - Surface.DetailTexture->Pan.Y) * Stages[0]->VScale * DetailScale;

	fxch	ST(1)
	fmul	DWORD PTR [edx+esi+19772]
	mov	edx, DWORD PTR [eax+28]
	fxch	ST(1)
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	fsub	DWORD PTR [edx+24]
	mov	edx, DWORD PTR [esi+19712]
	fmul	DWORD PTR [edx+28]

; 1609 : 								} else

	jmp	SHORT $L136897
$L123565:

; 1610 : 								{
; 1611 : 									V->U[0] = (F * Verts[n].U[0] + G * Verts[m].U[0] - Surface.DetailTexture->Pan.X) * DetailScale * 0.052083;

	fmul	QWORD PTR __real@3faaaa9f7b5aea31
	fstp	DWORD PTR [edi+20]

; 1612 : 									V->U[1] = (F * Verts[n].U[1] + G * Verts[m].U[1] - Surface.DetailTexture->Pan.Y) * DetailScale * 0.052083 ;

	fxch	ST(1)
	fmul	DWORD PTR [edx+esi+19772]
	mov	edx, DWORD PTR [eax+28]
	fxch	ST(1)
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	fsub	DWORD PTR [edx+24]
	fmul	QWORD PTR __real@3faaaa9f7b5aea31
$L136897:

; 1613 : 
; 1614 : 								}
; 1615 : 
; 1616 : 								V->Color = D3DCOLOR_RGBA(0x7F, 0x7F, 0x7F, 0);
; 1617 : 								V++;
; 1618 : 								NumNear++;

	mov	edx, DWORD PTR _NumNear$123552[esp+284]
	fstp	DWORD PTR [edi+24]
	mov	DWORD PTR [edi+16], 8355711		; 007f7f7fH
	add	edi, 36					; 00000024H
	inc	edx
	mov	DWORD PTR _NumNear$123552[esp+284], edx
	jmp	SHORT $L123562
$L136806:
	mov	eax, DWORD PTR _Surface$[esp+280]
$L123562:

; 1619 : 							}
; 1620 : 							if( IsNear[i] )

	mov	ebp, DWORD PTR _i$123556[esp+284]
	mov	edx, DWORD PTR _IsNear$123545[esp+ebp*4+284]
	test	edx, edx
	je	$L123560

; 1621 : 							{
; 1622 : 								V->Position.W =Verts[n].Position.W;

	mov	edx, DWORD PTR [ecx-12]
	mov	DWORD PTR [edi+12], edx

; 1623 : 								V->Position.Z =Verts[n].Position.Z;

	mov	edx, DWORD PTR [ecx-16]
	mov	DWORD PTR [edi+8], edx

; 1624 : 								V->Position.X =Verts[n].Position.X;

	mov	edx, DWORD PTR [ecx-24]
	mov	DWORD PTR [edi], edx

; 1625 : 								V->Position.Y =Verts[n].Position.Y;

	mov	edx, DWORD PTR [ecx-20]
	mov	DWORD PTR [edi+4], edx

; 1626 : 								if(!WorldDetail)
; 1627 : 								{
; 1628 : 									V->U[0] = (Verts[n].U[0] - Surface.DetailTexture->Pan.X) * Stages[0]->UScale * DetailScale;

	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR ?WorldDetail@@3HA	; WorldDetail
	test	edx, edx
	mov	edx, DWORD PTR [eax+28]
	fsub	DWORD PTR [edx+20]
	jne	SHORT $L123569
	mov	edx, DWORD PTR [esi+19712]
	fmul	DWORD PTR [edx+24]
	fstp	DWORD PTR [edi+20]

; 1629 : 									V->U[1] = (Verts[n].U[1] - Surface.DetailTexture->Pan.Y) * Stages[0]->VScale * DetailScale;

	mov	eax, DWORD PTR [eax+28]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [esi+19712]
	fsub	DWORD PTR [eax+24]
	fmul	DWORD PTR [edx+28]

; 1630 : 								} else

	jmp	SHORT $L136898
$L123569:

; 1631 : 								{
; 1632 : 									V->U[0] = (Verts[n].U[0] - Surface.DetailTexture->Pan.X) * DetailScale * 0.052083;

	fmul	QWORD PTR __real@3faaaa9f7b5aea31
	fstp	DWORD PTR [edi+20]

; 1633 : 									V->U[1] = (Verts[n].U[1] - Surface.DetailTexture->Pan.Y) * DetailScale * 0.052083;

	mov	eax, DWORD PTR [eax+28]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR [eax+24]
	fmul	QWORD PTR __real@3faaaa9f7b5aea31
$L136898:
	fstp	DWORD PTR [edi+24]

; 1634 : 
; 1635 : 								}
; 1636 : 								DWORD A               = Min<DWORD>( appRound(100.f * (LocalNearZ / Poly->Pts[i]->Point.Z - 1.f)), 255 );

	mov	edx, DWORD PTR [ebx]
	fld	DWORD PTR _LocalNearZ$123532[esp+284]
	fdiv	DWORD PTR [edx+8]
	fsub	DWORD PTR __real@3f800000
	fmul	DWORD PTR __real@42c80000
	fstp	DWORD PTR $T136552[esp+284]
	fld	DWORD PTR $T136552[esp+284]
	fistp	DWORD PTR _I$136551[esp+284]
	mov	eax, DWORD PTR _I$136551[esp+284]
	cmp	eax, 255				; 000000ffH
	jbe	SHORT $L136560
	mov	eax, 255				; 000000ffH
$L136560:

; 1637 : 								V->Color = D3DCOLOR_RGBA( 0x7F, 0x7F, 0x7F, A );

	shl	eax, 24					; 00000018H
	or	eax, 8355711				; 007f7f7fH
	mov	DWORD PTR [edi+16], eax

; 1638 : 								V++;
; 1639 : 								NumNear++;

	mov	eax, DWORD PTR _NumNear$123552[esp+284]
	add	edi, 36					; 00000024H
	inc	eax
	mov	DWORD PTR _NumNear$123552[esp+284], eax
$L123560:
	mov	eax, DWORD PTR -236+[esp+284]
	mov	edx, DWORD PTR -216+[esp+284]
	add	eax, ebx
	add	ebx, 4
	mov	DWORD PTR -248+[esp+284], ebx
	mov	ebx, DWORD PTR _n$123540[esp+284]
	inc	ebp
	add	edx, ecx
	inc	ebx
	mov	DWORD PTR _n$123540[esp+284], ebx
	mov	ebx, DWORD PTR _Poly$123541[esp+284]
	add	ecx, 40					; 00000028H
	cmp	ebp, DWORD PTR [ebx+12]
	mov	DWORD PTR _i$123556[esp+284], ebp
	jl	$L123559

; 1590 : 						}
; 1591 : 						// j = one before i; m is one before n;  n is the index into serialized predigested vertex MasterU/V
; 1592 : 						for( INT i=0, j=Poly->NumPts-1, m=n+Poly->NumPts-1; i<Poly->NumPts; j=i++, m=n++ )

	mov	ebp, ebx
$L123561:

; 1640 : 							}
; 1641 : 
; 1642 : 						}
; 1643 : 						n -= Poly->NumPts;

	mov	eax, DWORD PTR [ebp+12]
	mov	ecx, DWORD PTR _n$123540[esp+284]
	sub	ecx, eax

; 1644 : 						
; 1645 : 						INT First = WorldVertices.Unlock();

	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	mov	DWORD PTR _n$123540[esp+284], ecx
	jne	SHORT $L136569
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L136569:
	mov	eax, DWORD PTR [esi+16684]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L136570
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136570:

; 1646 : 
; 1647 : 						Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, NumNear - 2 );

	mov	edx, DWORD PTR _NumNear$123552[esp+284]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	add	edx, -2					; fffffffeH
	push	edx
	mov	edx, DWORD PTR [esi+16692]
	push	edx
	push	6
	push	eax
	call	DWORD PTR [ecx+280]

; 1648 : 						Stats.Polys++;

	inc	DWORD PTR [esi+19668]
$L123551:

; 1649 : 					}							
; 1650 : 					n += Poly->NumPts;

	mov	eax, DWORD PTR [ebp+12]
	mov	edx, DWORD PTR _n$123540[esp+284]
	add	edx, eax
	mov	eax, DWORD PTR [ebp]
	test	eax, eax
	mov	DWORD PTR _n$123540[esp+284], edx
	mov	DWORD PTR _Poly$123541[esp+284], eax
	jne	$L136837

; 1566 : 				FLOAT SZ = ProjectionMatrix._33 + ProjectionMatrix._43 * InvZ;
; 1567 : 
; 1568 : 				INT n=0;
; 1569 : 				for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	xor	ebx, ebx
$L123544:

; 1651 : 				}
; 1652 : 				DetailScale *= 4.223f;
; 1653 : 				LocalNearZ  /= 4.223f;
; 1654 : 			}		
; 1655 : 			if( AreDetailing )

	cmp	DWORD PTR _AreDetailing$123534[esp+284], ebx
	je	$L123598

; 1656 : 			{
; 1657 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 1658 : 				SetZBias(0);

	push	1098907648				; 41800000H
	push	ebx
	push	ebx
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [esi+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L136580
	cmp	DWORD PTR ?CacheBlending@@3HA, ebx	; CacheBlending
	jne	$L136804
$L136580:
	mov	edi, DWORD PTR [esi+19124]
	fst	DWORD PTR [esi+675164]
	mov	ebx, DWORD PTR [edi]
	call	__ftol
	push	eax
	push	47					; 0000002fH
	push	edi
	call	DWORD PTR [ebx+200]

; 1659 : 				AreDetailing = 0;
; 1660 : 			}
; 1661 : 		}
; 1662 : 		else if( Surface.FogMap )

	jmp	$L123598
$L123529:
	cmp	DWORD PTR [edi+32], ebx
	je	$L123598

; 1663 : 		{
; 1664 : 			SetBlending( PF_Highlighted );

	push	ebx
	mov	edx, 268435456				; 10000000H
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 1665 : 			SetTexture( 0, *Surface.FogMap, 0, 0 );

	mov	edx, DWORD PTR [edi+32]
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	edx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1666 : 			D3DCOLOR Clr = Stages[0]->MaxColor.TrueColor() | 0xff000000;

	mov	eax, DWORD PTR [esi+19712]
	mov	eax, DWORD PTR [eax+32]
	xor	ecx, ecx
	mov	DWORD PTR _D$136585[esp+284], eax
	mov	cl, BYTE PTR _D$136585[esp+286]
	mov	edx, eax
	shl	edx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	ecx, edx
	add	ecx, eax

; 1667 : 			if( !Format8888.Supported ) // Texture has no alpha.

	mov	al, BYTE PTR [esi+16884]
	or	ecx, -16777216				; ff000000H
	test	al, al
	mov	DWORD PTR _Clr$123581[esp+284], ecx
	jne	SHORT $L123582

; 1668 : 				Clr&=~0xff000000;

	mov	eax, ecx
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _Clr$123581[esp+284], eax
$L123582:

; 1669 : 
; 1670 : 			FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

	cmp	DWORD PTR [esi+16684], ebx
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L136588
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136588:
	cmp	DWORD PTR [esi+16688], ebx
	jne	SHORT $L136589
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136589:
	mov	ebp, DWORD PTR _VertexCount$[esp+284]
	cmp	ebp, DWORD PTR [esi+16688]
	jl	SHORT $L136592
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136592:
	mov	ecx, DWORD PTR [esi+16696]
	mov	edx, DWORD PTR [esi+16688]
	lea	eax, DWORD PTR [ecx+ebp]
	cmp	eax, edx
	mov	eax, DWORD PTR [esi+16684]
	jge	SHORT $L136607
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$136591[esp+288]
	push	edi
	mov	edi, DWORD PTR -252+[esp+292]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	push	edi
	shl	ecx, 2
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	cmp	eax, ebx
	jge	SHORT $L136602
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136602:
	mov	eax, DWORD PTR [esi+16696]
	mov	DWORD PTR [esi+16692], eax
	add	eax, ebp
	mov	DWORD PTR [esi+16696], eax
	jmp	SHORT $L136606
$L136607:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$136591[esp+288]
	push	edx
	mov	edx, DWORD PTR -252+[esp+292]
	push	edx
	push	ebx
	push	eax
	call	DWORD PTR [ecx+44]
	cmp	eax, ebx
	jge	SHORT $L136608
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136608:
	mov	DWORD PTR [esi+16692], ebx
	mov	DWORD PTR [esi+16696], ebp
$L136606:

; 1671 : 			INT n = 0;
; 1672 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	ebp, DWORD PTR [edx+100]
	mov	eax, DWORD PTR _VertexData$136591[esp+284]
	xor	ebx, ebx
	test	ebp, ebp
	je	$L123589
$L123587:

; 1673 : 			{
; 1674 : 				for( INT i=0; i<Poly->NumPts; i++, n++, V++ )

	mov	ecx, DWORD PTR [ebp+12]
	xor	edi, edi
	test	ecx, ecx
	jle	$L123588
	lea	ecx, DWORD PTR [ebx+ebx*4]
	lea	ecx, DWORD PTR [esi+ecx*8+19748]

; 1941 : 	}

	npad	5

; 1673 : 			{
; 1674 : 				for( INT i=0; i<Poly->NumPts; i++, n++, V++ )

$L123591:

; 1675 : 				{
; 1676 : 					GET_COLOR_DWORD(V->Color) = Clr;

	mov	edx, DWORD PTR _Clr$123581[esp+284]
	mov	DWORD PTR [eax+16], edx

; 1677 : 					V->Position.X  = Verts[n].Position.X;    

	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR [eax], edx

; 1678 : 					V->Position.Y  = Verts[n].Position.Y;

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 1679 : 					V->Position.W = Verts[n].Position.W;

	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx

; 1680 : 					V->Position.Z  = Verts[n].Position.Z;

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 1681 : 					V->U[0] = (Verts[n].U[0] - Surface.FogMap->Pan.X + 0.5f * Surface.FogMap->UScale) * Stages[0]->UScale;

	fld	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _Surface$[esp+280]
	mov	edx, DWORD PTR [edx+32]
	fsub	DWORD PTR [edx+20]
	inc	edi
	fld	DWORD PTR [edx+40]
	mov	edx, DWORD PTR [esi+19712]
	fmul	DWORD PTR __real@3f000000
	inc	ebx
	add	ecx, 40					; 00000028H
	add	eax, 36					; 00000024H
	faddp	ST(1), ST(0)
	fmul	DWORD PTR [edx+24]

; 1682 : 					V->U[1] = (Verts[n].U[1] - Surface.FogMap->Pan.Y + 0.5f * Surface.FogMap->VScale) * Stages[0]->VScale;

	mov	edx, DWORD PTR _Surface$[esp+280]
	fstp	DWORD PTR [eax-16]
	mov	edx, DWORD PTR [edx+32]
	fld	DWORD PTR [ecx-16]
	fsub	DWORD PTR [edx+24]
	fld	DWORD PTR [edx+44]
	mov	edx, DWORD PTR [esi+19712]
	fmul	DWORD PTR __real@3f000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR [edx+28]
	fstp	DWORD PTR [eax-12]
	mov	edx, DWORD PTR [ebp+12]
	cmp	edi, edx
	jl	SHORT $L123591
$L123588:

; 1671 : 			INT n = 0;
; 1672 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	ebp, DWORD PTR [ebp]
	test	ebp, ebp
	jne	$L123587
$L123589:

; 1683 : 				}
; 1684 : 			}
; 1685 : 			// Draw 
; 1686 : 			INT First = WorldVertices.Unlock();

	lea	ecx, DWORD PTR [esi+16680]
	call	?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DScreenVertex>::Unlock
	mov	ebx, eax

; 1687 : 
; 1688 : 			for( Poly=Facet.Polys; Poly; n+=Poly->NumPts,Poly=Poly->Next)

	mov	eax, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [eax+100]
	test	edi, edi
	je	SHORT $L123598
$L123596:

; 1689 : 			{
; 1690 : 				Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, Poly->NumPts - 2 );

	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	sub	edx, 2
	push	edx
	push	ebx
	push	6
	push	eax
	call	DWORD PTR [ecx+280]

; 1691 : 				First += Poly->NumPts;

	mov	edx, DWORD PTR [edi+12]

; 1692 : 				Stats.Polys++;

	mov	ecx, DWORD PTR [esi+19668]
	add	ebx, edx
	inc	ecx
	mov	DWORD PTR [esi+19668], ecx
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $L123596

; 1658 : 				SetZBias(0);

	jmp	SHORT $L123598
$L136804:
	fstp	ST(0)
$L123598:

; 1693 : 			}		
; 1694 : 		}
; 1695 : 
; 1696 : 		if( Surface.PolyFlags & PF_FlatShaded )  // Wireframe Overlay

	mov	eax, DWORD PTR _Surface$[esp+280]
	test	DWORD PTR [eax], 1073741824		; 40000000H
	je	$L123599

; 1697 : 		{
; 1698 : 			SetZBias(16.f);

	push	1098907648				; 41800000H
	mov	ecx, esi
	call	?SetZBias@UD3DRenderDevice@@QAIMM@Z	; UD3DRenderDevice::SetZBias
	fstp	ST(0)

; 1699 : 						// Set up all poly vertices.
; 1700 : 			FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

	mov	ecx, DWORD PTR _VertexCount$[esp+284]
	push	-1
	push	ecx
	lea	ecx, DWORD PTR [esi+16680]
	call	?Lock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEPAUFD3DScreenVertex@@HH@Z ; FD3DVertexBuffer<FD3DScreenVertex>::Lock

; 1701 : 			
; 1702 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	edx, DWORD PTR [edx+100]
	test	edx, edx
	je	SHORT $L123605
$L123603:

; 1703 : 			{
; 1704 : 				for( INT i=0; i<Poly->NumPts; i++, V++ )

	mov	ecx, DWORD PTR [edx+12]
	xor	edi, edi
	test	ecx, ecx
	jle	SHORT $L123604
	mov	ebx, DWORD PTR _Frame$[esp+284]
	lea	ecx, DWORD PTR [edx+16]
$L123607:

; 1705 : 				{
; 1706 : 					GET_COLOR_DWORD(V->Color)   = 0; //clr;

	mov	DWORD PTR [eax+16], 0

; 1707 : 					V->Position.X    = Poly->Pts[i]->ScreenX + Frame->XB - 0.5f;

	fild	DWORD PTR [ebx+176]
	mov	ebp, DWORD PTR [ecx]
	inc	edi
	fadd	DWORD PTR [ebp+16]
	add	ecx, 4
	add	eax, 36					; 00000024H
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [eax-36]

; 1708 : 					V->Position.Y    = Poly->Pts[i]->ScreenY + Frame->YB - 0.5f;

	mov	ebp, DWORD PTR [ecx-4]
	fild	DWORD PTR [ebx+180]
	fadd	DWORD PTR [ebp+20]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [eax-32]

; 1709 : 					FLOAT R = V->Position.W   = Poly->Pts[i]->RZ * Frame->RProj.Z;

	mov	ebp, DWORD PTR [ecx-4]
	fld	DWORD PTR [ebp+28]
	fmul	DWORD PTR [ebx+232]
	fst	DWORD PTR [eax-24]

; 1710 : 					V->Position.Z    = ProjectionMatrix._33 + ProjectionMatrix._43 * R;								

	fmul	DWORD PTR [esi+19508]
	fadd	DWORD PTR [esi+19492]
	fstp	DWORD PTR [eax-28]
	mov	ebp, DWORD PTR [edx+12]
	cmp	edi, ebp
	jl	SHORT $L123607
$L123604:

; 1701 : 			
; 1702 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edx, DWORD PTR [edx]
	test	edx, edx
	jne	SHORT $L123603
$L123605:

; 1711 : 				}
; 1712 : 			}
; 1713 : 
; 1714 : 			// Draw base texture + lightmap.
; 1715 : 			INT First = WorldVertices.Unlock();

	lea	edi, DWORD PTR [esi+16680]
	mov	ecx, edi
	call	?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DScreenVertex>::Unlock

; 1716 : 			WorldVertices.Set();

	mov	ecx, edi
	mov	ebx, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DScreenVertex>::Set

; 1717 : 
; 1718 : 			
; 1719 : 			//First=OriginalFirst;
; 1720 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE  );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 1721 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 1722 : 			
; 1723 : 			for( Poly=Facet.Polys; Poly; Poly=Poly->Next)

	mov	eax, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [eax+100]
	test	edi, edi
	je	SHORT $L123615
$L123613:

; 1724 : 			{
; 1725 : 				Direct3DDevice8->DrawPrimitive( D3DPT_LINESTRIP,First,Poly->NumPts-1); 

	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	dec	edx
	push	edx
	push	ebx
	push	3
	push	eax
	call	DWORD PTR [ecx+280]

; 1726 : 				First += Poly->NumPts;

	mov	ecx, DWORD PTR [edi+12]
	mov	edi, DWORD PTR [edi]
	add	ebx, ecx
	test	edi, edi
	jne	SHORT $L123613
$L123615:

; 1727 : 			}
; 1728 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 1729 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 1730 : 			
; 1731 : 			SetZBias(0.f);

	push	0
	mov	ecx, esi
	call	?SetZBias@UD3DRenderDevice@@QAIMM@Z	; UD3DRenderDevice::SetZBias
	fstp	ST(0)
$L123599:

; 1732 : 		}
; 1733 : 
; 1734 : 		//	Draw selection markings on a surface: specular overlay.
; 1735 : 		if( IsSelected )

	mov	eax, DWORD PTR _IsSelected$[esp+284]
	test	eax, eax
	je	$L123621

; 1736 : 		{
; 1737 : 			SetBlending(PF_Translucent);

	push	0
	mov	edx, 4
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 1738 : 			SetTextureNULL( 0 );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+244]

; 1739 : 			SetTextureNULL( 1 );

	push	0
	lea	edi, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+19712], edi
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [edx+244]

; 1740 : 
; 1741 : 			INT n=0;
; 1742 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	eax, DWORD PTR _Facet$[esp+280]
	mov	DWORD PTR [esi+19716], edi
	mov	edi, DWORD PTR [eax+100]
	xor	ebx, ebx
	test	edi, edi
	je	$L123621
	lea	ebp, DWORD PTR [esi+16700]

; 1941 : 	}

	npad	7
$L123619:

; 1743 : 			{
; 1744 : 				// draw per facet...
; 1745 : 				FD3DTLVertex* V=(FD3DTLVertex*) ActorVertices.Lock(Poly->NumPts);

	mov	ecx, DWORD PTR [edi+12]
	push	-1
	push	ecx
	mov	ecx, ebp
	call	?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z ; FD3DVertexBuffer<FD3DTLVertex>::Lock

; 1746 : 				for( INT i=0; i<Poly->NumPts; i++, n++, V++ )

	mov	ecx, DWORD PTR [edi+12]
	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $L123627
	lea	ecx, DWORD PTR [ebx+ebx*4]
	lea	ecx, DWORD PTR [esi+ecx*8+19748]
$L123625:

; 1747 : 				{
; 1748 : 					V->Position.X = Verts[n].Position.X;

	mov	ebp, DWORD PTR [ecx-4]
	mov	DWORD PTR [eax], ebp

; 1749 : 					V->Position.Y = Verts[n].Position.Y;

	mov	ebp, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], ebp

; 1750 : 					V->Position.Z = Verts[n].Position.Z;

	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], ebp

; 1751 : 					V->Position.W = Verts[n].Position.W;

	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], ebp

; 1752 : 
; 1753 : 					V->Specular   = D3DCOLOR_RGBA( 255,255,255,255);

	mov	DWORD PTR [eax+20], -1

; 1754 : 					V->Diffuse    = D3DCOLOR_RGBA( 10,5,60,255);		 // Arbitrary marker color.

	mov	DWORD PTR [eax+16], -16120516		; ff0a053cH
	mov	ebp, DWORD PTR [edi+12]
	inc	edx
	inc	ebx
	add	ecx, 40					; 00000028H
	add	eax, 40					; 00000028H
	cmp	edx, ebp
	jl	SHORT $L123625
$L123627:

; 1755 : 				}
; 1756 : 
; 1757 : 				INT	First = ActorVertices.Unlock();

	lea	ebp, DWORD PTR [esi+16700]
	mov	ecx, ebp
	call	?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DTLVertex>::Unlock

; 1758 : 
; 1759 : 				ActorVertices.Set();

	mov	ecx, ebp
	mov	DWORD PTR _First$123630[esp+284], eax
	call	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DTLVertex>::Set

; 1760 : 
; 1761 : 				Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, Poly->NumPts - 2 );

	mov	ecx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	sub	ecx, 2
	push	ecx
	mov	ecx, DWORD PTR _First$123630[esp+288]
	push	ecx
	push	6
	push	eax
	call	DWORD PTR [edx+280]

; 1762 : 				Stats.Polys++;

	inc	DWORD PTR [esi+19668]
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	$L123619
$L123621:

; 1763 : 			}
; 1764 : 		}
; 1765 : 
; 1766 : 		// JEP... Project all projector textures onto surface
; 1767 : 		if (ProjectorArray.Num() > 0 && Frame->Recursion == 0 && Surface.ProjectorFlags)

	mov	eax, DWORD PTR [esi+204]
	test	eax, eax
	jle	$L123631
	mov	edx, DWORD PTR _Frame$[esp+284]
	mov	eax, DWORD PTR [edx+28]
	test	eax, eax
	jne	$L123631
	mov	eax, DWORD PTR _Surface$[esp+280]
	mov	ecx, DWORD PTR [eax+36]
	test	ecx, ecx
	je	$L123631

; 1768 : 		{
; 1769 : 		#ifdef BATCH_PROJECTOR_POLYS
; 1770 : 			ProjectorSurf		*ProjSurf;
; 1771 : 
; 1772 : 			ProjSurf = &ProjectorSurfs[NumProjectorSurfs];
; 1773 : 
; 1774 : 			ProjSurf->ProjectorFlags = Surface.ProjectorFlags;
; 1775 : 			ProjSurf->FirstVert = NumProjectorVerts;
; 1776 : 			ProjSurf->NumVerts = 0;
; 1777 : 			ProjSurf->FirstPoly = NumProjectorPolys;
; 1778 : 			ProjSurf->NumPolys = 0;
; 1779 : 
; 1780 : 			INT		*PPoly = &ProjectorPolys[ProjSurf->FirstPoly];
; 1781 : 			FVector *PP = &ProjectorPoints[ProjSurf->FirstVert];
; 1782 : 
; 1783 : 			for( Poly=Facet.Polys; Poly; Poly=Poly->Next)
; 1784 : 			{
; 1785 : 				//if (!Frame->Level->Model->Nodes(Poly->iNode).ProjectorFlags)
; 1786 : 				//	continue;
; 1787 : 
; 1788 : 				PPoly[ProjSurf->NumPolys++] = Poly->NumPts;
; 1789 : 
; 1790 : 				// Copy camera space verts over (need them to generate uv's during rendering pass)
; 1791 : 				for (INT j=0; j< Poly->NumPts; j++)
; 1792 : 					PP[ProjSurf->NumVerts++] = Poly->Pts[j]->Point;
; 1793 : 			}
; 1794 : 
; 1795 : 			memcpy(&ProjectorVerts[ProjSurf->FirstVert], &Verts[0], ProjSurf->NumVerts*sizeof(Verts[0]));
; 1796 : 			
; 1797 : 			NumProjectorVerts += ProjSurf->NumVerts;
; 1798 : 			NumProjectorPolys += ProjSurf->NumPolys;
; 1799 : 			
; 1800 : 			NumProjectorSurfs++;
; 1801 : 
; 1802 : 			if (NumProjectorSurfs > 64)
; 1803 : 				FlushProjectorPolys();
; 1804 : 		#else
; 1805 : 			SetTextureNULL( 0 );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+244]

; 1806 : 			SetTextureNULL( 1 );

	push	0
	lea	edi, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+19712], edi
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [edx+244]

; 1807 : 			SetBlending( PF_Modulated );

	push	0
	mov	edx, 64					; 00000040H
	mov	ecx, esi
	mov	DWORD PTR [esi+19716], edi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 1808 : 			SetDistanceFog(false);

	push	0
	mov	ecx, esi
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog

; 1809 : 
; 1810 : 			SetTextureClampMode(1);

	mov	eax, DWORD PTR [esi]
	mov	edx, 1
	mov	ecx, esi
	call	DWORD PTR [eax+212]

; 1811 : 
; 1812 : 			//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 1813 : 			//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND,  D3DBLEND_DESTCOLOR );
; 1814 : 			//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ZERO );
; 1815 : 			SetAlphaBlendEnable(TRUE);

	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable

; 1816 : 			SetSrcBlend(D3DBLEND_DESTCOLOR);

	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend

; 1817 : 			SetDstBlend(D3DBLEND_ZERO);

	mov	edx, 1
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend

; 1818 : 
; 1819 : 			// Setup clipper texture (also used for fade out)
; 1820 : 			Direct3DDevice8->SetTexture(1, ClipperTexture);

	mov	edx, DWORD PTR [esi+19112]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	1
	push	eax
	call	DWORD PTR [ecx+244]

; 1821 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	2
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 1822 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_ADD);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	7
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 1823 : 			//Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_DISABLE);
; 1824 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 1825 : 
; 1826 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	13					; 0000000dH
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 1827 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	14					; 0000000eH
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 1828 : 
; 1829 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MAGFILTER, D3DTEXF_POINT);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	16					; 00000010H
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 1830 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MINFILTER, D3DTEXF_POINT);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	17					; 00000011H
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 1831 : 			
; 1832 : 			for (int i=ProjectorArray.Num()-1; i>=0 ; i--)

	mov	eax, DWORD PTR [esi+204]
	dec	eax
	mov	DWORD PTR _i$123632[esp+284], eax
	js	$L123635
	imul	eax, 84					; 00000054H
	mov	DWORD PTR -240+[esp+284], eax

; 1941 : 	}

	npad	4

; 1831 : 			
; 1832 : 			for (int i=ProjectorArray.Num()-1; i>=0 ; i--)

$L123633:

; 1833 : 			{
; 1834 : 				DWORD Mask = 1<<i;

	mov	ecx, DWORD PTR _i$123632[esp+284]

; 1835 : 
; 1836 : 				if (!(Surface.ProjectorFlags & Mask))

	mov	edx, DWORD PTR _Surface$[esp+280]
	mov	eax, 1
	shl	eax, cl
	test	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _Mask$123636[esp+284], eax
	je	$L123634

; 1837 : 					continue;
; 1838 : 
; 1839 : 				ProjectorInfo *pProjector = &ProjectorArray(i);

	mov	ebp, DWORD PTR [esi+200]
	mov	ecx, DWORD PTR -240+[esp+284]

; 1840 : 
; 1841 : 				if (!pProjector->GNodes)

	mov	eax, DWORD PTR [ebp+ecx+12]
	add	ebp, ecx
	test	eax, eax
	je	$L123634

; 1842 : 					continue;
; 1843 : 
; 1844 : 				// Set the texture to the render target that belongs to this projector
; 1845 : 				Direct3DDevice8->SetTexture(0, pProjector->pRenderTargetTex);

	mov	edx, DWORD PTR [ebp+4]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+244]

; 1846 : 
; 1847 : 				// Lock the world verts
; 1848 : 				FD3DScreenVertex* V=(FD3DScreenVertex*)WorldVertices.Lock(VertexCount);

	mov	eax, DWORD PTR _VertexCount$[esp+284]
	push	-1
	push	eax
	lea	ecx, DWORD PTR [esi+16680]
	call	?Lock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEPAUFD3DScreenVertex@@HH@Z ; FD3DVertexBuffer<FD3DScreenVertex>::Lock

; 1849 : 
; 1850 : 				INT n = 0;
; 1851 : 
; 1852 : 				// For each poly, project the verts onto the projector front plane to get the UV's
; 1853 : 				for( Poly=Facet.Polys; Poly; Poly=Poly->Next)

	mov	ecx, DWORD PTR _Facet$[esp+280]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx+100]
	test	eax, eax
	mov	DWORD PTR _n$123642[esp+284], 0
	mov	DWORD PTR _Poly$[esp+284], eax
	je	$L123645

; 1941 : 	}

	npad	2
$L123643:

; 1854 : 				{
; 1855 : 					if (!(pProjector->GNodes[Poly->iNode].ProjectorFlags & Mask))

	mov	ecx, DWORD PTR _Poly$[esp+284]
	mov	eax, DWORD PTR [ecx+4]
	mov	ebx, DWORD PTR _Mask$123636[esp+284]
	lea	edx, DWORD PTR [eax+eax*8]
	mov	eax, DWORD PTR [ebp+12]
	test	DWORD PTR [eax+edx*8+68], ebx
	jne	SHORT $L123646

; 1856 : 					{
; 1857 : 						n += Poly->NumPts;

	mov	eax, DWORD PTR _n$123642[esp+284]
	mov	ecx, DWORD PTR [ecx+12]
	add	eax, ecx
	mov	DWORD PTR _n$123642[esp+284], eax

; 1858 : 						continue;

	jmp	$L123644
$L123646:

; 1859 : 					}
; 1860 : 
; 1861 : 					for( INT j=0; j<Poly->NumPts; j++, n++, V++ )

	mov	eax, DWORD PTR [ecx+12]
	test	eax, eax
	mov	DWORD PTR _j$123647[esp+284], 0
	jle	$L123644
	mov	edx, DWORD PTR _Poly$[esp+284]
	mov	eax, DWORD PTR _n$123642[esp+284]
	add	edx, 16					; 00000010H
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR -212+[esp+284], edx
	lea	ebx, DWORD PTR [esi+eax*8+19748]
$L123648:

; 1862 : 					{
; 1863 : 						V->Position.X = Verts[n].Position.X;    

	mov	ecx, DWORD PTR [ebx-4]
	mov	DWORD PTR [edi], ecx

; 1864 : 						V->Position.Y = Verts[n].Position.Y;

	mov	edx, DWORD PTR [ebx]
	mov	DWORD PTR [edi+4], edx

; 1865 : 						V->Position.Z = Verts[n].Position.Z;

	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi+8], eax

; 1866 : 						V->Position.W = Verts[n].Position.W;

	mov	ecx, DWORD PTR [ebx+8]

; 1867 : 						V->Color = 0xffffffff;
; 1868 : 
; 1869 : 						// Grab a copy of the vert
; 1870 : 						FTransform		P;
; 1871 : 
; 1872 : 						// Transform point into projector space
; 1873 : 						P.Point = Poly->Pts[j]->Point.TransformPointBy(pProjector->CameraToLight);

	lea	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, DWORD PTR -212+[esp+288]
	mov	DWORD PTR [edi+12], ecx
	lea	edx, DWORD PTR $T135565[esp+288]
	mov	DWORD PTR [edi+16], -1
	mov	ecx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp_?TransformPointBy@FVector@@QBE?AV1@ABVFCoords@@@Z

; 1874 : 						
; 1875 : 					#if 1	
; 1876 : 						// Project point onto projector front plane
; 1877 : 						P.Point.Z = max(1.0f, P.Point.Z);

	fld	DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _P$123651[esp+292], eax
	fcomp	DWORD PTR _P$123651[esp+292]
	mov	DWORD PTR _P$123651[esp+284], ecx
	mov	DWORD PTR _P$123651[esp+288], edx
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L135566
	mov	DWORD PTR _P$123651[esp+292], 1065353216 ; 3f800000H
$L135566:

; 1878 : 						P.Project(pProjector->Frame);

	fld	DWORD PTR _P$123651[esp+292]
	mov	ecx, DWORD PTR [ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L136681
	mov	DWORD PTR _P$123651[esp+292], 981668463	; 3a83126fH
$L136681:
	fld	DWORD PTR [ecx+220]
	fdiv	DWORD PTR _P$123651[esp+292]
	fst	DWORD PTR _P$123651[esp+312]
	fmul	DWORD PTR _P$123651[esp+284]
	fadd	DWORD PTR [ecx+192]
	fstp	DWORD PTR _P$123651[esp+300]
	fld	DWORD PTR _P$123651[esp+312]
	fmul	DWORD PTR _P$123651[esp+288]
	fadd	DWORD PTR [ecx+196]
	fst	DWORD PTR _P$123651[esp+304]
	fstp	DWORD PTR $T136678[esp+284]
	fld	DWORD PTR $T136678[esp+284]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$136686[esp+284]

; 1879 : 
; 1880 : 						// Snag UV's
; 1881 : 						V->U[0] = P.ScreenX*pProjector->OneOverX;

	fld	DWORD PTR _P$123651[esp+300]
	mov	eax, DWORD PTR _j$123647[esp+284]
	fmul	DWORD PTR [ebp+64]
	mov	edx, DWORD PTR _n$123642[esp+284]
	inc	eax
	add	ebx, 40					; 00000028H
	fstp	DWORD PTR [edi+20]
	add	edi, 36					; 00000024H

; 1882 : 						V->U[1] = P.ScreenY*pProjector->OneOverY; 

	fld	DWORD PTR _P$123651[esp+304]
	mov	DWORD PTR _j$123647[esp+284], eax
	fmul	DWORD PTR [ebp+68]
	fstp	DWORD PTR [edi-12]

; 1883 : 						
; 1884 : 						V->Position.W *= P.Point.Z;

	fld	DWORD PTR _P$123651[esp+292]
	fmul	DWORD PTR [edi-24]
	fstp	DWORD PTR [edi-24]

; 1885 : 					#else
; 1886 : 						// Ortho projection
; 1887 : 						V->U[0] = (P.Point.X/125)+0.5f;
; 1888 : 						V->U[1] = (P.Point.Y/125)+0.5f;
; 1889 : 					#endif
; 1890 : 
; 1891 : 						// Clip and fade out (this is the UV's for the clipper/fade out texture layer)
; 1892 : 					#if 1
; 1893 : 						FLOAT R = P.RZ * pProjector->Frame->RProj.Z;		// (1.0f/Z)

	mov	ecx, DWORD PTR [ebp]
	fld	DWORD PTR _P$123651[esp+312]
	fmul	DWORD PTR [ecx+232]
	mov	ecx, DWORD PTR -212+[esp+284]
	add	ecx, 4
	inc	edx

; 1894 : 						V->U2[0] = (pProjector->_33 + pProjector->_43 * R)*pProjector->FadeScale;

	fmul	DWORD PTR [ebp+76]
	mov	DWORD PTR _n$123642[esp+284], edx
	mov	edx, DWORD PTR _Poly$[esp+284]
	fadd	DWORD PTR [ebp+72]
	mov	DWORD PTR -212+[esp+284], ecx
	fmul	DWORD PTR [ebp+80]

; 1895 : 						V->U2[1] = 0.0f;

	mov	DWORD PTR [edi-4], 0
	fstp	DWORD PTR [edi-8]
	mov	ecx, DWORD PTR [edx+12]
	cmp	eax, ecx
	jl	$L123648
$L123644:

; 1849 : 
; 1850 : 				INT n = 0;
; 1851 : 
; 1852 : 				// For each poly, project the verts onto the projector front plane to get the UV's
; 1853 : 				for( Poly=Facet.Polys; Poly; Poly=Poly->Next)

	mov	eax, DWORD PTR _Poly$[esp+284]
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	mov	DWORD PTR _Poly$[esp+284], eax
	jne	$L123643
$L123645:

; 1896 : 					#endif
; 1897 : 					}
; 1898 : 				}
; 1899 : 
; 1900 : 				// Unlock world verts
; 1901 : 				INT First = WorldVertices.Unlock();

	lea	ecx, DWORD PTR [esi+16680]
	call	?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DScreenVertex>::Unlock

; 1902 : 
; 1903 : 				for( Poly=Facet.Polys; Poly; Poly=Poly->Next)

	mov	ecx, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [ecx+100]
	test	edi, edi
	mov	ebx, eax
	je	SHORT $L123634

; 1941 : 	}

	npad	3
$L123655:

; 1904 : 				{
; 1905 : 					if (!(pProjector->GNodes[Poly->iNode].ProjectorFlags & Mask))

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR _Mask$123636[esp+284]
	lea	edx, DWORD PTR [eax+eax*8]
	mov	eax, DWORD PTR [ebp+12]
	test	DWORD PTR [eax+edx*8+68], ecx
	je	SHORT $L123656

; 1906 : 						continue;
; 1907 : 					Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, Poly->NumPts - 2 );

	mov	ecx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	sub	ecx, 2
	push	ecx
	push	ebx
	push	6
	push	eax
	call	DWORD PTR [edx+280]

; 1908 : 					First += Poly->NumPts;

	add	ebx, DWORD PTR [edi+12]
$L123656:
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $L123655
$L123634:

; 1831 : 			
; 1832 : 			for (int i=ProjectorArray.Num()-1; i>=0 ; i--)

	mov	eax, DWORD PTR _i$123632[esp+284]
	mov	edx, DWORD PTR -240+[esp+284]
	dec	eax
	sub	edx, 84					; 00000054H
	test	eax, eax
	mov	DWORD PTR _i$123632[esp+284], eax
	mov	DWORD PTR -240+[esp+284], edx
	jge	$L123633
$L123635:

; 1909 : 				}
; 1910 : 			}
; 1911 : 			SetTextureNULL(0);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+244]

; 1912 : 			SetTextureNULL(1);

	push	0
	lea	edi, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+19712], edi
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [ecx+244]

; 1913 : 
; 1914 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_DISABLE);

	push	1
	push	1
	mov	DWORD PTR [esi+19716], edi
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 1915 : 
; 1916 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 1917 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MINFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 1918 : 
; 1919 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	13					; 0000000dH
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 1920 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	14					; 0000000eH
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 1921 : 
; 1922 : 			//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 1923 : 			//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_DESTCOLOR );
; 1924 : 			//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_SRCCOLOR );
; 1925 : 			SetAlphaBlendEnable(TRUE);

	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable

; 1926 : 			SetSrcBlend(D3DBLEND_DESTCOLOR);

	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend

; 1927 : 			SetDstBlend(D3DBLEND_SRCCOLOR);

	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend

; 1928 : 			SetTextureClampMode(0);

	mov	eax, DWORD PTR [esi]
	xor	edx, edx
	mov	ecx, esi
	call	DWORD PTR [eax+212]
$L123631:

; 1929 : 
; 1930 : 		#endif
; 1931 : 		}
; 1932 : 		// ...JEP
; 1933 : 
; 1934 : 		// Finish mask handling.
; 1935 : 		if( SurfPolyFlags & PF_Masked )

	mov	eax, DWORD PTR -232+[esp+284]
	test	eax, eax
	pop	ebx
	je	SHORT $L123659

; 1936 : 			Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_LESSEQUAL );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]
$L123659:

; 1937 : 
; 1938 : 		VALIDATE;
; 1939 : 
; 1940 : 		unclock(Stats.SurfTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], 0
	mov	DWORD PTR _L$136701[esp+280], 0
	je	SHORT $L136703
	rdtsc
	mov	DWORD PTR _L$136701[esp+280], eax
	mov	DWORD PTR _H$136702[esp+280], edx
$L136703:
	mov	eax, DWORD PTR _L$136701[esp+280]
	mov	ecx, DWORD PTR [esi+19624]
	add	eax, -34				; ffffffdeH
	add	ecx, eax
	mov	DWORD PTR [esi+19624], ecx
$L123370:
	pop	edi
	pop	esi
	pop	ebp

; 1941 : 	}

	add	esp, 268				; 0000010cH
	ret	8
?DrawComplexSurface@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFSurfaceInfo@@AAUFSurfaceFacet@@@Z ENDP ; UD3DRenderDevice::DrawComplexSurface
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?QueuePolygonDoes@UD3DRenderDevice@@UAI_NXZ
_TEXT	SEGMENT
?QueuePolygonDoes@UD3DRenderDevice@@UAI_NXZ PROC NEAR	; UD3DRenderDevice::QueuePolygonDoes, COMDAT
; _this$ = ecx

; 1956 : 		return true; 

	mov	al, 1

; 1957 : 	}

	ret	0
?QueuePolygonDoes@UD3DRenderDevice@@UAI_NXZ ENDP	; UD3DRenderDevice::QueuePolygonDoes
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?QueuePolygonBegin@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z
_TEXT	SEGMENT
?QueuePolygonBegin@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::QueuePolygonBegin, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 1961 : 		CurrentFrame=Frame;

	mov	DWORD PTR [ecx+172], edx

; 1962 : 		return true;

	mov	al, 1

; 1963 : 	}

	ret	0
?QueuePolygonBegin@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z ENDP ; UD3DRenderDevice::QueuePolygonBegin
_TEXT	ENDS
PUBLIC	?RenderQueuedPolygonsForProjectors@UD3DRenderDevice@@QAEXK@Z ; UD3DRenderDevice::RenderQueuedPolygonsForProjectors
PUBLIC	??_C@_0CJ@LDCG@VertexCount?$DM?$DNACTORPOLY_VERTEXBUF@ ; `string'
EXTRN	__imp_?GUglyHackFlags@@3KA:DWORD
;	COMDAT ??_C@_0CJ@LDCG@VertexCount?$DM?$DNACTORPOLY_VERTEXBUF@
; File ..\..\Core\Inc\UnVcWin32.h
_DATA	SEGMENT
??_C@_0CJ@LDCG@VertexCount?$DM?$DNACTORPOLY_VERTEXBUF@ DB 'VertexCount<=A'
	DB	'CTORPOLY_VERTEXBUFFER_SIZE', 00H		; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?QueuePolygonEnd@UD3DRenderDevice@@UAIXK@Z
_TEXT	SEGMENT
$T137160 = -100
_L$137191 = -60
_H$137192 = -44
_L$137198 = -60
_H$137199 = -44
_ProjectorFlags$ = -60
_QueuedPolygonCount$ = -92
_ZBiasHack$ = -80
_Vertex$ = -72
_n$ = -104
_StoreVert$ = -56
_i$ = -64
_p$123681 = -52
_DoFog$123682 = -48
_V$123687 = -40
_W$123695 = -88
_First$ = -44
_CurrentDoFog$ = -105
$T136912 = -96
$T136913 = -100
_p$123706 = -84
_DoFog$123707 = -48
_L$136919 = -84
_H$136920 = -44
_L$136926 = -84
_H$136927 = -44
_VertexData$136936 = -88
_L$136961 = -84
_H$136962 = -44
_L$136968 = -84
_H$136969 = -44
_L$137028 = -64
_H$137029 = -44
_L$137069 = -64
_H$137070 = -44
_Xor$137115 = -96
$T137159 = -104
?QueuePolygonEnd@UD3DRenderDevice@@UAIXK@Z PROC NEAR	; UD3DRenderDevice::QueuePolygonEnd, COMDAT
; _this$ = ecx
; _ProjectorFlags$ = edx

; 1966 : 	{

	sub	esp, 108				; 0000006cH
	push	ebx
	push	ebp
	mov	ebp, ecx
	push	esi

; 1967 : 		int QueuedPolygonCount=QueuedPolygons.Num();

	mov	esi, DWORD PTR [ebp+675216]

; 1968 : 
; 1969 : 		if(!QueuedPolygonCount) 

	xor	ebx, ebx
	cmp	esi, ebx
	mov	DWORD PTR _ProjectorFlags$[esp+120], edx
	mov	DWORD PTR _QueuedPolygonCount$[esp+120], esi
	je	$L123665

; 1970 : 			return;
; 1971 : 
; 1972 : 		check(Direct3DDevice8);

	cmp	DWORD PTR [ebp+19124], ebx
	push	edi
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L123668
	push	1972					; 000007b4H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEJO@Direct3DDevice8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L123668:

; 1973 : 
; 1974 : 		clock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ebx
	mov	DWORD PTR _L$136919[esp+124], ebx
	je	SHORT $L136921
	rdtsc
	mov	DWORD PTR _L$136919[esp+124], eax
	mov	DWORD PTR _H$136920[esp+124], edx
$L136921:
	mov	eax, DWORD PTR [ebp+19628]
	mov	ecx, DWORD PTR _L$136919[esp+124]

; 1975 : 		Stats.QueueCount++;

	mov	edx, DWORD PTR [ebp+19700]
	sub	eax, ecx

; 1976 : 		Stats.Polys+=QueuedPolygonCount;

	mov	ecx, DWORD PTR [ebp+19668]
	inc	edx
	add	ecx, esi
	mov	DWORD PTR [ebp+19628], eax

; 1977 : 
; 1978 : 		PreRender(CurrentFrame);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [ebp+19700], edx
	mov	edx, DWORD PTR [ebp+172]
	mov	DWORD PTR [ebp+19668], ecx
	mov	ecx, ebp
	call	DWORD PTR [eax+140]

; 1979 : 
; 1980 : 		FLOAT ZBiasHack=((GUglyHackFlags&1)&&ViewportColorBits==16 )? 0.25f : 1.0f;

	mov	ecx, DWORD PTR __imp_?GUglyHackFlags@@3KA
	test	BYTE PTR [ecx], 1
	je	SHORT $L136908
	cmp	DWORD PTR [ebp+16772], 16		; 00000010H
	mov	DWORD PTR _ZBiasHack$[esp+124], 1048576000 ; 3e800000H
	je	SHORT $L136909
$L136908:
	mov	DWORD PTR _ZBiasHack$[esp+124], 1065353216 ; 3f800000H
$L136909:

; 1981 : 
; 1982 : 		int VertexCount=QueuedPolygonCount*3;

	mov	esi, DWORD PTR _QueuedPolygonCount$[esp+124]
	lea	esi, DWORD PTR [esi+esi*2]

; 1983 : 		verify(VertexCount<=ACTORPOLY_VERTEXBUFFER_SIZE);

	cmp	esi, 16384				; 00004000H
	jle	SHORT $L123671
	push	1983					; 000007bfH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0CJ@LDCG@VertexCount?$DM?$DNACTORPOLY_VERTEXBUF@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L123671:

; 1984 : 		clock(Stats.D3DVertexLock);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], ebx
	mov	DWORD PTR _L$136926[esp+124], ebx
	je	SHORT $L136928
	rdtsc
	mov	DWORD PTR _L$136926[esp+124], eax
	mov	DWORD PTR _H$136927[esp+124], edx
$L136928:
	mov	eax, DWORD PTR _L$136926[esp+124]
	sub	DWORD PTR [ebp+19660], eax

; 1985 : 
; 1986 : 		FD3DTLVertex *Vertex = (FD3DTLVertex*)ActorVertices.Lock(VertexCount);

	cmp	DWORD PTR [ebp+16704], ebx
	jne	SHORT $L136933
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136933:
	cmp	DWORD PTR [ebp+16708], ebx
	jne	SHORT $L136934
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136934:
	cmp	esi, DWORD PTR [ebp+16708]
	jl	SHORT $L136937
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L136937:
	mov	ecx, DWORD PTR [ebp+16716]
	mov	eax, DWORD PTR [ebp+16708]
	lea	edx, DWORD PTR [ecx+esi]
	cmp	edx, eax
	mov	eax, DWORD PTR [ebp+16704]
	jge	SHORT $L136951
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$136936[esp+128]
	push	edi
	lea	edi, DWORD PTR [esi+esi*4]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	shl	edi, 3
	push	edi
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	cmp	eax, ebx
	jge	SHORT $L136946
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136946:
	mov	eax, DWORD PTR [ebp+16716]
	mov	DWORD PTR [ebp+16712], eax
	add	eax, esi
	mov	DWORD PTR [ebp+16716], eax
	jmp	SHORT $L136950
$L136951:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$136936[esp+128]
	push	edx
	lea	edx, DWORD PTR [esi+esi*4]
	shl	edx, 3
	push	edx
	push	ebx
	push	eax
	call	DWORD PTR [ecx+44]
	cmp	eax, ebx
	jge	SHORT $L136952
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136952:
	mov	DWORD PTR [ebp+16712], ebx
	mov	DWORD PTR [ebp+16716], esi
$L136950:
	mov	edx, DWORD PTR _VertexData$136936[esp+124]
	mov	DWORD PTR _Vertex$[esp+124], edx

; 1987 : 		Stats.VBLocks++;

	inc	DWORD PTR [ebp+19708]

; 1988 : 		unclock(Stats.D3DVertexLock);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ebx
	mov	DWORD PTR _L$136961[esp+124], ebx
	je	SHORT $L136963
	rdtsc
	mov	DWORD PTR _L$136961[esp+124], eax
	mov	DWORD PTR _H$136962[esp+124], edx
$L136963:
	mov	ecx, DWORD PTR _L$136961[esp+124]
	mov	edx, DWORD PTR [ebp+19660]
	add	ecx, -34				; ffffffdeH
	add	edx, ecx
	mov	DWORD PTR [ebp+19660], edx

; 1989 : 
; 1990 : 		clock(Stats.D3DVertexSetup);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], ebx
	mov	DWORD PTR _L$136968[esp+124], ebx
	je	SHORT $L136970
	rdtsc
	mov	DWORD PTR _L$136968[esp+124], eax
	mov	DWORD PTR _H$136969[esp+124], edx
$L136970:
	mov	eax, DWORD PTR _L$136968[esp+124]
	mov	ecx, DWORD PTR [ebp+19656]
	sub	ecx, eax

; 1991 : 
; 1992 : 		INT	 n = 0;
; 1993 : 		BOOL StoreVert = (ProjectorArray.Num() > 0 && CurrentFrame->Recursion == 0 && ProjectorFlags) ? true : false;

	cmp	DWORD PTR [ebp+204], ebx
	mov	DWORD PTR [ebp+19656], ecx
	mov	DWORD PTR _n$[esp+124], ebx
	jle	SHORT $L136910
	mov	ecx, DWORD PTR [ebp+172]
	cmp	DWORD PTR [ecx+28], ebx
	jne	SHORT $L136910
	cmp	DWORD PTR _ProjectorFlags$[esp+124], ebx
	je	SHORT $L136910
	mov	al, 1
	jmp	SHORT $L136911
$L136910:
	xor	al, al
$L136911:
	xor	edx, edx
	mov	dl, al

; 1994 : 
; 1995 : 		for(int i=0;i<QueuedPolygonCount;i++)

	mov	eax, DWORD PTR _QueuedPolygonCount$[esp+124]
	cmp	eax, ebx
	mov	DWORD PTR _StoreVert$[esp+124], edx
	jle	$L123680
	mov	DWORD PTR -84+[esp+124], 0
	mov	DWORD PTR -64+[esp+124], eax
$L123678:

; 1996 : 		{
; 1997 : 			QueuedPolygon &p=QueuedPolygons(i);				

	mov	ebx, DWORD PTR [ebp+675212]
	mov	edx, DWORD PTR -84+[esp+124]

; 1998 : 
; 1999 : 			SetTexture(0,*p.Texture, p.PolyFlags, false,p.PolyFlagsEx );	// NJS: Fixme! No need for texture set to be here other than to compute scaling factors

	mov	ecx, DWORD PTR [ebx+edx+4]
	mov	eax, DWORD PTR [ebx+edx+8]
	add	ebx, edx
	mov	edx, DWORD PTR [ebx]
	push	0
	push	ecx
	push	0
	push	edx
	push	eax
	xor	edx, edx
	mov	ecx, ebp
	mov	DWORD PTR _p$123681[esp+144], ebx
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 2000 : 
; 2001 : 			UBOOL DoFog=((p.PolyFlags&(PF_RenderFog|PF_Translucent|PF_Modulated))==PF_RenderFog);		

	mov	eax, DWORD PTR [ebx]
	and	eax, 1073741892				; 40000044H
	sub	eax, 1073741824				; 40000000H
	neg	eax
	sbb	eax, eax
	inc	eax
	mov	DWORD PTR _DoFog$123682[esp+124], eax
	mov	eax, DWORD PTR _n$[esp+124]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	edx, DWORD PTR [ebp+ecx*8+19748]
	mov	DWORD PTR -76+[esp+124], edx
	add	ebx, 32					; 00000020H
	mov	DWORD PTR -68+[esp+124], 3
$L123684:

; 2002 : 
; 2003 : 			for( INT Index = 0; Index < 3; Index++ )
; 2004 : 			{	
; 2005 : 				FD3DTLVertex V;
; 2006 : 				FLOAT	RHW = ZBiasHack * p.v[Index].RZ * CurrentFrame->RProj.Z;

	mov	eax, DWORD PTR [ebp+172]
	fld	DWORD PTR [eax+232]
	fmul	DWORD PTR [ebx+12]
	fmul	DWORD PTR _ZBiasHack$[esp+124]

; 2007 : 
; 2008 : 				V.Position.X = p.v[Index].ScreenX + CurrentFrame->XB - 0.5f;

	fild	DWORD PTR [eax+176]
	fadd	DWORD PTR [ebx]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _V$123687[esp+124]

; 2009 : 				V.Position.Y = p.v[Index].ScreenY + CurrentFrame->YB - 0.5f;

	fild	DWORD PTR [eax+180]

; 2010 : 				V.Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43 * RHW;
; 2011 : 				V.Position.W = RHW;
; 2012 : 
; 2013 : 				// JEP...
; 2014 : 				if (StoreVert)

	mov	eax, DWORD PTR _StoreVert$[esp+124]
	test	eax, eax
	fadd	DWORD PTR [ebx+4]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _V$123687[esp+128]
	fld	ST(0)
	fmul	DWORD PTR [ebp+19508]
	fadd	DWORD PTR [ebp+19492]
	fstp	DWORD PTR _V$123687[esp+132]
	fst	DWORD PTR _V$123687[esp+136]
	je	SHORT $L137223

; 2015 : 				{
; 2016 : 					Verts[n].Position.X = V.Position.X;

	mov	eax, DWORD PTR -76+[esp+124]
	mov	ecx, DWORD PTR _V$123687[esp+124]

; 2017 : 					Verts[n].Position.Y = V.Position.Y;
; 2018 : 					Verts[n].Position.Z = V.Position.Z;
; 2019 : 					Verts[n].Position.W = V.Position.W;

	fstp	DWORD PTR [eax+8]
	mov	edx, DWORD PTR _V$123687[esp+128]
	mov	DWORD PTR [eax], edx

; 2020 : 					n++;

	mov	edx, DWORD PTR _n$[esp+124]
	mov	DWORD PTR [eax-4], ecx
	mov	ecx, DWORD PTR _V$123687[esp+132]
	inc	edx
	mov	DWORD PTR [eax+4], ecx
	add	eax, 40					; 00000028H
	mov	DWORD PTR _n$[esp+124], edx
	mov	DWORD PTR -76+[esp+124], eax
	jmp	SHORT $L123689
$L137223:
	fstp	ST(0)
$L123689:

; 2021 : 				}
; 2022 : 				// JEP...
; 2023 : 
; 2024 : 				V.U[0] = p.v[Index].U * Stages[0]->UScale;

	mov	eax, DWORD PTR [ebp+19712]
	fld	DWORD PTR [eax+24]

; 2025 : 				V.U[1] = p.v[Index].V * Stages[0]->VScale;
; 2026 : 
; 2027 : 				V.Specular=0;
; 2028 : 				if(p.PolyFlagsEx&(PFX_LightenModulate|PFX_DarkenModulate))

	mov	ecx, DWORD PTR _p$123681[esp+124]
	fmul	DWORD PTR [ebx+64]
	mov	dl, BYTE PTR [ecx+4]
	test	dl, 48					; 00000030H
	mov	DWORD PTR _V$123687[esp+144], 0
	fstp	DWORD PTR _V$123687[esp+148]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [ebx+68]
	fstp	DWORD PTR _V$123687[esp+152]
	je	SHORT $L123690

; 2029 : 				{
; 2030 : 					V.Diffuse  = 0xffffffff;

	mov	DWORD PTR _V$123687[esp+140], -1

; 2031 : 
; 2032 : 				}
; 2033 : 				else if ( p.PolyFlags & PF_Modulated )

	jmp	$L123698
$L123690:
	test	BYTE PTR [ecx], 64			; 00000040H
	je	SHORT $L123692

; 2034 : 				{
; 2035 : 					// NJS: Diffuse is scaled down to compensate for the fact that the src=dst dst=src blending 
; 2036 : 					// mode doesn't work so well with 16 bit textures.  Thus to fix it, we lighten the texture 
; 2037 : 					// up by one, and then drop it down here to compensate.  Doing this allows us to hit 127 exactly.
; 2038 : 					V.Diffuse = (0xFF<<24)|(248<<16)|(248<<8)|248;

	mov	DWORD PTR _V$123687[esp+140], -460552	; fff8f8f8H

; 2039 : 					//V.Diffuse = 0xffffffff;
; 2040 : 				}
; 2041 : 				else if ( DoFog )

	jmp	$L123698
$L123692:
	mov	ecx, DWORD PTR _DoFog$123682[esp+124]
	test	ecx, ecx
	je	$L123694

; 2042 : 				{
; 2043 : 					FLOAT W=1.f-p.v[Index].Fog.W;
; 2044 : 
; 2045 : 					check(Stages[0]);

	test	eax, eax
	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR [ebx+60]
	fstp	DWORD PTR _W$123695[esp+124]
	jne	SHORT $L123696
	push	2045					; 000007fdH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_09PNHJ@Stages?$FL0?$FN?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L123696:

; 2046 : 					V.Diffuse=FColor((p.v[Index].Light.Z*Stages[0]->MaxColor.B*W),	
; 2047 : 							         (p.v[Index].Light.Y*Stages[0]->MaxColor.G*W),
; 2048 : 									 (p.v[Index].Light.X*Stages[0]->MaxColor.R*W),
; 2049 : 									 255);

	mov	esi, DWORD PTR [ebp+19712]
	movzx	edx, BYTE PTR [esi+34]
	mov	DWORD PTR -44+[esp+124], edx
	fild	DWORD PTR -44+[esp+124]

; 2133 : 		unclock(Stats.PolyTime);

	fmul	DWORD PTR [ebx+40]
	fmul	DWORD PTR _W$123695[esp+124]
	call	__ftol
	mov	BYTE PTR $T136912[esp+124], al
	movzx	eax, BYTE PTR [esi+33]
	mov	DWORD PTR -44+[esp+124], eax
	fild	DWORD PTR -44+[esp+124]
	fmul	DWORD PTR [ebx+36]
	fmul	DWORD PTR _W$123695[esp+124]
	call	__ftol
	movzx	ecx, BYTE PTR [esi+32]
	mov	DWORD PTR -44+[esp+124], ecx
	mov	BYTE PTR $T136912[esp+125], al
	fild	DWORD PTR -44+[esp+124]
	fmul	DWORD PTR [ebx+32]
	fmul	DWORD PTR _W$123695[esp+124]
	call	__ftol
	mov	BYTE PTR $T136912[esp+126], al
	mov	BYTE PTR $T136912[esp+127], 255		; 000000ffH
	mov	edx, DWORD PTR $T136912[esp+124]
	mov	DWORD PTR _V$123687[esp+140], edx
	jmp	SHORT $L123698
$L123694:

; 2050 : 				}
; 2051 : 				else
; 2052 : 				{
; 2053 : 					check(Stages[0]);

	test	eax, eax
	jne	SHORT $L123699
	push	2053					; 00000805H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_09PNHJ@Stages?$FL0?$FN?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L123699:

; 2054 : 					V.Diffuse=FColor((p.v[Index].Light.Z*Stages[0]->MaxColor.B), 
; 2055 : 									 (p.v[Index].Light.Y*Stages[0]->MaxColor.G), 
; 2056 : 									 (p.v[Index].Light.X*Stages[0]->MaxColor.R), 
; 2057 : 									 255);

	mov	esi, DWORD PTR [ebp+19712]
	movzx	eax, BYTE PTR [esi+34]
	mov	DWORD PTR -44+[esp+124], eax
	fild	DWORD PTR -44+[esp+124]
	fmul	DWORD PTR [ebx+40]
	call	__ftol
	movzx	ecx, BYTE PTR [esi+33]
	mov	DWORD PTR -44+[esp+124], ecx
	mov	BYTE PTR $T136913[esp+124], al
	fild	DWORD PTR -44+[esp+124]
	fmul	DWORD PTR [ebx+36]
	call	__ftol
	movzx	edx, BYTE PTR [esi+32]
	mov	DWORD PTR -44+[esp+124], edx
	mov	BYTE PTR $T136913[esp+125], al
	fild	DWORD PTR -44+[esp+124]
	fmul	DWORD PTR [ebx+32]
	call	__ftol
	mov	BYTE PTR $T136913[esp+126], al
	mov	BYTE PTR $T136913[esp+127], 255		; 000000ffH
	mov	eax, DWORD PTR $T136913[esp+124]
	mov	DWORD PTR _V$123687[esp+140], eax
$L123698:

; 2058 : 				}
; 2059 : 
; 2060 : 				*Vertex=V;

	mov	eax, DWORD PTR _Vertex$[esp+124]
	mov	edi, eax

; 2061 : 				Vertex++;

	add	eax, 40					; 00000028H
	mov	DWORD PTR _Vertex$[esp+124], eax
	mov	eax, DWORD PTR -68+[esp+124]
	add	ebx, 88					; 00000058H
	mov	ecx, 10					; 0000000aH
	lea	esi, DWORD PTR _V$123687[esp+124]
	dec	eax
	rep movsd
	mov	DWORD PTR -68+[esp+124], eax
	jne	$L123684
	mov	ecx, DWORD PTR -84+[esp+124]
	mov	eax, DWORD PTR -64+[esp+124]
	add	ecx, 280				; 00000118H
	dec	eax
	mov	DWORD PTR -84+[esp+124], ecx
	mov	DWORD PTR -64+[esp+124], eax
	jne	$L123678
$L123680:

; 2062 : 
; 2063 : 			}
; 2064 : 		}
; 2065 : 		unclock(Stats.D3DVertexSetup);

	mov	ecx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [ecx], 0
	mov	DWORD PTR _L$137028[esp+124], 0
	je	SHORT $L137030
	rdtsc
	mov	DWORD PTR _L$137028[esp+124], eax
	mov	DWORD PTR _H$137029[esp+124], edx
$L137030:
	mov	edx, DWORD PTR _L$137028[esp+124]
	mov	ebx, DWORD PTR [ebp+19656]

; 2066 : 
; 2067 : 		SetTextureNULL(0);

	mov	eax, DWORD PTR [ebp+19124]
	add	edx, -34				; ffffffdeH
	add	ebx, edx
	mov	DWORD PTR [ebp+19656], ebx
	mov	ecx, DWORD PTR [eax]
	xor	ebx, ebx
	push	ebx
	push	ebx
	push	eax
	call	DWORD PTR [ecx+244]

; 2068 : 		SetTextureNULL(1);

	push	ebx
	lea	esi, DWORD PTR [ebp+16624]
	mov	DWORD PTR [ebp+19712], esi
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [edx+244]
	mov	DWORD PTR [ebp+19716], esi

; 2069 : 		SetZBias(0);

	fld	DWORD PTR [ebp+675164]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L137058
	cmp	DWORD PTR ?CacheBlending@@3HA, ebx	; CacheBlending
	jne	SHORT $L137057
$L137058:
	mov	eax, DWORD PTR [ebp+19124]
	push	ebx
	push	47					; 0000002fH
	mov	DWORD PTR [ebp+675164], ebx
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+200]
$L137057:

; 2070 : 
; 2071 : 		clock(Stats.D3DVertexRender);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], ebx
	mov	DWORD PTR _L$137069[esp+124], ebx
	je	SHORT $L137071
	rdtsc
	mov	DWORD PTR _L$137069[esp+124], eax
	mov	DWORD PTR _H$137070[esp+124], edx
$L137071:
	mov	eax, DWORD PTR _L$137069[esp+124]
	mov	ecx, DWORD PTR [ebp+19652]

; 2072 : 		INT	First = ActorVertices.Unlock();

	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	sub	ecx, eax
	mov	DWORD PTR [ebp+19652], ecx
	cmp	DWORD PTR [ebp+16704], ebx
	jne	SHORT $L137077
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH

; 2134 : 	}

	npad	6

; 2072 : 		INT	First = ActorVertices.Unlock();

$L137077:
	mov	eax, DWORD PTR [ebp+16704]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	cmp	eax, ebx
	jge	SHORT $L137225
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	esi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	esi
	add	esp, 20					; 00000014H
	jmp	SHORT $L137078
$L137225:
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	esi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
$L137078:

; 2073 : 		ActorVertices.Set();

	mov	eax, DWORD PTR [ebp+16700]
	test	eax, eax
	mov	ecx, DWORD PTR [ebp+16712]
	mov	DWORD PTR _First$[esp+124], ecx
	jne	SHORT $L137086
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L137086:
	mov	eax, DWORD PTR [ebp+16704]
	test	eax, eax
	jne	SHORT $L137088
	push	319					; 0000013fH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH

; 2134 : 	}

	npad	6

; 2073 : 		ActorVertices.Set();

$L137088:
	mov	eax, DWORD PTR [ebp+16700]
	mov	edx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [edx+200]
	test	eax, eax
	jge	SHORT $L137089
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	esi
	add	esp, 20					; 00000014H
$L137089:
	mov	eax, DWORD PTR [ebp+16700]
	mov	edx, DWORD PTR [eax]
	push	708					; 000002c4H
	push	eax
	call	DWORD PTR [edx+304]
	test	eax, eax
	jge	SHORT $L137094
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	esi
	add	esp, 20					; 00000014H
$L137094:
	mov	ecx, DWORD PTR [ebp+16704]
	mov	eax, DWORD PTR [ebp+16700]
	mov	edx, DWORD PTR [eax]
	push	40					; 00000028H
	push	ecx
	push	0
	push	eax
	call	DWORD PTR [edx+332]
	test	eax, eax
	jge	SHORT $L137099
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	324					; 00000144H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	esi
	add	esp, 20					; 00000014H
$L137099:

; 2074 : 		
; 2075 : 		bool CurrentDoFog=false;
; 2076 : 		for(i=0;i<QueuedPolygonCount;)

	mov	eax, DWORD PTR _QueuedPolygonCount$[esp+124]
	xor	edi, edi
	cmp	eax, edi
	mov	BYTE PTR _CurrentDoFog$[esp+124], 0
	mov	DWORD PTR _i$[esp+124], edi
	jle	$L123705
$L123704:

; 2077 : 		{
; 2078 : 			QueuedPolygon &p=QueuedPolygons(i);

	mov	ebx, DWORD PTR [ebp+675212]
	mov	esi, edi
	imul	esi, 280				; 00000118H

; 2079 : 			// Set the polygon texture.
; 2080 : 
; 2081 : 			SetTexture(0,*p.Texture, p.PolyFlags, false, p.PolyFlagsEx );	

	mov	ecx, DWORD PTR [esi+ebx+4]
	mov	edx, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [esi+ebx+8]
	add	esi, ebx
	push	0
	push	ecx
	push	0
	push	edx
	push	eax
	xor	edx, edx
	mov	ecx, ebp
	mov	DWORD PTR _p$123706[esp+144], esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 2082 : 			SetBlending(p.PolyFlags,p.PolyFlagsEx);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, eax
	and	edx, 1073741892				; 40000044H
	cmp	edx, 1073741824				; 40000000H
	mov	DWORD PTR $T137160[esp+124], ecx
	mov	DWORD PTR $T137159[esp+124], eax
	jne	SHORT $L137111
	mov	edx, DWORD PTR [ebp+19148]
	test	edx, edx
	jne	SHORT $L137110
$L137111:
	and	eax, -1073741825			; bfffffffH
	mov	DWORD PTR $T137159[esp+124], eax
$L137110:
	test	al, 68					; 00000044H
	jne	SHORT $L137112
	test	cl, 113					; 00000071H
	jne	SHORT $L137112
	or	eax, -2147483648			; 80000000H
	jmp	SHORT $L137241
$L137112:
	test	al, 4
	je	SHORT $L137114
	and	eax, -3					; fffffffdH
$L137241:
	mov	DWORD PTR $T137159[esp+124], eax
$L137114:
	mov	ecx, DWORD PTR [ebp+19616]
	mov	edi, DWORD PTR $T137159[esp+124]
	mov	ebx, DWORD PTR [ebp+19620]
	mov	eax, DWORD PTR $T137160[esp+124]
	xor	ecx, edi
	xor	ebx, eax
	test	ch, 1
	mov	DWORD PTR _Xor$137115[esp+124], ecx
	je	SHORT $L137117
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	mov	edx, edi
	not	edx
	and	edx, 256				; 00000100H
	or	edx, 128				; 00000080H
	shr	edx, 7
	push	edx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T137160[esp+124]
$L137117:
	test	bl, 2
	je	SHORT $L137118
	mov	edx, DWORD PTR $T137160[esp+124]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, 1
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T137160[esp+124]
$L137118:
	test	bl, 8
	je	SHORT $L137119
	mov	edx, DWORD PTR $T137160[esp+124]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T137160[esp+124]
$L137119:
	test	DWORD PTR _Xor$137115[esp+124], -754972601 ; d3000847H
	jne	SHORT $L137121
	test	bl, 113					; 00000071H
	je	$L137158
	mov	eax, DWORD PTR $T137160[esp+124]
$L137121:
	test	DWORD PTR _Xor$137115[esp+124], 268435525 ; 10000045H
	jne	SHORT $L137123
	test	bl, 113					; 00000071H
	je	$L137143
$L137123:
	test	bl, 1
	je	SHORT $L137124
	test	al, 1
	jne	SHORT $L137124
	mov	eax, DWORD PTR [ebp+19128]
	test	eax, eax
	mov	eax, DWORD PTR [ebp+19124]
	je	SHORT $L137125
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	jmp	SHORT $L137126
$L137125:
	mov	edx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L137126:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR $T137160[esp+124]
$L137124:
	mov	ecx, DWORD PTR $T137159[esp+124]
	test	ecx, 268435525				; 10000045H
	jne	SHORT $L137127
	test	al, 113					; 00000071H
	jne	SHORT $L137127
	xor	edx, edx
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	jmp	$L137143
$L137127:
	test	al, 64					; 00000040H
	je	SHORT $L137129
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
$L137242:
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137143
$L137129:
	test	cl, 1
	je	SHORT $L137131
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
$L137244:
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137143
$L137131:
	test	al, 32					; 00000020H
	je	SHORT $L137133
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137143
$L137133:
	test	al, 16					; 00000010H
	je	SHORT $L137135
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	SHORT $L137244
$L137135:
	test	cl, 4
	je	SHORT $L137137
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	$L137242
$L137137:
	test	cl, 64					; 00000040H
	je	SHORT $L137139
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137143
$L137139:
	test	ecx, 268435456				; 10000000H
	je	SHORT $L137141
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137143
$L137141:
	test	al, 1
	je	$L137143
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	5
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	6
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L137143:
	test	BYTE PTR _Xor$137115[esp+124], 1
	je	SHORT $L137144
	mov	edx, DWORD PTR $T137159[esp+124]
	and	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L137144:
	mov	eax, DWORD PTR _Xor$137115[esp+124]
	test	eax, eax
	jns	SHORT $L137146
	mov	ecx, DWORD PTR $T137159[esp+124]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	shr	ecx, 31					; 0000001fH
	push	ecx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
$L137146:
	test	BYTE PTR _Xor$137115[esp+124], 2
	je	SHORT $L137149
	test	BYTE PTR $T137159[esp+124], 2
	mov	eax, DWORD PTR [ebp+19124]
	je	SHORT $L137148
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	jmp	SHORT $L137149
$L137148:
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L137149:
	mov	edi, DWORD PTR _Xor$137115[esp+124]
	test	edi, 2048				; 00000800H
	mov	ebx, DWORD PTR $T137159[esp+124]
	je	SHORT $L137150
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	mov	esi, ebx
	and	esi, 2048				; 00000800H
	neg	esi
	sbb	esi, esi
	add	esi, 2
	push	esi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L137150:
	test	edi, 1073741824				; 40000000H
	je	SHORT $L137151
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	mov	ecx, ebx
	shr	ecx, 30					; 0000001eH
	and	ecx, 1
	push	ecx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
$L137151:
	test	edi, 50331648				; 03000000H
	je	SHORT $L137158
	test	ebx, 16777216				; 01000000H
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	je	SHORT $L137154
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	3
	jmp	SHORT $L137245
$L137154:
	test	ebx, 33554432				; 02000000H
	je	SHORT $L137156
	push	3
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	2
	jmp	SHORT $L137245
$L137156:
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	1
$L137245:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
$L137158:
	mov	eax, DWORD PTR $T137160[esp+124]
	mov	edx, DWORD PTR $T137159[esp+124]

; 2083 : 			//SetBlending(PF_Translucent,0);
; 2084 : 			//SetBlending(p.PolyFlags,0);
; 2085 : 
; 2086 : 			SetDistanceFog(!(p.PolyFlags&PF_Unlit));

	mov	ebx, DWORD PTR _p$123706[esp+124]
	mov	DWORD PTR [ebp+19620], eax
	mov	eax, DWORD PTR [ebp+675196]
	mov	DWORD PTR [ebp+19616], edx
	mov	esi, DWORD PTR [ebx]
	not	esi
	shr	esi, 22					; 00000016H
	and	esi, 1
	test	eax, eax
	je	$L137165
	cmp	esi, DWORD PTR [ebp+675192]
	je	$L137165
	test	esi, esi
	mov	eax, DWORD PTR [ebp+19124]
	je	$L137166
	mov	ecx, DWORD PTR [eax]
	push	1
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	48					; 00000030H
	push	eax
	call	DWORD PTR [edx+200]
	movzx	edi, BYTE PTR [ebp+675210]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	dh, BYTE PTR [ebp+675208]
	mov	dl, BYTE PTR [ebp+675209]
	shl	edx, 8
	or	edx, edi
	push	edx
	push	34					; 00000022H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	35					; 00000023H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR [ebp+675200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	36					; 00000024H
	push	eax
	call	DWORD PTR [edx+200]
	mov	ecx, DWORD PTR [ebp+675204]
	mov	eax, DWORD PTR [ebp+19124]
	push	ecx
	push	37					; 00000025H
	jmp	SHORT $L137246
$L137166:
	push	0
	push	28					; 0000001cH
$L137246:
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [ebp+675192], esi
$L137165:

; 2087 : 
; 2088 : 			// Set the correct fog mode:
; 2089 : 			UBOOL DoFog=((p.PolyFlags&(PF_RenderFog|PF_Translucent|PF_Modulated))==PF_RenderFog);		

	mov	eax, DWORD PTR [ebx]
	and	eax, 1073741892				; 40000044H
	sub	eax, 1073741824				; 40000000H
	neg	eax
	sbb	eax, eax
	inc	eax
	mov	DWORD PTR _DoFog$123707[esp+124], eax

; 2090 : 
; 2091 : 			if(DoFog&&(!CurrentDoFog))

	mov	al, BYTE PTR _CurrentDoFog$[esp+124]
	je	SHORT $L137220
	test	al, al
	jne	SHORT $L123710

; 2092 : 			{
; 2093 : 				CurrentDoFog=true;
; 2094 : 				Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_SPECULAR );			

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	2
	push	1
	push	eax
	mov	BYTE PTR _CurrentDoFog$[esp+140], 1
	call	DWORD PTR [ecx+252]

; 2095 : 				Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP,   D3DTOP_ADD );

	push	7

; 2096 : 			} else if((!DoFog)&&CurrentDoFog)

	jmp	SHORT $L137247
$L137220:
	test	al, al
	je	SHORT $L123710

; 2097 : 			{
; 2098 : 				CurrentDoFog=false;
; 2099 : 				Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	2
	push	1
	push	eax
	mov	BYTE PTR _CurrentDoFog$[esp+140], 0
	call	DWORD PTR [ecx+252]

; 2100 : 				Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP,   D3DTOP_DISABLE );

	push	1
$L137247:
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L123710:

; 2101 : 			}
; 2102 : 			
; 2103 : 			// Set the correct clamping mode:
; 2104 : 			SetTextureClampMode((p.PolyFlags & PF_MeshUVClamp)?1:0);

	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebp]
	shr	edx, 13					; 0000000dH
	and	edx, 1
	mov	ecx, ebp
	call	DWORD PTR [eax+212]

; 2105 : 
; 2106 : 			// See how many of my sucessor polys share my attributes, and draw them as well:
; 2107 : 			for(int j=i+1;j<QueuedPolygonCount;j++)

	mov	edi, DWORD PTR _i$[esp+124]
	mov	esi, DWORD PTR _QueuedPolygonCount$[esp+124]
	lea	eax, DWORD PTR [edi+1]
	cmp	eax, esi
	jge	SHORT $L137213
	mov	edx, DWORD PTR [ebx]
	mov	ecx, eax
	imul	ecx, 280				; 00000118H
	add	ecx, DWORD PTR [ebp+675212]
	jmp	SHORT $L123712
$L137237:

; 2101 : 			}
; 2102 : 			
; 2103 : 			// Set the correct clamping mode:
; 2104 : 			SetTextureClampMode((p.PolyFlags & PF_MeshUVClamp)?1:0);

	mov	ebx, DWORD PTR _p$123706[esp+124]
$L123712:

; 2108 : 			{
; 2109 : 				if(p.PolyFlags!=QueuedPolygons(j).PolyFlags)	 break;

	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $L137213

; 2110 : 				if(p.PolyFlagsEx!=QueuedPolygons(j).PolyFlagsEx) break;

	mov	ebx, DWORD PTR [ebx+4]
	cmp	ebx, DWORD PTR [ecx+4]
	jne	SHORT $L137213

; 2111 : 				if(p.Texture!=QueuedPolygons(j).Texture)		 break;

	mov	ebx, DWORD PTR _p$123706[esp+124]
	mov	ebx, DWORD PTR [ebx+8]
	cmp	ebx, DWORD PTR [ecx+8]
	jne	SHORT $L137213
	inc	eax
	add	ecx, 280				; 00000118H
	cmp	eax, esi
	jl	SHORT $L137237
$L137213:

; 2112 : 			}
; 2113 : 			int count=j-i;
; 2114 : 			Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLELIST, First+(i*3), count );

	mov	edx, DWORD PTR _First$[esp+124]
	sub	eax, edi
	mov	esi, eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	lea	edx, DWORD PTR [edx+edi*2]
	mov	ebx, edi
	add	ebx, edx
	push	ebx
	push	4
	push	eax
	call	DWORD PTR [ecx+280]
	mov	eax, DWORD PTR _QueuedPolygonCount$[esp+124]

; 2115 : 			i+=count;

	add	edi, esi
	cmp	edi, eax
	mov	DWORD PTR _i$[esp+124], edi
	jl	$L123704

; 2074 : 		
; 2075 : 		bool CurrentDoFog=false;
; 2076 : 		for(i=0;i<QueuedPolygonCount;)

	xor	edi, edi
$L123705:

; 2116 : 		} 
; 2117 : 
; 2118 : 		SetDistanceFog(true);

	cmp	DWORD PTR [ebp+675196], edi
	je	$L137182
	mov	eax, DWORD PTR [ebp+675192]
	mov	esi, 1
	cmp	eax, esi
	je	$L137182
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	esi
	push	48					; 00000030H
	push	eax
	call	DWORD PTR [edx+200]
	movzx	ebx, BYTE PTR [ebp+675210]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	dh, BYTE PTR [ebp+675208]
	mov	dl, BYTE PTR [ebp+675209]
	shl	edx, 8
	or	edx, ebx
	push	edx
	push	34					; 00000022H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	35					; 00000023H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR [ebp+675200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	36					; 00000024H
	push	eax
	call	DWORD PTR [edx+200]
	mov	ecx, DWORD PTR [ebp+675204]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	37					; 00000025H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [ebp+675192], esi
$L137182:

; 2119 : 		SetTextureClampMode(0);

	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+212]

; 2120 : 
; 2121 : 		if(CurrentDoFog==true)

	cmp	BYTE PTR _CurrentDoFog$[esp+124], 1
	jne	SHORT $L123719

; 2122 : 		{
; 2123 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 2124 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	2
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L123719:

; 2125 : 		}
; 2126 : 
; 2127 : 		RenderQueuedPolygonsForProjectors(ProjectorFlags);		// JEP

	mov	eax, DWORD PTR _ProjectorFlags$[esp+124]
	push	eax
	mov	ecx, ebp
	call	?RenderQueuedPolygonsForProjectors@UD3DRenderDevice@@QAEXK@Z ; UD3DRenderDevice::RenderQueuedPolygonsForProjectors

; 2128 : 
; 2129 : 		QueuedPolygons.Clear();

	mov	DWORD PTR [ebp+675216], edi

; 2130 : 
; 2131 : 		// Terminate polygon clipping:
; 2132 : 		unclock(Stats.D3DVertexRender);

	mov	ecx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [ecx], edi
	mov	DWORD PTR _L$137191[esp+124], edi
	je	SHORT $L137193
	rdtsc
	mov	DWORD PTR _L$137191[esp+124], eax
	mov	DWORD PTR _H$137192[esp+124], edx
$L137193:
	mov	edx, DWORD PTR _L$137191[esp+124]
	mov	esi, DWORD PTR [ebp+19652]
	add	edx, -34				; ffffffdeH
	add	esi, edx
	mov	DWORD PTR [ebp+19652], esi

; 2133 : 		unclock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _L$137198[esp+124], edi
	cmp	ecx, edi
	pop	edi
	je	SHORT $L137200
	rdtsc
	mov	DWORD PTR _L$137198[esp+120], eax
	mov	DWORD PTR _H$137199[esp+120], edx
$L137200:
	mov	ecx, DWORD PTR _L$137198[esp+120]
	mov	eax, DWORD PTR [ebp+19628]
	add	ecx, -34				; ffffffdeH
	add	eax, ecx
	mov	DWORD PTR [ebp+19628], eax
$L123665:
	pop	esi
	pop	ebp
	pop	ebx

; 2134 : 	}

	add	esp, 108				; 0000006cH
	ret	0
?QueuePolygonEnd@UD3DRenderDevice@@UAIXK@Z ENDP		; UD3DRenderDevice::QueuePolygonEnd
_TEXT	ENDS
PUBLIC	?Add@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedPolygon>::Add
; Function compile flags: /Ogty
;	COMDAT ?QueuePolygon@UD3DRenderDevice@@UAIXPAUFTextureInfo@@PAPAUFTransTexture@@HKKPAVFSpanBuffer@@@Z
_TEXT	SEGMENT
_L$137254 = -8
_H$137255 = -4
_L$137261 = -8
_H$137262 = -4
_L$137272 = 16
_H$137273 = 20
_L$137279 = 16
_H$137280 = 20
_Pts$ = 8
_PolyFlags$ = 16
_ExFlags$ = 20
?QueuePolygon@UD3DRenderDevice@@UAIXPAUFTextureInfo@@PAPAUFTransTexture@@HKKPAVFSpanBuffer@@@Z PROC NEAR ; UD3DRenderDevice::QueuePolygon, COMDAT
; _this$ = ecx
; _Info$ = edx

; 2138 : 		if(!RenderMeshes) 

	mov	eax, DWORD PTR ?RenderMeshes@@3HA	; RenderMeshes
	sub	esp, 8
	push	ebp
	mov	ebp, ecx
	xor	ecx, ecx
	cmp	eax, ecx
	push	edi
	mov	edi, edx
	je	$L123721

; 2139 : 			return;
; 2140 : 
; 2141 : 		clock(Stats.QueueTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ecx
	mov	DWORD PTR _L$137254[esp+16], ecx
	je	SHORT $L137256
	rdtsc
	mov	DWORD PTR _L$137254[esp+16], eax
	mov	DWORD PTR _H$137255[esp+16], edx
$L137256:
	mov	edx, DWORD PTR _L$137254[esp+16]
	push	ebx
	push	esi
	sub	DWORD PTR [ebp+19644], edx

; 2142 : 		clock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ecx
	mov	DWORD PTR _L$137261[esp+24], ecx
	je	SHORT $L137263
	rdtsc
	mov	DWORD PTR _L$137261[esp+24], eax
	mov	DWORD PTR _H$137262[esp+24], edx
$L137263:
	mov	esi, DWORD PTR [ebp+19628]
	mov	edx, DWORD PTR _L$137261[esp+24]

; 2143 : 
; 2144 : 		if(PolyFlags&PF_Masked) Stats.MaskedPolys++;

	mov	ebx, DWORD PTR _PolyFlags$[esp+20]
	sub	esi, edx
	test	bl, 2
	mov	DWORD PTR [ebp+19628], esi
	je	SHORT $L123723
	inc	DWORD PTR [ebp+19672]
$L123723:

; 2145 : 
; 2146 : 		QueuedPolygon &p=QueuedPolygons(QueuedPolygons.Add());

	push	ecx
	lea	esi, DWORD PTR [ebp+675212]
	push	1
	mov	ecx, esi
	call	?Add@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedPolygon>::Add
	imul	eax, 280				; 00000118H
	mov	ecx, DWORD PTR [esi]

; 2147 : 		p.PolyFlags=PolyFlags&(~PF_Memorized);
; 2148 : 		p.PolyFlagsEx=ExFlags|PFX_Clip;
; 2149 : 		p.Texture=Info;
; 2150 : 
; 2151 : 		memcpy(&p.v[0],Pts[0],sizeof(FTransTexture));

	mov	edx, DWORD PTR _Pts$[esp+20]
	add	eax, ecx
	mov	ecx, DWORD PTR _ExFlags$[esp+20]
	or	ecx, 2
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edi
	and	ebx, -16777217				; feffffffH
	mov	DWORD PTR [eax], ebx
	mov	esi, DWORD PTR [edx]
	lea	edi, DWORD PTR [eax+16]
	mov	ecx, 22					; 00000016H
	rep movsd

; 2152 : 		memcpy(&p.v[1],Pts[1],sizeof(FTransTexture));

	mov	esi, DWORD PTR [edx+4]
	lea	edi, DWORD PTR [eax+104]
	mov	ecx, 22					; 00000016H
	rep movsd

; 2153 : 		memcpy(&p.v[2],Pts[2],sizeof(FTransTexture));

	mov	esi, DWORD PTR [edx+8]
	lea	edi, DWORD PTR [eax+192]
	mov	ecx, 22					; 00000016H
	rep movsd

; 2154 : 		
; 2155 : 		unclock(Stats.PolyTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	mov	eax, DWORD PTR [edx]
	xor	ecx, ecx
	cmp	eax, ecx
	pop	esi
	mov	DWORD PTR _L$137272[esp+16], ecx
	pop	ebx
	je	SHORT $L137274
	rdtsc
	mov	DWORD PTR _L$137272[esp+12], eax
	mov	DWORD PTR _H$137273[esp+12], edx
$L137274:
	mov	eax, DWORD PTR _L$137272[esp+12]
	mov	edx, DWORD PTR [ebp+19628]
	add	eax, -34				; ffffffdeH
	add	edx, eax
	mov	DWORD PTR [ebp+19628], edx

; 2156 : 		unclock(Stats.QueueTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], ecx
	mov	DWORD PTR _L$137279[esp+12], ecx
	je	SHORT $L137281
	rdtsc
	mov	DWORD PTR _L$137279[esp+12], eax
	mov	DWORD PTR _H$137280[esp+12], edx
$L137281:
	mov	eax, DWORD PTR _L$137279[esp+12]
	mov	ecx, DWORD PTR [ebp+19644]
	add	eax, -34				; ffffffdeH
	add	ecx, eax
	mov	DWORD PTR [ebp+19644], ecx
$L123721:
	pop	edi
	pop	ebp

; 2157 : 	}

	add	esp, 8
	ret	20					; 00000014H
?QueuePolygon@UD3DRenderDevice@@UAIXPAUFTextureInfo@@PAPAUFTransTexture@@HKKPAVFSpanBuffer@@@Z ENDP ; UD3DRenderDevice::QueuePolygon
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?QueuePolygonBeginFast@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z
_TEXT	SEGMENT
?QueuePolygonBeginFast@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::QueuePolygonBeginFast, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 2161 : 		CurrentFrame=Frame;

	mov	DWORD PTR [ecx+172], edx

; 2162 : 		return true;

	mov	al, 1

; 2163 : 	}

	ret	0
?QueuePolygonBeginFast@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z ENDP ; UD3DRenderDevice::QueuePolygonBeginFast
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?QueuePolygonFast@UD3DRenderDevice@@UAIXPAPAUFTransTexture@@H@Z
_TEXT	SEGMENT
_L$137292 = -8
_H$137293 = -4
_L$137299 = -8
_H$137300 = -4
_L$137310 = -8
_H$137311 = -4
_L$137317 = -8
_H$137318 = -4
?QueuePolygonFast@UD3DRenderDevice@@UAIXPAPAUFTransTexture@@H@Z PROC NEAR ; UD3DRenderDevice::QueuePolygonFast, COMDAT
; _this$ = ecx
; _Pts$ = edx

; 2166 : 	{

	sub	esp, 8

; 2167 : 		clock(Stats.QueueTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	push	ebx
	push	ebp
	mov	ebp, edx
	mov	edx, DWORD PTR [eax]
	mov	ebx, ecx
	xor	ecx, ecx
	cmp	edx, ecx
	mov	DWORD PTR _L$137292[esp+16], ecx
	je	SHORT $L137294
	rdtsc
	mov	DWORD PTR _L$137292[esp+16], eax
	mov	DWORD PTR _H$137293[esp+16], edx
$L137294:
	mov	edx, DWORD PTR _L$137292[esp+16]
	push	esi
	sub	DWORD PTR [ebx+19644], edx

; 2168 : 		clock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ecx
	push	edi
	mov	DWORD PTR _L$137299[esp+24], ecx
	je	SHORT $L137301
	rdtsc
	mov	DWORD PTR _L$137299[esp+24], eax
	mov	DWORD PTR _H$137300[esp+24], edx
$L137301:
	mov	esi, DWORD PTR [ebx+19628]
	mov	edx, DWORD PTR _L$137299[esp+24]
	sub	esi, edx
	mov	DWORD PTR [ebx+19628], esi

; 2169 : 
; 2170 : 		QueuedPolygon &p=QueuedPolygons(QueuedPolygons.Add());

	push	ecx
	lea	esi, DWORD PTR [ebx+675212]
	push	1
	mov	ecx, esi
	call	?Add@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedPolygon>::Add
	imul	eax, 280				; 00000118H
	mov	edx, DWORD PTR [esi]

; 2171 : 
; 2172 : 		memcpy(&p.v[0],Pts[0],sizeof(FTransTexture));

	mov	esi, DWORD PTR [ebp]
	add	eax, edx
	lea	edi, DWORD PTR [eax+16]
	mov	ecx, 22					; 00000016H
	rep movsd

; 2173 : 		memcpy(&p.v[1],Pts[1],sizeof(FTransTexture));

	mov	esi, DWORD PTR [ebp+4]
	lea	edi, DWORD PTR [eax+104]
	mov	ecx, 22					; 00000016H
	rep movsd

; 2174 : 		memcpy(&p.v[2],Pts[2],sizeof(FTransTexture));

	mov	esi, DWORD PTR [ebp+8]
	lea	edi, DWORD PTR [eax+192]
	mov	ecx, 22					; 00000016H
	rep movsd

; 2175 : 		
; 2176 : 		unclock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], 0
	pop	edi
	mov	DWORD PTR _L$137310[esp+20], 0
	pop	esi
	je	SHORT $L137312
	rdtsc
	mov	DWORD PTR _L$137310[esp+16], eax
	mov	DWORD PTR _H$137311[esp+16], edx
$L137312:
	mov	ecx, DWORD PTR _L$137310[esp+16]
	mov	edx, DWORD PTR [ebx+19628]
	add	ecx, -34				; ffffffdeH
	add	edx, ecx
	mov	DWORD PTR [ebx+19628], edx

; 2177 : 		unclock(Stats.QueueTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	mov	ecx, DWORD PTR [edx]
	xor	eax, eax
	test	ecx, ecx
	mov	DWORD PTR _L$137317[esp+16], eax
	je	SHORT $L137321
	rdtsc
	mov	DWORD PTR _L$137317[esp+16], eax
	mov	DWORD PTR _H$137318[esp+16], edx
	mov	eax, DWORD PTR _L$137317[esp+16]
$L137321:
	mov	ecx, DWORD PTR [ebx+19644]
	add	eax, -34				; ffffffdeH
	add	ecx, eax
	pop	ebp
	mov	DWORD PTR [ebx+19644], ecx
	pop	ebx

; 2178 : 	}

	add	esp, 8
	ret	4
?QueuePolygonFast@UD3DRenderDevice@@UAIXPAPAUFTransTexture@@H@Z ENDP ; UD3DRenderDevice::QueuePolygonFast
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?QueuePolygonEndFast@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT
_L$137331 = -56
_H$137332 = -48
_L$137338 = -56
_H$137339 = -48
_VertexData$137348 = -60
_L$137373 = -56
_H$137374 = -48
_L$137380 = -56
_H$137381 = -48
_L$137421 = -48
_H$137422 = -52
_L$137433 = -48
_H$137434 = -52
_L$137512 = -44
_H$137513 = -48
_L$137519 = -44
_H$137520 = -48
_QueuedPolygonCount$ = -44
_V$123754 = -40
?QueuePolygonEndFast@UD3DRenderDevice@@UAIXXZ PROC NEAR	; UD3DRenderDevice::QueuePolygonEndFast, COMDAT
; _this$ = ecx

; 2198 : 	{

	sub	esp, 60					; 0000003cH
	push	ebx
	push	ebp
	mov	ebx, ecx
	push	esi

; 2199 : 		VALIDATE;
; 2200 : 		int QueuedPolygonCount=QueuedPolygons.Num();

	mov	esi, DWORD PTR [ebx+675216]

; 2201 : 
; 2202 : 		if(!QueuedPolygonCount) 

	xor	ebp, ebp
	cmp	esi, ebp
	mov	DWORD PTR _QueuedPolygonCount$[esp+72], esi
	je	$L123737

; 2203 : 			return;
; 2204 : 
; 2205 : 		check(Direct3DDevice8);

	cmp	DWORD PTR [ebx+19124], ebp
	push	edi
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L123740
	push	2205					; 0000089dH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEJO@Direct3DDevice8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L123740:

; 2206 : 
; 2207 : 		clock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ebp
	mov	DWORD PTR _L$137331[esp+76], ebp
	je	SHORT $L137333
	rdtsc
	mov	DWORD PTR _L$137331[esp+76], eax
	mov	DWORD PTR _H$137332[esp+76], edx
$L137333:
	mov	eax, DWORD PTR [ebx+19628]
	mov	ecx, DWORD PTR _L$137331[esp+76]

; 2208 : 		Stats.QueueCount++;

	mov	edx, DWORD PTR [ebx+19700]
	sub	eax, ecx

; 2209 : 		Stats.Polys+=QueuedPolygonCount;

	mov	ecx, DWORD PTR [ebx+19668]
	inc	edx
	add	ecx, esi
	mov	DWORD PTR [ebx+19628], eax

; 2210 : 
; 2211 : 		PreRender(CurrentFrame);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [ebx+19700], edx
	mov	edx, DWORD PTR [ebx+172]
	mov	DWORD PTR [ebx+19668], ecx
	mov	ecx, ebx
	call	DWORD PTR [eax+140]

; 2212 : 
; 2213 : 		int VertexCount=QueuedPolygonCount*3;

	lea	esi, DWORD PTR [esi+esi*2]

; 2214 : 		verify(VertexCount<=ACTORPOLY_VERTEXBUFFER_SIZE);

	cmp	esi, 16384				; 00004000H
	jle	SHORT $L123742
	push	2214					; 000008a6H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0CJ@LDCG@VertexCount?$DM?$DNACTORPOLY_VERTEXBUF@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L123742:

; 2215 : 
; 2216 : 		//Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_ALWAYS );
; 2217 : 
; 2218 : 		clock(Stats.D3DVertexLock);

	mov	ecx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [ecx], ebp
	mov	DWORD PTR _L$137338[esp+76], ebp
	je	SHORT $L137340
	rdtsc
	mov	DWORD PTR _L$137338[esp+76], eax
	mov	DWORD PTR _H$137339[esp+76], edx
$L137340:
	mov	ecx, DWORD PTR [ebx+19660]
	mov	edx, DWORD PTR _L$137338[esp+76]
	sub	ecx, edx
	mov	DWORD PTR [ebx+19660], ecx

; 2219 : 		FD3DTLVertex *Vertex = (FD3DTLVertex*)ActorVertices.Lock(VertexCount);

	cmp	DWORD PTR [ebx+16704], ebp
	jne	SHORT $L137345
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L137345:
	cmp	DWORD PTR [ebx+16708], ebp
	jne	SHORT $L137346
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L137346:
	cmp	esi, DWORD PTR [ebx+16708]
	jl	SHORT $L137349
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L137349:
	mov	ecx, DWORD PTR [ebx+16716]
	mov	edx, DWORD PTR [ebx+16708]
	lea	eax, DWORD PTR [ecx+esi]
	cmp	eax, edx
	mov	eax, DWORD PTR [ebx+16704]
	jge	SHORT $L137363
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$137348[esp+80]
	push	edi
	lea	edi, DWORD PTR [esi+esi*4]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	shl	edi, 3
	push	edi
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	cmp	eax, ebp
	jge	SHORT $L137539
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
	jmp	SHORT $L137358
$L137539:
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
$L137358:
	mov	eax, DWORD PTR [ebx+16716]
	mov	DWORD PTR [ebx+16712], eax
	add	eax, esi
	mov	DWORD PTR [ebx+16716], eax
	jmp	SHORT $L137362

; 2294 : 	}

	npad	3

; 2219 : 		FD3DTLVertex *Vertex = (FD3DTLVertex*)ActorVertices.Lock(VertexCount);

$L137363:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$137348[esp+80]
	push	edx
	lea	edx, DWORD PTR [esi+esi*4]
	shl	edx, 3
	push	edx
	push	ebp
	push	eax
	call	DWORD PTR [ecx+44]
	cmp	eax, ebp
	jge	SHORT $L137364
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L137364:
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	DWORD PTR [ebx+16712], ebp
	mov	DWORD PTR [ebx+16716], esi
$L137362:

; 2220 : 		Stats.VBLocks++;

	mov	ecx, DWORD PTR [ebx+19708]
	mov	ebp, DWORD PTR _VertexData$137348[esp+76]
	inc	ecx
	mov	DWORD PTR [ebx+19708], ecx

; 2221 : 		unclock(Stats.D3DVertexLock);

	mov	edx, DWORD PTR __imp__GTimestamp
	mov	eax, DWORD PTR [edx]
	xor	esi, esi
	cmp	eax, esi
	mov	DWORD PTR _L$137373[esp+76], esi
	je	SHORT $L137375
	rdtsc
	mov	DWORD PTR _L$137373[esp+76], eax
	mov	DWORD PTR _H$137374[esp+76], edx
$L137375:
	mov	eax, DWORD PTR _L$137373[esp+76]
	mov	ecx, DWORD PTR [ebx+19660]
	add	eax, -34				; ffffffdeH
	add	ecx, eax
	mov	DWORD PTR [ebx+19660], ecx

; 2222 : 
; 2223 : 		clock(Stats.D3DVertexSetup);

	mov	ecx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [ecx], esi
	mov	DWORD PTR _L$137380[esp+76], esi
	je	SHORT $L137382
	rdtsc
	mov	DWORD PTR _L$137380[esp+76], eax
	mov	DWORD PTR _H$137381[esp+76], edx
$L137382:
	mov	eax, DWORD PTR [ebx+19656]
	mov	edx, DWORD PTR _L$137380[esp+76]
	sub	eax, edx
	mov	DWORD PTR [ebx+19656], eax

; 2224 : 		for(int i=0;i<QueuedPolygonCount;i++)

	mov	eax, DWORD PTR _QueuedPolygonCount$[esp+76]
	cmp	eax, esi
	jle	$L123748
	mov	DWORD PTR -56+[esp+76], esi
	mov	DWORD PTR -48+[esp+76], eax
	jmp	SHORT $L123746
$L137540:

; 2222 : 
; 2223 : 		clock(Stats.D3DVertexSetup);

	xor	esi, esi
$L123746:

; 2225 : 		{
; 2226 : 			QueuedPolygon &p=QueuedPolygons(i);				

	mov	eax, DWORD PTR [ebx+675212]
	add	eax, DWORD PTR -56+[esp+76]
	lea	edx, DWORD PTR [eax+36]
	mov	DWORD PTR -52+[esp+76], 3
	jmp	SHORT $L123751
$L137541:
	xor	esi, esi

; 2294 : 	}

	npad	4
$L123751:

; 2229 : 			{	
; 2230 : 				FD3DTLVertex	V;
; 2231 : 
; 2232 : 				V.Position.X = p.v[Index].ScreenX + CurrentFrame->XB - 0.5f;

	mov	ecx, DWORD PTR [ebx+172]
	fild	DWORD PTR [ecx+176]
	fld	ST(0)
	fadd	DWORD PTR [edx-4]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _V$123754[esp+76]

; 2233 : 				V.Position.Y = p.v[Index].ScreenY + CurrentFrame->YB - 0.5f;

	fild	DWORD PTR [ecx+180]
	fst	DWORD PTR -60+[esp+76]
	fadd	DWORD PTR [edx]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _V$123754[esp+80]

; 2234 : 
; 2235 : 
; 2236 : 				if (V.Position.X < CurrentFrame->XB)

	fld	DWORD PTR _V$123754[esp+76]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L123755

; 2237 : 					V.Position.X = CurrentFrame->XB;

	fstp	DWORD PTR _V$123754[esp+76]

; 2238 : 				else if (V.Position.X > CurrentFrame->X)

	jmp	SHORT $L123757
$L123755:

; 2234 : 
; 2235 : 
; 2236 : 				if (V.Position.X < CurrentFrame->XB)

	fstp	ST(0)

; 2238 : 				else if (V.Position.X > CurrentFrame->X)

	fild	DWORD PTR [ecx+168]
	fld	DWORD PTR _V$123754[esp+76]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L137536

; 2239 : 					V.Position.X = CurrentFrame->X;

	fstp	DWORD PTR _V$123754[esp+76]
	jmp	SHORT $L123757
$L137536:
	fstp	ST(0)
$L123757:

; 2240 : 
; 2241 : 				if (V.Position.Y < CurrentFrame->YB)

	fld	DWORD PTR _V$123754[esp+80]
	fcomp	DWORD PTR -60+[esp+76]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L123758

; 2242 : 					V.Position.Y = CurrentFrame->YB;

	mov	eax, DWORD PTR -60+[esp+76]
	mov	DWORD PTR _V$123754[esp+80], eax

; 2243 : 				else if (V.Position.Y > CurrentFrame->Y)

	jmp	SHORT $L123760
$L123758:
	fild	DWORD PTR [ecx+172]
	fld	DWORD PTR _V$123754[esp+80]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L137535

; 2244 : 					V.Position.Y = CurrentFrame->Y;

	fstp	DWORD PTR _V$123754[esp+80]
	jmp	SHORT $L123760
$L137535:
	fstp	ST(0)
$L123760:

; 2227 : 
; 2228 : 			for( INT Index = 0; Index < 3; Index++ )

	mov	eax, DWORD PTR -52+[esp+76]

; 2245 : 
; 2246 : 				V.Position.Z = 1.0f;
; 2247 : 				V.Position.W = 1.0f;
; 2248 : 
; 2249 : 				V.Specular=0;
; 2250 : 				
; 2251 : 				#define SHADOW_VAL		(0)
; 2252 : 
; 2253 : 				V.Diffuse  = (SHADOW_VAL<<16) | (SHADOW_VAL<<8) | SHADOW_VAL;
; 2254 : 
; 2255 : 				*Vertex=V;

	mov	edi, ebp
	mov	DWORD PTR _V$123754[esp+96], esi
	mov	DWORD PTR _V$123754[esp+92], esi

; 2256 : 				Vertex++;

	add	ebp, 40					; 00000028H
	add	edx, 88					; 00000058H
	mov	ecx, 10					; 0000000aH
	lea	esi, DWORD PTR _V$123754[esp+76]
	dec	eax
	mov	DWORD PTR _V$123754[esp+84], 1065353216	; 3f800000H
	mov	DWORD PTR _V$123754[esp+88], 1065353216	; 3f800000H
	rep movsd
	mov	DWORD PTR -52+[esp+76], eax
	jne	$L137541
	mov	ecx, DWORD PTR -56+[esp+76]
	mov	eax, DWORD PTR -48+[esp+76]
	add	ecx, 280				; 00000118H
	dec	eax
	mov	DWORD PTR -56+[esp+76], ecx
	mov	DWORD PTR -48+[esp+76], eax
	jne	$L137540
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	xor	esi, esi
$L123748:

; 2257 : 
; 2258 : 			}
; 2259 : 		}
; 2260 : 		unclock(Stats.D3DVertexSetup);

	mov	ecx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [ecx], esi
	mov	DWORD PTR _L$137421[esp+76], esi
	je	SHORT $L137423
	rdtsc
	mov	DWORD PTR _L$137421[esp+76], eax
	mov	DWORD PTR _H$137422[esp+76], edx
$L137423:
	mov	edx, DWORD PTR _L$137421[esp+76]
	mov	ebp, DWORD PTR [ebx+19656]

; 2261 : 
; 2262 : 		SetTextureNULL( 0 );

	mov	eax, DWORD PTR [ebx+19124]
	add	edx, -34				; ffffffdeH
	push	esi
	add	ebp, edx
	push	esi
	mov	DWORD PTR [ebx+19656], ebp
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+244]
	lea	edx, DWORD PTR [ebx+16624]
	mov	DWORD PTR [ebx+19712], edx

; 2263 : 
; 2264 : 		clock(Stats.D3DVertexRender);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], esi
	mov	DWORD PTR _L$137433[esp+76], esi
	je	SHORT $L137435
	rdtsc
	mov	DWORD PTR _L$137433[esp+76], eax
	mov	DWORD PTR _H$137434[esp+76], edx
$L137435:
	mov	edx, DWORD PTR [ebx+19652]
	mov	ecx, DWORD PTR _L$137433[esp+76]
	sub	edx, ecx
	mov	DWORD PTR [ebx+19652], edx

; 2265 : 		INT	First = ActorVertices.Unlock();

	cmp	DWORD PTR [ebx+16704], esi
	jne	SHORT $L137441
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L137441:
	mov	eax, DWORD PTR [ebx+16704]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+48]
	cmp	eax, esi
	jge	SHORT $L137543
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	esi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	esi
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
	jmp	SHORT $L137442
$L137543:
	mov	esi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
$L137442:

; 2266 : 		ActorVertices.Set();

	mov	eax, DWORD PTR [ebx+16700]
	test	eax, eax
	mov	ebp, DWORD PTR [ebx+16712]
	jne	SHORT $L137450
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L137450:
	mov	eax, DWORD PTR [ebx+16704]
	test	eax, eax
	jne	SHORT $L137452
	push	319					; 0000013fH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L137452:
	mov	eax, DWORD PTR [ebx+16700]
	mov	edx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [edx+200]
	test	eax, eax
	jge	SHORT $L137453
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	esi
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L137453:
	mov	eax, DWORD PTR [ebx+16700]
	mov	edx, DWORD PTR [eax]
	push	708					; 000002c4H
	push	eax
	call	DWORD PTR [edx+304]
	test	eax, eax
	jge	SHORT $L137458
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	esi
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L137458:
	mov	ecx, DWORD PTR [ebx+16704]
	mov	eax, DWORD PTR [ebx+16700]
	mov	edx, DWORD PTR [eax]
	push	40					; 00000028H
	push	ecx
	push	0
	push	eax
	call	DWORD PTR [edx+332]
	test	eax, eax
	jge	SHORT $L137463
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	324					; 00000144H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	esi
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L137463:

; 2267 : 		
; 2268 : 		SetZBias(0);

	fld	DWORD PTR [ebx+675164]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L137490
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L137489
$L137490:
	mov	eax, DWORD PTR [ebx+19124]
	push	0
	push	47					; 0000002fH
	mov	DWORD PTR [ebx+675164], 0
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+200]
$L137489:

; 2269 : 		SetDistanceFog(false);

	mov	eax, DWORD PTR [ebx+675196]
	test	eax, eax
	je	SHORT $L137495
	mov	eax, DWORD PTR [ebx+675192]
	test	eax, eax
	je	SHORT $L137495
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [ebx+675192], 0
$L137495:

; 2270 : 		SetBlending();

	push	0
	xor	edx, edx
	mov	ecx, ebx
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 2271 : 		
; 2272 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	2
	mov	esi, 1
	push	esi
	push	eax
	call	DWORD PTR [ecx+252]

; 2273 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP,   D3DTOP_DISABLE );

	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	esi
	push	esi
	push	esi
	push	eax
	call	DWORD PTR [edx+252]

; 2274 : 
; 2275 : 		// Turn off zbuffering
; 2276 : 		Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_ALWAYS);

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]

; 2277 : 		
; 2278 : 		// Draw the VB
; 2279 : 		//Direct3DDevice8->SetRenderState(D3DRS_FILLMODE, D3DFILL_WIREFRAME);
; 2280 : 		Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLELIST, First, QueuedPolygonCount);

	mov	ecx, DWORD PTR _QueuedPolygonCount$[esp+76]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	ebp
	push	4
	push	eax
	call	DWORD PTR [edx+280]

; 2281 : 		//Direct3DDevice8->SetRenderState(D3DRS_FILLMODE, D3DFILL_SOLID);
; 2282 : 		
; 2283 : 		// Turn zbuffering back on
; 2284 : 		Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_LESSEQUAL );

	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [edx+200]

; 2285 : 
; 2286 : 		SetDistanceFog(true);

	mov	eax, DWORD PTR [ebx+675196]
	xor	edi, edi
	cmp	eax, edi
	je	$L137502
	cmp	DWORD PTR [ebx+675192], esi
	je	$L137502
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	esi
	push	48					; 00000030H
	push	eax
	call	DWORD PTR [edx+200]
	movzx	ebp, BYTE PTR [ebx+675210]
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	dh, BYTE PTR [ebx+675208]
	mov	dl, BYTE PTR [ebx+675209]
	shl	edx, 8
	or	edx, ebp
	push	edx
	push	34					; 00000022H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	35					; 00000023H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR [ebx+675200]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	36					; 00000024H
	push	eax
	call	DWORD PTR [edx+200]
	mov	ecx, DWORD PTR [ebx+675204]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	37					; 00000025H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [ebx+675192], esi
$L137502:

; 2287 : 		SetTextureClampMode(0);

	mov	eax, DWORD PTR [ebx]
	xor	edx, edx
	mov	ecx, ebx
	call	DWORD PTR [eax+212]

; 2288 : 
; 2289 : 		QueuedPolygons.Clear();

	mov	DWORD PTR [ebx+675216], edi

; 2290 : 
; 2291 : 		// Terminate polygon clipping:
; 2292 : 		unclock(Stats.D3DVertexRender);

	mov	ecx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [ecx], edi
	mov	DWORD PTR _L$137512[esp+76], edi
	je	SHORT $L137514
	rdtsc
	mov	DWORD PTR _L$137512[esp+76], eax
	mov	DWORD PTR _H$137513[esp+76], edx
$L137514:
	mov	edx, DWORD PTR _L$137512[esp+76]
	mov	esi, DWORD PTR [ebx+19652]
	add	edx, -34				; ffffffdeH
	add	esi, edx
	mov	DWORD PTR [ebx+19652], esi

; 2293 : 		unclock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _L$137519[esp+76], edi
	cmp	ecx, edi
	pop	edi
	je	SHORT $L137521
	rdtsc
	mov	DWORD PTR _L$137519[esp+72], eax
	mov	DWORD PTR _H$137520[esp+72], edx
$L137521:
	mov	ecx, DWORD PTR _L$137519[esp+72]
	mov	eax, DWORD PTR [ebx+19628]
	add	ecx, -34				; ffffffdeH
	add	eax, ecx
	mov	DWORD PTR [ebx+19628], eax
$L123737:
	pop	esi
	pop	ebp
	pop	ebx

; 2294 : 	}

	add	esp, 60					; 0000003cH
	ret	0
?QueuePolygonEndFast@UD3DRenderDevice@@UAIXXZ ENDP	; UD3DRenderDevice::QueuePolygonEndFast
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?RenderQueuedPolygonsForProjectors@UD3DRenderDevice@@QAEXK@Z
_TEXT	SEGMENT
_ProjectorFlags$ = 8
_XorEx$137578 = -104
_L$137664 = -88
_H$137665 = -52
_VertexData$137674 = -84
_L$137699 = -88
_H$137700 = -52
_L$137706 = -88
_H$137707 = -52
$T137743 = -60
_Temp$137750 = -44
$T137751 = -52
$T137752 = -56
$T137760 = -52
_I$137768 = -48
_L$137773 = -72
_H$137774 = -48
_QueuedPolygonCount$ = -108
_VertexCount$ = -100
_p$ = -68
_NumMaskedPolys$123780 = -88
_P$123791 = -32
_First$123794 = -52
_Count$123805 = -56
?RenderQueuedPolygonsForProjectors@UD3DRenderDevice@@QAEXK@Z PROC NEAR ; UD3DRenderDevice::RenderQueuedPolygonsForProjectors, COMDAT
; _this$ = ecx

; 2297 : 	{

	sub	esp, 108				; 0000006cH
	push	ebp
	mov	ebp, ecx

; 2298 : 		int QueuedPolygonCount=QueuedPolygons.Num();

	mov	eax, DWORD PTR [ebp+675216]

; 2299 : 
; 2300 : 		if(!QueuedPolygonCount) 

	test	eax, eax
	mov	DWORD PTR _QueuedPolygonCount$[esp+112], eax
	je	$L123769

; 2301 : 			return;
; 2302 : 		
; 2303 : 		int VertexCount=QueuedPolygonCount*3;

	lea	eax, DWORD PTR [eax+eax*2]

; 2304 : 		verify(VertexCount<=ACTORPOLY_VERTEXBUFFER_SIZE);

	cmp	eax, 16384				; 00004000H
	mov	DWORD PTR _VertexCount$[esp+112], eax
	jle	SHORT $L123767
	push	2304					; 00000900H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0CJ@LDCG@VertexCount?$DM?$DNACTORPOLY_VERTEXBUF@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L123767:

; 2305 : 
; 2306 : 		if (ProjectorArray.Num() <= 0 || CurrentFrame->Recursion != 0 || !ProjectorFlags)

	mov	eax, DWORD PTR [ebp+204]
	test	eax, eax
	jle	$L123769
	mov	eax, DWORD PTR [ebp+172]
	mov	ecx, DWORD PTR [eax+28]
	test	ecx, ecx
	jne	$L123769
	mov	eax, DWORD PTR _ProjectorFlags$[esp+108]
	test	eax, eax
	je	$L123769

; 2307 : 			return;			// No projectors to check
; 2308 : 
; 2309 : 		// Setup projector render states
; 2310 : 		SetTextureNULL( 0 );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	esi
	push	edi
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+244]

; 2311 : 		SetTextureNULL( 1 );

	push	0
	lea	esi, DWORD PTR [ebp+16624]
	mov	DWORD PTR [ebp+19712], esi
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	mov	edi, 1
	push	edi
	push	eax
	call	DWORD PTR [edx+244]
	mov	DWORD PTR [ebp+19716], esi

; 2312 : 		SetBlending( PF_Modulated );

	mov	ebx, DWORD PTR [ebp+19616]
	mov	eax, DWORD PTR [ebp+19620]
	xor	ebx, 64					; 00000040H
	test	bh, 1
	mov	DWORD PTR _XorEx$137578[esp+124], eax
	je	SHORT $L137579
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _XorEx$137578[esp+124]
$L137579:
	test	al, 2
	je	SHORT $L137580
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _XorEx$137578[esp+124]
$L137580:
	test	al, 8
	mov	esi, 9
	je	SHORT $L137581
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	esi
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _XorEx$137578[esp+124]
$L137581:
	test	ebx, -754972601				; d3000847H
	jne	SHORT $L137583
	test	al, 113					; 00000071H
	je	$L137619
$L137583:
	test	ebx, 268435525				; 10000045H
	jne	SHORT $L137585
	test	al, 113					; 00000071H
	je	SHORT $L137603
$L137585:
	test	al, 1
	je	SHORT $L137586
	mov	eax, DWORD PTR [ebp+19128]
	test	eax, eax
	mov	eax, DWORD PTR [ebp+19124]
	je	SHORT $L137587
	mov	edx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L137588
$L137587:
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L137588:
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L137586:
	mov	edx, edi
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, esi
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L137603:
	test	bl, 1
	je	SHORT $L137606
	xor	edx, edx
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, edi
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L137606:
	test	ebx, ebx
	jns	SHORT $L137608
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
$L137608:
	test	bl, 2
	je	SHORT $L137611
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L137611:
	test	bh, 8
	je	SHORT $L137612
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L137612:
	test	ebx, 1073741824				; 40000000H
	je	SHORT $L137613
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
$L137613:
	test	ebx, 50331648				; 03000000H
	je	SHORT $L137619
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	edi
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	4
	push	edi
	push	eax
	call	DWORD PTR [edx+252]
$L137619:

; 2313 : 		SetDistanceFog(false);

	mov	eax, DWORD PTR [ebp+675196]
	test	eax, eax
	mov	DWORD PTR [ebp+19616], 64		; 00000040H
	mov	DWORD PTR [ebp+19620], 0
	je	SHORT $L137624
	mov	eax, DWORD PTR [ebp+675192]
	test	eax, eax
	je	SHORT $L137624
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [ebp+675192], 0
$L137624:

; 2314 : 
; 2315 : 		SetTextureClampMode(1);

	mov	eax, DWORD PTR [ebp]
	mov	edx, edi
	mov	ecx, ebp
	call	DWORD PTR [eax+212]

; 2316 : 
; 2317 : 		//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 2318 : 		//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_DESTCOLOR );
; 2319 : 		//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ZERO );
; 2320 : 		SetAlphaBlendEnable(TRUE);

	mov	eax, DWORD PTR [ebp+675176]
	cmp	eax, edi
	jne	SHORT $L137634
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L137633
$L137634:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [ebp+675176], edi
$L137633:

; 2321 : 		SetSrcBlend(D3DBLEND_DESTCOLOR);

	cmp	DWORD PTR [ebp+675168], esi
	jne	SHORT $L137642
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L137640
$L137642:
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	esi
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [ebp+675168], esi
$L137640:

; 2322 : 		SetDstBlend(D3DBLEND_ZERO);

	cmp	DWORD PTR [ebp+675172], edi
	jne	SHORT $L137651
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L137649
$L137651:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [ebp+675172], edi
$L137649:

; 2323 : 	#if 1
; 2324 : 		// Setup clipper texture (also used for fade out)
; 2325 : 		Direct3DDevice8->SetTexture(1, ClipperTexture);

	mov	ecx, DWORD PTR [ebp+19112]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	edi
	push	eax
	call	DWORD PTR [edx+244]

; 2326 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	2
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 2327 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_ADD);

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	7
	push	edi
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]

; 2328 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	4
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 2329 : 
; 2330 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	13					; 0000000dH
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]

; 2331 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	14					; 0000000eH
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 2332 : 
; 2333 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MAGFILTER, D3DTEXF_POINT);

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	16					; 00000010H
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]

; 2334 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MINFILTER, D3DTEXF_POINT);

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	17					; 00000011H
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 2335 : 	#endif
; 2336 : 			
; 2337 : 		for (int p=ProjectorArray.Num()-1; p>=0 ; p--)

	mov	ecx, DWORD PTR [ebp+204]
	dec	ecx
	mov	DWORD PTR _p$[esp+124], ecx
	js	$L123773
	mov	eax, ecx
	imul	eax, 84					; 00000054H
	mov	DWORD PTR -64+[esp+124], eax
$L137841:
	mov	esi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 2338 : 		{
; 2339 : 			DWORD		Mask = 1<<p;

	shl	edi, cl

; 2340 : 
; 2341 : 			if (!(Mask & ProjectorFlags))

	test	DWORD PTR _ProjectorFlags$[esp+120], edi
	je	$L123772

; 2342 : 				continue;
; 2343 : 
; 2344 : 			ProjectorInfo *pProjector = &ProjectorArray(p);

	mov	ebx, DWORD PTR [ebp+200]

; 2345 : 
; 2346 : 			// Set the texture to the render target that belongs to this projector
; 2347 : 			Direct3DDevice8->SetTexture(0, pProjector->pRenderTargetTex);

	mov	edx, DWORD PTR [ebx+eax+4]
	add	ebx, eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+244]

; 2348 : 
; 2349 : 			// Fill up the VB with the verts for this projector
; 2350 : 			clock(Stats.D3DVertexLock);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], 0
	mov	DWORD PTR _L$137664[esp+124], 0
	je	SHORT $L137666
	rdtsc
	mov	DWORD PTR _L$137664[esp+124], eax
	mov	DWORD PTR _H$137665[esp+124], edx
$L137666:
	mov	edx, DWORD PTR [ebp+19660]
	mov	ecx, DWORD PTR _L$137664[esp+124]
	sub	edx, ecx
	mov	DWORD PTR [ebp+19660], edx

; 2351 : 			FD3DTLVertex *Vertex = (FD3DTLVertex*)ActorVertices.Lock(VertexCount);

	mov	eax, DWORD PTR [ebp+16704]
	test	eax, eax
	jne	SHORT $L137671
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L137671:
	mov	eax, DWORD PTR [ebp+16708]
	test	eax, eax
	jne	SHORT $L137672
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L137672:
	mov	edi, DWORD PTR _VertexCount$[esp+124]
	cmp	edi, DWORD PTR [ebp+16708]
	jl	SHORT $L137675
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L137675:
	mov	ecx, DWORD PTR [ebp+16716]
	mov	eax, DWORD PTR [ebp+16708]
	lea	edx, DWORD PTR [ecx+edi]
	cmp	edx, eax
	mov	eax, DWORD PTR [ebp+16704]
	jge	SHORT $L137689
	mov	edi, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edx, DWORD PTR _VertexData$137674[esp+128]
	push	edx
	mov	edx, DWORD PTR _VertexCount$[esp+132]
	lea	edx, DWORD PTR [edx+edx*4]
	shl	edx, 3
	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	edx
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edi+44]
	xor	edi, edi
	cmp	eax, edi
	jge	SHORT $L137684
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	esi
	add	esp, 20					; 00000014H
$L137684:
	mov	eax, DWORD PTR [ebp+16716]
	mov	ecx, DWORD PTR _VertexCount$[esp+124]
	mov	DWORD PTR [ebp+16712], eax
	add	eax, ecx
	mov	DWORD PTR [ebp+16716], eax
	jmp	SHORT $L137688

; 2466 : 	}

	npad	6

; 2351 : 			FD3DTLVertex *Vertex = (FD3DTLVertex*)ActorVertices.Lock(VertexCount);

$L137689:
	mov	edx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	ecx, DWORD PTR _VertexData$137674[esp+128]
	push	ecx
	lea	ecx, DWORD PTR [edi+edi*4]
	shl	ecx, 3
	push	ecx
	push	0
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L137690
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	esi
	add	esp, 20					; 00000014H
$L137690:
	mov	DWORD PTR [ebp+16716], edi
	mov	DWORD PTR [ebp+16712], 0
	xor	edi, edi
$L137688:

; 2352 : 			Stats.VBLocks++;

	mov	edx, DWORD PTR [ebp+19708]
	mov	ecx, DWORD PTR _VertexData$137674[esp+124]
	inc	edx
	mov	DWORD PTR [ebp+19708], edx

; 2353 : 			unclock(Stats.D3DVertexLock);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], edi
	mov	DWORD PTR _L$137699[esp+124], edi
	je	SHORT $L137701
	rdtsc
	mov	DWORD PTR _L$137699[esp+124], eax
	mov	DWORD PTR _H$137700[esp+124], edx
$L137701:
	mov	eax, DWORD PTR _L$137699[esp+124]
	mov	edx, DWORD PTR [ebp+19660]
	add	eax, -34				; ffffffdeH
	add	edx, eax
	mov	DWORD PTR [ebp+19660], edx

; 2354 : 
; 2355 : 			clock(Stats.D3DVertexSetup);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], edi
	mov	DWORD PTR _L$137706[esp+124], edi
	je	SHORT $L137708
	rdtsc
	mov	DWORD PTR _L$137706[esp+124], eax
	mov	DWORD PTR _H$137707[esp+124], edx
$L137708:
	mov	eax, DWORD PTR _L$137706[esp+124]
	mov	edx, DWORD PTR [ebp+19656]
	sub	edx, eax

; 2356 : 
; 2357 : 			INT n = 0, NumMaskedPolys = 0;
; 2358 : 
; 2359 : 			for(int i=0;i<QueuedPolygonCount;i++)

	cmp	DWORD PTR _QueuedPolygonCount$[esp+124], edi
	mov	DWORD PTR [ebp+19656], edx
	mov	DWORD PTR _NumMaskedPolys$123780[esp+124], edi
	jle	$L123784
	lea	edx, DWORD PTR [ebx+16]

; 2360 : 			{
; 2361 : 				QueuedPolygon &p=QueuedPolygons(i);				
; 2362 : 
; 2363 : 				if (p.PolyFlags&PF_Masked)
; 2364 : 					NumMaskedPolys++;
; 2365 : 
; 2366 : 				for( INT Index = 0; Index < 3; Index++, n++)
; 2367 : 				{	
; 2368 : 					Vertex->Position.X = Verts[n].Position.X;
; 2369 : 					Vertex->Position.Y = Verts[n].Position.Y;
; 2370 : 					Vertex->Position.Z = Verts[n].Position.Z;
; 2371 : 					Vertex->Position.W = Verts[n].Position.W;
; 2372 : 			
; 2373 : 					Vertex->Specular = 0;
; 2374 : 					Vertex->Diffuse  = 0xffffffff;
; 2375 : 
; 2376 : 					//PROJECT_VERT(p.v[Index].Point, pProjector, Vertex);
; 2377 : 
; 2378 : 					// Grab a copy of the vert
; 2379 : 					FTransform		P;
; 2380 : 
; 2381 : 					// Transform point into projector space
; 2382 : 					P.Point = p.v[Index].Point.TransformPointBy(pProjector->CameraToLight);

	lea	eax, DWORD PTR _Temp$137750[esp+124]
	mov	DWORD PTR $T137752[esp+124], edx
	mov	DWORD PTR $T137743[esp+124], eax
	mov	eax, DWORD PTR _QueuedPolygonCount$[esp+124]
	lea	edx, DWORD PTR [ebp+19748]
	mov	DWORD PTR -92+[esp+124], 0
	mov	DWORD PTR -80+[esp+124], edx
	mov	DWORD PTR -72+[esp+124], eax

; 2466 : 	}

	npad	4

; 2360 : 			{
; 2361 : 				QueuedPolygon &p=QueuedPolygons(i);				
; 2362 : 
; 2363 : 				if (p.PolyFlags&PF_Masked)
; 2364 : 					NumMaskedPolys++;
; 2365 : 
; 2366 : 				for( INT Index = 0; Index < 3; Index++, n++)
; 2367 : 				{	
; 2368 : 					Vertex->Position.X = Verts[n].Position.X;
; 2369 : 					Vertex->Position.Y = Verts[n].Position.Y;
; 2370 : 					Vertex->Position.Z = Verts[n].Position.Z;
; 2371 : 					Vertex->Position.W = Verts[n].Position.W;
; 2372 : 			
; 2373 : 					Vertex->Specular = 0;
; 2374 : 					Vertex->Diffuse  = 0xffffffff;
; 2375 : 
; 2376 : 					//PROJECT_VERT(p.v[Index].Point, pProjector, Vertex);
; 2377 : 
; 2378 : 					// Grab a copy of the vert
; 2379 : 					FTransform		P;
; 2380 : 
; 2381 : 					// Transform point into projector space
; 2382 : 					P.Point = p.v[Index].Point.TransformPointBy(pProjector->CameraToLight);

$L123782:
	mov	eax, DWORD PTR [ebp+675212]
	mov	esi, DWORD PTR -92+[esp+124]
	mov	dl, BYTE PTR [eax+esi]
	add	eax, esi
	test	dl, 2
	je	SHORT $L123786
	inc	DWORD PTR _NumMaskedPolys$123780[esp+124]
$L123786:
	add	eax, 16					; 00000010H
	mov	DWORD PTR -104+[esp+124], eax
	mov	eax, DWORD PTR -80+[esp+124]
	mov	DWORD PTR -96+[esp+124], eax
	add	eax, 120				; 00000078H
	mov	DWORD PTR -76+[esp+124], 3
	mov	DWORD PTR -80+[esp+124], eax
$L123788:
	mov	eax, DWORD PTR -96+[esp+124]
	mov	edx, DWORD PTR [eax-4]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+8]
	mov	edx, DWORD PTR -104+[esp+124]
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+16], -1
	mov	DWORD PTR $T137751[esp+124], edx
	mov	esi, DWORD PTR $T137751[esp+124]
	mov	edx, DWORD PTR $T137752[esp+124]
	mov	edi, DWORD PTR $T137743[esp+124]
	fld	DWORD PTR [esi]
	fld	DWORD PTR [esi+4]
	fld	DWORD PTR [esi+8]
	fxch	ST(2)
	fsub	DWORD PTR [edx]
	fxch	ST(1)
	fsub	DWORD PTR [edx+4]
	fxch	ST(2)
	fsub	DWORD PTR [edx+8]
	fxch	ST(1)
	fld	ST(0)
	fmul	DWORD PTR [edx+12]
	fld	ST(1)
	fmul	DWORD PTR [edx+24]
	fxch	ST(2)
	fmul	DWORD PTR [edx+36]
	fxch	ST(4)
	fld	ST(0)
	fmul	DWORD PTR [edx+16]
	fld	ST(1)
	fmul	DWORD PTR [edx+28]
	fxch	ST(2)
	fmul	DWORD PTR [edx+40]
	fxch	ST(1)
	faddp	ST(3), ST(0)
	faddp	ST(5), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(2)
	fld	ST(0)
	fmul	DWORD PTR [edx+20]
	fld	ST(1)
	fmul	DWORD PTR [edx+32]
	fxch	ST(2)
	fmul	DWORD PTR [edx+44]
	fxch	ST(1)
	faddp	ST(4), ST(0)
	faddp	ST(4), ST(0)
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [edi]
	fstp	DWORD PTR [edi+4]
	fstp	DWORD PTR [edi+8]

; 2383 : 						
; 2384 : 					// Project point onto projector front plane
; 2385 : 					P.Point.Z = max(1.0f, P.Point.Z);

	fld	DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _Temp$137750[esp+124]
	fcomp	DWORD PTR _Temp$137750[esp+132]
	mov	edx, DWORD PTR _Temp$137750[esp+128]
	mov	DWORD PTR _P$123791[esp+124], eax
	mov	eax, DWORD PTR _Temp$137750[esp+132]
	mov	DWORD PTR _P$123791[esp+132], eax
	fnstsw	ax
	mov	DWORD PTR _P$123791[esp+128], edx
	test	ah, 65					; 00000041H
	jne	SHORT $L137550
	mov	DWORD PTR _P$123791[esp+132], 1065353216 ; 3f800000H
$L137550:

; 2386 : 					P.Project(pProjector->Frame);

	fld	DWORD PTR _P$123791[esp+132]
	mov	edx, DWORD PTR [ebx]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L137763
	mov	DWORD PTR _P$123791[esp+132], 981668463	; 3a83126fH
$L137763:
	fld	DWORD PTR [edx+220]
	fdiv	DWORD PTR _P$123791[esp+132]
	fstp	DWORD PTR _P$123791[esp+152]
	fld	DWORD PTR _P$123791[esp+124]
	fmul	DWORD PTR _P$123791[esp+152]
	fadd	DWORD PTR [edx+192]
	fstp	DWORD PTR _P$123791[esp+140]
	fld	DWORD PTR _P$123791[esp+128]
	fmul	DWORD PTR _P$123791[esp+152]
	fadd	DWORD PTR [edx+196]
	fst	DWORD PTR _P$123791[esp+144]
	fstp	DWORD PTR $T137760[esp+124]
	fld	DWORD PTR $T137760[esp+124]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$137768[esp+124]

; 2387 : 
; 2388 : 					// Snag UV's
; 2389 : 					Vertex->U[0] = P.ScreenX*pProjector->OneOverX;

	fld	DWORD PTR _P$123791[esp+140]
	mov	esi, DWORD PTR -104+[esp+124]
	fmul	DWORD PTR [ebx+64]
	mov	eax, DWORD PTR -76+[esp+124]
	add	esi, 88					; 00000058H

; 2390 : 					Vertex->U[1] = P.ScreenY*pProjector->OneOverY; 
; 2391 : 						
; 2392 : 					Vertex->Position.W *= P.Point.Z;
; 2393 : 
; 2394 : 					// Clip and fade out (this is the UV's for the clipper/fade out texture layer)
; 2395 : 				#if 1
; 2396 : 					FLOAT R = P.RZ * pProjector->Frame->RProj.Z;		// (1.0f/Z)
; 2397 : 					Vertex->U2[0] = (pProjector->_33 + pProjector->_43 * R)*pProjector->FadeScale;
; 2398 : 					Vertex->U2[1] = 0.0f;
; 2399 : 				#endif
; 2400 : 			
; 2401 : 					Vertex++;

	add	ecx, 40					; 00000028H
	fstp	DWORD PTR [ecx-16]
	mov	DWORD PTR -104+[esp+124], esi
	fld	DWORD PTR _P$123791[esp+144]
	fmul	DWORD PTR [ebx+68]
	fstp	DWORD PTR [ecx-12]
	fld	DWORD PTR _P$123791[esp+132]
	fmul	DWORD PTR [ecx-28]
	fstp	DWORD PTR [ecx-28]
	mov	edx, DWORD PTR [ebx]
	fld	DWORD PTR _P$123791[esp+152]
	fmul	DWORD PTR [edx+232]
	mov	edx, DWORD PTR -96+[esp+124]
	add	edx, 40					; 00000028H
	dec	eax
	fmul	DWORD PTR [ebx+76]
	mov	DWORD PTR -96+[esp+124], edx
	mov	DWORD PTR -76+[esp+124], eax
	fadd	DWORD PTR [ebx+72]
	fmul	DWORD PTR [ebx+80]
	mov	DWORD PTR [ecx-4], 0
	fstp	DWORD PTR [ecx-8]
	jne	$L123788
	mov	edx, DWORD PTR -92+[esp+124]
	mov	eax, DWORD PTR -72+[esp+124]
	add	edx, 280				; 00000118H
	dec	eax
	mov	DWORD PTR -92+[esp+124], edx
	mov	DWORD PTR -72+[esp+124], eax
	jne	$L123782
$L123784:

; 2402 : 				}
; 2403 : 			}
; 2404 : 			unclock(Stats.D3DVertexSetup);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], 0
	mov	DWORD PTR _L$137773[esp+124], 0
	je	SHORT $L137775
	rdtsc
	mov	DWORD PTR _L$137773[esp+124], eax
	mov	DWORD PTR _H$137774[esp+124], edx
$L137775:
	mov	ecx, DWORD PTR _L$137773[esp+124]
	mov	edx, DWORD PTR [ebp+19656]
	add	ecx, -34				; ffffffdeH
	add	edx, ecx

; 2405 : 
; 2406 : 			INT	First = ActorVertices.Unlock();

	lea	esi, DWORD PTR [ebp+16700]
	mov	DWORD PTR [ebp+19656], edx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L137780
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH

; 2466 : 	}

	npad	3

; 2405 : 
; 2406 : 			INT	First = ActorVertices.Unlock();

$L137780:
	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+48]
	test	eax, eax
	jge	SHORT $L137781
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L137781:
	mov	edi, DWORD PTR [esi+12]

; 2407 : 			ActorVertices.Set();

	mov	ecx, esi
	mov	DWORD PTR _First$123794[esp+124], edi
	call	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DTLVertex>::Set

; 2408 : 		
; 2409 : 			// If we have some masked polygons, we have to seperate them out, and compare only equal zbuffer values
; 2410 : 			//	This way, we don't see shadows in mid-air (shadows being projected onto the invisible parts of textures)
; 2411 : 			if (NumMaskedPolys)

	mov	eax, DWORD PTR _NumMaskedPolys$123780[esp+124]
	test	eax, eax
	je	$L123795

; 2412 : 			{
; 2413 : 				for(i=0;i<QueuedPolygonCount;)

	mov	eax, DWORD PTR _QueuedPolygonCount$[esp+124]
	xor	edi, edi
	test	eax, eax
	jle	$L123772
	mov	ecx, eax
$L123797:

; 2414 : 				{
; 2415 : 					QueuedPolygon &p=QueuedPolygons(i);

	mov	edx, DWORD PTR [ebp+675212]
	mov	esi, edi
	imul	esi, 280				; 00000118H

; 2416 : 
; 2417 : 					for(int j=i+1;j<QueuedPolygonCount;j++)

	lea	eax, DWORD PTR [edi+1]
	add	esi, edx
	cmp	eax, ecx
	jge	SHORT $L137819
	mov	ebx, DWORD PTR [esi]
	mov	ecx, eax
	imul	ecx, 280				; 00000118H
	and	ebx, 2
	add	ecx, edx

; 2466 : 	}

	npad	2

; 2416 : 
; 2417 : 					for(int j=i+1;j<QueuedPolygonCount;j++)

$L123801:

; 2418 : 					{
; 2419 : 						if ((p.PolyFlags&PF_Masked) != (QueuedPolygons(j).PolyFlags&PF_Masked)) 

	mov	edx, DWORD PTR [ecx]
	and	edx, 2
	cmp	ebx, edx
	jne	SHORT $L137819
	mov	edx, DWORD PTR _QueuedPolygonCount$[esp+124]
	inc	eax
	add	ecx, 280				; 00000118H
	cmp	eax, edx
	jl	SHORT $L123801
$L137819:

; 2420 : 							break;
; 2421 : 					}
; 2422 : 				
; 2423 : 					INT Count = j-i;

	sub	eax, edi
	mov	ebx, eax

; 2424 : 
; 2425 : 					// Handle masked polygons
; 2426 : 					if (p.PolyFlags & PF_Masked)

	test	BYTE PTR [esi], 2
	mov	DWORD PTR _Count$123805[esp+124], ebx
	je	SHORT $L123806

; 2427 : 						Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_EQUAL );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]
$L123806:

; 2428 : 
; 2429 : 					Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLELIST, First+(i*3), Count);

	mov	ecx, DWORD PTR _First$123794[esp+124]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	ebx
	lea	ecx, DWORD PTR [ecx+edi*2]
	mov	ebx, edi
	add	ebx, ecx
	push	ebx
	push	4
	push	eax
	call	DWORD PTR [edx+280]

; 2430 : 				
; 2431 : 					// Finish masked polygons
; 2432 : 					if (p.PolyFlags & PF_Masked)

	test	BYTE PTR [esi], 2
	je	SHORT $L123807

; 2433 : 						Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_LESSEQUAL );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [edx+200]
$L123807:

; 2434 : 					
; 2435 : 					i += Count;

	add	edi, DWORD PTR _Count$123805[esp+124]
	mov	ecx, DWORD PTR _QueuedPolygonCount$[esp+124]
	cmp	edi, ecx
	jl	$L123797

; 2436 : 				}
; 2437 : 			}
; 2438 : 			else

	jmp	SHORT $L123772
$L123795:

; 2439 : 			{
; 2440 : 				// Draw the entire VB (no masked polygons)
; 2441 : 				Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLELIST, First, QueuedPolygonCount);

	mov	edx, DWORD PTR _QueuedPolygonCount$[esp+124]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	edi
	push	4
	push	eax
	call	DWORD PTR [ecx+280]
$L123772:
	mov	ecx, DWORD PTR _p$[esp+124]
	mov	eax, DWORD PTR -64+[esp+124]
	dec	ecx
	sub	eax, 84					; 00000054H
	test	ecx, ecx
	mov	DWORD PTR _p$[esp+124], ecx
	mov	DWORD PTR -64+[esp+124], eax
	mov	edi, 1
	jge	$L137841

; 2335 : 	#endif
; 2336 : 			
; 2337 : 		for (int p=ProjectorArray.Num()-1; p>=0 ; p--)

	mov	esi, 9
$L123773:

; 2442 : 			}
; 2443 : 		}
; 2444 : 
; 2445 : 		// Restore render states
; 2446 : 		Direct3DDevice8->SetTexture(0, NULL);

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+244]

; 2447 : 
; 2448 : 		//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 2449 : 		//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_DESTCOLOR );
; 2450 : 		//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_SRCCOLOR );
; 2451 : 		SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [ebp+675176], edi
	jne	SHORT $L137799
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L137798
$L137799:
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [ebp+675176], edi
$L137798:

; 2452 : 		SetSrcBlend(D3DBLEND_DESTCOLOR);

	cmp	DWORD PTR [ebp+675168], esi
	jne	SHORT $L137807
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L137805
$L137807:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [ebp+675168], esi
$L137805:

; 2453 : 		SetDstBlend(D3DBLEND_SRCCOLOR);

	mov	edx, 3
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend

; 2454 : 
; 2455 : 		Direct3DDevice8->SetTexture(1, NULL);

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	edi
	push	eax
	call	DWORD PTR [edx+244]

; 2456 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_DISABLE);

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	edi
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]

; 2457 : 
; 2458 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 2459 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MINFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]

; 2460 : 
; 2461 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	13					; 0000000dH
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 2462 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	14					; 0000000eH
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]

; 2463 : 
; 2464 : 		SetDistanceFog(true);

	push	edi
	mov	ecx, ebp
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog

; 2465 : 		SetTextureClampMode(0);

	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+212]
	pop	edi
	pop	esi
	pop	ebx
$L123769:
	pop	ebp

; 2466 : 	}

	add	esp, 108				; 0000006cH
	ret	4
?RenderQueuedPolygonsForProjectors@UD3DRenderDevice@@QAEXK@Z ENDP ; UD3DRenderDevice::RenderQueuedPolygonsForProjectors
_TEXT	ENDS
EXTRN	__imp_??0FColor@@QAE@EEEE@Z:NEAR
; Function compile flags: /Ogty
;	COMDAT ?DrawGouraudPolygon@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@PAPAUFTransTexture@@HKPAVFSpanBuffer@@K@Z
_TEXT	SEGMENT
_Frame$ = -32
_Info$ = 8
_Pts$ = 12
_NumPts$ = 16
_PolyFlags$ = 20
_PolyFlagsEx$ = 28
$T137847 = 8
$T137848 = 28
_L$137851 = -40
_H$137852 = -4
_Xor$137864 = -40
$T137907 = -44
_I$137943 = -16
$T137945 = -32
_I$137949 = -20
$T137951 = -32
_I$137955 = -24
$T137957 = 12
_I$137964 = -12
$T137966 = 12
_I$137970 = -8
$T137972 = 12
_I$137976 = -4
$T137978 = 12
_L$137986 = 28
_H$137987 = 20
_DoFog$ = -36
_ZBiasHack$ = -40
_W$123830 = 12
?DrawGouraudPolygon@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@PAPAUFTransTexture@@HKPAVFSpanBuffer@@K@Z PROC NEAR ; UD3DRenderDevice::DrawGouraudPolygon, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 2470 : 	{

	sub	esp, 44					; 0000002cH

; 2471 : 		if(!RenderMeshes) 

	mov	eax, DWORD PTR ?RenderMeshes@@3HA	; RenderMeshes
	test	eax, eax
	push	esi
	mov	DWORD PTR _Frame$[esp+48], edx
	mov	esi, ecx
	je	$L123810

; 2472 : 			return;
; 2473 : 
; 2474 : 		clock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], 0
	mov	DWORD PTR _L$137851[esp+48], 0
	je	SHORT $L137853
	rdtsc
	mov	DWORD PTR _L$137851[esp+48], eax
	mov	DWORD PTR _H$137852[esp+48], edx
$L137853:
	mov	ecx, DWORD PTR _L$137851[esp+48]

; 2475 : 
; 2476 : 		Stats.Polys++;

	mov	edx, DWORD PTR [esi+19668]

; 2477 : 		if(PolyFlags&PF_Masked) Stats.MaskedPolys++;

	mov	eax, DWORD PTR _PolyFlags$[esp+44]
	push	ebx
	push	ebp
	push	edi
	mov	edi, DWORD PTR [esi+19628]
	sub	edi, ecx
	inc	edx
	test	al, 2
	mov	DWORD PTR [esi+19628], edi
	mov	DWORD PTR [esi+19668], edx
	je	SHORT $L123812
	inc	DWORD PTR [esi+19672]
$L123812:

; 2478 : 
; 2479 : 		UBOOL DoFog=((PolyFlags&(PF_RenderFog|PF_Translucent|PF_Modulated))==PF_RenderFog);		

	mov	ecx, eax
	and	ecx, 1073741892				; 40000044H
	sub	ecx, 1073741824				; 40000000H
	neg	ecx
	sbb	ecx, ecx
	inc	ecx

; 2480 : 
; 2481 : 		// Set up vertices.
; 2482 : 		PolyFlags&=(~PF_Memorized)/*&(~PF_Selected)*/;

	and	eax, -16777217				; feffffffH

; 2483 : 
; 2484 : 		// Set the polygon texture.
; 2485 : 		PolyFlags|=PF_TwoSided;   // NJS: Hack, shouldn't have to do this.

	or	eax, 256				; 00000100H
	mov	DWORD PTR _DoFog$[esp+60], ecx

; 2486 : 		PolyFlagsEx|=PFX_Clip;

	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+56]

; 2487 : 
; 2488 : 		SetBlending( PolyFlags, PolyFlagsEx );		

	mov	edx, eax
	or	ecx, 2
	and	edx, 1073741892				; 40000044H
	cmp	edx, 1073741824				; 40000000H
	mov	DWORD PTR _PolyFlags$[esp+56], eax
	mov	DWORD PTR _PolyFlagsEx$[esp+56], ecx
	mov	DWORD PTR $T137907[esp+60], eax
	jne	SHORT $L137860
	mov	edx, DWORD PTR [esi+19148]
	test	edx, edx
	jne	SHORT $L137859
$L137860:
	and	eax, -1073741825			; bfffffffH
	mov	DWORD PTR $T137907[esp+60], eax
$L137859:
	test	al, 68					; 00000044H
	jne	SHORT $L137861
	test	cl, 113					; 00000071H
	jne	SHORT $L137861
	or	eax, -2147483648			; 80000000H
	jmp	SHORT $L138003
$L137861:
	test	al, 4
	je	SHORT $L137863
	and	eax, -3					; fffffffdH
$L138003:
	mov	DWORD PTR $T137907[esp+60], eax
$L137863:
	mov	edx, DWORD PTR [esi+19616]
	mov	ebx, DWORD PTR [esi+19620]
	xor	edx, eax
	xor	ebx, ecx
	test	dh, 1
	mov	DWORD PTR _Xor$137864[esp+60], edx
	je	SHORT $L137866
	mov	edx, DWORD PTR $T137907[esp+60]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	not	edx
	and	edx, 256				; 00000100H
	or	edx, 128				; 00000080H
	shr	edx, 7
	push	edx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T137907[esp+60]
	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+56]
$L137866:
	test	bl, 2
	je	SHORT $L137867
	mov	edx, DWORD PTR _PolyFlagsEx$[esp+56]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, 1
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T137907[esp+60]
	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+56]
$L137867:
	test	bl, 8
	je	SHORT $L137868
	mov	edx, DWORD PTR _PolyFlagsEx$[esp+56]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T137907[esp+60]
	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+56]
$L137868:
	test	DWORD PTR _Xor$137864[esp+60], -754972601 ; d3000847H
	jne	SHORT $L137870
	test	bl, 113					; 00000071H
	je	$L137906
	mov	eax, DWORD PTR $T137907[esp+60]
	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+56]
$L137870:
	test	DWORD PTR _Xor$137864[esp+60], 268435525 ; 10000045H
	jne	SHORT $L137872
	test	bl, 113					; 00000071H
	je	$L137892
$L137872:
	test	bl, 1
	je	SHORT $L137873
	test	cl, 1
	jne	SHORT $L137873
	mov	eax, DWORD PTR [esi+19128]
	test	eax, eax
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L137874
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	jmp	SHORT $L137875
$L137874:
	mov	edx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L137875:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR $T137907[esp+60]
	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+56]
$L137873:
	test	eax, 268435525				; 10000045H
	jne	SHORT $L137876
	test	cl, 113					; 00000071H
	jne	SHORT $L137876
	xor	edx, edx
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	jmp	$L137892
$L137876:
	test	cl, 64					; 00000040H
	je	SHORT $L137878
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
$L138004:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137892
$L137878:
	test	al, 1
	je	SHORT $L137880
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
$L138006:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137892
$L137880:
	test	cl, 32					; 00000020H
	je	SHORT $L137882
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137892
$L137882:
	test	cl, 16					; 00000010H
	je	SHORT $L137884
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	SHORT $L138006
$L137884:
	test	al, 4
	je	SHORT $L137886
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	$L138004
$L137886:
	test	al, 64					; 00000040H
	je	SHORT $L137888
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137892
$L137888:
	test	eax, 268435456				; 10000000H
	je	SHORT $L137890
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137892
$L137890:
	test	cl, 1
	je	$L137892
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	5
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	6
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L137892:
	test	BYTE PTR _Xor$137864[esp+60], 1
	je	SHORT $L137893
	mov	edx, DWORD PTR $T137907[esp+60]
	and	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L137893:
	mov	eax, DWORD PTR _Xor$137864[esp+60]
	test	eax, eax
	jns	SHORT $L137895
	mov	ecx, DWORD PTR $T137907[esp+60]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	shr	ecx, 31					; 0000001fH
	push	ecx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
$L137895:
	test	BYTE PTR _Xor$137864[esp+60], 2
	je	SHORT $L137898
	test	BYTE PTR $T137907[esp+60], 2
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L137897
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	jmp	SHORT $L137898
$L137897:
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L137898:
	mov	ebp, DWORD PTR _Xor$137864[esp+60]
	test	ebp, 2048				; 00000800H
	mov	ebx, DWORD PTR $T137907[esp+60]
	je	SHORT $L137899
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	mov	edi, ebx
	and	edi, 2048				; 00000800H
	neg	edi
	sbb	edi, edi
	add	edi, 2
	push	edi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L137899:
	test	ebp, 1073741824				; 40000000H
	je	SHORT $L137900
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	mov	ecx, ebx
	shr	ecx, 30					; 0000001eH
	and	ecx, 1
	push	ecx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
$L137900:
	test	ebp, 50331648				; 03000000H
	je	SHORT $L137906
	test	ebx, 16777216				; 01000000H
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	je	SHORT $L137903
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	3
	jmp	SHORT $L138007
$L137903:
	test	ebx, 33554432				; 02000000H
	je	SHORT $L137905
	push	3
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	2
	jmp	SHORT $L138007
$L137905:
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	1
$L138007:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
$L137906:
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+56]
	mov	edx, DWORD PTR $T137907[esp+60]

; 2489 : 		SetTexture(0,Info,PolyFlags,0, PolyFlagsEx);

	mov	ebx, DWORD PTR _PolyFlags$[esp+56]
	push	0
	push	eax
	push	0
	mov	DWORD PTR [esi+19620], eax
	mov	eax, DWORD PTR _Info$[esp+68]
	push	ebx
	mov	DWORD PTR [esi+19616], edx
	push	eax
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 2490 : 		SetZBias(0);

	push	1098907648				; 41800000H
	push	0
	push	0
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [esi+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L137913
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L137993
$L137913:
	mov	edi, DWORD PTR [esi+19124]
	fst	DWORD PTR [esi+675164]
	mov	ebp, DWORD PTR [edi]
	call	__ftol
	push	eax
	push	47					; 0000002fH
	push	edi
	call	DWORD PTR [ebp+200]
	jmp	SHORT $L137912
$L137993:
	fstp	ST(0)
$L137912:

; 2491 : 
; 2492 : 
; 2493 : 
; 2494 : 		if(PolyFlags&PF_Unlit) SetDistanceFog(false);

	test	ebx, 4194304				; 00400000H
	mov	eax, DWORD PTR [esi+675196]
	je	SHORT $L123814
	test	eax, eax
	je	$L137925
	mov	eax, DWORD PTR [esi+675192]
	test	eax, eax
	je	$L137925
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675192], 0

; 2495 : 		else				   SetDistanceFog(true);

	jmp	$L137925
$L123814:
	test	eax, eax
	je	$L137925
	mov	eax, DWORD PTR [esi+675192]
	mov	edi, 1
	cmp	eax, edi
	je	$L137925
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	48					; 00000030H
	push	eax
	call	DWORD PTR [ecx+200]
	movzx	ebx, BYTE PTR [esi+675210]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	xor	ecx, ecx
	mov	ch, BYTE PTR [esi+675208]
	mov	cl, BYTE PTR [esi+675209]
	shl	ecx, 8
	or	ecx, ebx
	push	ecx
	push	34					; 00000022H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	35					; 00000023H
	push	eax
	call	DWORD PTR [edx+200]
	mov	edx, DWORD PTR [esi+675200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	36					; 00000024H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	edx, DWORD PTR [esi+675204]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	37					; 00000025H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675192], edi
$L137925:

; 2496 : 
; 2497 : 		// Kludge for 16-bit zbuffer limitations - compress weapon in 1/z space.
; 2498 : 		// "Have HUD draw the player's weapon on top (and any other overlays which should happen before screen flashes)"
; 2499 : 		FLOAT ZBiasHack = ( (GUglyHackFlags&1) && ViewportColorBits==16 )? 0.25f : 1.0f;

	mov	eax, DWORD PTR __imp_?GUglyHackFlags@@3KA
	test	BYTE PTR [eax], 1
	je	SHORT $L137845
	cmp	DWORD PTR [esi+16772], 16		; 00000010H
	mov	DWORD PTR _ZBiasHack$[esp+60], 1048576000 ; 3e800000H
	je	SHORT $L137846
$L137845:
	mov	DWORD PTR _ZBiasHack$[esp+60], 1065353216 ; 3f800000H
$L137846:

; 2500 : 
; 2501 : 		FTransTexture**	SourceVertex;
; 2502 : 		FD3DTLVertex*	Vertex = (FD3DTLVertex*) ActorVertices.Lock(NumPts);

	mov	ebx, DWORD PTR _NumPts$[esp+56]
	push	-1
	lea	ecx, DWORD PTR [esi+16700]
	push	ebx
	call	?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z ; FD3DVertexBuffer<FD3DTLVertex>::Lock

; 2503 : 
; 2504 : 		SourceVertex = Pts;
; 2505 : 
; 2506 : 		for( INT Index = 0; Index < NumPts; Index++ )

	test	ebx, ebx
	mov	ebp, DWORD PTR _Pts$[esp+56]
	mov	edi, eax
	jle	$L123823
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+56]
	and	eax, 48					; 00000030H
	mov	DWORD PTR -44+[esp+60], ebx
	mov	ebx, DWORD PTR _Frame$[esp+60]
	mov	DWORD PTR -28+[esp+60], eax

; 2581 : 	}

	npad	4

; 2503 : 
; 2504 : 		SourceVertex = Pts;
; 2505 : 
; 2506 : 		for( INT Index = 0; Index < NumPts; Index++ )

$L123821:

; 2507 : 		{	
; 2508 : 			FLOAT	RHW = ZBiasHack * (*SourceVertex)->RZ * Frame->RProj.Z;

	mov	eax, DWORD PTR [ebp]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [ebx+232]
	fmul	DWORD PTR _ZBiasHack$[esp+60]

; 2509 : 
; 2510 : 			Vertex->Position.X = (*SourceVertex)->ScreenX + Frame->XB - 0.5f;

	fild	DWORD PTR [ebx+176]
	fadd	DWORD PTR [eax+16]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [edi]

; 2511 : 			Vertex->Position.Y = (*SourceVertex)->ScreenY + Frame->YB - 0.5f;

	mov	ecx, DWORD PTR [ebp]
	fild	DWORD PTR [ebx+180]
	fadd	DWORD PTR [ecx+20]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [edi+4]

; 2512 : 			Vertex->Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43 * RHW;

	fld	ST(0)
	fmul	DWORD PTR [esi+19508]
	fadd	DWORD PTR [esi+19492]
	fstp	DWORD PTR [edi+8]

; 2513 : 			Vertex->Position.W = RHW;

	fstp	DWORD PTR [edi+12]

; 2514 : 
; 2515 : 			Vertex->U[0] = (*SourceVertex)->U * Stages[0]->UScale;

	mov	edx, DWORD PTR [ebp]
	mov	eax, DWORD PTR [esi+19712]
	fld	DWORD PTR [edx+80]
	fmul	DWORD PTR [eax+24]

; 2516 : 			Vertex->U[1] = (*SourceVertex)->V * Stages[0]->VScale;
; 2517 : 
; 2518 : 			Vertex->Specular=0;
; 2519 : 			if(PolyFlagsEx&(PFX_LightenModulate|PFX_DarkenModulate))

	mov	eax, DWORD PTR -28+[esp+60]
	test	eax, eax
	fstp	DWORD PTR [edi+24]
	mov	ecx, DWORD PTR [ebp]
	mov	edx, DWORD PTR [esi+19712]
	fld	DWORD PTR [ecx+84]
	fmul	DWORD PTR [edx+28]
	fstp	DWORD PTR [edi+28]
	mov	DWORD PTR [edi+20], 0
	je	SHORT $L123825

; 2520 : 			{
; 2521 : 				Vertex->Diffuse  = 0xffffffff;

	mov	DWORD PTR [edi+16], -1

; 2522 : 
; 2523 : 			} else

	jmp	$L137981
$L123825:

; 2524 : 			if ( PolyFlags & PF_Modulated )

	test	BYTE PTR _PolyFlags$[esp+56], 64	; 00000040H
	je	SHORT $L123827

; 2525 : 			{
; 2526 : 				Vertex->Diffuse = (0xFF<<24)|(248<<16)|(248<<8)|248;

	mov	DWORD PTR [edi+16], -460552		; fff8f8f8H

; 2527 : 			}
; 2528 : 			else if ( DoFog )

	jmp	$L137981
$L123827:
	mov	eax, DWORD PTR _DoFog$[esp+60]

; 2529 : 			{
; 2530 : 				FLOAT W = 1.f - (*SourceVertex)->Fog.W;
; 2531 : 
; 2532 : 				Vertex->Diffuse  = FColor(
; 2533 : 					appRound((*SourceVertex)->Light.Z*Stages[0]->MaxColor.B*W),	
; 2534 : 					appRound((*SourceVertex)->Light.Y*Stages[0]->MaxColor.G*W),
; 2535 : 					appRound((*SourceVertex)->Light.X*Stages[0]->MaxColor.R*W),
; 2536 : 					255 );				

	mov	ecx, DWORD PTR [esi+19712]
	movzx	edx, BYTE PTR [ecx+32]
	test	eax, eax
	mov	eax, DWORD PTR [ebp]
	je	$L123829
	fld	DWORD PTR __real@3f800000
	mov	DWORD PTR -32+[esp+60], edx
	fsub	DWORD PTR [eax+76]
	fstp	DWORD PTR _W$123830[esp+56]
	fild	DWORD PTR -32+[esp+60]
	fmul	DWORD PTR [eax+48]
	fmul	DWORD PTR _W$123830[esp+56]
	fstp	DWORD PTR $T137945[esp+60]
	fld	DWORD PTR $T137945[esp+60]
	fistp	DWORD PTR _I$137943[esp+60]
	mov	eax, DWORD PTR [esi+19712]
	movzx	ecx, BYTE PTR [eax+33]
	mov	edx, DWORD PTR [ebp]
	mov	DWORD PTR -32+[esp+60], ecx
	fild	DWORD PTR -32+[esp+60]
	fmul	DWORD PTR [edx+52]
	fmul	DWORD PTR _W$123830[esp+56]
	fstp	DWORD PTR $T137951[esp+60]
	fld	DWORD PTR $T137951[esp+60]
	fistp	DWORD PTR _I$137949[esp+60]
	mov	eax, DWORD PTR [esi+19712]
	movzx	ecx, BYTE PTR [eax+34]
	mov	edx, DWORD PTR [ebp]
	mov	DWORD PTR -32+[esp+60], ecx
	fild	DWORD PTR -32+[esp+60]
	fmul	DWORD PTR [edx+56]
	fmul	DWORD PTR _W$123830[esp+56]
	fstp	DWORD PTR $T137957[esp+56]
	fld	DWORD PTR $T137957[esp+56]
	fistp	DWORD PTR _I$137955[esp+60]
	mov	al, BYTE PTR _I$137955[esp+60]
	mov	cl, BYTE PTR _I$137949[esp+60]
	mov	dl, BYTE PTR _I$137943[esp+60]
	mov	BYTE PTR $T137847[esp+56], al
	mov	BYTE PTR $T137847[esp+57], cl
	mov	BYTE PTR $T137847[esp+58], dl
	mov	BYTE PTR $T137847[esp+59], 255		; 000000ffH
	mov	eax, DWORD PTR $T137847[esp+56]
	mov	DWORD PTR [edi+16], eax

; 2537 : 			}
; 2538 : 			else

	jmp	$L137981
$L123829:

; 2539 : 			{
; 2540 : 				Vertex->Diffuse	 = FColor( 
; 2541 : 					appRound((*SourceVertex)->Light.Z*Stages[0]->MaxColor.B), 
; 2542 : 					appRound((*SourceVertex)->Light.Y*Stages[0]->MaxColor.G), 
; 2543 : 					appRound((*SourceVertex)->Light.X*Stages[0]->MaxColor.R), 
; 2544 : 					255 );

	mov	DWORD PTR 12+[esp+56], edx
	fild	DWORD PTR 12+[esp+56]
	fmul	DWORD PTR [eax+48]
	fstp	DWORD PTR $T137966[esp+56]
	fld	DWORD PTR $T137966[esp+56]
	fistp	DWORD PTR _I$137964[esp+60]
	mov	ecx, DWORD PTR [esi+19712]
	movzx	edx, BYTE PTR [ecx+33]
	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR 12+[esp+56], edx
	fild	DWORD PTR 12+[esp+56]
	fmul	DWORD PTR [eax+52]
	fstp	DWORD PTR $T137972[esp+56]
	fld	DWORD PTR $T137972[esp+56]
	fistp	DWORD PTR _I$137970[esp+60]
	mov	ecx, DWORD PTR [esi+19712]
	movzx	edx, BYTE PTR [ecx+34]
	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR 12+[esp+56], edx
	fild	DWORD PTR 12+[esp+56]
	fmul	DWORD PTR [eax+56]
	fstp	DWORD PTR $T137978[esp+56]
	fld	DWORD PTR $T137978[esp+56]
	fistp	DWORD PTR _I$137976[esp+60]
	mov	ecx, DWORD PTR _I$137964[esp+60]
	mov	edx, DWORD PTR _I$137970[esp+60]
	mov	eax, DWORD PTR _I$137976[esp+60]
	push	255					; 000000ffH
	push	ecx
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T137848[esp+72]
	call	DWORD PTR __imp_??0FColor@@QAE@EEEE@Z
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edi+16], ecx

; 2545 : 				Vertex->Specular = 0;

	mov	DWORD PTR [edi+20], 0
$L137981:
	mov	eax, DWORD PTR -44+[esp+60]

; 2546 : 			}
; 2547 : 
; 2548 : 			Vertex++;

	add	edi, 40					; 00000028H

; 2549 : 			SourceVertex++;

	add	ebp, 4
	dec	eax
	mov	DWORD PTR -44+[esp+60], eax
	jne	$L123821

; 2503 : 
; 2504 : 		SourceVertex = Pts;
; 2505 : 
; 2506 : 		for( INT Index = 0; Index < NumPts; Index++ )

	mov	ebx, DWORD PTR _NumPts$[esp+56]
$L123823:

; 2550 : 		}
; 2551 : 
; 2552 : 		INT	First = ActorVertices.Unlock();

	lea	ebp, DWORD PTR [esi+16700]
	mov	ecx, ebp
	call	?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DTLVertex>::Unlock

; 2553 : 
; 2554 : 
; 2555 : 		ActorVertices.Set();

	mov	ecx, ebp
	mov	edi, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DTLVertex>::Set

; 2556 : 
; 2557 : 		if(PolyFlags & PF_MeshUVClamp) 

	mov	ebp, DWORD PTR _PolyFlags$[esp+56]
	and	ebp, 8192				; 00002000H
	je	SHORT $L123835

; 2558 : 		{
; 2559 : 			SetTextureClampMode(1);

	mov	eax, DWORD PTR [esi]
	mov	edx, 1
	mov	ecx, esi
	call	DWORD PTR [eax+212]
$L123835:

; 2560 : 		}
; 2561 : 		
; 2562 : 		if ( DoFog )

	mov	eax, DWORD PTR _DoFog$[esp+60]
	test	eax, eax

; 2563 : 		{
; 2564 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_SPECULAR );			

	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L123836
	mov	ecx, DWORD PTR [eax]
	push	4
	push	2
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 2565 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_ADD );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	7
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 2566 : 
; 2567 : 			Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, NumPts - 2 );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	add	ebx, -2					; fffffffeH
	push	ebx
	push	edi
	push	6
	push	eax
	call	DWORD PTR [ecx+280]

; 2568 : 
; 2569 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 2570 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	2
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 2571 : 		}
; 2572 : 		else

	jmp	SHORT $L123837
$L123836:

; 2573 : 			Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, NumPts - 2 );

	mov	edx, DWORD PTR [eax]
	add	ebx, -2					; fffffffeH
	push	ebx
	push	edi
	push	6
	push	eax
	call	DWORD PTR [edx+280]
$L123837:
	pop	edi

; 2574 : 
; 2575 : 
; 2576 : 		if(PolyFlags & PF_MeshUVClamp) 

	test	ebp, ebp
	pop	ebp
	pop	ebx
	je	SHORT $L123838

; 2577 : 			SetTextureClampMode(0);

	mov	eax, DWORD PTR [esi]
	xor	edx, edx
	mov	ecx, esi
	call	DWORD PTR [eax+212]
$L123838:

; 2578 : 
; 2579 : 		//SetBlending();
; 2580 : 		unclock(Stats.PolyTime);

	mov	ecx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [ecx], 0
	mov	DWORD PTR _L$137986[esp+44], 0
	je	SHORT $L137988
	rdtsc
	mov	DWORD PTR _L$137986[esp+44], eax
	mov	DWORD PTR _H$137987[esp+44], edx
$L137988:
	mov	edx, DWORD PTR _L$137986[esp+44]
	mov	eax, DWORD PTR [esi+19628]
	add	edx, -34				; ffffffdeH
	add	eax, edx
	mov	DWORD PTR [esi+19628], eax
$L123810:
	pop	esi

; 2581 : 	}

	add	esp, 44					; 0000002cH
	ret	24					; 00000018H
?DrawGouraudPolygon@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@PAPAUFTransTexture@@HKPAVFSpanBuffer@@K@Z ENDP ; UD3DRenderDevice::DrawGouraudPolygon
_TEXT	ENDS
PUBLIC	?RotateAboutOrigin2D@UD3DRenderDevice@@QAEXMMAAM0M@Z ; UD3DRenderDevice::RotateAboutOrigin2D
PUBLIC	__real@47800000
PUBLIC	__real@bfc45f306dc9c883
PUBLIC	__real@3fc45f306dc9c883
EXTRN	__imp_?GMath@@3VFGlobalMath@@A:BYTE
;	COMDAT __real@47800000
; File ..\..\Core\Inc\UnMath.h
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@bfc45f306dc9c883
CONST	SEGMENT
__real@bfc45f306dc9c883 DQ 0bfc45f306dc9c883r	; -0.159155
CONST	ENDS
;	COMDAT __real@3fc45f306dc9c883
CONST	SEGMENT
__real@3fc45f306dc9c883 DQ 03fc45f306dc9c883r	; 0.159155
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?RotateAboutOrigin2D@UD3DRenderDevice@@QAEXMMAAM0M@Z
_TEXT	SEGMENT
_originX$ = 8
_originY$ = 12
_x$ = 16
_y$ = 20
_theta$ = 24
?RotateAboutOrigin2D@UD3DRenderDevice@@QAEXMMAAM0M@Z PROC NEAR ; UD3DRenderDevice::RotateAboutOrigin2D, COMDAT
; _this$ = ecx

; 2583 : 	{

	push	ebx
	push	ebp
	push	esi

; 2584 : 		float xTick, yTick;
; 2585 : 		x-=originX; y-=originY;

	mov	esi, DWORD PTR _x$[esp+8]
	fld	DWORD PTR [esi]
	push	edi
	fsub	DWORD PTR _originX$[esp+12]
	mov	edi, DWORD PTR _y$[esp+12]
	fstp	DWORD PTR [esi]
	fld	DWORD PTR [edi]
	fsub	DWORD PTR _originY$[esp+12]
	fst	DWORD PTR [edi]

; 2586 : 		xTick = ((GMath.CosFloat(theta)*x) - (GMath.SinFloat(theta)*y)); 
; 2587 : 		yTick = ((GMath.SinFloat(theta)*x) + (GMath.CosFloat(theta)*y));

	fld	DWORD PTR _theta$[esp+12]
	fmul	DWORD PTR __real@47800000
	fld	QWORD PTR __real@bfc45f306dc9c883
	fmul	ST(0), ST(1)
	call	__ftol
	fmul	QWORD PTR __real@3fc45f306dc9c883
	mov	ebp, DWORD PTR __imp_?GMath@@3VFGlobalMath@@A
	mov	ecx, 16384				; 00004000H
	sub	ecx, eax
	sar	ecx, 2
	and	ecx, 16383				; 00003fffH
	lea	ebx, DWORD PTR [ebp+ecx*4+140]
	call	__ftol
	fld	DWORD PTR [ebx]
	sar	eax, 2
	and	eax, 16383				; 00003fffH
	lea	eax, DWORD PTR [ebp+eax*4+140]
	fmul	ST(0), ST(1)
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [esi]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [ebx]
	fmul	DWORD PTR [esi]
	fld	DWORD PTR [eax]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)

; 2588 : 		x=xTick+originX; y=yTick+originY;

	fadd	DWORD PTR _originX$[esp+12]
	fstp	DWORD PTR [esi]
	fadd	DWORD PTR _originY$[esp+12]
	fstp	DWORD PTR [edi]
	pop	edi
	pop	esi
	pop	ebp
	fstp	ST(0)
	pop	ebx

; 2589 : 	}

	ret	20					; 00000014H
?RotateAboutOrigin2D@UD3DRenderDevice@@QAEXMMAAM0M@Z ENDP ; UD3DRenderDevice::RotateAboutOrigin2D
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?SetTextureClampMode@UD3DRenderDevice@@UAIXH@Z
_TEXT	SEGMENT
?SetTextureClampMode@UD3DRenderDevice@@UAIXH@Z PROC NEAR ; UD3DRenderDevice::SetTextureClampMode, COMDAT
; _this$ = ecx
; _Mode$ = edx

; 2593 : 	{

	push	esi
	mov	esi, ecx

; 2594 : 		if(TextureClampMode!=Mode)

	cmp	DWORD PTR [esi+675180], edx
	je	SHORT $L123845

; 2595 : 		{
; 2596 : 			TextureClampMode=Mode;
; 2597 : 			D3DTEXTUREADDRESS TextureMode=(Mode==1)?D3DTADDRESS_CLAMP:D3DTADDRESS_WRAP;

	xor	eax, eax
	cmp	edx, 1
	sete	al
	push	edi
	mov	DWORD PTR [esi+675180], edx
	lea	eax, DWORD PTR [eax+eax+1]
	mov	edi, eax

; 2598 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ADDRESSU, TextureMode );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	13					; 0000000dH
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 2599 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ADDRESSV, TextureMode );

	mov	esi, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [esi]
	push	edi
	push	14					; 0000000eH
	push	0
	push	esi
	call	DWORD PTR [edx+252]
	pop	edi
$L123845:
	pop	esi

; 2600 : 		}
; 2601 : 	}

	ret	0
?SetTextureClampMode@UD3DRenderDevice@@UAIXH@Z ENDP	; UD3DRenderDevice::SetTextureClampMode
_TEXT	ENDS
PUBLIC	__real@44fa0000
PUBLIC	__real@bf800000
;	COMDAT __real@44fa0000
; File ..\..\Core\Inc\UnVcWin32.h
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?DrawTile@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@MMMMMMMMPAVFSpanBuffer@@MVFPlane@@3KKMMMM@Z
_TEXT	SEGMENT
$T138192 = 8
$T138210 = -40
$T138228 = -40
$T138246 = -40
_I$138263 = -40
_I$138273 = -44
_I$138283 = -44
_I$138293 = -44
_VertexData$138311 = -44
_L$138445 = 12
_H$138446 = 16
_Frame$ = -40
_Info$ = 8
_X$ = 12
_Y$ = 16
_XL$ = 20
_YL$ = 24
_U$ = 28
_V$ = 32
_UL$ = 36
_VL$ = 40
_Z$ = 48
_InColor$ = 52
_PolyFlags$ = 84
_PolyFlagsEx$ = 88
_alpha$ = 92
_rot$ = 96
_rotationOffsetX$ = 100
_rotationOffsetY$ = 104
$T138060 = 8
$T138061 = 8
$T138064 = -28
_L$138069 = -44
_H$138070 = -32
_Color$ = 8
_RZ$ = 48
_SZ$ = 84
_Xor$138097 = -44
_G$123874 = -36
_B$123875 = -32
_First$ = 12
$T138146 = -48
$T138166 = -16
?DrawTile@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@MMMMMMMMPAVFSpanBuffer@@MVFPlane@@3KKMMMM@Z PROC NEAR ; UD3DRenderDevice::DrawTile, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 2619 : 	{

	sub	esp, 48					; 00000030H

; 2620 : 		// Exclude tiles from rendering?
; 2621 : 		if(!RenderTiles) 

	mov	eax, DWORD PTR ?RenderTiles@@3HA	; RenderTiles
	push	ebp
	xor	ebp, ebp
	cmp	eax, ebp
	push	esi
	mov	DWORD PTR _Frame$[esp+56], edx
	mov	esi, ecx
	je	$L123848

; 2622 : 			return;
; 2623 : 
; 2624 : 		clock(Stats.TileTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ebp
	mov	DWORD PTR _L$138069[esp+56], ebp
	je	SHORT $L138071
	rdtsc
	mov	DWORD PTR _L$138069[esp+56], eax
	mov	DWORD PTR _H$138070[esp+56], edx
$L138071:
	mov	ecx, DWORD PTR _L$138069[esp+56]
	mov	edx, DWORD PTR [esi+19632]

; 2625 : 		Stats.Tiles++;			// Keep track of tiles rendered.
; 2626 : 		SetDistanceFog(false);

	mov	eax, DWORD PTR [esi+675196]
	sub	edx, ecx
	mov	ecx, DWORD PTR [esi+19676]
	inc	ecx
	cmp	eax, ebp
	mov	DWORD PTR [esi+19632], edx
	mov	DWORD PTR [esi+19676], ecx
	je	SHORT $L138077
	cmp	DWORD PTR [esi+675192], ebp
	je	SHORT $L138077
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675192], ebp
$L138077:

; 2627 : 
; 2628 : 
; 2629 : 		//PolyFlags  =PF_TwoSided | PF_NoOcclude ;
; 2630 : 		//PolyFlagsEx=PFX_Translucent2;
; 2631 : 
; 2632 : 		//alpha=Clamp<float>(appSin(appSeconds()),0,1);
; 2633 : 
; 2634 : 
; 2635 : 		PolyFlags&=~(PF_Memorized/*|PF_Selected*/);		// Remove multitexture and editor flags.
; 2636 : 		if(!GIsEditor) PolyFlags&=~PF_Selected;	// NJS: test this and take teh PF_Selected out the above.

	mov	eax, DWORD PTR __imp_?GIsEditor@@3HA
	mov	ecx, DWORD PTR _PolyFlags$[esp+52]
	mov	edx, DWORD PTR [eax]
	and	ecx, -16777217				; feffffffH
	cmp	edx, ebp
	jne	SHORT $L123850
	and	ecx, -33554433				; fdffffffH
$L123850:
	push	ebx
	push	edi

; 2637 : 
; 2638 : 
; 2639 : 		if( Info.Palette && Info.Palette[128].A!=255 && !(PolyFlags&PF_Translucent) )

	mov	edi, DWORD PTR _Info$[esp+60]
	mov	eax, DWORD PTR [edi+72]
	cmp	eax, ebp
	je	SHORT $L123851
	cmp	BYTE PTR [eax+515], 255			; 000000ffH
	je	SHORT $L123851
	test	cl, 4
	jne	SHORT $L123851

; 2640 : 			PolyFlags |= PF_Highlighted;

	or	ecx, 268435456				; 10000000H
$L123851:

; 2641 : 
; 2642 : 		if(alpha!=1.f) 

	fld	DWORD PTR _alpha$[esp+60]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $L138465

; 2643 : 		{
; 2644 : 			if(!(PolyFlags&PF_Translucent)
; 2645 : 			 &&!(PolyFlagsEx&PFX_Translucent2))

	test	cl, 4
	jne	SHORT $L138465
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+60]
	test	al, 64					; 00000040H
	jne	SHORT $L123853

; 2646 : 				PolyFlags|=PF_Translucent;

	or	ecx, 4
	jmp	SHORT $L123853
$L138465:
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+60]
$L123853:

; 2647 : 		}
; 2648 : 
; 2649 : 		PolyFlags|=PF_TwoSided;
; 2650 : 		PolyFlagsEx|=PFX_Clip|Info.Texture->PolyFlagsEx;

	mov	ebx, DWORD PTR [edi]
	mov	ebx, DWORD PTR [ebx+196]
	or	ebx, 2
	or	eax, ebx
	or	ecx, 256				; 00000100H

; 2651 : 	
; 2652 : 		if(PolyFlagsEx&PFX_AlphaMap) 

	test	al, 1
	mov	DWORD PTR _PolyFlags$[esp+60], ecx
	mov	DWORD PTR _PolyFlagsEx$[esp+60], eax
	je	SHORT $L123854

; 2653 : 		{
; 2654 : 			PolyFlags&=~PF_Translucent;
; 2655 : 			PolyFlags&=~PF_Modulated;

	and	ecx, -69				; ffffffbbH

; 2656 : 			if(!GIsEditor) PolyFlags&=~PF_Highlighted;

	cmp	edx, ebp
	mov	DWORD PTR _PolyFlags$[esp+60], ecx
	jne	SHORT $L123855
	and	ecx, -268435457				; efffffffH
	mov	DWORD PTR _PolyFlags$[esp+60], ecx
$L123855:

; 2657 : 			PolyFlagsEx&=~(PFX_Translucent2|PFX_LightenModulate|PFX_DarkenModulate);

	and	eax, -113				; ffffff8fH
	mov	DWORD PTR _PolyFlagsEx$[esp+60], eax
$L123854:

; 2658 : 		}
; 2659 : 
; 2660 : 		SetBlending(PolyFlags,PolyFlagsEx);

	mov	edx, ecx
	and	edx, 1073741892				; 40000044H
	cmp	edx, 1073741824				; 40000000H
	mov	DWORD PTR $T138146[esp+64], ecx
	jne	SHORT $L138092
	cmp	DWORD PTR [esi+19148], ebp
	jne	SHORT $L138091
$L138092:
	and	ecx, -1073741825			; bfffffffH
	mov	DWORD PTR $T138146[esp+64], ecx
$L138091:
	test	cl, 68					; 00000044H
	jne	SHORT $L138093
	test	al, 113					; 00000071H
	jne	SHORT $L138093
	or	ecx, -2147483648			; 80000000H
	jmp	SHORT $L138477
$L138093:
	test	cl, 4
	je	SHORT $L138095
	and	ecx, -3					; fffffffdH
$L138477:
	mov	DWORD PTR $T138146[esp+64], ecx
$L138095:
	mov	edx, DWORD PTR [esi+19616]
	mov	ebx, DWORD PTR [esi+19620]
	xor	edx, ecx
	xor	ebx, eax
	test	dh, 1
	mov	DWORD PTR _Xor$138097[esp+64], edx
	je	SHORT $L138100
	mov	edx, DWORD PTR $T138146[esp+64]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	not	edx
	and	edx, 256				; 00000100H
	or	edx, 128				; 00000080H
	shr	edx, 7
	push	edx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+60]
	mov	ecx, DWORD PTR $T138146[esp+64]
$L138100:
	test	bl, 2
	je	SHORT $L138102
	mov	edx, DWORD PTR _PolyFlagsEx$[esp+60]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, 1
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+60]
	mov	ecx, DWORD PTR $T138146[esp+64]
$L138102:
	test	bl, 8
	je	SHORT $L138105
	mov	edx, DWORD PTR _PolyFlagsEx$[esp+60]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+60]
	mov	ecx, DWORD PTR $T138146[esp+64]
$L138105:
	test	DWORD PTR _Xor$138097[esp+64], -754972601 ; d3000847H
	jne	SHORT $L138109
	test	bl, 113					; 00000071H
	je	$L138145
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+60]
	mov	ecx, DWORD PTR $T138146[esp+64]
	xor	ebp, ebp
$L138109:
	test	DWORD PTR _Xor$138097[esp+64], 268435525 ; 10000045H
	jne	SHORT $L138111
	test	bl, 113					; 00000071H
	je	$L138131
$L138111:
	test	bl, 1
	je	SHORT $L138112
	test	al, 1
	jne	SHORT $L138112
	cmp	DWORD PTR [esi+19128], ebp
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L138113
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
	jmp	SHORT $L138114
$L138113:
	mov	edx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
$L138114:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+60]
	mov	ecx, DWORD PTR $T138146[esp+64]
$L138112:
	test	ecx, 268435525				; 10000045H
	jne	SHORT $L138115
	test	al, 113					; 00000071H
	jne	SHORT $L138115
	cmp	DWORD PTR [esi+675176], ebp
	jne	SHORT $L138106
	cmp	DWORD PTR ?CacheBlending@@3HA, ebp	; CacheBlending
	jne	$L138131
$L138106:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675176], ebp
	jmp	$L138131
$L138115:
	test	al, 64					; 00000040H
	je	SHORT $L138117
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
$L138478:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L138131
$L138117:
	test	cl, 1
	je	SHORT $L138119
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
$L138480:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L138131
$L138119:
	test	al, 32					; 00000020H
	je	SHORT $L138121
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L138131
$L138121:
	test	al, 16					; 00000010H
	je	SHORT $L138123
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	SHORT $L138480
$L138123:
	test	cl, 4
	je	SHORT $L138125
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	$L138478
$L138125:
	test	cl, 64					; 00000040H
	je	SHORT $L138127
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L138131
$L138127:
	test	ecx, 268435456				; 10000000H
	je	SHORT $L138129
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L138131
$L138129:
	test	al, 1
	je	$L138131
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	4
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	5
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	6
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	18					; 00000012H
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
$L138131:
	test	BYTE PTR _Xor$138097[esp+64], 1
	je	SHORT $L138132
	mov	edx, DWORD PTR $T138146[esp+64]
	and	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L138132:
	mov	eax, DWORD PTR _Xor$138097[esp+64]
	test	eax, eax
	jns	SHORT $L138134
	mov	edx, DWORD PTR $T138146[esp+64]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 31					; 0000001fH
	push	edx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [ecx+200]
$L138134:
	test	BYTE PTR _Xor$138097[esp+64], 2
	je	SHORT $L138137
	test	BYTE PTR $T138146[esp+64], 2
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L138136
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	jmp	SHORT $L138137
$L138136:
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
$L138137:
	mov	ebp, DWORD PTR _Xor$138097[esp+64]
	test	ebp, 2048				; 00000800H
	mov	ebx, DWORD PTR $T138146[esp+64]
	je	SHORT $L138138
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	mov	edi, ebx
	and	edi, 2048				; 00000800H
	neg	edi
	sbb	edi, edi
	add	edi, 2
	push	edi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	edi, DWORD PTR _Info$[esp+60]
$L138138:
	test	ebp, 1073741824				; 40000000H
	je	SHORT $L138139
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	mov	edx, ebx
	shr	edx, 30					; 0000001eH
	and	edx, 1
	push	edx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [ecx+200]
$L138139:
	test	ebp, 50331648				; 03000000H
	je	SHORT $L138145
	test	ebx, 16777216				; 01000000H
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	je	SHORT $L138142
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	push	3
	jmp	SHORT $L138481
$L138142:
	test	ebx, 33554432				; 02000000H
	je	SHORT $L138144
	push	3
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	push	2
	jmp	SHORT $L138481
$L138144:
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	push	1
$L138481:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L138145:
	mov	ebx, DWORD PTR _PolyFlagsEx$[esp+60]

; 2661 : 		SetTexture(0,Info,PolyFlags,0,PolyFlagsEx);	

	mov	ecx, DWORD PTR _PolyFlags$[esp+60]
	mov	eax, DWORD PTR $T138146[esp+64]
	push	0
	push	ebx
	push	0
	push	ecx
	push	edi
	xor	edx, edx
	mov	ecx, esi
	mov	DWORD PTR [esi+19616], eax
	mov	DWORD PTR [esi+19620], ebx
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 2662 : 		
; 2663 : 		// Offset points to guarantee that we will sample directly from the center of the texture pixels
; 2664 : 		X += Frame->XB - 0.5f;

	mov	eax, DWORD PTR _Frame$[esp+64]
	fild	DWORD PTR [eax+176]

; 2665 : 		Y += Frame->YB - 0.5f;
; 2666 : 
; 2667 : 		// NJS: Hack to compensate for the fact that software was depending on wrap around integer arithmetic:
; 2668 : 		if(GIsEditor) 

	mov	edx, DWORD PTR __imp_?GIsEditor@@3HA
	fsub	DWORD PTR __real@3f000000
	fadd	DWORD PTR _X$[esp+60]
	fstp	DWORD PTR _X$[esp+60]
	fild	DWORD PTR [eax+180]
	mov	eax, DWORD PTR [edx]
	test	eax, eax
	fsub	DWORD PTR __real@3f000000
	fadd	DWORD PTR _Y$[esp+60]
	fstp	DWORD PTR _Y$[esp+60]
	je	SHORT $L123858

; 2669 : 		{
; 2670 : 			if(Z==0.f)	Z+=2000;

	fld	DWORD PTR _Z$[esp+60]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L123857
	fld	DWORD PTR _Z$[esp+60]
	fadd	DWORD PTR __real@44fa0000
	fstp	DWORD PTR _Z$[esp+60]
$L123857:

; 2671 : 			if(Z<0)		Z*=-1;

	fld	DWORD PTR _Z$[esp+60]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L123858
	fld	DWORD PTR _Z$[esp+60]
	fmul	DWORD PTR __real@bf800000
	fstp	DWORD PTR _Z$[esp+60]
$L123858:

; 2672 : 		}
; 2673 : 
; 2674 : 		FColor			Color = (PolyFlagsEx & (PFX_LightenModulate|PFX_DarkenModulate)) ? FColor(255,255,255,255) : FColor(Stages[0]->MaxColor.Plane() * InColor);

	test	bl, 48					; 00000030H
	je	SHORT $L138065
	mov	BYTE PTR $T138060[esp+60], 255		; 000000ffH
	mov	BYTE PTR $T138060[esp+61], 255		; 000000ffH
	mov	BYTE PTR $T138060[esp+62], 255		; 000000ffH
	jmp	$L138295
$L138065:
	mov	eax, DWORD PTR [esi+19712]
	movzx	ecx, BYTE PTR [eax+32]
	movzx	edx, BYTE PTR [eax+33]
	add	eax, 32					; 00000020H
	movzx	eax, BYTE PTR [eax+2]
	mov	DWORD PTR 8+[esp+60], ecx
	fild	DWORD PTR 8+[esp+60]
	mov	DWORD PTR 8+[esp+60], edx
	fmul	DWORD PTR __real@3b808081
	fild	DWORD PTR 8+[esp+60]
	mov	DWORD PTR 8+[esp+60], eax
	fmul	DWORD PTR __real@3b808081
	fild	DWORD PTR 8+[esp+60]
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR $T138166[esp+72]
	fxch	ST(1)
	fmul	DWORD PTR _InColor$[esp+60]
	fstp	DWORD PTR $T138064[esp+64]
	fmul	DWORD PTR _InColor$[esp+64]
	fstp	DWORD PTR $T138064[esp+68]
	fld	DWORD PTR $T138166[esp+72]
	fmul	DWORD PTR _InColor$[esp+68]
	fstp	DWORD PTR $T138064[esp+72]
	fld	DWORD PTR $T138064[esp+64]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T138192[esp+60]
	fld	DWORD PTR $T138192[esp+60]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$138263[esp+64]
	mov	eax, DWORD PTR _I$138263[esp+64]
	test	eax, eax
	jge	SHORT $L138267
	mov	BYTE PTR $T138061[esp+60], 0
	jmp	SHORT $L138266
$L138267:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T138061[esp+60], al
	jl	SHORT $L138266
	mov	BYTE PTR $T138061[esp+60], 255		; 000000ffH
$L138266:
	fld	DWORD PTR $T138064[esp+68]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T138210[esp+64]
	fld	DWORD PTR $T138210[esp+64]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$138273[esp+64]
	mov	eax, DWORD PTR _I$138273[esp+64]
	test	eax, eax
	jge	SHORT $L138277
	mov	BYTE PTR $T138061[esp+61], 0
	jmp	SHORT $L138276
$L138277:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T138061[esp+61], al
	jl	SHORT $L138276
	mov	BYTE PTR $T138061[esp+61], 255		; 000000ffH
$L138276:
	fld	DWORD PTR $T138064[esp+72]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T138228[esp+64]
	fld	DWORD PTR $T138228[esp+64]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$138283[esp+64]
	mov	eax, DWORD PTR _I$138283[esp+64]
	test	eax, eax
	jge	SHORT $L138287
	mov	BYTE PTR $T138061[esp+62], 0
	jmp	SHORT $L138286
$L138287:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T138061[esp+62], al
	jl	SHORT $L138286
	mov	BYTE PTR $T138061[esp+62], 255		; 000000ffH
$L138286:
	mov	DWORD PTR $T138246[esp+64], 0
	fld	DWORD PTR $T138246[esp+64]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$138293[esp+64]
	mov	eax, DWORD PTR _I$138293[esp+64]
	test	eax, eax
	jge	SHORT $L138297
	mov	BYTE PTR $T138061[esp+63], 0
	jmp	SHORT $L138296
$L138297:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T138061[esp+63], al
	jl	SHORT $L138296
$L138295:
	mov	BYTE PTR $T138061[esp+63], 255		; 000000ffH
$L138296:
	lea	eax, DWORD PTR $T138061[esp+60]
	mov	ebp, DWORD PTR [eax]

; 2675 : 		if(PolyFlags&PF_Modulated) Color = (0xFF<<24)|(248<<16)|(248<<8)|248;

	test	BYTE PTR _PolyFlags$[esp+60], 64	; 00000040H
	mov	DWORD PTR _Color$[esp+60], ebp
	je	SHORT $L138304
	mov	ebp, -460552				; fff8f8f8H
	mov	DWORD PTR _Color$[esp+60], ebp
$L138304:

; 2676 : 
; 2677 : 		FLOAT			RZ = 1.f/Z,

	fld	DWORD PTR __real@3f800000

; 2678 : 						SZ = ProjectionMatrix._33 + ProjectionMatrix._43 * RZ;
; 2679 : 		FD3DTLVertex*	Vertices = (FD3DTLVertex*) ActorVertices.Lock(4);

	mov	eax, DWORD PTR [esi+16704]
	test	eax, eax
	fdiv	DWORD PTR _Z$[esp+60]
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	fst	DWORD PTR _RZ$[esp+60]
	fmul	DWORD PTR [esi+19508]
	fadd	DWORD PTR [esi+19492]
	fstp	DWORD PTR _SZ$[esp+60]
	jne	SHORT $L138308
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138308:
	mov	eax, DWORD PTR [esi+16708]
	test	eax, eax
	jne	SHORT $L138309
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138309:
	mov	eax, DWORD PTR [esi+16708]
	mov	ebx, 4
	cmp	eax, ebx
	jg	SHORT $L138312
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138312:
	mov	ecx, DWORD PTR [esi+16716]
	mov	eax, DWORD PTR [esi+16708]
	lea	edx, DWORD PTR [ecx+4]
	cmp	edx, eax
	mov	eax, DWORD PTR [esi+16704]
	jge	SHORT $L138326
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$138311[esp+68]
	push	edi
	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	160					; 000000a0H
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L138321
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138321:
	mov	eax, DWORD PTR [esi+16716]
	mov	DWORD PTR [esi+16712], eax
	add	eax, 4
	mov	DWORD PTR [esi+16716], eax
	jmp	SHORT $L138325
$L138326:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$138311[esp+68]
	push	edx
	push	160					; 000000a0H
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	SHORT $L138327
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138327:
	mov	DWORD PTR [esi+16712], 0
	mov	DWORD PTR [esi+16716], ebx
$L138325:

; 2680 : 
; 2681 : 		DWORD dwDiffuse;
; 2682 : 		if(alpha!=1.f/*&&(!(PolyFlagsEx&PFX_AlphaMap))*/)

	fld	DWORD PTR _alpha$[esp+60]
	mov	edi, DWORD PTR _VertexData$138311[esp+64]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L123872

; 2683 : 		{
; 2684 : 			DWORD R=Stages[0]->MaxColor.R*alpha*InColor.X,

	mov	ebx, DWORD PTR [esi+19712]
	movzx	edx, BYTE PTR [ebx+32]
	mov	DWORD PTR 8+[esp+60], edx
	fild	DWORD PTR 8+[esp+60]
	fmul	DWORD PTR _InColor$[esp+60]
	fmul	DWORD PTR _alpha$[esp+60]
	call	__ftol
	mov	ebp, eax

; 2685 : 				  G=Stages[0]->MaxColor.G*alpha*InColor.Y,

	movzx	eax, BYTE PTR [ebx+33]
	mov	DWORD PTR -48+[esp+64], eax
	fild	DWORD PTR -48+[esp+64]
	fmul	DWORD PTR _InColor$[esp+64]
	fmul	DWORD PTR _alpha$[esp+60]
	call	__ftol

; 2686 : 				  B=Stages[0]->MaxColor.B*alpha*InColor.Z,

	movzx	ecx, BYTE PTR [ebx+34]
	mov	DWORD PTR -40+[esp+64], ecx
	mov	DWORD PTR _G$123874[esp+64], eax
	fild	DWORD PTR -40+[esp+64]
	fmul	DWORD PTR _InColor$[esp+68]
	fmul	DWORD PTR _alpha$[esp+60]
	call	__ftol

; 2687 : 				  A=Stages[0]->MaxColor.A*alpha; // *InColor.X

	movzx	edx, BYTE PTR [ebx+35]
	mov	DWORD PTR 52+[esp+60], edx
	mov	DWORD PTR _B$123875[esp+64], eax
	fild	DWORD PTR 52+[esp+60]
	fmul	DWORD PTR _alpha$[esp+60]
	call	__ftol

; 2688 : 			
; 2689 : 			if(R>Stages[0]->MaxColor.R) R=Stages[0]->MaxColor.R;

	mov	ecx, DWORD PTR 8+[esp+60]
	cmp	ebp, ecx
	jbe	SHORT $L123877
	mov	ebp, ecx
$L123877:

; 2690 : 			if(G>Stages[0]->MaxColor.G) G=Stages[0]->MaxColor.G;

	mov	edx, DWORD PTR _G$123874[esp+64]
	mov	ecx, DWORD PTR -48+[esp+64]
	cmp	edx, ecx
	jbe	SHORT $L123878
	mov	edx, ecx
$L123878:

; 2691 : 			if(B>Stages[0]->MaxColor.B) B=Stages[0]->MaxColor.B;

	mov	ecx, DWORD PTR _B$123875[esp+64]
	mov	ebx, DWORD PTR -40+[esp+64]
	cmp	ecx, ebx
	jbe	SHORT $L123879
	mov	ecx, ebx
$L123879:

; 2692 : 			if(A>Stages[0]->MaxColor.A) A=Stages[0]->MaxColor.A;

	mov	ebx, DWORD PTR 52+[esp+60]
	cmp	eax, ebx
	jbe	SHORT $L123880
	mov	eax, ebx
$L123880:

; 2693 : 
; 2694 : 			dwDiffuse=D3DCOLOR_RGBA(R,G,B,A);

	and	ebp, 255				; 000000ffH
	shl	eax, 8
	or	ebp, eax
	shl	ebp, 8
	and	edx, 255				; 000000ffH
	or	ebp, edx
	shl	ebp, 8
	and	ecx, 255				; 000000ffH
	or	ebp, ecx

; 2695 : 		} else

	jmp	SHORT $L138482
$L123872:

; 2696 : 		{
; 2697 : 			dwDiffuse=Color.TrueColor()|0xFF000000;

	xor	eax, eax
	mov	al, BYTE PTR _Color$[esp+62]
	mov	ecx, ebp
	shl	ecx, 16					; 00000010H
	and	ebp, 65280				; 0000ff00H
	add	eax, ecx
	add	eax, ebp
	or	eax, -16777216				; ff000000H
	mov	ebp, eax
$L138482:

; 2698 : 		}
; 2699 : 
; 2700 : 		//dwDiffuse=0xFFFFFFFF;
; 2701 : 		Vertices[0].Diffuse    = dwDiffuse;

	mov	edx, DWORD PTR _VertexData$138311[esp+64]

; 2702 : 		Vertices[0].Position.Z = SZ;

	mov	eax, DWORD PTR _SZ$[esp+60]
	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+60]
	mov	DWORD PTR [edx+16], ebp

; 2703 : 		Vertices[0].Position.W = RZ;

	mov	edx, DWORD PTR _RZ$[esp+60]
	mov	DWORD PTR [edi+8], eax
	mov	DWORD PTR [edi+12], edx

; 2704 : 		Vertices[1].Diffuse	   = dwDiffuse;

	mov	DWORD PTR [edi+56], ebp

; 2705 : 		Vertices[1].Position.Z = SZ;

	mov	DWORD PTR [edi+48], eax

; 2706 : 		Vertices[1].Position.W = RZ;

	mov	DWORD PTR [edi+52], edx

; 2707 : 		Vertices[2].Diffuse	   = dwDiffuse;

	mov	DWORD PTR [edi+96], ebp

; 2708 : 		Vertices[2].Position.Z = SZ;

	mov	DWORD PTR [edi+88], eax

; 2709 : 		Vertices[2].Position.W = RZ;

	mov	DWORD PTR [edi+92], edx

; 2710 : 		Vertices[3].Diffuse	   = dwDiffuse;

	mov	DWORD PTR [edi+136], ebp

; 2711 : 		Vertices[3].Position.Z = SZ;

	mov	DWORD PTR [edi+128], eax

; 2712 : 		Vertices[3].Position.W = RZ;
; 2713 : 
; 2714 : 		bool MirrorHoriz = ( PolyFlagsEx & PFX_MirrorHorizontal ) ? true : false,

	mov	eax, ecx
	shr	eax, 7

; 2715 : 			 MirrorVert  = ( PolyFlagsEx & PFX_MirrorVertical )   ? true : false;

	shr	ecx, 8
	and	al, 1
	and	cl, 1

; 2716 : 
; 2717 : 		if (MirrorHoriz && !MirrorVert)

	test	al, al
	mov	DWORD PTR [edi+132], edx
	je	SHORT $L123885
	test	cl, cl

; 2718 : 		{
; 2719 : 			Vertices[0].Position.X=X;    Vertices[0].Position.Y=Y;    Vertices[0].U[0]=U+UL; Vertices[0].U[1]=V;

	fld	DWORD PTR _U$[esp+60]
	fadd	DWORD PTR _UL$[esp+60]
	mov	eax, DWORD PTR _X$[esp+60]
	fst	DWORD PTR [edi+24]
	jne	$L138461

; 2720 : 			Vertices[1].Position.X=X;    Vertices[1].Position.Y=Y+YL; Vertices[1].U[0]=U+UL; Vertices[1].U[1]=V+VL;

	fld	DWORD PTR _Y$[esp+60]
	mov	edx, DWORD PTR _V$[esp+60]
	fadd	DWORD PTR _YL$[esp+60]
	mov	ecx, DWORD PTR _Y$[esp+60]
	mov	DWORD PTR [edi+28], edx
	mov	DWORD PTR [edi+4], ecx

; 2721 : 			Vertices[2].Position.X=X+XL; Vertices[2].Position.Y=Y+YL; Vertices[2].U[0]=U;    Vertices[2].U[1]=V+VL;

	mov	ecx, DWORD PTR _U$[esp+60]
	fst	DWORD PTR [edi+44]
	fxch	ST(1)
	mov	DWORD PTR [edi], eax
	fstp	DWORD PTR [edi+64]
	mov	DWORD PTR [edi+40], eax
	fld	DWORD PTR _V$[esp+60]
	mov	DWORD PTR [edi+104], ecx
	fadd	DWORD PTR _VL$[esp+60]
	fst	DWORD PTR 48+[esp+60]
	mov	edx, DWORD PTR 48+[esp+60]
	fstp	DWORD PTR [edi+68]
	fld	DWORD PTR _X$[esp+60]
	mov	DWORD PTR [edi+108], edx
	fadd	DWORD PTR _XL$[esp+60]

; 2722 : 			Vertices[3].Position.X=X+XL; Vertices[3].Position.Y=Y;    Vertices[3].U[0]=U; 	 Vertices[3].U[1]=V;

	mov	edx, ecx
	fst	DWORD PTR 88+[esp+60]
	fstp	DWORD PTR [edi+80]
	fstp	DWORD PTR [edi+84]

; 2723 : 
; 2724 : 		} else if (MirrorVert && !MirrorHoriz) 

	jmp	$L138483
$L123885:
	test	cl, cl
	je	$L123889

; 2725 : 		{
; 2726 : 			Vertices[0].Position.X=X;    Vertices[0].Position.Y=Y;    Vertices[0].U[0]=U;		Vertices[0].U[1]=V+VL;

	fld	DWORD PTR _V$[esp+60]
	mov	eax, DWORD PTR _U$[esp+60]
	fadd	DWORD PTR _VL$[esp+60]
	mov	edx, DWORD PTR _Y$[esp+60]
	mov	ecx, DWORD PTR _X$[esp+60]
	mov	DWORD PTR [edi+4], edx
	fst	DWORD PTR [edi+28]

; 2727 : 			Vertices[1].Position.X=X;    Vertices[1].Position.Y=Y+YL; Vertices[1].U[0]=U;	    Vertices[1].U[1]=V;

	mov	edx, eax
	fld	DWORD PTR _Y$[esp+60]
	mov	DWORD PTR [edi+24], eax
	fadd	DWORD PTR _YL$[esp+60]
	mov	eax, DWORD PTR _V$[esp+60]
	mov	DWORD PTR [edi], ecx
	mov	DWORD PTR [edi+40], ecx
	fst	DWORD PTR [edi+44]

; 2728 : 			Vertices[2].Position.X=X+XL; Vertices[2].Position.Y=Y+YL; Vertices[2].U[0]=U+UL;    Vertices[2].U[1]=V;

	mov	ecx, eax
	fld	DWORD PTR _X$[esp+60]
	mov	DWORD PTR [edi+64], edx
	fadd	DWORD PTR _XL$[esp+60]

; 2729 : 			Vertices[3].Position.X=X+XL; Vertices[3].Position.Y=Y;    Vertices[3].U[0]=U+UL; 	Vertices[3].U[1]=V+VL;

	mov	edx, DWORD PTR _Y$[esp+60]
	mov	DWORD PTR [edi+68], eax
	mov	DWORD PTR [edi+108], ecx
	fst	DWORD PTR [edi+80]
	mov	DWORD PTR [edi+124], edx
	fxch	ST(1)
	fstp	DWORD PTR [edi+84]
	fld	DWORD PTR _U$[esp+60]
	fadd	DWORD PTR _UL$[esp+60]
	fst	DWORD PTR 28+[esp+60]
	mov	eax, DWORD PTR 28+[esp+60]
	fstp	DWORD PTR [edi+104]
	mov	DWORD PTR [edi+144], eax
	fstp	DWORD PTR [edi+120]
	fstp	DWORD PTR [edi+148]

; 2730 : 
; 2731 : 		} else if (MirrorHoriz && MirrorVert) 

	jmp	$L123890
$L138461:

; 2732 : 		{
; 2733 : 			Vertices[0].Position.X=X;    Vertices[0].Position.Y=Y;    Vertices[0].U[0]=U+UL;	Vertices[0].U[1]=V+VL;

	fld	DWORD PTR _V$[esp+60]
	mov	ecx, DWORD PTR _X$[esp+60]
	fadd	DWORD PTR _VL$[esp+60]
	mov	edx, DWORD PTR _Y$[esp+60]
	mov	DWORD PTR [edi], ecx

; 2734 : 			Vertices[1].Position.X=X;    Vertices[1].Position.Y=Y+YL; Vertices[1].U[0]=U+UL;    Vertices[1].U[1]=V;

	mov	ecx, DWORD PTR _V$[esp+60]
	fst	DWORD PTR [edi+28]
	mov	DWORD PTR [edi+4], edx
	fld	DWORD PTR _Y$[esp+60]

; 2735 : 			Vertices[2].Position.X=X+XL; Vertices[2].Position.Y=Y+YL; Vertices[2].U[0]=U   ;    Vertices[2].U[1]=V;

	mov	edx, DWORD PTR _U$[esp+60]
	fadd	DWORD PTR _YL$[esp+60]
	mov	DWORD PTR [edi+40], eax
	mov	eax, ecx
	mov	DWORD PTR [edi+68], ecx
	fst	DWORD PTR [edi+44]
	mov	DWORD PTR [edi+104], edx
	fxch	ST(2)
	mov	DWORD PTR [edi+108], eax
	fstp	DWORD PTR [edi+64]
	fld	DWORD PTR _X$[esp+60]
	fadd	DWORD PTR _XL$[esp+60]
	fst	DWORD PTR [edi+80]
	fxch	ST(2)
	fstp	DWORD PTR [edi+84]
	fxch	ST(1)

; 2736 : 			Vertices[3].Position.X=X+XL; Vertices[3].Position.Y=Y;    Vertices[3].U[0]=U   ; 	Vertices[3].U[1]=V+VL;

	fstp	DWORD PTR [edi+120]
	fstp	DWORD PTR [edi+148]

; 2737 : 
; 2738 : 		} else 

	jmp	SHORT $L138484
$L123889:

; 2739 : 		{
; 2740 : 			Vertices[0].Position.X=X;    Vertices[0].Position.Y=Y;    Vertices[0].U[0]=U;		Vertices[0].U[1]=V   ;
; 2741 : 			Vertices[1].Position.X=X;    Vertices[1].Position.Y=Y+YL; Vertices[1].U[0]=U;	    Vertices[1].U[1]=V+VL;

	fld	DWORD PTR _Y$[esp+60]
	mov	edx, DWORD PTR _U$[esp+60]
	fadd	DWORD PTR _YL$[esp+60]
	mov	eax, DWORD PTR _X$[esp+60]
	mov	ecx, DWORD PTR _Y$[esp+60]
	mov	DWORD PTR [edi], eax
	fst	DWORD PTR [edi+44]
	mov	eax, DWORD PTR _V$[esp+60]
	fld	DWORD PTR _V$[esp+60]
	mov	DWORD PTR [edi+4], ecx
	fadd	DWORD PTR _VL$[esp+60]
	mov	ecx, DWORD PTR _X$[esp+60]
	mov	DWORD PTR [edi+24], edx
	mov	DWORD PTR [edi+64], edx
	fst	DWORD PTR [edi+68]
	mov	DWORD PTR [edi+28], eax

; 2742 : 			Vertices[2].Position.X=X+XL; Vertices[2].Position.Y=Y+YL; Vertices[2].U[0]=U+UL;    Vertices[2].U[1]=V+VL;

	fld	DWORD PTR _X$[esp+60]
	mov	DWORD PTR [edi+40], ecx
	fadd	DWORD PTR _XL$[esp+60]
	fst	DWORD PTR 88+[esp+60]
	fstp	DWORD PTR [edi+80]
	fxch	ST(1)
	fstp	DWORD PTR [edi+84]
	fld	DWORD PTR _U$[esp+60]
	fadd	DWORD PTR _UL$[esp+60]
	fst	DWORD PTR 28+[esp+60]

; 2743 : 			Vertices[3].Position.X=X+XL; Vertices[3].Position.Y=Y;    Vertices[3].U[0]=U+UL; 	Vertices[3].U[1]=V   ;

	mov	edx, DWORD PTR 28+[esp+60]
	fstp	DWORD PTR [edi+104]
	fstp	DWORD PTR [edi+108]
$L138483:
	mov	eax, DWORD PTR 88+[esp+60]
	mov	DWORD PTR [edi+120], eax
	mov	eax, DWORD PTR _V$[esp+60]
	mov	DWORD PTR [edi+148], eax
$L138484:
	mov	ecx, DWORD PTR _Y$[esp+60]
	mov	DWORD PTR [edi+124], ecx
	mov	DWORD PTR [edi+144], edx
$L123890:

; 2744 : 		}
; 2745 : 
; 2746 : 		Vertices[0].U[0]*=Stages[0]->UScale;

	mov	ecx, DWORD PTR [esi+19712]
	fld	DWORD PTR [ecx+24]
	fmul	DWORD PTR [edi+24]
	fstp	DWORD PTR [edi+24]

; 2747 : 		Vertices[0].U[1]*=Stages[0]->VScale;

	mov	edx, DWORD PTR [esi+19712]
	fld	DWORD PTR [edx+28]
	fmul	DWORD PTR [edi+28]
	fstp	DWORD PTR [edi+28]

; 2748 : 		Vertices[1].U[0]*=Stages[0]->UScale;

	mov	eax, DWORD PTR [esi+19712]
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR [edi+64]
	fstp	DWORD PTR [edi+64]

; 2749 : 		Vertices[1].U[1]*=Stages[0]->VScale;

	mov	ecx, DWORD PTR [esi+19712]
	fld	DWORD PTR [ecx+28]
	fmul	DWORD PTR [edi+68]
	fstp	DWORD PTR [edi+68]

; 2750 : 		Vertices[2].U[0]*=Stages[0]->UScale;

	mov	edx, DWORD PTR [esi+19712]
	fld	DWORD PTR [edx+24]
	fmul	DWORD PTR [edi+104]
	fstp	DWORD PTR [edi+104]

; 2751 : 		Vertices[2].U[1]*=Stages[0]->VScale;

	mov	eax, DWORD PTR [esi+19712]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [edi+108]
	fstp	DWORD PTR [edi+108]

; 2752 : 		Vertices[3].U[0]*=Stages[0]->UScale;

	mov	ecx, DWORD PTR [esi+19712]
	fld	DWORD PTR [ecx+24]
	fmul	DWORD PTR [edi+144]
	fstp	DWORD PTR [edi+144]

; 2753 : 		Vertices[3].U[1]*=Stages[0]->VScale;

	mov	edx, DWORD PTR [esi+19712]
	fld	DWORD PTR [edx+28]
	fmul	DWORD PTR [edi+148]
	fstp	DWORD PTR [edi+148]

; 2754 : 
; 2755 : 		// NJS: Do I have rotation?
; 2756 : 		if(rot)	

	fld	DWORD PTR _rot$[esp+60]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L123897

; 2757 : 		{
; 2758 : 			float originX=(Vertices[0].Position.X+XL/2.f)+rotationOffsetX, originY=(Vertices[0].Position.Y+YL/2.f)+rotationOffsetY;

	fld	DWORD PTR _XL$[esp+60]
	fmul	DWORD PTR __real@3f000000
	fadd	DWORD PTR _X$[esp+60]
	fadd	DWORD PTR _rotationOffsetX$[esp+60]
	fld	DWORD PTR _YL$[esp+60]
	fmul	DWORD PTR __real@3f000000
	fadd	DWORD PTR _Y$[esp+60]
	fadd	DWORD PTR _rotationOffsetY$[esp+60]
	fld	DWORD PTR _rot$[esp+60]
	fmul	DWORD PTR __real@47800000

; 2759 : 
; 2760 : 			for(int index=0;index<4;index++)

	fld	QWORD PTR __real@bfc45f306dc9c883
	fmul	ST(0), ST(1)
	call	__ftol
	fmul	QWORD PTR __real@3fc45f306dc9c883
	mov	ecx, 16384				; 00004000H
	sub	ecx, eax
	sar	ecx, 2
	and	ecx, 16383				; 00003fffH
	lea	ebx, DWORD PTR [ecx*4+140]
	call	__ftol
	sar	eax, 2
	and	eax, 16383				; 00003fffH
	lea	ecx, DWORD PTR [eax*4+140]
	mov	edx, 4

; 2776 : 	}

	npad	5

; 2759 : 
; 2760 : 			for(int index=0;index<4;index++)

$L123895:

; 2761 : 			{	
; 2762 : 				float x=Vertices[index].Position.X,
; 2763 : 					  y=Vertices[index].Position.Y;
; 2764 : 
; 2765 : 				RotateAboutOrigin2D(originX,originY,x,y,rot);

	fld	DWORD PTR [edi]
	mov	eax, DWORD PTR __imp_?GMath@@3VFGlobalMath@@A
	fsub	ST(0), ST(2)
	fld	DWORD PTR [edi+4]
	add	edi, 40					; 00000028H
	dec	edx
	fsub	ST(0), ST(2)
	fld	DWORD PTR [ecx+eax]
	fld	DWORD PTR [ebx+eax]
	fld	DWORD PTR [ebx+eax]
	fmul	ST(0), ST(4)
	fld	DWORD PTR [ecx+eax]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fadd	ST(0), ST(6)

; 2766 : 				Vertices[index].Position.X=x;

	fstp	DWORD PTR [edi-40]
	fmul	ST(0), ST(2)
	fxch	ST(1)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fadd	ST(0), ST(3)

; 2767 : 				Vertices[index].Position.Y=y;

	fstp	DWORD PTR [edi-36]
	fstp	ST(0)
	fstp	ST(0)
	jne	SHORT $L123895
	fstp	ST(0)
	fstp	ST(0)
$L123897:

; 2768 : 			}
; 2769 : 		}
; 2770 : 
; 2771 : 		INT	First=ActorVertices.Unlock();

	mov	eax, DWORD PTR [esi+16704]
	test	eax, eax
	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L138415
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L138415:
	mov	eax, DWORD PTR [esi+16704]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+48]
	test	eax, eax
	jge	SHORT $L138467
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
	jmp	SHORT $L138416
$L138467:
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
$L138416:

; 2772 : 		ActorVertices.Set();

	mov	eax, DWORD PTR [esi+16700]
	test	eax, eax
	mov	edx, DWORD PTR [esi+16712]
	mov	DWORD PTR _First$[esp+60], edx
	jne	SHORT $L138424
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L138424:
	mov	eax, DWORD PTR [esi+16704]
	test	eax, eax
	jne	SHORT $L138426
	push	319					; 0000013fH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH

; 2776 : 	}

	npad	3

; 2772 : 		ActorVertices.Set();

$L138426:
	mov	eax, DWORD PTR [esi+16700]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [ecx+200]
	test	eax, eax
	jge	SHORT $L138427
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L138427:
	mov	eax, DWORD PTR [esi+16700]
	mov	ecx, DWORD PTR [eax]
	push	708					; 000002c4H
	push	eax
	call	DWORD PTR [ecx+304]
	test	eax, eax
	jge	SHORT $L138432
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L138432:
	mov	edx, DWORD PTR [esi+16704]
	mov	eax, DWORD PTR [esi+16700]
	mov	ecx, DWORD PTR [eax]
	push	40					; 00000028H
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+332]
	test	eax, eax
	jge	SHORT $L138437
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	324					; 00000144H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L138437:

; 2773 : 
; 2774 : 		Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, 2 );

	mov	ecx, DWORD PTR _First$[esp+60]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	ecx
	push	6
	push	eax
	call	DWORD PTR [edx+280]

; 2775 : 		unclock(Stats.TileTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], 0
	pop	edi
	mov	DWORD PTR _L$138445[esp+56], 0
	pop	ebx
	je	SHORT $L138447
	rdtsc
	mov	DWORD PTR _L$138445[esp+52], eax
	mov	DWORD PTR _H$138446[esp+52], edx
$L138447:
	mov	eax, DWORD PTR _L$138445[esp+52]
	mov	ecx, DWORD PTR [esi+19632]
	add	eax, -34				; ffffffdeH
	add	ecx, eax
	mov	DWORD PTR [esi+19632], ecx
$L123848:
	pop	esi
	pop	ebp

; 2776 : 	}

	add	esp, 48					; 00000030H
	ret	100					; 00000064H
?DrawTile@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@MMMMMMMMPAVFSpanBuffer@@MVFPlane@@3KKMMMM@Z ENDP ; UD3DRenderDevice::DrawTile
_TEXT	ENDS
PUBLIC	?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ; FD3DVertexBuffer<FD3DVertex>::Lock
PUBLIC	?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DVertex>::Unlock
PUBLIC	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ	; FD3DVertexBuffer<FD3DVertex>::Set
PUBLIC	?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z ; UD3DRenderDevice::RecursiveSubdivideLine
PUBLIC	__real@3e45798ee2308c3a
PUBLIC	__real@38000100
PUBLIC	?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::Add
PUBLIC	??_C@_01IJJ@c?$AA@				; `string'
EXTRN	__imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z:NEAR
EXTRN	__imp__rand:NEAR
;	COMDAT ??_C@_01IJJ@c?$AA@
; File ..\..\Core\Inc\UnMath.h
_DATA	SEGMENT
??_C@_01IJJ@c?$AA@ DB 'c', 00H				; `string'
_DATA	ENDS
;	COMDAT __real@3e45798ee2308c3a
CONST	SEGMENT
__real@3e45798ee2308c3a DQ 03e45798ee2308c3ar	; 1e-008
CONST	ENDS
;	COMDAT __real@38000100
CONST	SEGMENT
__real@38000100 DD 038000100r			; 3.05185e-005
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z
_TEXT	SEGMENT
$T138488 = -188
$T138489 = -188
$T138490 = -188
$T138492 = -188
_t$ = 8
_BeamColor$ = 12
_BeamEndColor$ = 16
_BeamStartWidth$ = 20
_BeamEndWidth$ = 24
_PolyFlags$ = 28
_MaxAmplitude$ = 32
_LineStart$ = 36
_LineEnd$ = 48
_RangeStart$ = 60
_RangeEnd$ = 72
_depth$ = 84
$T138593 = -196
$T138594 = -196
_CurrentTextureInfo$138662 = -128
$T138676 = -196
$T138679 = -200
$T138680 = -192
_Direction$ = -140
_Midpoint$ = -176
_Axis1$ = -164
_Axis2$ = -152
_ColorMidpoint$ = -200
?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z PROC NEAR ; UD3DRenderDevice::RecursiveSubdivideLine, COMDAT
; _this$ = ecx
; _c$ = edx

; 2779 : 	{

	sub	esp, 200				; 000000c8H
	push	ebx
	push	ebp
	push	esi
	mov	ebp, edx

; 2780 : 		VALIDATE;
; 2781 : 		verify(c);

	test	ebp, ebp
	push	edi
	mov	esi, ecx
	jne	SHORT $L123903
	push	2781					; 00000addH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_01IJJ@c?$AA@		; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L123903:

; 2782 : 		// Have I traversed to the lowest point?
; 2783 : 		if(!depth)

	mov	edi, DWORD PTR _depth$[esp+212]
	test	edi, edi
	jne	$L123905

; 2784 : 		{
; 2785 : 			// Draw the segment:
; 2786 : 			dnDraw3DLine(c->Frame,t,PolyFlags,RangeStart,RangeEnd,BeamStartWidth,BeamEndWidth,BeamColor,BeamColor,true);

	mov	eax, DWORD PTR _BeamColor$[esp+212]
	mov	DWORD PTR $T138680[esp+216], eax
	mov	DWORD PTR $T138679[esp+216], eax
	mov	eax, DWORD PTR [ebp+124]
	mov	DWORD PTR $T138676[esp+216], eax
	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	test	eax, eax
	je	$L123902
	fld	DWORD PTR _BeamStartWidth$[esp+212]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L138659
	fld	DWORD PTR _BeamEndWidth$[esp+212]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L138659
	mov	ebp, DWORD PTR _t$[esp+212]
	test	ebp, ebp
	mov	edi, 2
	je	SHORT $L138661
	mov	edi, DWORD PTR [ebp+196]
	or	edi, 2
$L138661:
	mov	ebx, DWORD PTR _PolyFlags$[esp+212]
	push	edi
	mov	edx, ebx
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	push	0
	mov	ecx, esi
	call	?SetZBias@UD3DRenderDevice@@QAIMM@Z	; UD3DRenderDevice::SetZBias
	fstp	ST(0)
	test	ebp, ebp
	je	SHORT $L138663
	mov	ecx, DWORD PTR $T138676[esp+216]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+172]
	mov	edx, DWORD PTR [edx+168]
	mov	eax, DWORD PTR [ebp]
	push	esi
	push	-1
	push	ecx
	push	edx
	lea	edx, DWORD PTR _CurrentTextureInfo$138662[esp+232]
	mov	ecx, ebp
	call	DWORD PTR [eax+72]
	push	0
	push	edi
	push	0
	push	ebx
	lea	eax, DWORD PTR _CurrentTextureInfo$138662[esp+232]
	push	eax
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	jmp	SHORT $L138664
$L138663:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L138664:
	push	-1
	lea	ebx, DWORD PTR [esi+16720]
	push	2
	mov	ecx, ebx
	call	?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ; FD3DVertexBuffer<FD3DVertex>::Lock
	mov	ecx, DWORD PTR _RangeStart$[esp+212]
	mov	edx, DWORD PTR _RangeStart$[esp+216]
	mov	edi, eax
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _RangeStart$[esp+220]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T138679[esp+216]
	lea	ecx, DWORD PTR $T138593[esp+216]
	mov	DWORD PTR $T138593[esp+216], edx
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	mov	ecx, DWORD PTR _RangeEnd$[esp+212]
	mov	edx, DWORD PTR _RangeEnd$[esp+216]
	mov	DWORD PTR [edi+12], eax
	lea	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _RangeEnd$[esp+220]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T138680[esp+216]
	lea	ecx, DWORD PTR $T138594[esp+216]
	mov	DWORD PTR $T138594[esp+216], edx
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	mov	ecx, ebx
	mov	DWORD PTR [edi+28], eax
	call	?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DVertex>::Unlock
	mov	ecx, ebx
	mov	edi, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DVertex>::Set
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	edi
	push	2
	push	eax
	call	DWORD PTR [ecx+280]
	mov	ecx, DWORD PTR [esi+19684]
	inc	ecx
	test	ebp, ebp
	mov	DWORD PTR [esi+19684], ecx
	je	SHORT $L138667
	mov	eax, DWORD PTR [ebp]
	lea	edx, DWORD PTR _CurrentTextureInfo$138662[esp+216]
	mov	ecx, ebp
	call	DWORD PTR [eax+76]

; 2814 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 200				; 000000c8H
	ret	80					; 00000050H

; 2784 : 		{
; 2785 : 			// Draw the segment:
; 2786 : 			dnDraw3DLine(c->Frame,t,PolyFlags,RangeStart,RangeEnd,BeamStartWidth,BeamEndWidth,BeamColor,BeamColor,true);

$L138667:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	esi, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [esi]
	push	4
	push	4
	push	0
	push	esi
	call	DWORD PTR [edx+252]

; 2814 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 200				; 000000c8H
	ret	80					; 00000050H

; 2784 : 		{
; 2785 : 			// Draw the segment:
; 2786 : 			dnDraw3DLine(c->Frame,t,PolyFlags,RangeStart,RangeEnd,BeamStartWidth,BeamEndWidth,BeamColor,BeamColor,true);

$L138659:
	add	esi, 675236				; 000a4da4H
	push	0
	push	1
	mov	ecx, esi
	call	?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::Add
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+eax*8]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _RangeStart$[esp+212]
	mov	edx, eax
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _RangeStart$[esp+216]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _RangeStart$[esp+220]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR _RangeEnd$[esp+212]
	lea	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _RangeEnd$[esp+216]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _RangeEnd$[esp+220]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR _BeamStartWidth$[esp+212]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR $T138679[esp+216]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR $T138680[esp+216]
	mov	DWORD PTR [eax+32], edx

; 2814 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 200				; 000000c8H
	ret	80					; 00000050H
$L123905:

; 2787 : 			return;
; 2788 : 		} 
; 2789 : 
; 2790 : 		FVector Direction=RangeEnd-RangeStart;

	fld	DWORD PTR _RangeEnd$[esp+220]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR _RangeStart$[esp+232]
	lea	ecx, DWORD PTR _Direction$[esp+228]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _RangeEnd$[esp+228]
	fsub	DWORD PTR _RangeStart$[esp+228]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _RangeEnd$[esp+224]
	fsub	DWORD PTR _RangeStart$[esp+224]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z

; 2791 : 		FVector Midpoint=RangeStart+(Direction/2); 

	fld	DWORD PTR _Direction$[esp+224]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR __real@3f000000
	lea	ecx, DWORD PTR $T138488[esp+228]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Direction$[esp+232]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _Direction$[esp+228]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T138488[esp+224]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR _RangeStart$[esp+232]
	lea	ecx, DWORD PTR _Midpoint$[esp+228]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T138488[esp+232]
	fadd	DWORD PTR _RangeStart$[esp+228]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T138488[esp+228]
	fadd	DWORD PTR _RangeStart$[esp+224]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z

; 2792 : 		
; 2793 : 		// Move the midpoint around randomly on the plane that the direction is the normal of.
; 2794 : 		Direction=LineEnd-LineStart;

	fld	DWORD PTR _LineEnd$[esp+220]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR _LineStart$[esp+232]
	lea	ecx, DWORD PTR $T138489[esp+228]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _LineEnd$[esp+228]
	fsub	DWORD PTR _LineStart$[esp+228]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _LineEnd$[esp+224]
	fsub	DWORD PTR _LineStart$[esp+224]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z

; 2795 : 		Direction.Normalize();

	fld	DWORD PTR $T138489[esp+216]
	mov	eax, DWORD PTR $T138489[esp+216]
	fmul	DWORD PTR $T138489[esp+216]
	mov	ecx, DWORD PTR $T138489[esp+220]
	fld	DWORD PTR $T138489[esp+220]
	mov	edx, DWORD PTR $T138489[esp+224]
	fmul	DWORD PTR $T138489[esp+220]
	mov	DWORD PTR _Direction$[esp+216], eax
	mov	DWORD PTR _Direction$[esp+220], ecx
	mov	DWORD PTR _Direction$[esp+224], edx
	faddp	ST(1), ST(0)
	fld	DWORD PTR $T138489[esp+224]
	fmul	DWORD PTR $T138489[esp+224]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L138770
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR $T138489[esp+216]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+216]
	fld	DWORD PTR _Direction$[esp+220]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+220]
	fld	DWORD PTR _Direction$[esp+224]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+224]
$L138770:

; 2796 : 
; 2797 : 		FVector Axis1, Axis2;
; 2798 : 		Direction.FindBestAxisVectors( Axis1, Axis2 );

	lea	eax, DWORD PTR _Axis2$[esp+216]
	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _Axis1$[esp+220]
	push	ecx
	lea	ecx, DWORD PTR _Direction$[esp+224]
	call	DWORD PTR __imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z

; 2799 : 		Axis1.Normalize();

	fld	DWORD PTR _Axis1$[esp+216]
	fmul	DWORD PTR _Axis1$[esp+216]
	fld	DWORD PTR _Axis1$[esp+220]
	fmul	DWORD PTR _Axis1$[esp+220]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis1$[esp+224]
	fmul	DWORD PTR _Axis1$[esp+224]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L138768
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis1$[esp+216]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+216]
	fld	DWORD PTR _Axis1$[esp+220]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+220]
	fld	DWORD PTR _Axis1$[esp+224]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+224]
$L138768:
	fstp	ST(0)

; 2800 : 		Axis2.Normalize();

	fld	DWORD PTR _Axis2$[esp+216]
	fmul	DWORD PTR _Axis2$[esp+216]
	fld	DWORD PTR _Axis2$[esp+224]
	fmul	DWORD PTR _Axis2$[esp+224]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis2$[esp+220]
	fmul	DWORD PTR _Axis2$[esp+220]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L138769
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis2$[esp+216]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+216]
	fld	DWORD PTR _Axis2$[esp+220]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+220]
	fld	DWORD PTR _Axis2$[esp+224]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+224]
$L138769:

; 2801 : 
; 2802 : 		Midpoint+=Axis1*(((MaxAmplitude*2)*appFrand())-MaxAmplitude);

	mov	ebx, DWORD PTR __imp__rand
	fstp	ST(0)
	fld	DWORD PTR _MaxAmplitude$[esp+212]
	fadd	ST(0), ST(0)
	fstp	DWORD PTR -192+[esp+216]
	call	ebx
	mov	DWORD PTR -196+[esp+216], eax
	fild	DWORD PTR -196+[esp+216]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T138490[esp+228]
	fmul	DWORD PTR -192+[esp+228]
	fmul	DWORD PTR __real@38000100
	fsub	DWORD PTR _MaxAmplitude$[esp+224]
	fld	DWORD PTR _Axis1$[esp+236]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Axis1$[esp+232]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+4]
	fmul	DWORD PTR _Axis1$[esp+228]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T138490[esp+216]
	fadd	DWORD PTR _Midpoint$[esp+216]
	fstp	DWORD PTR _Midpoint$[esp+216]
	fld	DWORD PTR _Midpoint$[esp+220]
	fadd	DWORD PTR $T138490[esp+220]
	fstp	DWORD PTR _Midpoint$[esp+220]
	fld	DWORD PTR _Midpoint$[esp+224]
	fadd	DWORD PTR $T138490[esp+224]
	fstp	DWORD PTR _Midpoint$[esp+224]

; 2803 : 		Midpoint+=Axis2*(((MaxAmplitude*2)*appFrand())-MaxAmplitude);

	call	ebx
	mov	DWORD PTR -196+[esp+216], eax
	fild	DWORD PTR -196+[esp+216]

; 2804 : 
; 2805 : 		FColor ColorMidpoint=BeamColor;

	mov	ecx, DWORD PTR _BeamColor$[esp+212]

; 2806 : 		ColorMidpoint.R+=(BeamEndColor.R-BeamColor.R)/2;

	mov	ebx, DWORD PTR _BeamEndColor$[esp+212]
	fmul	DWORD PTR -192+[esp+216]
	xor	eax, eax
	xor	edx, edx
	mov	dl, cl
	fmul	DWORD PTR __real@38000100
	mov	al, bl
	mov	DWORD PTR _ColorMidpoint$[esp+216], ecx
	fsub	DWORD PTR _MaxAmplitude$[esp+212]
	fld	DWORD PTR _Axis2$[esp+216]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Axis2$[esp+220]
	sub	eax, edx
	fmul	ST(0), ST(2)
	cdq
	sub	eax, edx
	fstp	DWORD PTR $T138492[esp+220]
	sar	eax, 1
	fld	DWORD PTR _Axis2$[esp+224]
	add	al, cl
	fmul	ST(0), ST(2)
	mov	BYTE PTR _ColorMidpoint$[esp+216], al

; 2807 : 		ColorMidpoint.G+=(BeamEndColor.G-BeamColor.G)/2;

	xor	edx, edx
	xor	eax, eax
	fstp	DWORD PTR $T138492[esp+224]
	mov	dl, ch
	fadd	DWORD PTR _Midpoint$[esp+216]
	mov	al, bh
	fstp	DWORD PTR _Midpoint$[esp+216]
	fstp	ST(0)
	fld	DWORD PTR _Midpoint$[esp+220]
	fadd	DWORD PTR $T138492[esp+220]
	sub	eax, edx
	cdq
	sub	eax, edx
	fstp	DWORD PTR _Midpoint$[esp+220]
	fld	DWORD PTR _Midpoint$[esp+224]
	fadd	DWORD PTR $T138492[esp+224]
	fstp	DWORD PTR _Midpoint$[esp+224]
	mov	dl, BYTE PTR _ColorMidpoint$[esp+217]

; 2808 : 		ColorMidpoint.B+=(BeamEndColor.B-BeamColor.B)/2;
; 2809 : 		ColorMidpoint.A+=(BeamEndColor.A-BeamColor.A)/2;
; 2810 :  
; 2811 : 		// Delegate the rendering of the 2 line segments: 
; 2812 : 		RecursiveSubdivideLine(c,t,BeamColor,ColorMidpoint,BeamStartWidth, BeamEndWidth,PolyFlags,MaxAmplitude/2,LineStart,LineEnd,RangeStart,Midpoint,depth-1);

	fld	DWORD PTR _MaxAmplitude$[esp+212]
	sar	eax, 1
	fmul	DWORD PTR __real@3f000000
	add	dl, al
	movzx	eax, BYTE PTR _BeamEndColor$[esp+214]
	mov	BYTE PTR _ColorMidpoint$[esp+217], dl
	fstp	DWORD PTR -192+[esp+216]
	movzx	edx, BYTE PTR _BeamColor$[esp+214]
	sub	eax, edx
	cdq
	sub	eax, edx
	mov	dl, BYTE PTR _ColorMidpoint$[esp+218]
	sar	eax, 1
	add	dl, al
	movzx	eax, BYTE PTR _BeamEndColor$[esp+215]
	mov	BYTE PTR _ColorMidpoint$[esp+218], dl
	movzx	edx, BYTE PTR _BeamColor$[esp+215]
	sub	eax, edx
	cdq
	sub	eax, edx
	mov	dl, BYTE PTR _ColorMidpoint$[esp+219]
	sar	eax, 1
	add	dl, al
	mov	BYTE PTR _ColorMidpoint$[esp+219], dl
	mov	edx, DWORD PTR _Midpoint$[esp+216]
	dec	edi
	push	edi
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _Midpoint$[esp+236]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _Midpoint$[esp+240]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR _RangeStart$[esp+228]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _RangeStart$[esp+244]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _RangeStart$[esp+248]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR _LineEnd$[esp+240]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _LineEnd$[esp+256]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _LineEnd$[esp+260]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR _LineStart$[esp+252]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _LineStart$[esp+268]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _LineStart$[esp+272]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR -192+[esp+268]
	mov	edx, DWORD PTR _PolyFlags$[esp+264]
	push	eax
	mov	eax, DWORD PTR _BeamEndWidth$[esp+268]
	push	edx
	mov	edx, DWORD PTR _BeamStartWidth$[esp+272]
	push	eax
	mov	eax, DWORD PTR _ColorMidpoint$[esp+280]
	push	edx
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _t$[esp+288]
	push	ecx
	mov	edx, ebp
	mov	ecx, esi
	call	?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z ; UD3DRenderDevice::RecursiveSubdivideLine

; 2813 : 		RecursiveSubdivideLine(c,t,ColorMidpoint,BeamEndColor,BeamStartWidth, BeamEndWidth,PolyFlags,MaxAmplitude/2,LineStart,LineEnd,Midpoint,RangeEnd,depth-1);

	mov	eax, DWORD PTR _RangeEnd$[esp+212]
	mov	ecx, DWORD PTR _RangeEnd$[esp+216]
	push	edi
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _RangeEnd$[esp+236]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR _Midpoint$[esp+232]
	mov	eax, DWORD PTR _Midpoint$[esp+236]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _Midpoint$[esp+252]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _LineEnd$[esp+240]
	mov	edx, DWORD PTR _LineEnd$[esp+244]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _LineEnd$[esp+260]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _LineStart$[esp+252]
	mov	ecx, DWORD PTR _LineStart$[esp+256]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _LineStart$[esp+272]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR -192+[esp+268]
	push	ecx
	mov	ecx, DWORD PTR _BeamStartWidth$[esp+268]
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR _PolyFlags$[esp+268]
	mov	eax, DWORD PTR _BeamEndWidth$[esp+268]
	push	edx
	mov	edx, DWORD PTR _ColorMidpoint$[esp+276]
	push	eax
	mov	eax, DWORD PTR _t$[esp+276]
	push	ecx
	push	ebx
	push	edx
	push	eax
	mov	edx, ebp
	mov	ecx, esi
	call	?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z ; UD3DRenderDevice::RecursiveSubdivideLine
$L123902:

; 2814 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 200				; 000000c8H
	ret	80					; 00000050H
?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z ENDP ; UD3DRenderDevice::RecursiveSubdivideLine
_TEXT	ENDS
PUBLIC	?SineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z ; UD3DRenderDevice::SineWave
PUBLIC	__real@4000000000000000
PUBLIC	__real@41500000
;	COMDAT __real@4000000000000000
; File D:\DEV\DNF2001-BUGFIX\DIRECTX8\INC\d3dx8math.inl
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@41500000
CONST	SEGMENT
__real@41500000 DD 041500000r			; 13
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?SineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z
_TEXT	SEGMENT
_c$ = -172
_t$ = 8
_BeamColor$ = 12
_BeamEndColor$ = 16
_BeamStartWidth$ = 20
_BeamEndWidth$ = 24
_PolyFlags$ = 28
_MaxAmplitude$ = 32
_MaxFrequency$ = 36
_Noise$ = 40
_TimeSeconds$ = 44
_LineStart$ = 48
_LineEnd$ = 60
_depth$ = 96
_TimeScale$ = 100
$T138774 = -140
$T138775 = -200
$T138776 = -164
$T138778 = -152
_CurrentTextureInfo$139021 = -128
$T139036 = -256
$T139037 = -256
$T139105 = -256
$T139108 = -272
$T139109 = -288
_LineSegments$ = -212
_CurrentPosition$ = -268
_PreviousPosition$ = -236
_Distance$ = -284
_Direction$ = -224
_StepLength$ = -168
_Axis1$ = -252
_Axis2$ = -284
_CurrentColor$ = -292
_RFactor$ = -176
_GFactor$ = -184
_BFactor$ = -180
_AFactor$ = -188
_i$ = -240
?SineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z PROC NEAR ; UD3DRenderDevice::SineWave, COMDAT
; _this$ = ecx
; _c$ = edx

; 2817 : 	{

	sub	esp, 292				; 00000124H

; 2818 : 		VALIDATE;
; 2819 : 		int LineSegments=((int)appPow(2,depth))+1;

	fld	QWORD PTR __real@4000000000000000
	push	ebx
	fild	DWORD PTR _depth$[esp+292]
	push	ebp
	push	esi
	push	edi
	mov	DWORD PTR _c$[esp+308], edx
	mov	esi, ecx
	call	__CIpow
	call	__ftol

; 2820 : 		FVector CurrentPosition=LineStart;
; 2821 : 		FVector PreviousPosition=CurrentPosition;
; 2822 : 		FVector Distance=LineEnd-LineStart;

	fld	DWORD PTR _LineEnd$[esp+304]
	fsub	DWORD PTR _LineStart$[esp+304]
	mov	ecx, DWORD PTR _LineStart$[esp+308]
	mov	edx, DWORD PTR _LineStart$[esp+312]
	mov	ebp, eax
	fstp	DWORD PTR _Distance$[esp+308]
	fld	DWORD PTR _LineEnd$[esp+308]
	mov	eax, DWORD PTR _LineStart$[esp+304]
	fsub	DWORD PTR _LineStart$[esp+308]
	mov	DWORD PTR _PreviousPosition$[esp+308], eax

; 2823 : 		FVector Direction=Distance;

	mov	eax, DWORD PTR _Distance$[esp+308]
	mov	DWORD PTR _Direction$[esp+308], eax
	fstp	DWORD PTR _Distance$[esp+312]
	fld	DWORD PTR _LineEnd$[esp+312]
	inc	ebp
	fsub	DWORD PTR _LineStart$[esp+312]
	mov	DWORD PTR _PreviousPosition$[esp+312], ecx
	mov	ecx, DWORD PTR _Distance$[esp+312]
	mov	DWORD PTR _PreviousPosition$[esp+316], edx
	fstp	DWORD PTR _Distance$[esp+316]

; 2824 : 		Direction.Normalize();

	fld	DWORD PTR _Distance$[esp+316]
	mov	edx, DWORD PTR _Distance$[esp+316]
	fmul	DWORD PTR _Distance$[esp+316]
	mov	DWORD PTR _LineSegments$[esp+308], ebp
	fld	DWORD PTR _Distance$[esp+312]
	mov	DWORD PTR _Direction$[esp+312], ecx
	fmul	DWORD PTR _Distance$[esp+312]
	mov	DWORD PTR _Direction$[esp+316], edx
	fld	DWORD PTR _Distance$[esp+308]
	fmul	DWORD PTR _Distance$[esp+308]
	fld	ST(0)
	fadd	ST(0), ST(2)
	fadd	ST(0), ST(3)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L139120
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Distance$[esp+308]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+308]
	fld	DWORD PTR _Direction$[esp+312]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+312]
	fld	DWORD PTR _Direction$[esp+316]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+316]
$L139120:
	fstp	ST(0)

; 2825 : 		FLOAT Length=Distance.Size();
; 2826 : 		FLOAT StepLength=Length/LineSegments;
; 2827 : 
; 2828 : 		FVector Axis1, Axis2;
; 2829 : 		Direction.FindBestAxisVectors( Axis1, Axis2 );

	lea	eax, DWORD PTR _Axis2$[esp+308]

; 2830 : 		Axis1.Normalize();
; 2831 : 		Axis2.Normalize();
; 2832 : 
; 2833 : 		FColor PreviousColor=BeamColor,
; 2834 : 			   CurrentColor=BeamColor;
; 2835 : 
; 2836 : 		FLOAT RFactor=(((FLOAT)(BeamEndColor.R-BeamColor.R))/(FLOAT)LineSegments);
; 2837 : 		FLOAT GFactor=(((FLOAT)(BeamEndColor.G-BeamColor.G))/(FLOAT)LineSegments);
; 2838 : 		FLOAT BFactor=(((FLOAT)(BeamEndColor.B-BeamColor.B))/(FLOAT)LineSegments);
; 2839 : 		FLOAT AFactor=(((FLOAT)(BeamEndColor.A-BeamColor.A))/(FLOAT)LineSegments);
; 2840 : 
; 2841 : 		for(int i=0;i<LineSegments;i++)

	fild	DWORD PTR _LineSegments$[esp+308]
	push	eax
	lea	ecx, DWORD PTR _Axis1$[esp+312]
	push	ecx
	fstp	DWORD PTR -292+[esp+316]
	lea	ecx, DWORD PTR _Direction$[esp+316]
	fadd	ST(0), ST(1)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fsqrt
	fstp	ST(1)
	fdiv	DWORD PTR -292+[esp+316]
	fstp	DWORD PTR _StepLength$[esp+316]
	call	DWORD PTR __imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z
	fld	DWORD PTR _Axis1$[esp+308]
	fmul	DWORD PTR _Axis1$[esp+308]
	fld	DWORD PTR _Axis1$[esp+316]
	fmul	DWORD PTR _Axis1$[esp+316]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis1$[esp+312]
	fmul	DWORD PTR _Axis1$[esp+312]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L139116
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis1$[esp+308]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+308]
	fld	DWORD PTR _Axis1$[esp+312]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+312]
	fld	DWORD PTR _Axis1$[esp+316]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+316]
$L139116:
	fstp	ST(0)
	fld	DWORD PTR _Axis2$[esp+308]
	fmul	DWORD PTR _Axis2$[esp+308]
	fld	DWORD PTR _Axis2$[esp+316]
	fmul	DWORD PTR _Axis2$[esp+316]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis2$[esp+312]
	fmul	DWORD PTR _Axis2$[esp+312]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L139119
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis2$[esp+308]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+308]
	fld	DWORD PTR _Axis2$[esp+312]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+312]
	fld	DWORD PTR _Axis2$[esp+316]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+316]
$L139119:
	mov	ebx, DWORD PTR _BeamColor$[esp+304]
	fstp	ST(0)
	mov	eax, DWORD PTR _BeamEndColor$[esp+304]
	xor	edx, edx
	xor	ecx, ecx
	mov	cl, al
	mov	dl, bl
	movzx	eax, ah
	mov	edi, ebx
	mov	DWORD PTR _i$[esp+308], 0
	sub	ecx, edx
	mov	DWORD PTR -288+[esp+308], ecx
	fild	DWORD PTR -288+[esp+308]
	xor	edx, edx
	mov	dl, bh
	fdiv	DWORD PTR -292+[esp+308]
	xor	ecx, ecx
	sub	eax, edx
	mov	DWORD PTR -288+[esp+308], eax
	mov	ax, WORD PTR _BeamColor$[esp+306]
	movzx	edx, BYTE PTR _BeamEndColor$[esp+306]
	mov	cl, al
	movzx	eax, ah
	sub	edx, ecx
	movzx	ecx, BYTE PTR _BeamEndColor$[esp+307]
	sub	ecx, eax
	test	ebp, ebp
	fstp	DWORD PTR _RFactor$[esp+308]
	fild	DWORD PTR -288+[esp+308]
	mov	DWORD PTR -288+[esp+308], edx
	fdiv	DWORD PTR -292+[esp+308]
	fstp	DWORD PTR _GFactor$[esp+308]
	fild	DWORD PTR -288+[esp+308]
	mov	DWORD PTR -288+[esp+308], ecx
	fdiv	DWORD PTR -292+[esp+308]
	fstp	DWORD PTR _BFactor$[esp+308]
	fild	DWORD PTR -288+[esp+308]
	fdiv	DWORD PTR -292+[esp+308]
	fstp	DWORD PTR _AFactor$[esp+308]
	jle	$L123949
	fld	DWORD PTR _TimeSeconds$[esp+304]
	fmul	DWORD PTR _TimeScale$[esp+304]
	fmul	DWORD PTR __real@41500000
	fstp	DWORD PTR -204+[esp+308]
	fld	DWORD PTR _Noise$[esp+304]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR -208+[esp+308]

; 2855 : 
; 2856 : 			// Draw the line:
; 2857 : 			dnDraw3DLine(c->Frame,t,PolyFlags,PreviousPosition,CurrentPosition,BeamStartWidth,BeamEndWidth,PreviousColor,CurrentColor,true);

	jmp	SHORT $L123947
$L139117:
	mov	ebx, DWORD PTR _BeamColor$[esp+304]
$L123947:

; 2842 : 		{
; 2843 : 			FLOAT LengthToHere=(i*StepLength);

	fild	DWORD PTR _i$[esp+308]

; 2844 : 			CurrentPosition=LineStart+(LengthToHere*Direction);
; 2845 : 			
; 2846 : 			CurrentPosition+=(Axis1*(appSin(TimeSeconds*13*TimeScale+LengthToHere*MaxFrequency+appFrand()*Noise-(Noise/2))*MaxAmplitude));

	mov	ebp, DWORD PTR __imp__rand
	fst	DWORD PTR -272+[esp+308]
	fmul	DWORD PTR _StepLength$[esp+308]
	fld	DWORD PTR _Direction$[esp+308]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Direction$[esp+312]
	fmul	ST(0), ST(2)
	fld	DWORD PTR _Direction$[esp+316]
	fmul	ST(0), ST(3)
	fstp	DWORD PTR $T138774[esp+316]
	fxch	ST(1)
	fadd	DWORD PTR _LineStart$[esp+304]
	fstp	DWORD PTR $T138775[esp+308]
	mov	edx, DWORD PTR $T138775[esp+308]
	fadd	DWORD PTR _LineStart$[esp+308]
	mov	DWORD PTR _CurrentPosition$[esp+308], edx
	fstp	DWORD PTR $T138775[esp+312]
	fld	DWORD PTR $T138774[esp+316]
	mov	eax, DWORD PTR $T138775[esp+312]
	fadd	DWORD PTR _LineStart$[esp+312]
	mov	DWORD PTR _CurrentPosition$[esp+312], eax
	fstp	DWORD PTR $T138775[esp+316]
	mov	ecx, DWORD PTR $T138775[esp+316]
	fmul	DWORD PTR _MaxFrequency$[esp+304]
	mov	DWORD PTR _CurrentPosition$[esp+316], ecx
	fstp	DWORD PTR -292+[esp+308]
	call	ebp
	mov	DWORD PTR -288+[esp+308], eax
	fild	DWORD PTR -288+[esp+308]
	fmul	DWORD PTR _Noise$[esp+304]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -204+[esp+308]
	fadd	DWORD PTR -292+[esp+308]
	fsub	DWORD PTR -208+[esp+308]
	fsin
	fmul	DWORD PTR _MaxAmplitude$[esp+304]
	fld	DWORD PTR _Axis1$[esp+308]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Axis1$[esp+312]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T138776[esp+312]
	fld	DWORD PTR _Axis1$[esp+316]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T138776[esp+316]
	fadd	DWORD PTR $T138775[esp+308]
	fstp	DWORD PTR _CurrentPosition$[esp+308]
	fstp	ST(0)
	fld	DWORD PTR _CurrentPosition$[esp+312]
	fadd	DWORD PTR $T138776[esp+312]
	fstp	DWORD PTR _CurrentPosition$[esp+312]
	fld	DWORD PTR _CurrentPosition$[esp+316]
	fadd	DWORD PTR $T138776[esp+316]
	fstp	DWORD PTR _CurrentPosition$[esp+316]

; 2847 : 			CurrentPosition+=(Axis2*(appCos(TimeSeconds*13*TimeScale+LengthToHere*MaxFrequency+appFrand()*Noise-(Noise/2))*MaxAmplitude));

	call	ebp
	mov	DWORD PTR -288+[esp+308], eax
	fild	DWORD PTR -288+[esp+308]
	fmul	DWORD PTR _Noise$[esp+304]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -204+[esp+308]
	fadd	DWORD PTR -292+[esp+308]
	fsub	DWORD PTR -208+[esp+308]
	fcos
	fmul	DWORD PTR _MaxAmplitude$[esp+304]
	fld	DWORD PTR _Axis2$[esp+308]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Axis2$[esp+312]

; 2848 : 
; 2849 : 			// Compute current color:
; 2850 : 			CurrentColor=BeamColor;

	mov	DWORD PTR _CurrentColor$[esp+308], ebx
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T138778[esp+312]
	fld	DWORD PTR _Axis2$[esp+316]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T138778[esp+316]
	fadd	DWORD PTR _CurrentPosition$[esp+308]
	fstp	DWORD PTR _CurrentPosition$[esp+308]
	fstp	ST(0)
	fld	DWORD PTR _CurrentPosition$[esp+312]
	fadd	DWORD PTR $T138778[esp+312]
	fstp	DWORD PTR _CurrentPosition$[esp+312]
	fld	DWORD PTR _CurrentPosition$[esp+316]
	fadd	DWORD PTR $T138778[esp+316]
	fstp	DWORD PTR _CurrentPosition$[esp+316]

; 2851 : 			CurrentColor.R+=(int)(RFactor*i);

	fld	DWORD PTR -272+[esp+308]
	fmul	DWORD PTR _RFactor$[esp+308]
	call	__ftol

; 2852 : 			CurrentColor.G+=(int)(GFactor*i);

	fld	DWORD PTR -272+[esp+308]
	fmul	DWORD PTR _GFactor$[esp+308]
	add	al, bl
	mov	BYTE PTR _CurrentColor$[esp+308], al
	call	__ftol

; 2853 : 			CurrentColor.B+=(int)(BFactor*i);

	fld	DWORD PTR -272+[esp+308]
	mov	bl, BYTE PTR _CurrentColor$[esp+309]
	fmul	DWORD PTR _BFactor$[esp+308]
	add	bl, al
	mov	BYTE PTR _CurrentColor$[esp+309], bl
	call	__ftol

; 2854 : 			CurrentColor.A+=(int)(AFactor*i);

	fld	DWORD PTR -272+[esp+308]
	mov	dl, BYTE PTR _CurrentColor$[esp+310]
	fmul	DWORD PTR _AFactor$[esp+308]
	add	dl, al
	mov	BYTE PTR _CurrentColor$[esp+310], dl
	call	__ftol
	mov	cl, BYTE PTR _CurrentColor$[esp+311]

; 2855 : 
; 2856 : 			// Draw the line:
; 2857 : 			dnDraw3DLine(c->Frame,t,PolyFlags,PreviousPosition,CurrentPosition,BeamStartWidth,BeamEndWidth,PreviousColor,CurrentColor,true);

	mov	ebx, DWORD PTR _CurrentPosition$[esp+312]
	add	cl, al
	mov	eax, DWORD PTR _c$[esp+308]
	mov	BYTE PTR _CurrentColor$[esp+311], cl
	mov	ecx, DWORD PTR [eax+124]
	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	test	eax, eax
	mov	edx, DWORD PTR _CurrentColor$[esp+308]
	mov	DWORD PTR $T139109[esp+308], edx
	mov	DWORD PTR $T139108[esp+308], edi
	mov	DWORD PTR $T139105[esp+308], ecx
	je	$L139016
	fld	DWORD PTR _BeamStartWidth$[esp+304]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L139018
	fld	DWORD PTR _BeamEndWidth$[esp+304]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L139018
	mov	ebp, DWORD PTR _t$[esp+304]
	test	ebp, ebp
	mov	edi, 2
	je	SHORT $L139020
	mov	edi, DWORD PTR [ebp+196]
	or	edi, 2
$L139020:
	mov	edx, DWORD PTR _PolyFlags$[esp+304]
	push	edi
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	push	1098907648				; 41800000H
	push	0
	push	0
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [esi+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L139056
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L139118
$L139056:
	mov	eax, DWORD PTR [esi+19124]
	fst	DWORD PTR [esi+675164]
	mov	ebp, DWORD PTR [eax]
	call	__ftol
	push	eax
	mov	eax, DWORD PTR [esi+19124]
	push	47					; 0000002fH
	push	eax
	call	DWORD PTR [ebp+200]
	mov	ebp, DWORD PTR _t$[esp+304]
	jmp	SHORT $L139055
$L139118:
	fstp	ST(0)
$L139055:
	test	ebp, ebp
	je	SHORT $L139022
	mov	ecx, DWORD PTR $T139105[esp+308]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+172]
	mov	edx, DWORD PTR [edx+168]
	mov	eax, DWORD PTR [ebp]
	push	esi
	push	-1
	push	ecx
	push	edx
	lea	edx, DWORD PTR _CurrentTextureInfo$139021[esp+324]
	mov	ecx, ebp
	call	DWORD PTR [eax+72]
	mov	eax, DWORD PTR _PolyFlags$[esp+304]
	push	0
	push	edi
	push	0
	push	eax
	lea	ecx, DWORD PTR _CurrentTextureInfo$139021[esp+324]
	push	ecx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	jmp	SHORT $L139023
$L139022:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L139023:
	push	-1
	lea	ebp, DWORD PTR [esi+16720]
	push	2
	mov	ecx, ebp
	call	?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ; FD3DVertexBuffer<FD3DVertex>::Lock
	mov	ecx, DWORD PTR _PreviousPosition$[esp+312]
	mov	edi, eax
	mov	eax, DWORD PTR _PreviousPosition$[esp+308]
	mov	edx, edi
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _PreviousPosition$[esp+316]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR $T139108[esp+308]
	mov	DWORD PTR $T139036[esp+308], ecx
	lea	ecx, DWORD PTR $T139036[esp+308]
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	mov	ecx, DWORD PTR _CurrentPosition$[esp+316]
	mov	DWORD PTR [edi+12], eax
	mov	eax, DWORD PTR _CurrentPosition$[esp+308]
	lea	edx, DWORD PTR [edi+16]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR $T139109[esp+308]
	lea	ecx, DWORD PTR $T139037[esp+308]
	mov	DWORD PTR $T139037[esp+308], edx
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	mov	ecx, ebp
	mov	DWORD PTR [edi+28], eax
	call	?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DVertex>::Unlock
	mov	ecx, ebp
	mov	edi, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DVertex>::Set
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	edi
	push	2
	push	eax
	call	DWORD PTR [ecx+280]
	inc	DWORD PTR [esi+19684]
	mov	ecx, DWORD PTR _t$[esp+304]
	test	ecx, ecx
	je	SHORT $L139026
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR _CurrentTextureInfo$139021[esp+308]
	call	DWORD PTR [eax+76]
	jmp	$L139016
$L139026:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L139016
$L139018:
	push	0
	lea	edi, DWORD PTR [esi+675236]
	push	1
	mov	ecx, edi
	call	?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::Add
	mov	ecx, DWORD PTR [edi]
	lea	eax, DWORD PTR [eax+eax*8]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _PreviousPosition$[esp+308]
	mov	edx, eax
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _PreviousPosition$[esp+312]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _PreviousPosition$[esp+316]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR _CurrentPosition$[esp+308]
	lea	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _CurrentPosition$[esp+316]
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR _BeamStartWidth$[esp+304]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR $T139108[esp+308]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR $T139109[esp+308]
	mov	DWORD PTR [eax+32], edx
$L139016:

; 2858 : 
; 2859 : 			PreviousPosition=CurrentPosition;

	mov	eax, DWORD PTR _CurrentPosition$[esp+308]
	mov	ecx, DWORD PTR _CurrentPosition$[esp+316]

; 2860 : 			PreviousColor=CurrentColor;

	mov	edi, DWORD PTR _CurrentColor$[esp+308]
	mov	DWORD PTR _PreviousPosition$[esp+308], eax
	mov	eax, DWORD PTR _i$[esp+308]
	mov	DWORD PTR _PreviousPosition$[esp+316], ecx
	mov	ecx, DWORD PTR _LineSegments$[esp+308]
	inc	eax
	cmp	eax, ecx
	mov	DWORD PTR _PreviousPosition$[esp+312], ebx
	mov	DWORD PTR _i$[esp+308], eax
	jl	$L139117
$L123949:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 2861 : 		}
; 2862 : 	}

	add	esp, 292				; 00000124H
	ret	96					; 00000060H
?SineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z ENDP ; UD3DRenderDevice::SineWave
_TEXT	ENDS
PUBLIC	__real@4012000000000000
PUBLIC	__real@41200000
PUBLIC	?DoubleSineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z ; UD3DRenderDevice::DoubleSineWave
;	COMDAT __real@4012000000000000
; File D:\DEV\DNF2001-BUGFIX\DIRECTX8\INC\d3dx8math.inl
CONST	SEGMENT
__real@4012000000000000 DQ 04012000000000000r	; 4.5
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?DoubleSineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z
_TEXT	SEGMENT
_LineSegments$ = -224
_CurrentPosition$ = -284
_PreviousPosition$ = -252
_Distance$ = -296
_Direction$ = -236
_StepLength$ = -192
_Axis1$ = -268
_Axis2$ = -296
_CurrentColor$ = -304
_RFactor$ = -176
_GFactor$ = -184
_BFactor$ = -188
_AFactor$ = -200
_i$ = -240
_OriginalMaxAmplitude$123995 = -180
$T139375 = -256
_CurrentTextureInfo$139451 = -128
$T139465 = -256
$T139468 = -300
$T139469 = -308
_c$ = -196
_t$ = 8
_BeamColor$ = 12
_BeamEndColor$ = 16
_BeamStartWidth$ = 20
_BeamEndWidth$ = 24
_PolyFlags$ = 28
_MaxAmplitude$ = 32
_MaxFrequency$ = 36
_Noise$ = 40
_TimeSeconds$ = 44
_LineStart$ = 48
_LineEnd$ = 60
_depth$ = 96
_TimeScale$ = 100
$T139125 = -140
$T139126 = -212
$T139127 = -160
$T139129 = -172
?DoubleSineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z PROC NEAR ; UD3DRenderDevice::DoubleSineWave, COMDAT
; _this$ = ecx
; _c$ = edx

; 2865 : 	{

	sub	esp, 308				; 00000134H

; 2866 : 		int LineSegments=((int)appPow(2,depth))+1;

	fld	QWORD PTR __real@4000000000000000
	push	ebx
	fild	DWORD PTR _depth$[esp+308]
	push	ebp
	push	esi
	push	edi
	mov	DWORD PTR _c$[esp+324], edx
	mov	esi, ecx
	call	__CIpow
	call	__ftol

; 2867 : 		FVector CurrentPosition=LineStart;
; 2868 : 		FVector PreviousPosition=CurrentPosition;
; 2869 : 		FVector Distance=LineEnd-LineStart;

	fld	DWORD PTR _LineEnd$[esp+320]
	fsub	DWORD PTR _LineStart$[esp+320]
	mov	ecx, DWORD PTR _LineStart$[esp+324]
	mov	edx, DWORD PTR _LineStart$[esp+328]
	mov	ebp, eax
	fstp	DWORD PTR _Distance$[esp+324]
	fld	DWORD PTR _LineEnd$[esp+324]
	mov	eax, DWORD PTR _LineStart$[esp+320]
	fsub	DWORD PTR _LineStart$[esp+324]
	mov	DWORD PTR _PreviousPosition$[esp+324], eax

; 2870 : 		FVector Direction=Distance;

	mov	eax, DWORD PTR _Distance$[esp+324]
	mov	DWORD PTR _Direction$[esp+324], eax
	fstp	DWORD PTR _Distance$[esp+328]
	fld	DWORD PTR _LineEnd$[esp+328]
	inc	ebp
	fsub	DWORD PTR _LineStart$[esp+328]
	mov	DWORD PTR _PreviousPosition$[esp+328], ecx
	mov	ecx, DWORD PTR _Distance$[esp+328]
	mov	DWORD PTR _PreviousPosition$[esp+332], edx
	fstp	DWORD PTR _Distance$[esp+332]

; 2871 : 		Direction.Normalize();

	fld	DWORD PTR _Distance$[esp+332]
	mov	edx, DWORD PTR _Distance$[esp+332]
	fmul	DWORD PTR _Distance$[esp+332]
	mov	DWORD PTR _LineSegments$[esp+324], ebp
	fld	DWORD PTR _Distance$[esp+328]
	mov	DWORD PTR _Direction$[esp+328], ecx
	fmul	DWORD PTR _Distance$[esp+328]
	mov	DWORD PTR _Direction$[esp+332], edx
	fld	DWORD PTR _Distance$[esp+324]
	fmul	DWORD PTR _Distance$[esp+324]
	fld	ST(2)
	fadd	ST(0), ST(1)
	fadd	ST(0), ST(2)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L139480
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Distance$[esp+324]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+324]
	fld	DWORD PTR _Direction$[esp+328]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+328]
	fld	DWORD PTR _Direction$[esp+332]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+332]
$L139480:
	fstp	ST(0)

; 2872 : 		FLOAT Length=Distance.Size();
; 2873 : 		FLOAT StepLength=Length/LineSegments;
; 2874 : 
; 2875 : 		FVector Axis1, Axis2;
; 2876 : 		Direction.FindBestAxisVectors(Axis1,Axis2);

	lea	eax, DWORD PTR _Axis2$[esp+324]

; 2877 : 		Axis1.Normalize();
; 2878 : 		Axis2.Normalize();
; 2879 : 
; 2880 : 		FColor PreviousColor=BeamColor,
; 2881 : 			   CurrentColor=BeamColor;
; 2882 : 
; 2883 : 		FLOAT RFactor=(((FLOAT)(BeamEndColor.R-BeamColor.R))/(FLOAT)LineSegments);
; 2884 : 		FLOAT GFactor=(((FLOAT)(BeamEndColor.G-BeamColor.G))/(FLOAT)LineSegments);
; 2885 : 		FLOAT BFactor=(((FLOAT)(BeamEndColor.B-BeamColor.B))/(FLOAT)LineSegments);
; 2886 : 		FLOAT AFactor=(((FLOAT)(BeamEndColor.A-BeamColor.A))/(FLOAT)LineSegments);
; 2887 : 
; 2888 : 		for(int i=0;i<LineSegments;i++)

	fild	DWORD PTR _LineSegments$[esp+324]
	push	eax
	lea	ecx, DWORD PTR _Axis1$[esp+328]
	push	ecx
	fstp	DWORD PTR -272+[esp+332]
	lea	ecx, DWORD PTR _Direction$[esp+332]
	fxch	ST(2)
	fadd	ST(0), ST(2)
	fadd	ST(0), ST(1)
	fsqrt
	fstp	ST(2)
	fstp	ST(0)
	fdiv	DWORD PTR -272+[esp+332]
	fstp	DWORD PTR _StepLength$[esp+332]
	call	DWORD PTR __imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z
	fld	DWORD PTR _Axis1$[esp+332]
	fmul	DWORD PTR _Axis1$[esp+332]
	fld	DWORD PTR _Axis1$[esp+328]
	fmul	DWORD PTR _Axis1$[esp+328]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis1$[esp+324]
	fmul	DWORD PTR _Axis1$[esp+324]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L139476
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis1$[esp+324]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+324]
	fld	DWORD PTR _Axis1$[esp+328]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+328]
	fld	DWORD PTR _Axis1$[esp+332]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+332]
$L139476:
	fstp	ST(0)
	fld	DWORD PTR _Axis2$[esp+332]
	fmul	DWORD PTR _Axis2$[esp+332]
	fld	DWORD PTR _Axis2$[esp+328]
	fmul	DWORD PTR _Axis2$[esp+328]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis2$[esp+324]
	fmul	DWORD PTR _Axis2$[esp+324]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L139479
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis2$[esp+324]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+324]
	fld	DWORD PTR _Axis2$[esp+328]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+328]
	fld	DWORD PTR _Axis2$[esp+332]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+332]
$L139479:
	mov	ebx, DWORD PTR _BeamColor$[esp+320]
	fstp	ST(0)
	mov	eax, DWORD PTR _BeamEndColor$[esp+320]
	xor	edx, edx
	xor	ecx, ecx
	mov	cl, al
	mov	dl, bl
	movzx	eax, ah
	mov	edi, ebx
	mov	DWORD PTR _i$[esp+324], 0
	sub	ecx, edx
	mov	DWORD PTR -308+[esp+324], ecx
	fild	DWORD PTR -308+[esp+324]
	xor	edx, edx
	mov	dl, bh
	fdiv	DWORD PTR -272+[esp+324]
	xor	ecx, ecx
	sub	eax, edx
	mov	DWORD PTR -308+[esp+324], eax
	mov	ax, WORD PTR _BeamColor$[esp+322]
	movzx	edx, BYTE PTR _BeamEndColor$[esp+322]
	mov	cl, al
	movzx	eax, ah
	sub	edx, ecx
	movzx	ecx, BYTE PTR _BeamEndColor$[esp+323]
	sub	ecx, eax
	test	ebp, ebp
	fstp	DWORD PTR _RFactor$[esp+324]
	fild	DWORD PTR -308+[esp+324]
	mov	DWORD PTR -308+[esp+324], edx
	fdiv	DWORD PTR -272+[esp+324]
	fstp	DWORD PTR _GFactor$[esp+324]
	fild	DWORD PTR -308+[esp+324]
	mov	DWORD PTR -308+[esp+324], ecx
	fdiv	DWORD PTR -272+[esp+324]
	fstp	DWORD PTR _BFactor$[esp+324]
	fild	DWORD PTR -308+[esp+324]
	fdiv	DWORD PTR -272+[esp+324]
	fstp	DWORD PTR _AFactor$[esp+324]
	jle	$L123991
	fld	DWORD PTR _TimeSeconds$[esp+320]
	fmul	QWORD PTR __real@4012000000000000
	fstp	QWORD PTR -148+[esp+324]
	fld	DWORD PTR _TimeSeconds$[esp+320]
	fmul	DWORD PTR _TimeScale$[esp+320]
	fmul	DWORD PTR __real@41500000
	fstp	DWORD PTR -216+[esp+324]
	fld	DWORD PTR _Noise$[esp+320]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR -220+[esp+324]

; 2905 : 
; 2906 : 			// Draw the line:
; 2907 : 			dnDraw3DLine(c->Frame,t,PolyFlags,PreviousPosition,CurrentPosition,BeamStartWidth,BeamEndWidth,PreviousColor,CurrentColor,true);

	jmp	SHORT $L123989
$L139477:
	mov	ebx, DWORD PTR _BeamColor$[esp+320]

; 2911 : 		}
; 2912 : 	}

	npad	3
$L123989:

; 2889 : 		{
; 2890 : 			FLOAT LengthToHere=(i*StepLength);

	fild	DWORD PTR _i$[esp+324]

; 2891 : 			CurrentPosition=LineStart+(LengthToHere*Direction);
; 2892 : 			
; 2893 : 			FLOAT OriginalMaxAmplitude=MaxAmplitude;
; 2894 : 			MaxAmplitude*=appSin(((FLOAT)i/(FLOAT)LineSegments)*10+TimeSeconds*4.5);
; 2895 : 			CurrentPosition+=(Axis1*(appSin(TimeSeconds*13*TimeScale+LengthToHere*MaxFrequency+appFrand()*Noise-(Noise/2))*MaxAmplitude));

	mov	ebp, DWORD PTR __imp__rand
	fst	DWORD PTR -300+[esp+324]
	fmul	DWORD PTR _StepLength$[esp+324]
	fld	DWORD PTR _Direction$[esp+324]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Direction$[esp+328]
	fmul	ST(0), ST(2)
	fld	DWORD PTR _Direction$[esp+332]
	fmul	ST(0), ST(3)
	fstp	DWORD PTR $T139125[esp+332]
	fxch	ST(1)
	fadd	DWORD PTR _LineStart$[esp+320]
	fstp	DWORD PTR $T139126[esp+324]
	mov	edx, DWORD PTR $T139126[esp+324]
	fadd	DWORD PTR _LineStart$[esp+324]
	mov	DWORD PTR _CurrentPosition$[esp+324], edx
	mov	edx, DWORD PTR _MaxAmplitude$[esp+320]
	mov	DWORD PTR _OriginalMaxAmplitude$123995[esp+324], edx
	fstp	DWORD PTR $T139126[esp+328]
	fld	DWORD PTR $T139125[esp+332]
	mov	eax, DWORD PTR $T139126[esp+328]
	fadd	DWORD PTR _LineStart$[esp+328]
	mov	DWORD PTR _CurrentPosition$[esp+328], eax
	fstp	DWORD PTR $T139126[esp+332]
	fld	DWORD PTR -300+[esp+324]
	mov	ecx, DWORD PTR $T139126[esp+332]
	fdiv	DWORD PTR -272+[esp+324]
	mov	DWORD PTR _CurrentPosition$[esp+332], ecx
	fmul	DWORD PTR __real@41200000
	fadd	QWORD PTR -148+[esp+324]
	fsin
	fmul	DWORD PTR _MaxAmplitude$[esp+320]
	fstp	DWORD PTR _MaxAmplitude$[esp+320]
	fmul	DWORD PTR _MaxFrequency$[esp+320]
	fstp	DWORD PTR -304+[esp+324]
	call	ebp
	mov	DWORD PTR -308+[esp+324], eax
	fild	DWORD PTR -308+[esp+324]
	fmul	DWORD PTR _Noise$[esp+320]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -216+[esp+324]
	fadd	DWORD PTR -304+[esp+324]
	fsub	DWORD PTR -220+[esp+324]
	fsin
	fmul	DWORD PTR _MaxAmplitude$[esp+320]
	fld	DWORD PTR _Axis1$[esp+324]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Axis1$[esp+328]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T139127[esp+328]
	fld	DWORD PTR _Axis1$[esp+332]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T139127[esp+332]
	fadd	DWORD PTR $T139126[esp+324]
	fstp	DWORD PTR _CurrentPosition$[esp+324]
	fstp	ST(0)
	fld	DWORD PTR _CurrentPosition$[esp+328]
	fadd	DWORD PTR $T139127[esp+328]
	fstp	DWORD PTR _CurrentPosition$[esp+328]
	fld	DWORD PTR _CurrentPosition$[esp+332]
	fadd	DWORD PTR $T139127[esp+332]
	fstp	DWORD PTR _CurrentPosition$[esp+332]

; 2896 : 			CurrentPosition+=(Axis2*(appCos(TimeSeconds*13*TimeScale+LengthToHere*MaxFrequency+appFrand()*Noise-(Noise/2))*MaxAmplitude));

	call	ebp
	mov	DWORD PTR -308+[esp+324], eax
	fild	DWORD PTR -308+[esp+324]
	fmul	DWORD PTR _Noise$[esp+320]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -216+[esp+324]

; 2897 : 			MaxAmplitude=OriginalMaxAmplitude;

	mov	eax, DWORD PTR _OriginalMaxAmplitude$123995[esp+324]
	fadd	DWORD PTR -304+[esp+324]

; 2898 : 
; 2899 : 			// Compute current color:
; 2900 : 			CurrentColor=BeamColor;

	mov	DWORD PTR _CurrentColor$[esp+324], ebx
	fsub	DWORD PTR -220+[esp+324]
	fcos
	fmul	DWORD PTR _MaxAmplitude$[esp+320]
	fld	DWORD PTR _Axis2$[esp+324]
	mov	DWORD PTR _MaxAmplitude$[esp+320], eax
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Axis2$[esp+328]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T139129[esp+328]
	fld	DWORD PTR _Axis2$[esp+332]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T139129[esp+332]
	fadd	DWORD PTR _CurrentPosition$[esp+324]
	fstp	DWORD PTR _CurrentPosition$[esp+324]
	fstp	ST(0)
	fld	DWORD PTR _CurrentPosition$[esp+328]
	fadd	DWORD PTR $T139129[esp+328]
	fstp	DWORD PTR _CurrentPosition$[esp+328]
	fld	DWORD PTR _CurrentPosition$[esp+332]
	fadd	DWORD PTR $T139129[esp+332]
	fstp	DWORD PTR _CurrentPosition$[esp+332]

; 2901 : 			CurrentColor.R+=(int)(RFactor*i);

	fld	DWORD PTR -300+[esp+324]
	fmul	DWORD PTR _RFactor$[esp+324]
	call	__ftol

; 2902 : 			CurrentColor.G+=(int)(GFactor*i);

	fld	DWORD PTR -300+[esp+324]
	fmul	DWORD PTR _GFactor$[esp+324]
	add	al, bl
	mov	BYTE PTR _CurrentColor$[esp+324], al
	call	__ftol

; 2903 : 			CurrentColor.B+=(int)(BFactor*i);

	fld	DWORD PTR -300+[esp+324]
	mov	bl, BYTE PTR _CurrentColor$[esp+325]
	fmul	DWORD PTR _BFactor$[esp+324]
	add	bl, al
	mov	BYTE PTR _CurrentColor$[esp+325], bl
	call	__ftol

; 2904 : 			CurrentColor.A+=(int)(AFactor*i);

	fld	DWORD PTR -300+[esp+324]
	mov	dl, BYTE PTR _CurrentColor$[esp+326]
	fmul	DWORD PTR _AFactor$[esp+324]
	add	dl, al
	mov	BYTE PTR _CurrentColor$[esp+326], dl
	call	__ftol
	mov	cl, BYTE PTR _CurrentColor$[esp+327]

; 2905 : 
; 2906 : 			// Draw the line:
; 2907 : 			dnDraw3DLine(c->Frame,t,PolyFlags,PreviousPosition,CurrentPosition,BeamStartWidth,BeamEndWidth,PreviousColor,CurrentColor,true);

	mov	edx, DWORD PTR _c$[esp+324]
	mov	ebx, DWORD PTR _CurrentPosition$[esp+328]
	add	cl, al
	mov	eax, DWORD PTR [edx+124]
	mov	DWORD PTR $T139465[esp+324], eax
	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	test	eax, eax
	mov	BYTE PTR _CurrentColor$[esp+327], cl
	mov	ecx, DWORD PTR _CurrentColor$[esp+324]
	mov	DWORD PTR $T139469[esp+324], ecx
	mov	DWORD PTR $T139468[esp+324], edi
	je	$L139446
	fld	DWORD PTR _BeamStartWidth$[esp+320]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L139448
	fld	DWORD PTR _BeamEndWidth$[esp+320]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L139448
	mov	ebp, DWORD PTR _t$[esp+320]
	test	ebp, ebp
	mov	edi, 2
	je	SHORT $L139450
	mov	edi, DWORD PTR [ebp+196]
	or	edi, 2
$L139450:
	mov	edx, DWORD PTR _PolyFlags$[esp+320]
	push	edi
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	push	1098907648				; 41800000H
	push	0
	push	0
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [esi+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L139394
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L139478
$L139394:
	mov	eax, DWORD PTR [esi+19124]
	fst	DWORD PTR [esi+675164]
	mov	ebp, DWORD PTR [eax]
	call	__ftol
	push	eax
	mov	eax, DWORD PTR [esi+19124]
	push	47					; 0000002fH
	push	eax
	call	DWORD PTR [ebp+200]
	mov	ebp, DWORD PTR _t$[esp+320]
	jmp	SHORT $L139393
$L139478:
	fstp	ST(0)
$L139393:
	test	ebp, ebp
	je	SHORT $L139452
	mov	ecx, DWORD PTR $T139465[esp+324]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+172]
	mov	edx, DWORD PTR [edx+168]
	mov	eax, DWORD PTR [ebp]
	push	esi
	push	-1
	push	ecx
	push	edx
	lea	edx, DWORD PTR _CurrentTextureInfo$139451[esp+340]
	mov	ecx, ebp
	call	DWORD PTR [eax+72]
	mov	eax, DWORD PTR _PolyFlags$[esp+320]
	push	0
	push	edi
	push	0
	push	eax
	lea	ecx, DWORD PTR _CurrentTextureInfo$139451[esp+340]
	push	ecx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	jmp	SHORT $L139453
$L139452:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L139453:
	push	-1
	lea	ebp, DWORD PTR [esi+16720]
	push	2
	mov	ecx, ebp
	call	?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ; FD3DVertexBuffer<FD3DVertex>::Lock
	mov	ecx, DWORD PTR _PreviousPosition$[esp+328]
	mov	edi, eax
	mov	eax, DWORD PTR _PreviousPosition$[esp+324]
	mov	edx, edi
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _PreviousPosition$[esp+332]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR $T139468[esp+324]
	xor	ecx, ecx
	mov	cl, BYTE PTR $T139468[esp+326]
	mov	edx, eax
	and	edx, 255				; 000000ffH
	and	eax, 65280				; 0000ff00H
	shl	edx, 16					; 00000010H
	add	ecx, edx
	mov	edx, DWORD PTR _CurrentPosition$[esp+332]
	add	ecx, eax
	mov	DWORD PTR [edi+12], ecx
	mov	ecx, DWORD PTR _CurrentPosition$[esp+324]
	lea	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T139469[esp+324]
	lea	ecx, DWORD PTR $T139375[esp+324]
	mov	DWORD PTR $T139375[esp+324], eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	mov	ecx, ebp
	mov	DWORD PTR [edi+28], eax
	call	?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DVertex>::Unlock
	mov	ecx, ebp
	mov	edi, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DVertex>::Set
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	edi
	push	2
	push	eax
	call	DWORD PTR [ecx+280]
	inc	DWORD PTR [esi+19684]
	mov	ecx, DWORD PTR _t$[esp+320]
	test	ecx, ecx
	je	SHORT $L139456
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR _CurrentTextureInfo$139451[esp+324]
	call	DWORD PTR [eax+76]
	jmp	$L139446
$L139456:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L139446
$L139448:
	push	0
	lea	edi, DWORD PTR [esi+675236]
	push	1
	mov	ecx, edi
	call	?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::Add
	mov	ecx, DWORD PTR [edi]
	lea	eax, DWORD PTR [eax+eax*8]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _PreviousPosition$[esp+324]
	mov	edx, eax
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _PreviousPosition$[esp+328]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _PreviousPosition$[esp+332]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR _CurrentPosition$[esp+324]
	lea	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _CurrentPosition$[esp+332]
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR _BeamStartWidth$[esp+320]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR $T139468[esp+324]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR $T139469[esp+324]
	mov	DWORD PTR [eax+32], edx
$L139446:

; 2908 : 
; 2909 : 			PreviousPosition=CurrentPosition;

	mov	eax, DWORD PTR _CurrentPosition$[esp+324]
	mov	ecx, DWORD PTR _CurrentPosition$[esp+332]

; 2910 : 			PreviousColor=CurrentColor;

	mov	edi, DWORD PTR _CurrentColor$[esp+324]
	mov	DWORD PTR _PreviousPosition$[esp+324], eax
	mov	eax, DWORD PTR _i$[esp+324]
	mov	DWORD PTR _PreviousPosition$[esp+332], ecx
	mov	ecx, DWORD PTR _LineSegments$[esp+324]
	inc	eax
	cmp	eax, ecx
	mov	DWORD PTR _PreviousPosition$[esp+328], ebx
	mov	DWORD PTR _i$[esp+324], eax
	jl	$L139477
$L123991:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 2911 : 		}
; 2912 : 	}

	add	esp, 308				; 00000134H
	ret	96					; 00000060H
?DoubleSineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z ENDP ; UD3DRenderDevice::DoubleSineWave
_TEXT	ENDS
PUBLIC	__real@41000000
PUBLIC	?SamplePoint@UD3DRenderDevice@@QAIMHHMMMM@Z	; UD3DRenderDevice::SamplePoint
;	COMDAT __real@41000000
; File ..\..\Core\Inc\UnFile.h
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?SamplePoint@UD3DRenderDevice@@QAIMHHMMMM@Z
_TEXT	SEGMENT
_x$ = -4
_MaxAmplitude$ = 12
_MaxFrequency$ = 16
_TimeSeconds$ = 24
?SamplePoint@UD3DRenderDevice@@QAIMHHMMMM@Z PROC NEAR	; UD3DRenderDevice::SamplePoint, COMDAT
; _this$ = ecx
; _x$ = edx

; 2915 : 	{

	push	ecx

; 2916 : 		VALIDATE;
; 2917 : 
; 2918 : 		FLOAT value=0;
; 2919 : 		
; 2920 : 		MaxFrequency*=8;

	fld	DWORD PTR _MaxFrequency$[esp]
	mov	DWORD PTR _x$[esp+4], edx
	fmul	DWORD PTR __real@41000000

; 2921 : 		value+=appSin(TimeSeconds*8+x*MaxFrequency)*MaxAmplitude;
; 2922 : 		
; 2923 : 		return value;

	fimul	DWORD PTR _x$[esp+4]
	fld	DWORD PTR _TimeSeconds$[esp]
	fmul	DWORD PTR __real@41000000
	faddp	ST(1), ST(0)
	fsin
	fmul	DWORD PTR _MaxAmplitude$[esp]

; 2924 : 	}

	pop	ecx
	ret	20					; 00000014H
?SamplePoint@UD3DRenderDevice@@QAIMHHMMMM@Z ENDP	; UD3DRenderDevice::SamplePoint
_TEXT	ENDS
PUBLIC	?MovingGrid@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@3H@Z ; UD3DRenderDevice::MovingGrid
PUBLIC	?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z ; UD3DRenderDevice::QueuedParticleAlloc
PUBLIC	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine
; Function compile flags: /Ogty
;	COMDAT ?MovingGrid@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@3H@Z
_TEXT	SEGMENT
_AxisZ$ = -424
_LengthIncrement$ = -484
_AxisX$ = -436
_AxisY$ = -412
_AxisXIncrement$ = -356
_AxisYIncrement$ = -384
_x$ = -484
_CurrentLocation$124025 = -448
_y$124030 = -464
_A$124034 = -460
_B$124036 = -396
_B$124039 = -260
$T139493 = -248
$T139494 = -140
$T139495 = -280
_c$ = -344
_t$ = 8
_BeamColor$ = 12
_BeamEndColor$ = 16
_BeamStartWidth$ = 20
_BeamEndWidth$ = 24
_PolyFlags$ = 28
_MaxAmplitude$ = 32
_MaxFrequency$ = 36
_Noise$ = 40
_TimeSeconds$ = 44
_LineStart$ = 48
_LineEnd$ = 60
_Tesselation$ = 72
_CurrentTextureInfo$139761 = -128
_dwDiffuseEnd$139773 = -468
_UpVector$139774 = -480
$T139776 = -468
$T139777 = -468
$T139778 = -340
$T139779 = -328
$T139780 = -152
$T139781 = -212
$T139782 = -304
$T139783 = -164
$T139784 = -188
$T139785 = -296
$T139786 = -236
$T139787 = -224
$T139788 = -268
$T139789 = -200
$T139790 = -176
$T139791 = -288
$T139840 = -468
$T139843 = -368
$T139844 = -400
?MovingGrid@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@3H@Z PROC NEAR ; UD3DRenderDevice::MovingGrid, COMDAT
; _this$ = ecx
; _c$ = edx

; 2927 : 	{

	sub	esp, 484				; 000001e4H

; 2928 : 		VALIDATE;
; 2929 : 
; 2930 : 		FVector AxisZ=LineEnd-LineStart;

	fld	DWORD PTR _LineEnd$[esp+480]
	push	ebx
	fsub	DWORD PTR _LineStart$[esp+484]
	push	ebp
	push	esi
	push	edi
	fstp	DWORD PTR _AxisZ$[esp+500]
	fld	DWORD PTR _LineEnd$[esp+500]
	mov	DWORD PTR _c$[esp+500], edx
	fsub	DWORD PTR _LineStart$[esp+500]
	mov	ebx, ecx
	fstp	DWORD PTR _AxisZ$[esp+504]
	fld	DWORD PTR _LineEnd$[esp+504]
	fsub	DWORD PTR _LineStart$[esp+504]
	fst	DWORD PTR _AxisZ$[esp+508]

; 2931 : 		FLOAT Length=AxisZ.Size();

	fmul	DWORD PTR _AxisZ$[esp+508]
	fld	DWORD PTR _AxisZ$[esp+504]
	fmul	DWORD PTR _AxisZ$[esp+504]

; 2932 : 		FLOAT LengthIncrement=Length/Tesselation;
; 2933 : 		AxisZ.Normalize();
; 2934 : 
; 2935 : 		FVector AxisX, AxisY;
; 2936 : 		AxisZ.FindBestAxisVectors( AxisX, AxisY );
; 2937 : 		AxisX.Normalize();
; 2938 : 		AxisY.Normalize();
; 2939 : 
; 2940 : 		FVector AxisXIncrement=AxisX*LengthIncrement;
; 2941 : 		FVector AxisYIncrement=AxisY*LengthIncrement;
; 2942 : 		for(INT x=0;x<Tesselation;x++)

	faddp	ST(1), ST(0)
	fld	DWORD PTR _AxisZ$[esp+500]
	fmul	DWORD PTR _AxisZ$[esp+500]
	faddp	ST(1), ST(0)
	fild	DWORD PTR _Tesselation$[esp+496]
	fstp	DWORD PTR -464+[esp+500]
	fld	ST(0)
	fsqrt
	fdiv	DWORD PTR -464+[esp+500]
	fstp	DWORD PTR _LengthIncrement$[esp+500]
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L139858
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _AxisZ$[esp+500]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisZ$[esp+500]
	fld	DWORD PTR _AxisZ$[esp+504]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisZ$[esp+504]
	fld	DWORD PTR _AxisZ$[esp+508]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisZ$[esp+508]
$L139858:
	lea	eax, DWORD PTR _AxisY$[esp+500]
	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _AxisX$[esp+504]
	push	ecx
	lea	ecx, DWORD PTR _AxisZ$[esp+508]
	call	DWORD PTR __imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z
	fld	DWORD PTR _AxisX$[esp+508]
	fmul	DWORD PTR _AxisX$[esp+508]
	fld	DWORD PTR _AxisX$[esp+504]
	fmul	DWORD PTR _AxisX$[esp+504]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _AxisX$[esp+500]
	fmul	DWORD PTR _AxisX$[esp+500]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L139855
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _AxisX$[esp+500]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisX$[esp+500]
	fld	DWORD PTR _AxisX$[esp+504]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisX$[esp+504]
	fld	DWORD PTR _AxisX$[esp+508]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisX$[esp+508]
$L139855:
	fstp	ST(0)
	fld	DWORD PTR _AxisY$[esp+508]
	fmul	DWORD PTR _AxisY$[esp+508]
	fld	DWORD PTR _AxisY$[esp+504]
	fmul	DWORD PTR _AxisY$[esp+504]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _AxisY$[esp+500]
	fmul	DWORD PTR _AxisY$[esp+500]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L139857
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _AxisY$[esp+500]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisY$[esp+500]
	fld	DWORD PTR _AxisY$[esp+504]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisY$[esp+504]
	fld	DWORD PTR _AxisY$[esp+508]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisY$[esp+508]
$L139857:
	fstp	ST(0)
	mov	edi, DWORD PTR _Tesselation$[esp+496]
	fld	DWORD PTR _AxisX$[esp+500]
	xor	esi, esi
	test	edi, edi
	fmul	DWORD PTR _LengthIncrement$[esp+500]
	fstp	DWORD PTR _AxisXIncrement$[esp+500]
	fld	DWORD PTR _AxisX$[esp+504]
	fmul	DWORD PTR _LengthIncrement$[esp+500]
	fstp	DWORD PTR _AxisXIncrement$[esp+504]
	fld	DWORD PTR _AxisX$[esp+508]
	fmul	DWORD PTR _LengthIncrement$[esp+500]
	fstp	DWORD PTR _AxisXIncrement$[esp+508]
	fld	DWORD PTR _AxisY$[esp+500]
	fmul	DWORD PTR _LengthIncrement$[esp+500]
	fstp	DWORD PTR _AxisYIncrement$[esp+500]
	fld	DWORD PTR _AxisY$[esp+504]
	fmul	DWORD PTR _LengthIncrement$[esp+500]
	fstp	DWORD PTR _AxisYIncrement$[esp+504]
	fld	DWORD PTR _AxisY$[esp+508]
	fmul	DWORD PTR _LengthIncrement$[esp+500]
	mov	DWORD PTR _x$[esp+500], esi
	fstp	DWORD PTR _AxisYIncrement$[esp+508]
	jle	$L124024
	fld	DWORD PTR -464+[esp+500]
	dec	edi
	fmul	DWORD PTR __real@3f000000
	fst	DWORD PTR -360+[esp+500]

; 2943 : 		{
; 2944 : 			FVector CurrentLocation=LineStart+(AxisXIncrement*(x-Tesselation/2.0f))-(AxisYIncrement*(Tesselation/2.0f));

	fld	DWORD PTR _AxisYIncrement$[esp+500]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T139495[esp+500]
	fld	DWORD PTR _AxisYIncrement$[esp+504]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T139495[esp+504]
	fld	DWORD PTR _AxisYIncrement$[esp+508]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T139495[esp+508]
	fstp	ST(0)
	fld	DWORD PTR _MaxFrequency$[esp+496]
	fmul	DWORD PTR __real@41000000
	fstp	DWORD PTR -364+[esp+500]
	fld	DWORD PTR _TimeSeconds$[esp+496]
	fmul	DWORD PTR __real@41000000
	fstp	DWORD PTR -372+[esp+500]
	fld	DWORD PTR _MaxAmplitude$[esp+496]
	fstp	QWORD PTR -312+[esp+500]

; 2964 : 			}
; 2965 : 		}
; 2966 : 	}

	npad	6

; 2943 : 		{
; 2944 : 			FVector CurrentLocation=LineStart+(AxisXIncrement*(x-Tesselation/2.0f))-(AxisYIncrement*(Tesselation/2.0f));

$L124022:
	fild	DWORD PTR _x$[esp+500]

; 2945 : 			for(INT y=0;y<Tesselation;y++)

	mov	DWORD PTR _y$124030[esp+500], 0
	fld	DWORD PTR -360+[esp+500]
	fsubr	ST(0), ST(1)
	fld	DWORD PTR _AxisXIncrement$[esp+500]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _AxisXIncrement$[esp+504]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T139493[esp+504]
	fld	DWORD PTR _AxisXIncrement$[esp+508]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T139493[esp+508]
	fadd	DWORD PTR _LineStart$[esp+496]
	fstp	ST(1)
	fld	DWORD PTR $T139493[esp+504]
	fadd	DWORD PTR _LineStart$[esp+500]
	fld	DWORD PTR $T139493[esp+508]
	fadd	DWORD PTR _LineStart$[esp+504]
	fstp	DWORD PTR $T139494[esp+508]
	fxch	ST(1)
	fsub	DWORD PTR $T139495[esp+500]
	fstp	DWORD PTR _CurrentLocation$124025[esp+500]
	fsub	DWORD PTR $T139495[esp+504]
	fstp	DWORD PTR _CurrentLocation$124025[esp+504]
	fld	DWORD PTR $T139494[esp+508]
	fsub	DWORD PTR $T139495[esp+508]
	fstp	DWORD PTR _CurrentLocation$124025[esp+508]
	fld	DWORD PTR -364+[esp+500]
	fmul	ST(0), ST(1)
	fadd	DWORD PTR -372+[esp+500]

; 2946 : 			{
; 2947 : 				FVector A=CurrentLocation;
; 2948 : 				A.Z+=SamplePoint(x,y,MaxAmplitude, MaxFrequency, Noise, TimeSeconds);

	fsin
	fmul	QWORD PTR -312+[esp+500]
	fstp	DWORD PTR -316+[esp+500]

; 2949 : 
; 2950 : 				// Connect this point to it's four neighbors:
; 2951 : 				if(x!=Tesselation-1) 
; 2952 : 				{
; 2953 : 					FVector B=CurrentLocation+AxisXIncrement;
; 2954 : 					B.Z+=SamplePoint(x+1,y,MaxAmplitude, MaxFrequency, Noise,TimeSeconds);
; 2955 : 					dnDraw3DLine(c->Frame,t,PolyFlags,A,B,BeamStartWidth,BeamEndWidth,BeamColor,BeamEndColor);

	fstp	ST(0)
$L124031:
	cmp	esi, edi
	fld	DWORD PTR _CurrentLocation$124025[esp+508]
	fadd	DWORD PTR -316+[esp+500]
	mov	ecx, DWORD PTR _CurrentLocation$124025[esp+508]
	mov	edx, DWORD PTR _CurrentLocation$124025[esp+500]
	mov	eax, DWORD PTR _CurrentLocation$124025[esp+504]
	mov	DWORD PTR _A$124034[esp+508], ecx
	fstp	DWORD PTR _A$124034[esp+508]
	mov	DWORD PTR _A$124034[esp+500], edx
	mov	DWORD PTR _A$124034[esp+504], eax
	je	$L139860
	fld	DWORD PTR _CurrentLocation$124025[esp+500]
	lea	edx, DWORD PTR [esi+1]
	fadd	DWORD PTR _AxisXIncrement$[esp+500]
	mov	DWORD PTR -400+[esp+500], edx
	mov	eax, DWORD PTR _BeamEndColor$[esp+496]
	mov	edx, DWORD PTR _c$[esp+500]
	fstp	DWORD PTR _B$124036[esp+500]
	fld	DWORD PTR _CurrentLocation$124025[esp+504]
	mov	ecx, DWORD PTR _BeamColor$[esp+496]
	fadd	DWORD PTR _AxisXIncrement$[esp+504]
	mov	DWORD PTR $T139843[esp+500], ecx
	fstp	DWORD PTR _B$124036[esp+504]
	fld	DWORD PTR _MaxAmplitude$[esp+496]
	fstp	QWORD PTR -312+[esp+500]
	fild	DWORD PTR -400+[esp+500]
	mov	DWORD PTR $T139844[esp+500], eax
	mov	eax, DWORD PTR [edx+124]
	mov	DWORD PTR $T139840[esp+500], eax
	fmul	DWORD PTR -364+[esp+500]
	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	test	eax, eax
	fadd	DWORD PTR -372+[esp+500]
	fsin
	fmul	QWORD PTR -312+[esp+500]
	fld	DWORD PTR _CurrentLocation$124025[esp+508]
	fadd	DWORD PTR _AxisXIncrement$[esp+508]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _B$124036[esp+508]
	je	$L139860
	fld	DWORD PTR _BeamStartWidth$[esp+496]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L139758
	fld	DWORD PTR _BeamEndWidth$[esp+496]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L139758
	mov	ebp, DWORD PTR _t$[esp+496]
	test	ebp, ebp
	mov	esi, 2
	je	SHORT $L139760
	mov	esi, DWORD PTR [ebp+196]
	or	esi, 2
$L139760:
	mov	edi, DWORD PTR _PolyFlags$[esp+496]
	push	esi
	mov	edx, edi
	mov	ecx, ebx
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	push	0
	mov	ecx, ebx
	call	?SetZBias@UD3DRenderDevice@@QAIMM@Z	; UD3DRenderDevice::SetZBias
	fstp	ST(0)
	test	ebp, ebp
	je	SHORT $L139762
	mov	ecx, DWORD PTR $T139840[esp+500]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+172]
	mov	edx, DWORD PTR [edx+168]
	mov	eax, DWORD PTR [ebp]
	push	ebx
	push	-1
	push	ecx
	push	edx
	lea	edx, DWORD PTR _CurrentTextureInfo$139761[esp+516]
	mov	ecx, ebp
	call	DWORD PTR [eax+72]
	push	0
	push	esi
	push	0
	push	edi
	lea	eax, DWORD PTR _CurrentTextureInfo$139761[esp+516]
	push	eax
	xor	edx, edx
	mov	ecx, ebx
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	jmp	SHORT $L139763
$L139762:
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L139763:
	push	-1
	lea	edi, DWORD PTR [ebx+16720]
	push	2
	mov	ecx, edi
	call	?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ; FD3DVertexBuffer<FD3DVertex>::Lock
	mov	ecx, DWORD PTR _A$124034[esp+500]
	mov	edx, DWORD PTR _A$124034[esp+504]
	mov	esi, eax
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _A$124034[esp+508]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T139843[esp+500]
	lea	ecx, DWORD PTR $T139776[esp+500]
	mov	DWORD PTR $T139776[esp+500], edx
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	mov	ecx, DWORD PTR _B$124036[esp+500]
	mov	edx, DWORD PTR _B$124036[esp+504]
	mov	DWORD PTR [esi+12], eax
	lea	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _B$124036[esp+508]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T139844[esp+500]
	lea	ecx, DWORD PTR $T139777[esp+500]
	mov	DWORD PTR $T139777[esp+500], edx
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	mov	ecx, edi
	mov	DWORD PTR [esi+28], eax
	call	?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DVertex>::Unlock
	mov	ecx, edi
	mov	esi, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DVertex>::Set
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	esi
	push	2
	push	eax
	call	DWORD PTR [ecx+280]
	mov	ecx, DWORD PTR [ebx+19684]
	inc	ecx
	test	ebp, ebp
	mov	DWORD PTR [ebx+19684], ecx
	je	SHORT $L139766
	mov	eax, DWORD PTR [ebp]
	lea	edx, DWORD PTR _CurrentTextureInfo$139761[esp+500]
	mov	ecx, ebp
	call	DWORD PTR [eax+76]
	mov	esi, DWORD PTR _x$[esp+500]
	jmp	$L139756
$L139766:
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	esi, DWORD PTR _x$[esp+500]
	jmp	$L139756
$L139758:
	mov	eax, DWORD PTR _t$[esp+496]
	push	eax
	mov	ecx, ebx
	call	?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z ; UD3DRenderDevice::QueuedParticleAlloc
	lea	ecx, DWORD PTR $T139843[esp+500]
	mov	ebp, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	lea	ecx, DWORD PTR $T139844[esp+500]
	mov	esi, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	fld	DWORD PTR _B$124036[esp+508]
	fsub	DWORD PTR [ebx+184]
	sub	esp, 12					; 0000000cH
	mov	edi, eax
	lea	ecx, DWORD PTR $T139779[esp+512]
	fstp	DWORD PTR [esp+8]
	mov	DWORD PTR _dwDiffuseEnd$139773[esp+512], edi
	fld	DWORD PTR _B$124036[esp+516]
	fsub	DWORD PTR [ebx+180]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _B$124036[esp+512]
	fsub	DWORD PTR [ebx+176]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _A$124034[esp+508]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR [ebx+184]
	lea	ecx, DWORD PTR $T139778[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _A$124034[esp+516]
	fsub	DWORD PTR [ebx+180]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _A$124034[esp+512]
	fsub	DWORD PTR [ebx+176]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T139779[esp+504]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR $T139778[esp+512]
	lea	ecx, DWORD PTR _UpVector$139774[esp+512]
	fld	DWORD PTR $T139778[esp+516]
	fmul	DWORD PTR $T139779[esp+512]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T139778[esp+520]
	fmul	DWORD PTR $T139779[esp+512]
	fld	DWORD PTR $T139779[esp+520]
	fmul	DWORD PTR $T139778[esp+512]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T139779[esp+520]
	fmul	DWORD PTR $T139778[esp+516]
	fld	DWORD PTR $T139779[esp+516]
	fmul	DWORD PTR $T139778[esp+520]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _UpVector$139774[esp+500]
	fmul	DWORD PTR _UpVector$139774[esp+500]
	fld	DWORD PTR _UpVector$139774[esp+504]
	fmul	DWORD PTR _UpVector$139774[esp+504]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _UpVector$139774[esp+508]
	fmul	DWORD PTR _UpVector$139774[esp+508]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L139856
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _UpVector$139774[esp+500]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$139774[esp+500]
	fld	DWORD PTR _UpVector$139774[esp+504]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$139774[esp+504]
	fld	DWORD PTR _UpVector$139774[esp+508]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$139774[esp+508]
$L139856:
	fstp	ST(0)
	sub	esp, 12					; 0000000cH
	fld	DWORD PTR _UpVector$139774[esp+520]
	lea	ecx, DWORD PTR $T139780[esp+512]
	fmul	DWORD PTR _BeamStartWidth$[esp+508]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$139774[esp+516]
	fmul	DWORD PTR _BeamStartWidth$[esp+508]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$139774[esp+512]
	fmul	DWORD PTR _BeamStartWidth$[esp+508]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T139780[esp+508]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR _A$124034[esp+520]
	lea	ecx, DWORD PTR $T139781[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _A$124034[esp+516]
	fadd	DWORD PTR $T139780[esp+516]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _A$124034[esp+512]
	fadd	DWORD PTR $T139780[esp+512]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	edx, DWORD PTR $T139781[esp+500]
	mov	eax, DWORD PTR $T139781[esp+504]
	mov	ecx, ebp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR $T139781[esp+508]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ebp+12], esi
	mov	DWORD PTR $T139782[esp+500], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T139782[esp+500]
	mov	DWORD PTR $T139782[esp+504], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR $T139782[esp+504]
	mov	DWORD PTR [ebp+20], ecx
	mov	DWORD PTR [ebp+16], eax
	fld	DWORD PTR _UpVector$139774[esp+508]
	fmul	DWORD PTR _BeamStartWidth$[esp+496]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T139783[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$139774[esp+516]
	fmul	DWORD PTR _BeamStartWidth$[esp+508]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$139774[esp+512]
	fmul	DWORD PTR _BeamStartWidth$[esp+508]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _A$124034[esp+508]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T139783[esp+520]
	lea	ecx, DWORD PTR $T139784[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _A$124034[esp+516]
	fsub	DWORD PTR $T139783[esp+516]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _A$124034[esp+512]
	fsub	DWORD PTR $T139783[esp+512]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	eax, DWORD PTR $T139784[esp+500]
	mov	ecx, DWORD PTR $T139784[esp+504]
	lea	edx, DWORD PTR [ebp+24]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR $T139784[esp+508]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR $T139785[esp+500], 0
	mov	ecx, DWORD PTR $T139785[esp+500]
	mov	DWORD PTR $T139785[esp+504], 1065353216	; 3f800000H
	mov	edx, DWORD PTR $T139785[esp+504]
	mov	DWORD PTR [ebp+36], esi
	mov	DWORD PTR [ebp+40], ecx
	mov	DWORD PTR [ebp+44], edx
	fld	DWORD PTR _UpVector$139774[esp+508]
	fmul	DWORD PTR _BeamEndWidth$[esp+496]
	sub	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$139774[esp+516]
	lea	ecx, DWORD PTR $T139786[esp+512]
	fmul	DWORD PTR _BeamEndWidth$[esp+508]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$139774[esp+512]
	fmul	DWORD PTR _BeamEndWidth$[esp+508]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _B$124036[esp+508]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T139786[esp+520]
	lea	ecx, DWORD PTR $T139787[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _B$124036[esp+516]
	fsub	DWORD PTR $T139786[esp+516]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _B$124036[esp+512]
	fsub	DWORD PTR $T139786[esp+512]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	ecx, DWORD PTR $T139787[esp+500]
	mov	edx, DWORD PTR $T139787[esp+504]
	lea	esi, DWORD PTR [ebp+48]
	mov	eax, esi
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T139787[esp+508]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [ebp+60], edi
	mov	DWORD PTR $T139788[esp+500], 0
	mov	edx, DWORD PTR $T139788[esp+500]
	mov	DWORD PTR [ebp+64], edx
	mov	DWORD PTR $T139788[esp+504], 0
	mov	eax, DWORD PTR $T139788[esp+504]
	mov	DWORD PTR [ebp+68], eax
	lea	edi, DWORD PTR [ebp+72]
	mov	ecx, 6
	rep movsd
	fld	DWORD PTR _UpVector$139774[esp+508]
	fmul	DWORD PTR _BeamEndWidth$[esp+496]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T139789[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$139774[esp+516]
	fmul	DWORD PTR _BeamEndWidth$[esp+508]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$139774[esp+512]
	fmul	DWORD PTR _BeamEndWidth$[esp+508]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T139789[esp+508]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR _B$124036[esp+520]
	lea	ecx, DWORD PTR $T139790[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T139789[esp+516]
	fadd	DWORD PTR _B$124036[esp+516]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T139789[esp+512]
	fadd	DWORD PTR _B$124036[esp+512]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	edx, DWORD PTR $T139790[esp+500]
	mov	eax, DWORD PTR $T139790[esp+504]
	lea	ecx, DWORD PTR [ebp+96]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR $T139790[esp+508]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _dwDiffuseEnd$139773[esp+500]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR $T139791[esp+500], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR $T139791[esp+500]
	mov	DWORD PTR [ebp+112], ecx
	mov	DWORD PTR $T139791[esp+504], 0
	mov	edx, DWORD PTR $T139791[esp+504]
	lea	edi, DWORD PTR [ebp+120]
	mov	ecx, 6
	mov	esi, ebp
	mov	DWORD PTR [ebp+108], eax
	mov	DWORD PTR [ebp+116], edx
	rep movsd
	mov	esi, DWORD PTR _x$[esp+500]
$L139860:
	mov	ebp, DWORD PTR _t$[esp+496]
$L139756:

; 2956 : 				}
; 2957 : 				if(y!=Tesselation-1) 

	mov	eax, DWORD PTR _Tesselation$[esp+496]
	lea	edi, DWORD PTR [eax-1]
	cmp	DWORD PTR _y$124030[esp+500], edi
	je	$L124038

; 2958 : 				{
; 2959 : 					FVector B=CurrentLocation+AxisYIncrement;

	fld	DWORD PTR _CurrentLocation$124025[esp+508]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR _AxisYIncrement$[esp+520]
	lea	ecx, DWORD PTR _B$124039[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _CurrentLocation$124025[esp+516]
	fadd	DWORD PTR _AxisYIncrement$[esp+516]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _CurrentLocation$124025[esp+512]
	fadd	DWORD PTR _AxisYIncrement$[esp+512]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z

; 2960 : 					B.Z+=SamplePoint(x,y+1,MaxAmplitude, MaxFrequency, Noise,TimeSeconds);

	mov	ecx, DWORD PTR _TimeSeconds$[esp+496]
	mov	edx, DWORD PTR _Noise$[esp+496]
	mov	eax, DWORD PTR _MaxFrequency$[esp+496]
	push	ecx
	mov	ecx, DWORD PTR _MaxAmplitude$[esp+500]
	push	edx
	mov	edx, DWORD PTR _y$124030[esp+508]
	push	eax
	push	ecx
	inc	edx
	push	edx
	mov	edx, esi
	mov	ecx, ebx
	call	?SamplePoint@UD3DRenderDevice@@QAIMHHMMMM@Z ; UD3DRenderDevice::SamplePoint
	fadd	DWORD PTR _B$124039[esp+508]

; 2961 : 					dnDraw3DLine(c->Frame,t,PolyFlags,A,B,BeamStartWidth,BeamEndWidth,BeamColor,BeamEndColor);

	mov	eax, DWORD PTR _BeamEndColor$[esp+496]
	mov	ecx, DWORD PTR _BeamColor$[esp+496]
	mov	edx, DWORD PTR _BeamEndWidth$[esp+496]
	fstp	DWORD PTR _B$124039[esp+508]
	push	0
	push	eax
	mov	eax, DWORD PTR _BeamStartWidth$[esp+504]
	push	ecx
	push	edx
	mov	edx, DWORD PTR _B$124039[esp+516]
	push	eax
	mov	eax, DWORD PTR _B$124039[esp+524]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _B$124039[esp+540]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _A$124034[esp+532]
	mov	edx, DWORD PTR _A$124034[esp+536]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _A$124034[esp+552]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _PolyFlags$[esp+540]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _c$[esp+544]
	push	edx
	mov	edx, DWORD PTR [eax+124]
	push	ebp
	mov	ecx, ebx
	call	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine
$L124038:

; 2962 : 				}
; 2963 : 				CurrentLocation+=AxisYIncrement;

	fld	DWORD PTR _CurrentLocation$124025[esp+500]
	mov	eax, DWORD PTR _y$124030[esp+500]
	fadd	DWORD PTR _AxisYIncrement$[esp+500]
	mov	ecx, DWORD PTR _Tesselation$[esp+496]
	inc	eax
	cmp	eax, ecx
	fstp	DWORD PTR _CurrentLocation$124025[esp+500]
	mov	DWORD PTR _y$124030[esp+500], eax
	fld	DWORD PTR _CurrentLocation$124025[esp+504]
	fadd	DWORD PTR _AxisYIncrement$[esp+504]
	fstp	DWORD PTR _CurrentLocation$124025[esp+504]
	fld	DWORD PTR _CurrentLocation$124025[esp+508]
	fadd	DWORD PTR _AxisYIncrement$[esp+508]
	fstp	DWORD PTR _CurrentLocation$124025[esp+508]
	jl	$L124031
	inc	esi
	cmp	esi, ecx
	mov	DWORD PTR _x$[esp+500], esi
	jl	$L124022
$L124024:

; 2964 : 			}
; 2965 : 		}
; 2966 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 484				; 000001e4H
	ret	68					; 00000044H
?MovingGrid@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@3H@Z ENDP ; UD3DRenderDevice::MovingGrid
_TEXT	ENDS
PUBLIC	??D@YA?AVFRotator@@MABV0@@Z			; operator*
PUBLIC	?DrawSpline@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAVUCanvas@@PAVUTexture@@VFColor@@3MMKMMMMVFVector@@4H@Z ; UD3DRenderDevice::DrawSpline
PUBLIC	__real@40400000
PUBLIC	__real@40a00000
PUBLIC	__real@40800000
EXTRN	__imp_??0FRotator@@QAE@HHH@Z:NEAR
EXTRN	__imp_??HFRotator@@QBE?AV0@ABV0@@Z:NEAR
;	COMDAT __real@40400000
; File ..\..\Core\Inc\UnMath.h
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?DrawSpline@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAVUCanvas@@PAVUTexture@@VFColor@@3MMKMMMMVFVector@@4H@Z
_TEXT	SEGMENT
_this$ = -208
_PreviousLocation$ = -244
_Bogus$ = -272
_LastPoint$ = -260
_CurrentLocation$124059 = -232
_NextLocation$124062 = -220
_NextLocation1$124064 = -204
_j$124065 = -300
_c$ = 8
_t$ = 12
_opt1$139925 = -292
_opt2$139926 = -288
_opt3$139927 = -296
_opt4$139928 = -284
$T139930 = -120
$T139931 = -132
$T139932 = -168
$T139933 = -144
$T139934 = -180
$T139935 = -156
$T139936 = -108
$T139937 = -192
$T139938 = -60
$T139939 = -84
$T139940 = -36
$T139941 = -72
$T139942 = -24
$T139943 = -96
$T139944 = -48
$T139945 = -12
?DrawSpline@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAVUCanvas@@PAVUTexture@@VFColor@@3MMKMMMMVFVector@@4H@Z PROC NEAR ; UD3DRenderDevice::DrawSpline, COMDAT
; _this$ = ecx
; _System$ = edx

; 2969 : 	{

	sub	esp, 304				; 00000130H
	push	ebx
	push	ebp
	push	esi
	mov	esi, edx

; 2970 : 		VALIDATE;
; 2971 : 		// Ensure that the beam is tesselated:
; 2972 : 		if(System.TesselationLevel<=0)  return;

	mov	eax, DWORD PTR [esi+1600]
	xor	ebp, ebp
	cmp	eax, ebp
	push	edi
	mov	DWORD PTR _this$[esp+320], ecx
	jle	$L124058

; 2973 : 		if(System.ControlPointCount<=0) return;

	cmp	DWORD PTR [esi+2208], ebp
	jle	$L124058

; 2974 : 
; 2975 : 		int i;
; 2976 : 
; 2977 : 		// Update the positions of the control points based on their actor's positions (if any):
; 2978 : 		for(i=0;i<ARRAY_COUNT(System.ControlPoint);i++)

	lea	eax, DWORD PTR [esi+1708]
	mov	edx, 32					; 00000020H
$L124047:

; 2979 : 			if(System.ControlPoint[i].PositionActor)

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, ebp
	je	SHORT $L124048

; 2980 : 				System.ControlPoint[i].Position=System.ControlPoint[i].PositionActor->Location;

	add	ecx, 364				; 0000016cH
	mov	ebx, DWORD PTR [ecx]
	lea	edi, DWORD PTR [eax-12]
	mov	DWORD PTR [edi], ebx
	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edi+4], ebx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+8], ecx
$L124048:
	add	eax, 16					; 00000010H
	dec	edx
	jne	SHORT $L124047

; 2981 : 
; 2982 : 
; 2983 : 		FVector PreviousLocation=System.ControlPoint[0].Position;

	lea	ebx, DWORD PTR [esi+1696]
	mov	edx, ebx
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _PreviousLocation$[esp+320], eax
	mov	DWORD PTR _PreviousLocation$[esp+324], ecx

; 2984 : 		FRotator Bogus=FRotator(0,0,0);
; 2985 : 		FVector LastPoint=PreviousLocation;

	mov	eax, ebx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _LastPoint$[esp+320], ecx

; 2986 : 		FVector NewLastPoint=PreviousLocation;
; 2987 : 
; 2988 : 		for(i=0;i<System.ControlPointCount-1;i++)

	mov	ecx, DWORD PTR [esi+2208]
	mov	DWORD PTR _PreviousLocation$[esp+328], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx-1]
	cmp	edi, ebp
	mov	DWORD PTR _Bogus$[esp+320], ebp
	mov	DWORD PTR _Bogus$[esp+324], ebp
	mov	DWORD PTR _Bogus$[esp+328], ebp
	mov	DWORD PTR _LastPoint$[esp+324], edx
	mov	DWORD PTR _LastPoint$[esp+328], eax
	jle	$L124058
	mov	eax, DWORD PTR [esi+1600]
	mov	edx, 1
	mov	DWORD PTR -304+[esp+320], eax
	mov	DWORD PTR -276+[esp+320], edx
	mov	DWORD PTR -248+[esp+320], ebx
$L124056:

; 2989 : 		{
; 2990 : 
; 2991 : 			FVector CurrentLocation=System.ControlPoint[i].Position;
; 2992 : 			int k=i+1;
; 2993 : 			if(k>=System.ControlPointCount) k=System.ControlPointCount-1;

	cmp	edx, ecx
	mov	ebp, DWORD PTR [ebx]
	mov	DWORD PTR _CurrentLocation$124059[esp+320], ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR [ebx+8]
	mov	DWORD PTR _CurrentLocation$124059[esp+324], ebp
	mov	DWORD PTR _CurrentLocation$124059[esp+328], ebx
	jl	SHORT $L124061
	mov	edx, edi
$L124061:

; 2994 : 			FVector NextLocation=System.ControlPoint[k].Position;

	lea	ebx, DWORD PTR [edx+106]
	shl	ebx, 4
	add	ebx, esi
	mov	ebp, DWORD PTR [ebx]
	mov	DWORD PTR _NextLocation$124062[esp+320], ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR [ebx+8]

; 2995 : 			k++;

	inc	edx

; 2996 : 			if(k>=System.ControlPointCount) k=System.ControlPointCount-1;

	cmp	edx, ecx
	mov	DWORD PTR _NextLocation$124062[esp+324], ebp
	mov	DWORD PTR _NextLocation$124062[esp+328], ebx
	jl	SHORT $L124063
	mov	edx, edi
$L124063:

; 2997 : 			FVector NextLocation1=System.ControlPoint[k].Position;

	add	edx, 106				; 0000006aH
	shl	edx, 4
	add	edx, esi
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR _NextLocation1$124064[esp+320], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]

; 2998 : 
; 2999 : 			for(int j=0;j<System.TesselationLevel;j++)

	xor	edi, edi
	test	eax, eax
	mov	DWORD PTR _NextLocation1$124064[esp+324], ecx
	mov	DWORD PTR _NextLocation1$124064[esp+328], edx
	mov	DWORD PTR _j$124065[esp+320], edi
	jle	$L139992

; 3014 : 		}
; 3015 : 	}

	npad	7
$L124066:

; 3000 : 			{
; 3001 : 				KRSpline_Sample(((float)j/(float)System.TesselationLevel),
; 3002 : 								 NewLastPoint,    Bogus,
; 3003 :   								 PreviousLocation,Bogus,
; 3004 : 								 CurrentLocation, Bogus,
; 3005 : 								 NextLocation,	  Bogus,
; 3006 : 								 NextLocation1,	  Bogus);

	fild	DWORD PTR _j$124065[esp+320]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T139935[esp+332]
	fidiv	DWORD PTR -304+[esp+332]
	fld	ST(0)
	fmul	ST(0), ST(1)
	fld	ST(0)
	fmul	ST(0), ST(2)
	fld	ST(1)
	fadd	ST(0), ST(0)
	fsub	ST(0), ST(1)
	fsub	ST(0), ST(3)
	fstp	DWORD PTR _opt1$139925[esp+332]
	fld	DWORD PTR __real@40400000
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	DWORD PTR __real@40a00000
	fsubr	ST(0), ST(1)
	fadd	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR _opt2$139926[esp+332]
	fld	ST(2)
	fmul	DWORD PTR __real@40800000
	fsub	ST(0), ST(1)
	fadd	ST(0), ST(4)
	fstp	DWORD PTR _opt3$139927[esp+332]
	fstp	ST(0)
	fsub	ST(0), ST(1)
	fstp	DWORD PTR _opt4$139928[esp+332]
	fstp	ST(0)
	fstp	ST(0)
	fld	DWORD PTR _NextLocation1$124064[esp+340]
	fmul	DWORD PTR _opt4$139928[esp+332]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _NextLocation1$124064[esp+336]
	fmul	DWORD PTR _opt4$139928[esp+332]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _NextLocation1$124064[esp+332]
	fmul	DWORD PTR _opt4$139928[esp+332]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _NextLocation$124062[esp+328]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR _opt3$139927[esp+332]
	lea	ecx, DWORD PTR $T139933[esp+332]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _NextLocation$124062[esp+336]
	fmul	DWORD PTR _opt3$139927[esp+332]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _NextLocation$124062[esp+332]
	fmul	DWORD PTR _opt3$139927[esp+332]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _CurrentLocation$124059[esp+328]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR _opt2$139926[esp+332]
	lea	ecx, DWORD PTR $T139931[esp+332]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _CurrentLocation$124059[esp+336]
	fmul	DWORD PTR _opt2$139926[esp+332]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _CurrentLocation$124059[esp+332]
	fmul	DWORD PTR _opt2$139926[esp+332]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _PreviousLocation$[esp+328]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR _opt1$139925[esp+332]
	lea	ecx, DWORD PTR $T139930[esp+332]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _PreviousLocation$[esp+336]
	fmul	DWORD PTR _opt1$139925[esp+332]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _PreviousLocation$[esp+332]
	fmul	DWORD PTR _opt1$139925[esp+332]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T139931[esp+328]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T139930[esp+340]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T139930[esp+336]
	lea	ecx, DWORD PTR $T139932[esp+332]
	fadd	DWORD PTR $T139931[esp+336]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T139931[esp+332]
	fadd	DWORD PTR $T139930[esp+332]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T139933[esp+328]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T139932[esp+340]
	lea	ecx, DWORD PTR $T139934[esp+332]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T139933[esp+336]
	fadd	DWORD PTR $T139932[esp+336]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T139933[esp+332]
	fadd	DWORD PTR $T139932[esp+332]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T139935[esp+328]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T139934[esp+340]
	lea	ecx, DWORD PTR $T139936[esp+332]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T139935[esp+336]
	fadd	DWORD PTR $T139934[esp+336]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T139935[esp+332]
	fadd	DWORD PTR $T139934[esp+332]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T139936[esp+328]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR __real@3f000000
	lea	ecx, DWORD PTR $T139937[esp+332]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T139936[esp+336]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T139936[esp+332]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fild	DWORD PTR _Bogus$[esp+328]
	fstp	DWORD PTR -280+[esp+320]
	fild	DWORD PTR _Bogus$[esp+324]
	fstp	DWORD PTR -304+[esp+320]
	fild	DWORD PTR _Bogus$[esp+320]
	fstp	DWORD PTR -300+[esp+320]
	fld	DWORD PTR -280+[esp+320]
	fmul	DWORD PTR _opt4$139928[esp+320]
	call	__ftol
	fld	DWORD PTR -304+[esp+320]
	fmul	DWORD PTR _opt4$139928[esp+320]
	push	eax
	call	__ftol
	fld	DWORD PTR -300+[esp+324]
	fmul	DWORD PTR _opt4$139928[esp+324]
	push	eax
	call	__ftol
	push	eax
	lea	ecx, DWORD PTR $T139943[esp+332]
	call	DWORD PTR __imp_??0FRotator@@QAE@HHH@Z
	fld	DWORD PTR -280+[esp+320]
	fmul	DWORD PTR _opt3$139927[esp+320]
	call	__ftol
	fld	DWORD PTR -304+[esp+320]
	fmul	DWORD PTR _opt3$139927[esp+320]
	push	eax
	call	__ftol
	fld	DWORD PTR -300+[esp+324]
	fmul	DWORD PTR _opt3$139927[esp+324]
	push	eax
	call	__ftol
	push	eax
	lea	ecx, DWORD PTR $T139941[esp+332]
	call	DWORD PTR __imp_??0FRotator@@QAE@HHH@Z
	fld	DWORD PTR -280+[esp+320]
	fmul	DWORD PTR _opt2$139926[esp+320]
	call	__ftol
	fld	DWORD PTR -304+[esp+320]
	push	eax
	fmul	DWORD PTR _opt2$139926[esp+324]
	call	__ftol
	fld	DWORD PTR -300+[esp+324]
	fmul	DWORD PTR _opt2$139926[esp+324]
	push	eax
	call	__ftol
	push	eax
	lea	ecx, DWORD PTR $T139939[esp+332]
	call	DWORD PTR __imp_??0FRotator@@QAE@HHH@Z
	fld	DWORD PTR -280+[esp+320]
	fmul	DWORD PTR _opt1$139925[esp+320]
	call	__ftol
	fld	DWORD PTR -304+[esp+320]
	fmul	DWORD PTR _opt1$139925[esp+320]
	push	eax
	call	__ftol
	fld	DWORD PTR -300+[esp+324]
	fmul	DWORD PTR _opt1$139925[esp+324]
	push	eax
	call	__ftol
	push	eax
	lea	ecx, DWORD PTR $T139938[esp+332]
	call	DWORD PTR __imp_??0FRotator@@QAE@HHH@Z
	lea	eax, DWORD PTR $T139943[esp+320]
	push	eax
	lea	ecx, DWORD PTR $T139944[esp+324]
	push	ecx
	lea	edx, DWORD PTR $T139941[esp+328]
	push	edx
	lea	eax, DWORD PTR $T139942[esp+332]
	push	eax
	lea	ecx, DWORD PTR $T139939[esp+336]
	push	ecx
	lea	edx, DWORD PTR $T139940[esp+340]
	push	edx
	lea	ecx, DWORD PTR $T139938[esp+344]
	call	DWORD PTR __imp_??HFRotator@@QBE?AV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??HFRotator@@QBE?AV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??HFRotator@@QBE?AV0@ABV0@@Z
	push	eax
	lea	eax, DWORD PTR $T139945[esp+324]
	push	1056964608				; 3f000000H
	push	eax
	call	??D@YA?AVFRotator@@MABV0@@Z		; operator*
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]

; 3007 : 
; 3008 : 				dnDraw3DLine(c->Frame,t, 0,LastPoint,NewLastPoint,System.BeamStartWidth,System.BeamEndWidth,System.BeamColor,System.BeamEndColor,true);

	mov	ebx, DWORD PTR $T139937[esp+332]
	mov	ebp, DWORD PTR $T139937[esp+336]
	add	esp, 12					; 0000000cH
	push	1
	mov	DWORD PTR _Bogus$[esp+324], ecx
	mov	ecx, DWORD PTR [esi+1620]
	push	ecx
	mov	ecx, DWORD PTR [esi+1604]
	mov	DWORD PTR _Bogus$[esp+332], edx
	mov	edx, DWORD PTR [esi+1616]
	push	edx
	mov	DWORD PTR _Bogus$[esp+340], eax
	mov	eax, DWORD PTR [esi+1608]
	push	eax
	mov	eax, DWORD PTR $T139937[esp+344]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], ebx
	mov	DWORD PTR [edx+4], ebp
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR _LastPoint$[esp+352]
	mov	eax, DWORD PTR _LastPoint$[esp+356]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _LastPoint$[esp+372]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	push	0
	mov	ecx, DWORD PTR _c$[esp+364]
	mov	eax, DWORD PTR _t$[esp+364]
	mov	edx, DWORD PTR [ecx+124]
	mov	ecx, DWORD PTR _this$[esp+368]
	push	eax
	call	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine
	mov	eax, DWORD PTR [esi+1600]

; 3009 : 
; 3010 : 				LastPoint=NewLastPoint;

	mov	edx, DWORD PTR $T139937[esp+328]
	inc	edi
	cmp	edi, eax
	mov	DWORD PTR _LastPoint$[esp+320], ebx
	mov	DWORD PTR _LastPoint$[esp+324], ebp
	mov	DWORD PTR _LastPoint$[esp+328], edx
	mov	DWORD PTR _j$124065[esp+320], edi
	mov	DWORD PTR -304+[esp+320], eax
	jl	$L124066
$L139992:

; 3011 : 			}
; 3012 : 		
; 3013 : 			PreviousLocation=System.ControlPoint[i].Position;

	mov	ebx, DWORD PTR -248+[esp+320]
	mov	edx, DWORD PTR -276+[esp+320]
	mov	ecx, ebx
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR _PreviousLocation$[esp+320], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx+8]
	add	ebx, 16					; 00000010H
	inc	edx
	mov	DWORD PTR _PreviousLocation$[esp+328], ecx
	mov	ecx, DWORD PTR [esi+2208]
	mov	DWORD PTR _PreviousLocation$[esp+324], edi
	lea	edi, DWORD PTR [ecx-1]
	lea	ebp, DWORD PTR [edx-1]
	cmp	ebp, edi
	mov	DWORD PTR -248+[esp+320], ebx
	mov	DWORD PTR -276+[esp+320], edx
	jl	$L124056
$L124058:

; 3014 : 		}
; 3015 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 304				; 00000130H
	ret	72					; 00000048H
?DrawSpline@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAVUCanvas@@PAVUTexture@@VFColor@@3MMKMMMMVFVector@@4H@Z ENDP ; UD3DRenderDevice::DrawSpline
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnMath.h
_TEXT	ENDS
;	COMDAT ??D@YA?AVFRotator@@MABV0@@Z
_TEXT	SEGMENT
_Scale$ = 12
_R$ = 16
___$ReturnUdt$ = 8
??D@YA?AVFRotator@@MABV0@@Z PROC NEAR			; operator*, COMDAT

; 1079 : 	{

	push	ebx
	push	esi

; 1080 : 		return FRotator( R.Pitch*Scale, R.Yaw*Scale, R.Roll*Scale );

	mov	esi, DWORD PTR _R$[esp+4]
	fild	DWORD PTR [esi+8]
	push	edi
	fmul	DWORD PTR _Scale$[esp+8]
	call	__ftol
	fild	DWORD PTR [esi+4]
	mov	edi, eax
	fmul	DWORD PTR _Scale$[esp+8]
	call	__ftol
	fild	DWORD PTR [esi]
	mov	ebx, eax
	fmul	DWORD PTR _Scale$[esp+8]
	call	__ftol
	mov	ecx, DWORD PTR ___$ReturnUdt$[esp+8]
	mov	DWORD PTR [ecx+8], edi
	pop	edi
	pop	esi
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], ebx
	mov	eax, ecx
	pop	ebx

; 1081 : 	}

	ret	0
??D@YA?AVFRotator@@MABV0@@Z ENDP			; operator*
_TEXT	ENDS
PUBLIC	??D@YA?AVFVector@@MABV0@@Z			; operator*
PUBLIC	?KRSpline_Sample@@YAXMAAVFVector@@AAVFRotator@@V1@V2@232323@Z ; KRSpline_Sample
PUBLIC	__real@41f0000000000000
PUBLIC	?QueueParticleFlush@UD3DRenderDevice@@QAIXAAVAParticleSystem@@PAUFSceneNode@@@Z ; UD3DRenderDevice::QueueParticleFlush
PUBLIC	?QueuedLinesFlush@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAUFSceneNode@@PAVUTexture@@K@Z ; UD3DRenderDevice::QueuedLinesFlush
EXTRN	__imp_?GSecondsPerCycle@@3NA:QWORD
EXTRN	__imp_?appSecondsSlow@@YANXZ:NEAR
EXTRN	__imp__srand:NEAR
;	COMDAT __real@41f0000000000000
; File ..\..\Core\Inc\UnVcWin32.h
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+009
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?dnDrawBeam@UD3DRenderDevice@@UAIXAAVABeamSystem@@PAUFSceneNode@@@Z
_TEXT	SEGMENT
_Direction$140226 = -424
_Midpoint$140229 = -548
_Axis1$140232 = -488
_Axis2$140234 = -524
_ColorMidpoint$140236 = -656
$T140237 = -632
$T140238 = -652
$T140239 = -392
$T140240 = -396
$T140241 = -452
$T140242 = -368
$T140244 = -448
$T140246 = -640
_this$ = -240
_TimeSeconds$ = -528
_c$ = -608
$T140346 = -56
$T140347 = -152
$T140348 = -104
_BeamTexture$ = -624
$T140350 = -80
_i$ = -604
_DestinationLocation$124099 = -620
_LineSegments$140409 = -648
_CurrentPosition$140410 = -568
_PreviousPosition$140411 = -236
_Distance$140412 = -328
_Direction$140413 = -352
_StepLength$140415 = -376
_Axis1$140416 = -512
_Axis2$140417 = -500
_PreviousColor$140418 = -632
_CurrentColor$140419 = -656
_RFactor$140420 = -372
_GFactor$140421 = -408
_BFactor$140422 = -400
_AFactor$140423 = -636
_i$140424 = -640
_LengthToHere$140428 = -644
$T140429 = -628
$T140430 = -644
$T140431 = -176
$T140432 = -200
$T140433 = -268
$T140434 = -208
$T140435 = -356
$T140436 = -252
$T140441 = -224
_LineSegments$140542 = -628
_CurrentPosition$140543 = -580
_PreviousPosition$140544 = -264
_Distance$140545 = -316
_Direction$140546 = -292
_StepLength$140548 = -400
_Axis1$140549 = -464
_Axis2$140550 = -476
_PreviousColor$140551 = -660
_CurrentColor$140552 = -656
_RFactor$140553 = -408
_GFactor$140554 = -372
_BFactor$140555 = -376
_AFactor$140556 = -156
_i$140557 = -648
_LengthToHere$140561 = -632
_OriginalMaxAmplitude$140562 = -192
$T140564 = -12
$T140565 = -128
$T140566 = -32
$T140568 = -44
$T140626 = -640
$T140627 = -648
$T140628 = -556
$T140629 = -160
$T140630 = -600
$T140631 = -204
$T140632 = -404
$T140633 = -280
$T140638 = -196
_Frame$ = 8
_PreviousLocation$140648 = -388
_Bogus$140649 = -140
_LastPoint$140650 = -592
_NewLastPoint$140651 = -304
_CurrentLocation$140655 = -220
_NextLocation$140658 = -172
_NextLocation1$140660 = -188
_j$140661 = -660
_L$140679 = -604
_H$140680 = -240
$T140006 = -592
$T140008 = -592
$T140009 = -436
_L$140012 = -596
_H$140013 = -556
_L$140053 = -660
_H$140054 = -604
$T140057 = -556
$T140172 = -92
$T140173 = -340
$T140174 = -68
$T140176 = -116
?dnDrawBeam@UD3DRenderDevice@@UAIXAAVABeamSystem@@PAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::dnDrawBeam, COMDAT
; _this$ = ecx
; _System$ = edx

; 3018 : 	{

	sub	esp, 660				; 00000294H
	push	ebx
	push	ebp
	push	esi
	mov	esi, edx

; 3019 : 		VALIDATE;
; 3020 : 
; 3021 : 		// Don't worry about it if not enabled:
; 3022 : 		if(!System.Enabled) return;

	mov	al, BYTE PTR [esi+1596]
	mov	ebx, 1
	test	al, bl
	mov	ebp, ecx
	push	edi
	mov	DWORD PTR _this$[esp+676], ebp
	je	$L124072

; 3023 : 
; 3024 : 		if(System.BeamType==BST_Spline) System.NumberDestinations=1;

	cmp	BYTE PTR [esi+2212], 5
	jne	SHORT $L124074
	mov	DWORD PTR [esi+2356], ebx
$L124074:

; 3025 : 
; 3026 : 		// Check to see if destination actor is valid: 
; 3027 : 		if(!System.NumberDestinations) 

	mov	eax, DWORD PTR [esi+2356]
	test	eax, eax
	je	$L124072

; 3028 : 			return;
; 3029 : 
; 3030 : 		// CDH... check to make sure camera style matches, if applicable
; 3031 : 		if (!GIsEditor && System.BeamPlayerCameraStyleMode!=BPCS_None)

	mov	eax, DWORD PTR __imp_?GIsEditor@@3HA
	cmp	DWORD PTR [eax], 0
	mov	edi, DWORD PTR _Frame$[esp+672]
	jne	SHORT $L124079
	mov	al, BYTE PTR [esi+2384]
	test	al, al
	je	SHORT $L124079

; 3032 : 		{
; 3033 : 			if ((System.BeamPlayerCameraStyleMode==BPCS_Equal) && (System.BeamPlayerCameraStyle!=Frame->Viewport->Actor->CameraStyle))

	cmp	al, 1
	jne	SHORT $L124077
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+48]
	mov	cl, BYTE PTR [esi+2385]
	cmp	cl, BYTE PTR [edx+7280]
	jne	$L124072
$L124077:

; 3034 : 				return;
; 3035 : 			else if ((System.BeamPlayerCameraStyleMode==BPCS_NotEqual) && (System.BeamPlayerCameraStyle==Frame->Viewport->Actor->CameraStyle))

	cmp	al, 2
	jne	SHORT $L124079
	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+48]
	mov	cl, BYTE PTR [esi+2385]
	cmp	cl, BYTE PTR [eax+7280]
	je	$L124072
$L124079:

; 3036 : 				return;
; 3037 : 		}
; 3038 : 		// ...CDH
; 3039 : 		clock(Stats.BeamTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], 0
	mov	DWORD PTR _L$140012[esp+676], 0
	je	SHORT $L140014
	rdtsc
	mov	DWORD PTR _L$140012[esp+676], eax
	mov	DWORD PTR _H$140013[esp+676], edx
$L140014:
	mov	ecx, DWORD PTR [ebp+19640]
	mov	eax, DWORD PTR _L$140012[esp+676]
	sub	ecx, eax
	mov	DWORD PTR [ebp+19640], ecx

; 3040 : 
; 3041 : 		FLOAT TimeSeconds = System.Level->GameTimeSeconds;

	mov	ecx, DWORD PTR [esi+112]
	mov	edx, DWORD PTR [ecx+1520]

; 3042 : 		appSrand((*(DWORD *)&TimeSeconds)^((DWORD)&System));	// Makes the beams pausable, as they are based off of game time.

	mov	eax, edx
	xor	eax, esi
	push	eax
	mov	DWORD PTR _TimeSeconds$[esp+680], edx
	call	DWORD PTR __imp__srand

; 3043 : 
; 3044 : 		UCanvas *c=Frame->Viewport->Canvas;

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+84]

; 3045 : 
; 3046 : 		PreRender(Frame);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR _c$[esp+680], edx
	add	esp, 4
	mov	edx, edi
	mov	ecx, ebp
	call	DWORD PTR [eax+140]

; 3047 : 
; 3048 : 		if(System.BeamStartWidth<1) System.BeamStartWidth=1;

	fld	DWORD PTR [esi+1604]
	fcomp	DWORD PTR __real@3f800000
	mov	ecx, 1065353216				; 3f800000H
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L124084
	mov	DWORD PTR [esi+1604], ecx
$L124084:

; 3049 : 		if(System.BeamEndWidth<1)   System.BeamEndWidth=1;

	fld	DWORD PTR [esi+1608]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L124085
	mov	DWORD PTR [esi+1608], ecx
$L124085:

; 3050 : 
; 3051 : 		if(System.TesselationLevel>16)     System.TesselationLevel=16;

	mov	eax, DWORD PTR [esi+1600]
	cmp	eax, 16					; 00000010H
	jle	SHORT $L124086
	mov	DWORD PTR [esi+1600], 16		; 00000010H

; 3052 : 		else if(System.TesselationLevel<1) System.TesselationLevel=1;

	jmp	SHORT $L124088
$L124086:
	cmp	eax, ebx
	jge	SHORT $L124088
	mov	DWORD PTR [esi+1600], ebx
$L124088:

; 3053 : 
; 3054 : 		System.BoundingBoxMin=System.Location-FVector(5,5,5);

	fld	DWORD PTR [esi+364]

; 3055 : 		System.BoundingBoxMax=System.Location+FVector(5,5,5);
; 3056 : 
; 3057 : 		// Force animated textures to update:
; 3058 : 		UTexture *BeamTexture=System.BeamTexture;

	mov	edi, DWORD PTR [esi+1660]
	fsub	DWORD PTR __real@40a00000
	lea	eax, DWORD PTR [esi+2388]

; 3059 : 		if(BeamTexture) BeamTexture=BeamTexture->Get(appSeconds());

	xor	ebx, ebx
	cmp	edi, ebx
	fstp	DWORD PTR $T140006[esp+676]
	fld	DWORD PTR [esi+368]
	mov	ecx, DWORD PTR $T140006[esp+676]
	fsub	DWORD PTR __real@40a00000
	mov	DWORD PTR _BeamTexture$[esp+676], edi
	fstp	DWORD PTR $T140006[esp+680]
	fld	DWORD PTR [esi+372]
	mov	edx, DWORD PTR $T140006[esp+680]
	fsub	DWORD PTR __real@40a00000
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T140006[esp+684]
	mov	ecx, DWORD PTR $T140006[esp+684]
	mov	DWORD PTR [eax+8], ecx
	fld	DWORD PTR [esi+364]
	fadd	DWORD PTR __real@40a00000
	lea	eax, DWORD PTR [esi+2400]
	fstp	DWORD PTR $T140008[esp+676]
	fld	DWORD PTR [esi+368]
	mov	edx, DWORD PTR $T140008[esp+676]
	fadd	DWORD PTR __real@40a00000
	fstp	DWORD PTR $T140008[esp+680]
	fld	DWORD PTR [esi+372]
	mov	ecx, DWORD PTR $T140008[esp+680]
	fadd	DWORD PTR __real@40a00000
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
	fstp	DWORD PTR $T140008[esp+684]
	mov	edx, DWORD PTR $T140008[esp+684]
	mov	DWORD PTR [eax+8], edx
	je	SHORT $L140063
	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ebx
	je	SHORT $L140052
	rdtsc
	mov	DWORD PTR _L$140053[esp+676], eax
	mov	DWORD PTR _H$140054[esp+676], edx
	mov	ecx, DWORD PTR _H$140054[esp+676]
	mov	edx, DWORD PTR _L$140053[esp+676]
	mov	eax, DWORD PTR __imp_?GSecondsPerCycle@@3NA
	mov	DWORD PTR -556+[esp+676], ecx
	mov	DWORD PTR -556+[esp+680], ebx
	fild	QWORD PTR -556+[esp+676]
	mov	DWORD PTR -556+[esp+676], edx
	mov	DWORD PTR -556+[esp+680], ebx
	fmul	QWORD PTR __real@41f0000000000000
	fild	QWORD PTR -556+[esp+676]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR [eax]
	jmp	SHORT $L140715
$L140052:
	call	DWORD PTR __imp_?appSecondsSlow@@YANXZ
$L140715:
	mov	edx, DWORD PTR [edi]
	fstp	QWORD PTR $T140057[esp+676]
	mov	eax, DWORD PTR $T140057[esp+680]
	mov	ecx, DWORD PTR $T140057[esp+676]
	push	eax
	push	ecx
	mov	ecx, edi
	call	DWORD PTR [edx+108]
	mov	edi, DWORD PTR [edi+148]
	cmp	edi, ebx
	je	SHORT $L140063
	mov	DWORD PTR _BeamTexture$[esp+676], edi
$L140063:

; 3060 : 
; 3061 : 		for(INT i=0;i<System.NumberDestinations;i++)

	cmp	DWORD PTR [esi+2356], ebx
	mov	DWORD PTR _i$[esp+676], ebx
	jle	$L124098
	mov	edi, DWORD PTR __imp__rand
	lea	edx, DWORD PTR [esi+2228]
	lea	eax, DWORD PTR [esi+2268]
	mov	DWORD PTR -412+[esp+676], edx
	mov	DWORD PTR -596+[esp+676], eax

; 3115 : 	}

	npad	1

; 3060 : 
; 3061 : 		for(INT i=0;i<System.NumberDestinations;i++)

$L124096:

; 3062 : 		{
; 3063 : 			Stats.Beams++;

	inc	DWORD PTR [ebp+19692]

; 3064 : 
; 3065 : 			FVector DestinationLocation;
; 3066 : 			if(System.BeamType!=BST_Spline)

	mov	dl, BYTE PTR [esi+2212]
	cmp	dl, 5
	je	$L124110

; 3067 : 			{
; 3068 : 				DestinationLocation=System.DestinationActor[i]->Location + System.DestinationOffset[i];

	mov	ecx, DWORD PTR -412+[esp+676]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR -596+[esp+676]
	fld	DWORD PTR [ecx-8]
	add	eax, 364				; 0000016cH
	fadd	DWORD PTR [eax]
	fst	DWORD PTR $T140009[esp+676]
	fld	DWORD PTR [ecx-4]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR $T140009[esp+680]
	fld	DWORD PTR [eax+8]
	mov	eax, DWORD PTR $T140009[esp+676]
	fadd	DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T140009[esp+680]
	mov	DWORD PTR _DestinationLocation$124099[esp+676], eax
	mov	DWORD PTR _DestinationLocation$124099[esp+680], ecx
	fstp	DWORD PTR $T140009[esp+684]
	mov	eax, DWORD PTR $T140009[esp+684]

; 3069 : 
; 3070 : 					 if(DestinationLocation.X<System.BoundingBoxMin.X) System.BoundingBoxMin.X=DestinationLocation.X;

	fcom	DWORD PTR [esi+2388]
	mov	DWORD PTR _DestinationLocation$124099[esp+684], eax
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L124102
	fstp	DWORD PTR [esi+2388]

; 3071 : 				else if(DestinationLocation.X>System.BoundingBoxMax.X) System.BoundingBoxMax.X=DestinationLocation.X;

	jmp	SHORT $L124104
$L124102:
	fcom	DWORD PTR [esi+2400]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L140708
	fstp	DWORD PTR [esi+2400]
	jmp	SHORT $L124104
$L140708:
	fstp	ST(0)
$L124104:

; 3072 : 
; 3073 : 					 if(DestinationLocation.Y<System.BoundingBoxMin.Y) System.BoundingBoxMin.Y=DestinationLocation.Y;

	fld	DWORD PTR $T140009[esp+680]
	fcomp	DWORD PTR [esi+2392]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L124105
	mov	ecx, DWORD PTR $T140009[esp+680]
	mov	DWORD PTR [esi+2392], ecx

; 3074 : 				else if(DestinationLocation.Y>System.BoundingBoxMax.Y) System.BoundingBoxMax.Y=DestinationLocation.Y;

	jmp	SHORT $L124107
$L124105:
	fld	DWORD PTR $T140009[esp+680]
	fcomp	DWORD PTR [esi+2404]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L124107
	mov	eax, DWORD PTR $T140009[esp+680]
	mov	DWORD PTR [esi+2404], eax
$L124107:

; 3075 : 
; 3076 : 					 if(DestinationLocation.Z<System.BoundingBoxMin.Z) System.BoundingBoxMin.Z=DestinationLocation.Z;

	fld	DWORD PTR $T140009[esp+684]
	fcomp	DWORD PTR [esi+2396]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L124108
	mov	ecx, DWORD PTR $T140009[esp+684]
	mov	DWORD PTR [esi+2396], ecx

; 3077 : 				else if(DestinationLocation.Z>System.BoundingBoxMax.Z) System.BoundingBoxMax.Z=DestinationLocation.Z;

	jmp	SHORT $L124110
$L124108:
	fld	DWORD PTR $T140009[esp+684]
	fcomp	DWORD PTR [esi+2408]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L124110
	mov	eax, DWORD PTR $T140009[esp+684]
	mov	DWORD PTR [esi+2408], eax
$L124110:

; 3078 : 			}
; 3079 : 
; 3080 : 			// Draws from Location to DestinationActor->Location. 
; 3081 : 			switch(System.BeamType)
; 3082 : 			{

	xor	eax, eax
	mov	al, dl
	cmp	eax, 6
	ja	$L124112
	jmp	DWORD PTR $L140716[eax*4]
$L124115:

; 3083 : 				case BST_RandomWalk:
; 3084 : 					// BST_RandomWalk not implemented Yet, fall through to recursive subdivide:
; 3085 : 
; 3086 : 				case BST_RecursiveSubdivide:
; 3087 : 					RecursiveSubdivideLine(c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.Location, DestinationLocation,System.Location, DestinationLocation, System.TesselationLevel);

	mov	ecx, DWORD PTR [esi+1600]
	mov	ebx, DWORD PTR [esi+1616]
	lea	eax, DWORD PTR [esi+364]
	mov	edx, eax
	mov	DWORD PTR $T140246[esp+676], ecx
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR $T140244[esp+676], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR $T140244[esp+680], ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T140244[esp+684], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR $T140242[esp+684], eax
	mov	eax, DWORD PTR [esi+1604]
	mov	DWORD PTR $T140242[esp+676], ecx
	mov	ecx, DWORD PTR [esi+1624]
	mov	DWORD PTR $T140239[esp+676], eax
	mov	eax, DWORD PTR _c$[esp+676]
	test	eax, eax
	mov	DWORD PTR $T140242[esp+680], edx
	mov	edx, DWORD PTR [esi+1608]
	mov	DWORD PTR $T140241[esp+676], ecx
	mov	ecx, DWORD PTR [esi+1620]
	mov	DWORD PTR $T140240[esp+676], edx
	mov	DWORD PTR $T140238[esp+676], ecx
	mov	DWORD PTR $T140237[esp+676], ebx
	jne	SHORT $L140224
	push	2781					; 00000addH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_01IJJ@c?$AA@		; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L140224:
	mov	eax, DWORD PTR $T140246[esp+676]
	test	eax, eax
	jne	SHORT $L140225
	mov	edx, DWORD PTR $T140240[esp+676]
	mov	eax, DWORD PTR $T140239[esp+676]
	push	1
	push	ebx
	push	ebx
	push	edx
	mov	edx, DWORD PTR _DestinationLocation$124099[esp+692]
	push	eax
	mov	eax, DWORD PTR _DestinationLocation$124099[esp+700]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _DestinationLocation$124099[esp+716]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR $T140244[esp+708]
	mov	edx, DWORD PTR $T140244[esp+712]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T140244[esp+728]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _BeamTexture$[esp+720]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _c$[esp+720]
	push	0
	push	edx
	mov	edx, DWORD PTR [eax+124]
	mov	ecx, ebp
	call	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine
	jmp	$L124112
$L140225:
	fld	DWORD PTR _DestinationLocation$124099[esp+684]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T140244[esp+696]
	lea	ecx, DWORD PTR _Direction$140226[esp+688]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _DestinationLocation$124099[esp+692]
	fsub	DWORD PTR $T140244[esp+692]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _DestinationLocation$124099[esp+688]
	fsub	DWORD PTR $T140244[esp+688]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _Direction$140226[esp+684]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR __real@3f000000
	lea	ecx, DWORD PTR $T140172[esp+688]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Direction$140226[esp+692]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _Direction$140226[esp+688]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T140172[esp+684]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T140244[esp+696]
	lea	ecx, DWORD PTR _Midpoint$140229[esp+688]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T140172[esp+692]
	fadd	DWORD PTR $T140244[esp+692]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T140172[esp+688]
	fadd	DWORD PTR $T140244[esp+688]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _DestinationLocation$124099[esp+684]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T140242[esp+696]
	lea	ecx, DWORD PTR $T140173[esp+688]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _DestinationLocation$124099[esp+692]
	fsub	DWORD PTR $T140242[esp+692]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _DestinationLocation$124099[esp+688]
	fsub	DWORD PTR $T140242[esp+688]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T140173[esp+676]
	mov	eax, DWORD PTR $T140173[esp+684]
	fmul	DWORD PTR $T140173[esp+676]
	mov	ecx, DWORD PTR $T140173[esp+676]
	fld	DWORD PTR $T140173[esp+680]
	mov	edx, DWORD PTR $T140173[esp+680]
	fmul	DWORD PTR $T140173[esp+680]
	mov	DWORD PTR _Direction$140226[esp+684], eax
	mov	DWORD PTR _Direction$140226[esp+676], ecx
	mov	DWORD PTR _Direction$140226[esp+680], edx
	faddp	ST(1), ST(0)
	fld	DWORD PTR $T140173[esp+684]
	fmul	DWORD PTR $T140173[esp+684]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140707
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR $T140173[esp+676]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$140226[esp+676]
	fld	DWORD PTR _Direction$140226[esp+680]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$140226[esp+680]
	fld	DWORD PTR _Direction$140226[esp+684]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$140226[esp+684]
$L140707:
	lea	ecx, DWORD PTR _Axis2$140234[esp+676]
	fstp	ST(0)
	push	ecx
	lea	edx, DWORD PTR _Axis1$140232[esp+680]
	push	edx
	lea	ecx, DWORD PTR _Direction$140226[esp+684]
	call	DWORD PTR __imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z
	fld	DWORD PTR _Axis1$140232[esp+676]
	fmul	DWORD PTR _Axis1$140232[esp+676]
	fld	DWORD PTR _Axis1$140232[esp+680]
	fmul	DWORD PTR _Axis1$140232[esp+680]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis1$140232[esp+684]
	fmul	DWORD PTR _Axis1$140232[esp+684]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140699
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis1$140232[esp+676]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$140232[esp+676]
	fld	DWORD PTR _Axis1$140232[esp+680]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$140232[esp+680]
	fld	DWORD PTR _Axis1$140232[esp+684]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$140232[esp+684]
$L140699:
	fstp	ST(0)
	fld	DWORD PTR _Axis2$140234[esp+676]
	fmul	DWORD PTR _Axis2$140234[esp+676]
	fld	DWORD PTR _Axis2$140234[esp+684]
	fmul	DWORD PTR _Axis2$140234[esp+684]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis2$140234[esp+680]
	fmul	DWORD PTR _Axis2$140234[esp+680]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140706
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis2$140234[esp+676]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$140234[esp+676]
	fld	DWORD PTR _Axis2$140234[esp+680]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$140234[esp+680]
	fld	DWORD PTR _Axis2$140234[esp+684]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$140234[esp+684]
$L140706:
	fstp	ST(0)
	fld	DWORD PTR $T140241[esp+676]
	fadd	ST(0), ST(0)
	fstp	DWORD PTR -648+[esp+676]
	call	edi
	mov	DWORD PTR -660+[esp+676], eax
	fild	DWORD PTR -660+[esp+676]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T140174[esp+688]
	fmul	DWORD PTR -648+[esp+688]
	fmul	DWORD PTR __real@38000100
	fsub	DWORD PTR $T140241[esp+688]
	fld	DWORD PTR _Axis1$140232[esp+696]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Axis1$140232[esp+692]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+4]
	fmul	DWORD PTR _Axis1$140232[esp+688]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T140174[esp+676]
	fadd	DWORD PTR _Midpoint$140229[esp+676]
	fstp	DWORD PTR _Midpoint$140229[esp+676]
	fld	DWORD PTR $T140174[esp+680]
	fadd	DWORD PTR _Midpoint$140229[esp+680]
	fstp	DWORD PTR _Midpoint$140229[esp+680]
	fld	DWORD PTR $T140174[esp+684]
	fadd	DWORD PTR _Midpoint$140229[esp+684]
	fstp	DWORD PTR _Midpoint$140229[esp+684]
	call	edi
	mov	DWORD PTR -660+[esp+676], eax
	fild	DWORD PTR -660+[esp+676]
	mov	ecx, DWORD PTR $T140238[esp+676]
	xor	eax, eax
	fmul	DWORD PTR -648+[esp+676]
	xor	edx, edx
	mov	dl, bl
	mov	al, cl
	fmul	DWORD PTR __real@38000100
	mov	DWORD PTR _ColorMidpoint$140236[esp+676], ebx
	mov	cl, BYTE PTR _ColorMidpoint$140236[esp+677]
	fsub	DWORD PTR $T140241[esp+676]
	fld	DWORD PTR _Axis2$140234[esp+676]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Axis2$140234[esp+680]
	sub	eax, edx
	fmul	ST(0), ST(2)
	cdq
	sub	eax, edx
	fstp	DWORD PTR $T140176[esp+680]
	sar	eax, 1
	fld	DWORD PTR _Axis2$140234[esp+684]
	add	al, bl
	fmul	ST(0), ST(2)
	mov	BYTE PTR _ColorMidpoint$140236[esp+676], al
	xor	eax, eax
	xor	edx, edx
	fstp	DWORD PTR $T140176[esp+684]
	mov	dl, bh
	fadd	DWORD PTR _Midpoint$140229[esp+676]
	mov	al, ch
	fstp	DWORD PTR _Midpoint$140229[esp+676]
	fstp	ST(0)
	fld	DWORD PTR $T140176[esp+680]
	fadd	DWORD PTR _Midpoint$140229[esp+680]
	sub	eax, edx
	cdq
	sub	eax, edx
	fstp	DWORD PTR _Midpoint$140229[esp+680]
	sar	eax, 1
	fld	DWORD PTR $T140176[esp+684]
	fadd	DWORD PTR _Midpoint$140229[esp+684]
	fstp	DWORD PTR _Midpoint$140229[esp+684]
	add	cl, al
	fld	DWORD PTR $T140241[esp+676]
	movzx	eax, BYTE PTR $T140238[esp+678]
	fmul	DWORD PTR __real@3f000000
	mov	BYTE PTR _ColorMidpoint$140236[esp+677], cl
	mov	cx, WORD PTR $T140237[esp+678]
	xor	edx, edx
	fstp	DWORD PTR -648+[esp+676]
	mov	dl, cl
	movzx	ecx, ch
	sub	eax, edx
	cdq
	sub	eax, edx
	mov	dl, BYTE PTR _ColorMidpoint$140236[esp+678]
	sar	eax, 1
	add	dl, al
	movzx	eax, BYTE PTR $T140238[esp+679]
	sub	eax, ecx
	mov	cl, BYTE PTR _ColorMidpoint$140236[esp+679]
	mov	BYTE PTR _ColorMidpoint$140236[esp+678], dl
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR $T140246[esp+676]
	sar	eax, 1
	add	cl, al
	lea	eax, DWORD PTR [edx-1]
	mov	edx, DWORD PTR _Midpoint$140229[esp+680]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	BYTE PTR _ColorMidpoint$140236[esp+695], cl
	mov	ecx, DWORD PTR _Midpoint$140229[esp+692]
	mov	DWORD PTR -660+[esp+692], eax
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _Midpoint$140229[esp+700]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR $T140244[esp+692]
	mov	ecx, DWORD PTR $T140244[esp+696]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR $T140244[esp+712]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR _DestinationLocation$124099[esp+704]
	mov	eax, DWORD PTR _DestinationLocation$124099[esp+708]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _DestinationLocation$124099[esp+724]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR $T140242[esp+716]
	mov	edx, DWORD PTR $T140242[esp+720]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T140242[esp+736]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR -648+[esp+728]
	push	edx
	mov	edx, DWORD PTR _ColorMidpoint$140236[esp+732]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR $T140240[esp+732]
	mov	ecx, DWORD PTR $T140239[esp+732]
	push	0
	push	eax
	mov	eax, DWORD PTR _BeamTexture$[esp+740]
	push	ecx
	push	edx
	mov	edx, DWORD PTR _c$[esp+748]
	push	ebx
	push	eax
	mov	ecx, ebp
	call	?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z ; UD3DRenderDevice::RecursiveSubdivideLine
	mov	ecx, DWORD PTR -660+[esp+676]
	mov	eax, DWORD PTR _DestinationLocation$124099[esp+676]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	ecx, DWORD PTR _DestinationLocation$124099[esp+696]
	mov	ebx, DWORD PTR _DestinationLocation$124099[esp+700]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], ebx
	mov	ebx, DWORD PTR _Midpoint$140229[esp+692]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR _Midpoint$140229[esp+708]
	mov	DWORD PTR [edx+4], ebx
	mov	ebx, DWORD PTR _Midpoint$140229[esp+712]
	mov	DWORD PTR [edx+8], ebx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _DestinationLocation$124099[esp+724]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR $T140242[esp+716]
	mov	eax, DWORD PTR $T140242[esp+720]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR $T140242[esp+736]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR -648+[esp+728]
	push	eax
	mov	eax, DWORD PTR $T140238[esp+732]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR $T140240[esp+732]
	mov	edx, DWORD PTR $T140239[esp+732]
	push	0
	push	ecx
	mov	ecx, DWORD PTR _ColorMidpoint$140236[esp+740]
	push	edx
	mov	edx, DWORD PTR _BeamTexture$[esp+744]
	push	eax
	push	ecx
	push	edx
	mov	edx, DWORD PTR _c$[esp+756]
	mov	ecx, ebp
	call	?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z ; UD3DRenderDevice::RecursiveSubdivideLine

; 3088 : 					break;

	jmp	$L124112
$L124116:

; 3089 : 
; 3090 : 				case BST_SineWave:
; 3091 : 					SineWave(c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.Location, DestinationLocation, System.TesselationLevel,System.TimeScale);

	mov	eax, DWORD PTR [esi+1612]
	fld	QWORD PTR __real@4000000000000000
	fild	DWORD PTR [esi+1600]
	mov	ebx, DWORD PTR [esi+1616]
	mov	DWORD PTR $T140441[esp+676], eax
	lea	eax, DWORD PTR [esi+364]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR $T140436[esp+676], ecx
	mov	ecx, DWORD PTR [esi+1648]
	mov	DWORD PTR $T140436[esp+680], edx
	mov	edx, DWORD PTR [esi+1636]
	mov	DWORD PTR $T140436[esp+684], eax
	mov	eax, DWORD PTR [esi+1624]
	mov	DWORD PTR $T140435[esp+676], ecx
	mov	ecx, DWORD PTR [esi+1608]
	mov	DWORD PTR $T140434[esp+676], edx
	mov	edx, DWORD PTR [esi+1604]
	mov	DWORD PTR $T140433[esp+676], eax
	mov	eax, DWORD PTR [esi+1620]
	mov	DWORD PTR $T140432[esp+676], ecx
	mov	DWORD PTR $T140431[esp+676], edx
	mov	DWORD PTR $T140430[esp+676], eax
	mov	DWORD PTR $T140429[esp+676], ebx
	call	__CIpow
	call	__ftol
	fld	DWORD PTR _DestinationLocation$124099[esp+684]
	fsub	DWORD PTR $T140436[esp+684]
	sub	esp, 12					; 0000000cH
	inc	eax
	mov	DWORD PTR _LineSegments$140409[esp+688], eax
	fstp	DWORD PTR [esp+8]
	lea	eax, DWORD PTR [esi+364]
	fld	DWORD PTR _DestinationLocation$124099[esp+692]
	mov	ecx, DWORD PTR [eax]
	fsub	DWORD PTR $T140436[esp+692]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _PreviousPosition$140411[esp+688], ecx
	fstp	DWORD PTR [esp+4]
	lea	ecx, DWORD PTR _Distance$140412[esp+688]
	fld	DWORD PTR _DestinationLocation$124099[esp+688]
	mov	DWORD PTR _PreviousPosition$140411[esp+692], edx
	fsub	DWORD PTR $T140436[esp+688]
	mov	DWORD PTR _PreviousPosition$140411[esp+696], eax
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _Distance$140412[esp+680]
	mov	eax, DWORD PTR _Distance$140412[esp+684]
	fmul	DWORD PTR _Distance$140412[esp+680]
	mov	ecx, DWORD PTR _Distance$140412[esp+676]
	fld	DWORD PTR _Distance$140412[esp+684]
	mov	edx, DWORD PTR _Distance$140412[esp+680]
	fmul	DWORD PTR _Distance$140412[esp+684]
	mov	DWORD PTR _Direction$140413[esp+684], eax
	mov	DWORD PTR _Direction$140413[esp+676], ecx
	mov	DWORD PTR _Direction$140413[esp+680], edx
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Distance$140412[esp+676]
	fmul	DWORD PTR _Distance$140412[esp+676]
	faddp	ST(1), ST(0)
	fld	ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140705
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Distance$140412[esp+676]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$140413[esp+676]
	fld	DWORD PTR _Direction$140413[esp+680]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$140413[esp+680]
	fld	DWORD PTR _Direction$140413[esp+684]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$140413[esp+684]
$L140705:
	fstp	ST(0)
	lea	ecx, DWORD PTR _Axis2$140417[esp+676]

; 3114 : 		unclock(Stats.BeamTime);

	fild	DWORD PTR _LineSegments$140409[esp+676]
	push	ecx
	lea	edx, DWORD PTR _Axis1$140416[esp+680]
	push	edx
	fstp	DWORD PTR -652+[esp+684]
	lea	ecx, DWORD PTR _Direction$140413[esp+684]
	fsqrt
	fdiv	DWORD PTR -652+[esp+684]
	fstp	DWORD PTR _StepLength$140415[esp+684]
	call	DWORD PTR __imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z
	fld	DWORD PTR _Axis1$140416[esp+680]
	fmul	DWORD PTR _Axis1$140416[esp+680]
	fld	DWORD PTR _Axis1$140416[esp+684]
	fmul	DWORD PTR _Axis1$140416[esp+684]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis1$140416[esp+676]
	fmul	DWORD PTR _Axis1$140416[esp+676]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140700
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis1$140416[esp+676]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$140416[esp+676]
	fld	DWORD PTR _Axis1$140416[esp+680]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$140416[esp+680]
	fld	DWORD PTR _Axis1$140416[esp+684]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$140416[esp+684]
$L140700:
	fstp	ST(0)
	fld	DWORD PTR _Axis2$140417[esp+676]
	fmul	DWORD PTR _Axis2$140417[esp+676]
	fld	DWORD PTR _Axis2$140417[esp+680]
	fmul	DWORD PTR _Axis2$140417[esp+680]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis2$140417[esp+684]
	fmul	DWORD PTR _Axis2$140417[esp+684]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140704
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis2$140417[esp+676]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$140417[esp+676]
	fld	DWORD PTR _Axis2$140417[esp+680]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$140417[esp+680]
	fmul	DWORD PTR _Axis2$140417[esp+684]
	fstp	DWORD PTR _Axis2$140417[esp+684]
	jmp	SHORT $L140385
$L140704:

; 3089 : 
; 3090 : 				case BST_SineWave:
; 3091 : 					SineWave(c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.Location, DestinationLocation, System.TesselationLevel,System.TimeScale);

	fstp	ST(0)
$L140385:
	mov	eax, DWORD PTR $T140430[esp+676]
	xor	ecx, ecx
	xor	edx, edx
	mov	dl, al
	mov	cl, bl
	mov	DWORD PTR _PreviousColor$140418[esp+676], ebx
	mov	DWORD PTR _i$140424[esp+676], 0
	sub	edx, ecx
	mov	DWORD PTR -660+[esp+676], edx
	fild	DWORD PTR -660+[esp+676]
	xor	ecx, ecx
	xor	edx, edx
	fdiv	DWORD PTR -652+[esp+676]
	mov	dl, ah
	mov	cl, bh
	mov	ax, WORD PTR $T140429[esp+678]
	sub	edx, ecx
	mov	DWORD PTR -660+[esp+676], edx
	movzx	edx, BYTE PTR $T140430[esp+678]
	xor	ecx, ecx
	mov	cl, al
	movzx	eax, ah
	sub	edx, ecx
	movzx	ecx, BYTE PTR $T140430[esp+679]
	sub	ecx, eax
	mov	eax, DWORD PTR _LineSegments$140409[esp+676]
	test	eax, eax
	fstp	DWORD PTR _RFactor$140420[esp+676]
	fild	DWORD PTR -660+[esp+676]
	mov	DWORD PTR -660+[esp+676], edx
	fdiv	DWORD PTR -652+[esp+676]
	fstp	DWORD PTR _GFactor$140421[esp+676]
	fild	DWORD PTR -660+[esp+676]
	mov	DWORD PTR -660+[esp+676], ecx
	fdiv	DWORD PTR -652+[esp+676]
	fstp	DWORD PTR _BFactor$140422[esp+676]
	fild	DWORD PTR -660+[esp+676]
	fdiv	DWORD PTR -652+[esp+676]
	fstp	DWORD PTR _AFactor$140423[esp+676]
	jle	$L124112
	fld	DWORD PTR $T140441[esp+676]
	fmul	DWORD PTR _TimeSeconds$[esp+676]
	fmul	DWORD PTR __real@41500000
	fstp	DWORD PTR -532+[esp+676]
	fld	DWORD PTR $T140435[esp+676]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR -536+[esp+676]
	jmp	SHORT $L140425
$L140711:
	mov	ebx, DWORD PTR $T140429[esp+676]
$L140425:
	fild	DWORD PTR _i$140424[esp+676]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T140346[esp+688]
	fstp	DWORD PTR -652+[esp+688]
	fld	DWORD PTR _StepLength$140415[esp+688]
	fmul	DWORD PTR -652+[esp+688]
	fstp	DWORD PTR _LengthToHere$140428[esp+688]
	fld	DWORD PTR _Direction$140413[esp+696]
	fmul	DWORD PTR _LengthToHere$140428[esp+688]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Direction$140413[esp+692]
	fmul	DWORD PTR _LengthToHere$140428[esp+688]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _Direction$140413[esp+688]
	fmul	DWORD PTR _LengthToHere$140428[esp+688]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T140346[esp+684]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T140436[esp+696]
	lea	ecx, DWORD PTR $T140347[esp+688]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T140346[esp+692]
	fadd	DWORD PTR $T140436[esp+692]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T140346[esp+688]
	fadd	DWORD PTR $T140436[esp+688]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _LengthToHere$140428[esp+676]
	mov	edx, DWORD PTR $T140347[esp+676]
	fmul	DWORD PTR $T140434[esp+676]
	mov	eax, DWORD PTR $T140347[esp+680]
	mov	ecx, DWORD PTR $T140347[esp+684]
	mov	DWORD PTR _CurrentPosition$140410[esp+676], edx
	fstp	DWORD PTR -644+[esp+676]
	mov	DWORD PTR _CurrentPosition$140410[esp+680], eax
	mov	DWORD PTR _CurrentPosition$140410[esp+684], ecx
	call	edi
	mov	DWORD PTR -660+[esp+676], eax
	fild	DWORD PTR -660+[esp+676]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T140348[esp+688]

; 3114 : 		unclock(Stats.BeamTime);

	fmul	DWORD PTR $T140435[esp+688]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -644+[esp+688]
	fadd	DWORD PTR -532+[esp+688]
	fsub	DWORD PTR -536+[esp+688]
	fsin
	fmul	DWORD PTR $T140433[esp+688]
	fld	DWORD PTR _Axis1$140416[esp+696]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Axis1$140416[esp+692]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _Axis1$140416[esp+688]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp]
	fstp	ST(0)
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T140348[esp+676]
	fadd	DWORD PTR $T140347[esp+676]
	fstp	DWORD PTR _CurrentPosition$140410[esp+676]
	fld	DWORD PTR $T140348[esp+680]
	fadd	DWORD PTR _CurrentPosition$140410[esp+680]
	fstp	DWORD PTR _CurrentPosition$140410[esp+680]
	fld	DWORD PTR $T140348[esp+684]
	fadd	DWORD PTR _CurrentPosition$140410[esp+684]
	fstp	DWORD PTR _CurrentPosition$140410[esp+684]
	call	edi
	mov	DWORD PTR -660+[esp+676], eax
	fild	DWORD PTR -660+[esp+676]
	fmul	DWORD PTR $T140435[esp+676]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -644+[esp+676]
	fadd	DWORD PTR -532+[esp+676]
	fsub	DWORD PTR -536+[esp+676]
	fcos
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T140350[esp+688]
	fmul	DWORD PTR $T140433[esp+688]
	fld	DWORD PTR _Axis2$140417[esp+696]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Axis2$140417[esp+692]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+4]
	fmul	DWORD PTR _Axis2$140417[esp+688]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T140350[esp+676]
	mov	DWORD PTR _CurrentColor$140419[esp+676], ebx
	fadd	DWORD PTR _CurrentPosition$140410[esp+676]
	fstp	DWORD PTR _CurrentPosition$140410[esp+676]
	fld	DWORD PTR $T140350[esp+680]
	fadd	DWORD PTR _CurrentPosition$140410[esp+680]
	fstp	DWORD PTR _CurrentPosition$140410[esp+680]
	fld	DWORD PTR $T140350[esp+684]
	fadd	DWORD PTR _CurrentPosition$140410[esp+684]
	fstp	DWORD PTR _CurrentPosition$140410[esp+684]
	fld	DWORD PTR _RFactor$140420[esp+676]
	fmul	DWORD PTR -652+[esp+676]
	call	__ftol
	fld	DWORD PTR _GFactor$140421[esp+676]
	mov	bl, BYTE PTR $T140429[esp+676]
	fmul	DWORD PTR -652+[esp+676]
	add	al, bl
	mov	BYTE PTR _CurrentColor$140419[esp+676], al
	call	__ftol
	fld	DWORD PTR _BFactor$140422[esp+676]
	mov	dl, BYTE PTR _CurrentColor$140419[esp+677]
	fmul	DWORD PTR -652+[esp+676]
	add	dl, al
	mov	BYTE PTR _CurrentColor$140419[esp+677], dl
	call	__ftol
	fld	DWORD PTR _AFactor$140423[esp+676]
	mov	cl, BYTE PTR _CurrentColor$140419[esp+678]
	fmul	DWORD PTR -652+[esp+676]
	add	cl, al
	mov	BYTE PTR _CurrentColor$140419[esp+678], cl
	call	__ftol
	mov	bl, BYTE PTR _CurrentColor$140419[esp+679]
	mov	edx, DWORD PTR _PreviousColor$140418[esp+676]
	mov	ecx, DWORD PTR $T140431[esp+676]
	add	bl, al
	mov	eax, DWORD PTR $T140432[esp+676]
	push	1
	mov	BYTE PTR _CurrentColor$140419[esp+683], bl
	mov	ebx, DWORD PTR _CurrentColor$140419[esp+680]
	push	ebx
	push	edx
	push	eax
	mov	eax, DWORD PTR _CurrentPosition$140410[esp+692]
	push	ecx
	mov	ecx, DWORD PTR _CurrentPosition$140410[esp+700]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _CurrentPosition$140410[esp+716]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR _PreviousPosition$140411[esp+708]
	mov	eax, DWORD PTR _PreviousPosition$140411[esp+712]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _PreviousPosition$140411[esp+728]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _BeamTexture$[esp+720]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _c$[esp+720]
	mov	edx, DWORD PTR [ecx+124]
	push	0
	push	eax
	mov	ecx, ebp
	call	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine
	mov	eax, DWORD PTR _CurrentPosition$140410[esp+680]
	mov	ecx, DWORD PTR _CurrentPosition$140410[esp+684]
	mov	edx, DWORD PTR _CurrentPosition$140410[esp+676]
	mov	DWORD PTR _PreviousPosition$140411[esp+680], eax
	mov	eax, DWORD PTR _i$140424[esp+676]
	mov	DWORD PTR _PreviousPosition$140411[esp+684], ecx
	mov	ecx, DWORD PTR _LineSegments$140409[esp+676]
	inc	eax
	cmp	eax, ecx
	mov	DWORD PTR _PreviousPosition$140411[esp+676], edx
	mov	DWORD PTR _PreviousColor$140418[esp+676], ebx
	mov	DWORD PTR _i$140424[esp+676], eax
	jl	$L140711

; 3092 : 					break;

	jmp	$L124112
$L124117:

; 3093 : 
; 3094 : 				case BST_DoubleSineWave:
; 3095 : 					DoubleSineWave(c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.Location, DestinationLocation, System.TesselationLevel,System.TimeScale);

	mov	edx, DWORD PTR [esi+1612]
	fld	QWORD PTR __real@4000000000000000
	fild	DWORD PTR [esi+1600]
	mov	ebx, DWORD PTR [esi+1616]
	lea	eax, DWORD PTR [esi+364]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T140638[esp+676], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR $T140633[esp+676], ecx
	mov	ecx, DWORD PTR [esi+1648]
	mov	DWORD PTR $T140633[esp+680], edx
	mov	edx, DWORD PTR [esi+1636]
	mov	DWORD PTR $T140633[esp+684], eax
	mov	eax, DWORD PTR [esi+1624]
	mov	DWORD PTR $T140632[esp+676], ecx
	mov	ecx, DWORD PTR [esi+1608]
	mov	DWORD PTR $T140631[esp+676], edx
	mov	edx, DWORD PTR [esi+1604]
	mov	DWORD PTR $T140630[esp+676], eax
	mov	eax, DWORD PTR [esi+1620]
	mov	DWORD PTR $T140629[esp+676], ecx
	mov	DWORD PTR $T140628[esp+676], edx
	mov	DWORD PTR $T140627[esp+676], eax
	mov	DWORD PTR $T140626[esp+676], ebx
	call	__CIpow
	call	__ftol
	fld	DWORD PTR _DestinationLocation$124099[esp+684]
	fsub	DWORD PTR $T140633[esp+684]
	sub	esp, 12					; 0000000cH
	inc	eax
	mov	DWORD PTR _LineSegments$140542[esp+688], eax
	fstp	DWORD PTR [esp+8]
	lea	eax, DWORD PTR [esi+364]
	fld	DWORD PTR _DestinationLocation$124099[esp+692]
	mov	ecx, DWORD PTR [eax]
	fsub	DWORD PTR $T140633[esp+692]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _PreviousPosition$140544[esp+688], ecx
	fstp	DWORD PTR [esp+4]
	lea	ecx, DWORD PTR _Distance$140545[esp+688]
	fld	DWORD PTR _DestinationLocation$124099[esp+688]
	mov	DWORD PTR _PreviousPosition$140544[esp+692], edx
	fsub	DWORD PTR $T140633[esp+688]
	mov	DWORD PTR _PreviousPosition$140544[esp+696], eax
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _Distance$140545[esp+684]
	mov	eax, DWORD PTR _Distance$140545[esp+684]
	fmul	DWORD PTR _Distance$140545[esp+684]
	mov	ecx, DWORD PTR _Distance$140545[esp+676]
	fld	DWORD PTR _Distance$140545[esp+680]
	mov	edx, DWORD PTR _Distance$140545[esp+680]
	fmul	DWORD PTR _Distance$140545[esp+680]
	mov	DWORD PTR _Direction$140546[esp+684], eax
	fld	DWORD PTR _Distance$140545[esp+676]
	mov	DWORD PTR _Direction$140546[esp+676], ecx
	fmul	DWORD PTR _Distance$140545[esp+676]
	mov	DWORD PTR _Direction$140546[esp+680], edx
	fld	ST(2)
	fadd	ST(0), ST(2)
	fadd	ST(0), ST(1)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140703
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Distance$140545[esp+676]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$140546[esp+676]
	fld	DWORD PTR _Direction$140546[esp+680]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$140546[esp+680]
	fmul	DWORD PTR _Direction$140546[esp+684]
	fstp	DWORD PTR _Direction$140546[esp+684]
	jmp	SHORT $L140579
$L140703:
	fstp	ST(0)
$L140579:

; 3114 : 		unclock(Stats.BeamTime);

	fild	DWORD PTR _LineSegments$140542[esp+676]
	lea	ecx, DWORD PTR _Axis2$140550[esp+676]
	push	ecx
	lea	edx, DWORD PTR _Axis1$140549[esp+680]
	fstp	DWORD PTR -644+[esp+680]
	push	edx
	fxch	ST(2)
	lea	ecx, DWORD PTR _Direction$140546[esp+684]
	fadd	ST(0), ST(1)
	fadd	ST(0), ST(2)
	fsqrt
	fstp	ST(2)
	fstp	ST(0)
	fdiv	DWORD PTR -644+[esp+684]
	fstp	DWORD PTR _StepLength$140548[esp+684]
	call	DWORD PTR __imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z
	fld	DWORD PTR _Axis1$140549[esp+676]
	fmul	DWORD PTR _Axis1$140549[esp+676]
	fld	DWORD PTR _Axis1$140549[esp+680]
	fmul	DWORD PTR _Axis1$140549[esp+680]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis1$140549[esp+684]
	fmul	DWORD PTR _Axis1$140549[esp+684]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140701
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis1$140549[esp+676]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$140549[esp+676]
	fld	DWORD PTR _Axis1$140549[esp+680]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$140549[esp+680]
	fmul	DWORD PTR _Axis1$140549[esp+684]
	fstp	DWORD PTR _Axis1$140549[esp+684]
	jmp	SHORT $L140595
$L140701:

; 3093 : 
; 3094 : 				case BST_DoubleSineWave:
; 3095 : 					DoubleSineWave(c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.Location, DestinationLocation, System.TesselationLevel,System.TimeScale);

	fstp	ST(0)
$L140595:
	fld	DWORD PTR _Axis2$140550[esp+676]
	fmul	DWORD PTR _Axis2$140550[esp+676]
	fld	DWORD PTR _Axis2$140550[esp+680]
	fmul	DWORD PTR _Axis2$140550[esp+680]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis2$140550[esp+684]
	fmul	DWORD PTR _Axis2$140550[esp+684]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140702
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis2$140550[esp+676]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$140550[esp+676]
	fld	DWORD PTR _Axis2$140550[esp+680]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$140550[esp+680]
	fmul	DWORD PTR _Axis2$140550[esp+684]
	fstp	DWORD PTR _Axis2$140550[esp+684]
	jmp	SHORT $L140603
$L140702:
	fstp	ST(0)
$L140603:
	mov	eax, DWORD PTR $T140627[esp+676]
	xor	ecx, ecx
	xor	edx, edx
	mov	dl, al
	mov	cl, bl
	mov	DWORD PTR _PreviousColor$140551[esp+676], ebx
	sub	edx, ecx
	mov	DWORD PTR -636+[esp+676], edx
	fild	DWORD PTR -636+[esp+676]
	xor	ecx, ecx
	xor	edx, edx
	mov	dl, ah
	fdiv	DWORD PTR -644+[esp+676]
	mov	cl, bh
	mov	ax, WORD PTR $T140626[esp+678]
	sub	edx, ecx
	mov	DWORD PTR -636+[esp+676], edx
	movzx	edx, BYTE PTR $T140627[esp+678]
	xor	ecx, ecx
	mov	cl, al
	movzx	eax, ah
	sub	edx, ecx
	movzx	ecx, BYTE PTR $T140627[esp+679]
	sub	ecx, eax
	mov	eax, DWORD PTR _LineSegments$140542[esp+676]
	test	eax, eax
	mov	DWORD PTR _i$140557[esp+676], 0
	fstp	DWORD PTR _RFactor$140553[esp+676]
	fild	DWORD PTR -636+[esp+676]
	mov	DWORD PTR -636+[esp+676], edx
	fdiv	DWORD PTR -644+[esp+676]
	fstp	DWORD PTR _GFactor$140554[esp+676]
	fild	DWORD PTR -636+[esp+676]
	mov	DWORD PTR -636+[esp+676], ecx
	fdiv	DWORD PTR -644+[esp+676]
	fstp	DWORD PTR _BFactor$140555[esp+676]
	fild	DWORD PTR -636+[esp+676]
	fdiv	DWORD PTR -644+[esp+676]
	fstp	DWORD PTR _AFactor$140556[esp+676]
	jle	$L124112
	fld	DWORD PTR _TimeSeconds$[esp+676]
	fmul	QWORD PTR __real@4012000000000000
	fstp	QWORD PTR -20+[esp+676]
	fld	DWORD PTR $T140638[esp+676]
	fmul	DWORD PTR _TimeSeconds$[esp+676]
	fmul	DWORD PTR __real@41500000
	fstp	DWORD PTR -536+[esp+676]
	fld	DWORD PTR $T140632[esp+676]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR -532+[esp+676]
	jmp	SHORT $L140558
$L140712:
	mov	ebx, DWORD PTR $T140626[esp+676]
$L140558:
	fild	DWORD PTR _i$140557[esp+676]
	lea	edx, DWORD PTR _Direction$140546[esp+676]
	push	edx
	lea	ecx, DWORD PTR $T140564[esp+680]
	fstp	DWORD PTR -652+[esp+680]
	fld	DWORD PTR _StepLength$140548[esp+680]
	fmul	DWORD PTR -652+[esp+680]
	fstp	DWORD PTR _LengthToHere$140561[esp+680]
	mov	eax, DWORD PTR _LengthToHere$140561[esp+680]
	push	eax
	push	ecx
	call	??D@YA?AVFVector@@MABV0@@Z		; operator*
	fld	DWORD PTR $T140633[esp+696]
	fadd	DWORD PTR [eax+8]
	lea	ecx, DWORD PTR $T140565[esp+688]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T140633[esp+692]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T140633[esp+688]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR -652+[esp+676]
	mov	edx, DWORD PTR $T140565[esp+676]
	fdiv	DWORD PTR -644+[esp+676]
	mov	eax, DWORD PTR $T140565[esp+680]
	mov	ecx, DWORD PTR $T140565[esp+684]
	mov	DWORD PTR _CurrentPosition$140543[esp+676], edx
	mov	edx, DWORD PTR $T140630[esp+676]
	mov	DWORD PTR _CurrentPosition$140543[esp+680], eax
	mov	DWORD PTR _CurrentPosition$140543[esp+684], ecx
	mov	DWORD PTR _OriginalMaxAmplitude$140562[esp+676], edx
	fmul	DWORD PTR __real@41200000
	fadd	QWORD PTR -20+[esp+676]
	fsin
	fmul	DWORD PTR $T140630[esp+676]
	fstp	DWORD PTR $T140630[esp+676]
	fld	DWORD PTR _LengthToHere$140561[esp+676]
	fmul	DWORD PTR $T140631[esp+676]
	fstp	DWORD PTR -632+[esp+676]
	call	edi
	mov	DWORD PTR -636+[esp+676], eax
	fild	DWORD PTR -636+[esp+676]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T140566[esp+688]

; 3114 : 		unclock(Stats.BeamTime);

	fmul	DWORD PTR $T140632[esp+688]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -536+[esp+688]
	fadd	DWORD PTR -632+[esp+688]
	fsub	DWORD PTR -532+[esp+688]
	fsin
	fmul	DWORD PTR $T140630[esp+688]
	fld	DWORD PTR _Axis1$140549[esp+696]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Axis1$140549[esp+692]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+4]
	fmul	DWORD PTR _Axis1$140549[esp+688]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T140566[esp+676]
	fadd	DWORD PTR $T140565[esp+676]
	fstp	DWORD PTR _CurrentPosition$140543[esp+676]
	fld	DWORD PTR $T140566[esp+680]
	fadd	DWORD PTR _CurrentPosition$140543[esp+680]
	fstp	DWORD PTR _CurrentPosition$140543[esp+680]
	fld	DWORD PTR $T140566[esp+684]
	fadd	DWORD PTR _CurrentPosition$140543[esp+684]
	fstp	DWORD PTR _CurrentPosition$140543[esp+684]
	call	edi
	mov	DWORD PTR -636+[esp+676], eax
	fild	DWORD PTR -636+[esp+676]
	fmul	DWORD PTR $T140632[esp+676]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -536+[esp+676]
	fadd	DWORD PTR -632+[esp+676]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T140568[esp+688]
	fsub	DWORD PTR -532+[esp+688]
	fcos
	fmul	DWORD PTR $T140630[esp+688]
	fld	DWORD PTR _Axis2$140550[esp+696]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Axis2$140550[esp+692]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+4]
	fmul	DWORD PTR _Axis2$140550[esp+688]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T140568[esp+676]
	mov	eax, DWORD PTR _OriginalMaxAmplitude$140562[esp+676]
	fadd	DWORD PTR _CurrentPosition$140543[esp+676]
	mov	DWORD PTR $T140630[esp+676], eax
	mov	DWORD PTR _CurrentColor$140552[esp+676], ebx
	fstp	DWORD PTR _CurrentPosition$140543[esp+676]
	fld	DWORD PTR $T140568[esp+680]
	fadd	DWORD PTR _CurrentPosition$140543[esp+680]
	fstp	DWORD PTR _CurrentPosition$140543[esp+680]
	fld	DWORD PTR $T140568[esp+684]
	fadd	DWORD PTR _CurrentPosition$140543[esp+684]
	fstp	DWORD PTR _CurrentPosition$140543[esp+684]
	fld	DWORD PTR _RFactor$140553[esp+676]
	fmul	DWORD PTR -652+[esp+676]
	call	__ftol
	fld	DWORD PTR _GFactor$140554[esp+676]
	mov	dl, BYTE PTR $T140626[esp+676]
	fmul	DWORD PTR -652+[esp+676]
	add	al, dl
	mov	BYTE PTR _CurrentColor$140552[esp+676], al
	call	__ftol
	fld	DWORD PTR _BFactor$140555[esp+676]
	mov	cl, BYTE PTR _CurrentColor$140552[esp+677]
	fmul	DWORD PTR -652+[esp+676]
	add	cl, al
	mov	BYTE PTR _CurrentColor$140552[esp+677], cl
	call	__ftol
	fld	DWORD PTR _AFactor$140556[esp+676]
	mov	bl, BYTE PTR _CurrentColor$140552[esp+678]
	fmul	DWORD PTR -652+[esp+676]
	add	bl, al
	mov	BYTE PTR _CurrentColor$140552[esp+678], bl
	call	__ftol
	mov	dl, BYTE PTR _CurrentColor$140552[esp+679]
	mov	ecx, DWORD PTR _PreviousColor$140551[esp+676]
	add	dl, al
	mov	eax, DWORD PTR $T140628[esp+676]
	push	1
	mov	BYTE PTR _CurrentColor$140552[esp+683], dl
	mov	ebx, DWORD PTR _CurrentColor$140552[esp+680]
	mov	edx, DWORD PTR $T140629[esp+680]
	push	ebx
	push	ecx
	push	edx
	mov	edx, DWORD PTR _CurrentPosition$140543[esp+692]
	push	eax
	mov	eax, DWORD PTR _CurrentPosition$140543[esp+700]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _CurrentPosition$140543[esp+716]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _PreviousPosition$140544[esp+708]
	mov	edx, DWORD PTR _PreviousPosition$140544[esp+712]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _PreviousPosition$140544[esp+728]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _BeamTexture$[esp+720]
	push	0
	mov	DWORD PTR [eax+8], ecx
	push	edx
	mov	eax, DWORD PTR _c$[esp+728]
	mov	edx, DWORD PTR [eax+124]
	mov	ecx, ebp
	call	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine
	mov	eax, DWORD PTR _CurrentPosition$140543[esp+684]
	mov	ecx, DWORD PTR _CurrentPosition$140543[esp+676]
	mov	edx, DWORD PTR _CurrentPosition$140543[esp+680]
	mov	DWORD PTR _PreviousPosition$140544[esp+684], eax
	mov	eax, DWORD PTR _i$140557[esp+676]
	mov	DWORD PTR _PreviousPosition$140544[esp+676], ecx
	mov	ecx, DWORD PTR _LineSegments$140542[esp+676]
	inc	eax
	cmp	eax, ecx
	mov	DWORD PTR _PreviousPosition$140544[esp+680], edx
	mov	DWORD PTR _PreviousColor$140551[esp+676], ebx
	mov	DWORD PTR _i$140557[esp+676], eax
	jl	$L140712

; 3096 : 					break;

	jmp	$L124112
$L124118:

; 3097 : 
; 3098 : 				case BST_Spline:
; 3099 : 					DrawSpline(System,c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.TesselationLevel);

	mov	eax, DWORD PTR [esi+1600]
	test	eax, eax
	jle	$L124112
	mov	eax, DWORD PTR [esi+2208]
	test	eax, eax
	jle	$L124112
	lea	eax, DWORD PTR [esi+1708]
	mov	DWORD PTR -660+[esp+676], 32		; 00000020H
$L140644:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $L140645
	add	ecx, 364				; 0000016cH
	mov	ebx, DWORD PTR [ecx]
	lea	edx, DWORD PTR [eax-12]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], ebx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
$L140645:
	mov	ecx, DWORD PTR -660+[esp+676]
	add	eax, 16					; 00000010H
	dec	ecx
	mov	DWORD PTR -660+[esp+676], ecx
	jne	SHORT $L140644
	lea	ebx, DWORD PTR [esi+1696]
	mov	edx, ebx
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	push	0
	push	0
	mov	DWORD PTR _PreviousLocation$140648[esp+688], ecx
	push	0
	lea	ecx, DWORD PTR _Bogus$140649[esp+688]
	mov	DWORD PTR _PreviousLocation$140648[esp+688], eax
	mov	DWORD PTR _PreviousLocation$140648[esp+696], edx
	call	DWORD PTR __imp_??0FRotator@@QAE@HHH@Z
	mov	ecx, DWORD PTR _PreviousLocation$140648[esp+680]
	mov	eax, DWORD PTR _PreviousLocation$140648[esp+676]
	mov	edx, DWORD PTR _PreviousLocation$140648[esp+684]
	mov	DWORD PTR _LastPoint$140650[esp+680], ecx
	mov	DWORD PTR _NewLastPoint$140651[esp+680], ecx
	mov	ecx, DWORD PTR [esi+2208]
	mov	DWORD PTR _LastPoint$140650[esp+676], eax
	mov	DWORD PTR _NewLastPoint$140651[esp+676], eax
	lea	eax, DWORD PTR [ecx-1]
	test	eax, eax
	mov	DWORD PTR _LastPoint$140650[esp+684], edx
	mov	DWORD PTR _NewLastPoint$140651[esp+684], edx
	mov	DWORD PTR -628+[esp+676], eax
	jle	$L124112
	mov	eax, DWORD PTR [esi+1600]
	mov	edx, 1
	mov	DWORD PTR -632+[esp+676], eax
	mov	DWORD PTR -640+[esp+676], edx
	mov	DWORD PTR -648+[esp+676], ebx

; 3115 : 	}

	npad	7

; 3097 : 
; 3098 : 				case BST_Spline:
; 3099 : 					DrawSpline(System,c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.TesselationLevel);

$L140652:
	cmp	edx, ecx
	mov	edi, DWORD PTR -648+[esp+676]
	mov	ebx, DWORD PTR [edi]
	mov	DWORD PTR _CurrentLocation$140655[esp+676], ebx
	mov	ebx, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [edi+8]
	mov	DWORD PTR _CurrentLocation$140655[esp+680], ebx
	mov	DWORD PTR _CurrentLocation$140655[esp+684], edi
	jl	SHORT $L140657
	mov	edx, DWORD PTR -628+[esp+676]
$L140657:
	lea	edi, DWORD PTR [edx+106]
	shl	edi, 4
	add	edi, esi
	mov	ebx, DWORD PTR [edi]
	mov	DWORD PTR _NextLocation$140658[esp+676], ebx
	mov	ebx, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [edi+8]
	inc	edx
	cmp	edx, ecx
	mov	DWORD PTR _NextLocation$140658[esp+680], ebx
	mov	DWORD PTR _NextLocation$140658[esp+684], edi
	jl	SHORT $L140659
	mov	edx, DWORD PTR -628+[esp+676]
$L140659:
	add	edx, 106				; 0000006aH
	shl	edx, 4
	add	edx, esi
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR _NextLocation1$140660[esp+676], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	xor	edi, edi
	test	eax, eax
	mov	DWORD PTR _NextLocation1$140660[esp+680], ecx
	mov	DWORD PTR _NextLocation1$140660[esp+684], edx
	mov	DWORD PTR _j$140661[esp+676], edi
	jle	$L140710

; 3115 : 	}

	npad	6

; 3097 : 
; 3098 : 				case BST_Spline:
; 3099 : 					DrawSpline(System,c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.TesselationLevel);

$L140662:
	mov	eax, DWORD PTR _Bogus$140649[esp+676]
	fild	DWORD PTR _j$140661[esp+676]
	mov	ecx, DWORD PTR _Bogus$140649[esp+680]
	mov	edx, DWORD PTR _Bogus$140649[esp+684]
	mov	ebp, DWORD PTR _NextLocation1$140660[esp+676]
	fidiv	DWORD PTR -632+[esp+676]
	sub	esp, 12					; 0000000cH
	mov	ebx, esp
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], ecx
	mov	DWORD PTR [ebx+8], edx
	sub	esp, 12					; 0000000cH
	mov	ebx, esp
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR _NextLocation1$140660[esp+704]
	mov	DWORD PTR [ebx+4], ebp
	mov	ebp, DWORD PTR _NextLocation1$140660[esp+708]
	mov	DWORD PTR [ebx+8], ebp
	mov	ebp, DWORD PTR _NextLocation$140658[esp+700]
	sub	esp, 12					; 0000000cH
	mov	ebx, esp
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], ecx
	mov	DWORD PTR [ebx+8], edx
	sub	esp, 12					; 0000000cH
	mov	ebx, esp
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR _NextLocation$140658[esp+728]
	mov	DWORD PTR [ebx+4], ebp
	mov	ebp, DWORD PTR _NextLocation$140658[esp+732]
	mov	DWORD PTR [ebx+8], ebp
	mov	ebp, DWORD PTR _CurrentLocation$140655[esp+724]
	sub	esp, 12					; 0000000cH
	mov	ebx, esp
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], ecx
	mov	DWORD PTR [ebx+8], edx
	sub	esp, 12					; 0000000cH
	mov	ebx, esp
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR _CurrentLocation$140655[esp+752]
	mov	DWORD PTR [ebx+4], ebp
	mov	ebp, DWORD PTR _CurrentLocation$140655[esp+756]
	mov	DWORD PTR [ebx+8], ebp
	sub	esp, 12					; 0000000cH
	mov	ebx, esp
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], ecx
	mov	ecx, DWORD PTR _PreviousLocation$140648[esp+760]
	mov	DWORD PTR [ebx+8], edx
	mov	edx, DWORD PTR _PreviousLocation$140648[esp+764]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _PreviousLocation$140648[esp+780]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR _Bogus$140649[esp+772]
	push	edx
	lea	eax, DWORD PTR _NewLastPoint$140651[esp+776]
	push	eax
	push	ecx
	fstp	DWORD PTR [esp]
	call	?KRSpline_Sample@@YAXMAAVFVector@@AAVFRotator@@V1@V2@232323@Z ; KRSpline_Sample
	mov	ecx, DWORD PTR [esi+1620]
	mov	edx, DWORD PTR [esi+1616]
	mov	eax, DWORD PTR [esi+1608]
	add	esp, 108				; 0000006cH
	push	1
	push	ecx
	mov	ecx, DWORD PTR [esi+1604]
	push	edx
	push	eax
	mov	eax, DWORD PTR _NewLastPoint$140651[esp+692]
	push	ecx
	mov	ecx, DWORD PTR _NewLastPoint$140651[esp+700]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _NewLastPoint$140651[esp+716]
	mov	ebp, DWORD PTR _this$[esp+708]
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR _LastPoint$140650[esp+708]
	mov	eax, DWORD PTR _LastPoint$140650[esp+712]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _LastPoint$140650[esp+728]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _BeamTexture$[esp+720]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _c$[esp+720]
	mov	edx, DWORD PTR [ecx+124]
	push	0
	push	eax
	mov	ecx, ebp
	call	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine
	mov	eax, DWORD PTR _NewLastPoint$140651[esp+680]
	mov	edx, DWORD PTR _NewLastPoint$140651[esp+676]
	mov	ecx, DWORD PTR _NewLastPoint$140651[esp+684]
	mov	DWORD PTR _LastPoint$140650[esp+680], eax
	mov	eax, DWORD PTR [esi+1600]
	inc	edi
	cmp	edi, eax
	mov	DWORD PTR _LastPoint$140650[esp+676], edx
	mov	DWORD PTR _LastPoint$140650[esp+684], ecx
	mov	DWORD PTR _j$140661[esp+676], edi
	mov	DWORD PTR -632+[esp+676], eax
	jl	$L140662
$L140710:
	mov	ecx, DWORD PTR -648+[esp+676]
	mov	edx, DWORD PTR -640+[esp+676]
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _PreviousLocation$140648[esp+676], ebx
	mov	ebx, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [edi+8]
	inc	edx
	mov	DWORD PTR -648+[esp+676], ecx
	mov	ecx, DWORD PTR [esi+2208]
	mov	DWORD PTR _PreviousLocation$140648[esp+680], ebx
	mov	DWORD PTR _PreviousLocation$140648[esp+684], edi
	lea	edi, DWORD PTR [ecx-1]
	lea	ebx, DWORD PTR [edx-1]
	cmp	ebx, edi
	mov	DWORD PTR -640+[esp+676], edx
	mov	DWORD PTR -628+[esp+676], edi
	jl	$L140652

; 3100 : 					break;

	mov	edi, DWORD PTR __imp__rand
	jmp	$L124112
$L124119:

; 3101 : 
; 3102 : 				case BST_Straight:
; 3103 : 					dnDraw3DLine(c->Frame,BeamTexture, 0,System.Location,DestinationLocation,System.BeamStartWidth,System.BeamEndWidth,System.BeamColor,System.BeamEndColor,true);

	mov	edx, DWORD PTR [esi+1620]
	mov	eax, DWORD PTR [esi+1616]
	mov	ecx, DWORD PTR [esi+1608]
	push	1
	push	edx
	mov	edx, DWORD PTR [esi+1604]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _DestinationLocation$124099[esp+692]
	push	edx
	mov	edx, DWORD PTR _DestinationLocation$124099[esp+700]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _DestinationLocation$124099[esp+716]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [esi+364]
	mov	ecx, DWORD PTR [eax]
	mov	edx, esp
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _BeamTexture$[esp+720]
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR _c$[esp+720]
	mov	edx, DWORD PTR [edx+124]
	push	0
	push	ecx
	mov	ecx, ebp
	call	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine

; 3104 : 					break;

	jmp	$L124112
$L124120:

; 3105 : 
; 3106 : 				case BST_Grid:
; 3107 : 					MovingGrid(c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.TesselationLevel);

	mov	eax, DWORD PTR [esi+1600]
	mov	edx, DWORD PTR _DestinationLocation$124099[esp+676]
	push	eax
	mov	eax, DWORD PTR _DestinationLocation$124099[esp+684]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _DestinationLocation$124099[esp+700]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	lea	eax, DWORD PTR [esi+364]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [esi+1648]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _TimeSeconds$[esp+704]
	mov	eax, DWORD PTR [esi+1636]
	push	ecx
	mov	ecx, DWORD PTR [esi+1624]
	push	edx
	mov	edx, DWORD PTR [esi+1608]
	push	eax
	mov	eax, DWORD PTR [esi+1604]
	push	ecx
	mov	ecx, DWORD PTR [esi+1620]
	push	0
	push	edx
	mov	edx, DWORD PTR [esi+1616]
	push	eax
	mov	eax, DWORD PTR _BeamTexture$[esp+732]
	push	ecx
	push	edx
	mov	edx, DWORD PTR _c$[esp+740]
	push	eax
	mov	ecx, ebp
	call	?MovingGrid@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@3H@Z ; UD3DRenderDevice::MovingGrid
$L124112:

; 3108 : 					break;
; 3109 : 			}
; 3110 : 			QueuedLinesFlush(System,Frame,BeamTexture,0);

	mov	ecx, DWORD PTR _BeamTexture$[esp+676]
	mov	edx, DWORD PTR _Frame$[esp+672]
	push	0
	push	ecx
	push	edx
	mov	edx, esi
	mov	ecx, ebp
	call	?QueuedLinesFlush@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAUFSceneNode@@PAVUTexture@@K@Z ; UD3DRenderDevice::QueuedLinesFlush
	mov	eax, DWORD PTR _i$[esp+676]
	mov	ebx, DWORD PTR -412+[esp+676]
	mov	edx, DWORD PTR -596+[esp+676]
	mov	ecx, DWORD PTR [esi+2356]
	inc	eax
	add	ebx, 4
	add	edx, 12					; 0000000cH
	cmp	eax, ecx
	mov	DWORD PTR _i$[esp+676], eax
	mov	DWORD PTR -412+[esp+676], ebx
	mov	DWORD PTR -596+[esp+676], edx
	jl	$L124096
$L124098:

; 3111 : 
; 3112 : 		}
; 3113 : 		QueueParticleFlush(System,Frame);

	mov	eax, DWORD PTR _Frame$[esp+672]
	push	eax
	mov	edx, esi
	mov	ecx, ebp
	call	?QueueParticleFlush@UD3DRenderDevice@@QAIXAAVAParticleSystem@@PAUFSceneNode@@@Z ; UD3DRenderDevice::QueueParticleFlush

; 3114 : 		unclock(Stats.BeamTime);

	mov	ecx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [ecx], 0
	mov	DWORD PTR _L$140679[esp+676], 0
	je	SHORT $L140681
	rdtsc
	mov	DWORD PTR _L$140679[esp+676], eax
	mov	DWORD PTR _H$140680[esp+676], edx
$L140681:
	mov	edx, DWORD PTR _L$140679[esp+676]
	mov	eax, DWORD PTR [ebp+19640]
	add	edx, -34				; ffffffdeH
	add	eax, edx
	mov	DWORD PTR [ebp+19640], eax
$L124072:

; 3115 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 660				; 00000294H
	ret	4
	npad	2
$L140716:
	DD	$L124119
	DD	$L124115
	DD	$L124115
	DD	$L124116
	DD	$L124117
	DD	$L124118
	DD	$L124120
?dnDrawBeam@UD3DRenderDevice@@UAIXAAVABeamSystem@@PAUFSceneNode@@@Z ENDP ; UD3DRenderDevice::dnDrawBeam
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnMath.h
_TEXT	ENDS
;	COMDAT ??D@YA?AVFVector@@MABV0@@Z
_TEXT	SEGMENT
_Scale$ = 12
_V$ = 16
___$ReturnUdt$ = 8
??D@YA?AVFVector@@MABV0@@Z PROC NEAR			; operator*, COMDAT

; 228  : 		return FVector( V.X * Scale, V.Y * Scale, V.Z * Scale );

	mov	eax, DWORD PTR _V$[esp-4]
	fld	DWORD PTR _Scale$[esp-4]
	fmul	DWORD PTR [eax+8]
	fld	DWORD PTR _Scale$[esp-4]
	fmul	DWORD PTR [eax+4]
	fld	DWORD PTR _Scale$[esp-4]
	fmul	DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	fstp	DWORD PTR [eax]
	fstp	DWORD PTR [eax+4]
	fstp	DWORD PTR [eax+8]

; 229  : 	}

	ret	0
??D@YA?AVFVector@@MABV0@@Z ENDP				; operator*
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?KRSpline_Sample@@YAXMAAVFVector@@AAVFRotator@@V1@V2@232323@Z
_TEXT	SEGMENT
_t$ = 8
_NewLocation$ = 12
_NewRotation$ = 16
_p1$ = 20
_PreviousRotation$ = 32
_p2$ = 44
_Rotation$ = 56
_p3$ = 68
_NextRotation$ = 80
_p4$ = 92
_Next2Rotation$ = 104
_opt1$ = -28
_opt2$ = -32
_opt3$ = 8
$T140729 = 92
$T140730 = 44
$T140731 = 68
$T140732 = -24
$T140733 = 92
$T140734 = -12
$T140735 = 68
$T140736 = 92
$T140737 = 68
$T140738 = 92
$T140739 = 20
$T140740 = 44
$T140743 = 92
$T140744 = 92
?KRSpline_Sample@@YAXMAAVFVector@@AAVFRotator@@V1@V2@232323@Z PROC NEAR ; KRSpline_Sample, COMDAT

; 2636 : {

	sub	esp, 32					; 00000020H

; 2637 :     float t3, t2, opt1, opt2, opt3, opt4;
; 2638 :     
; 2639 :     t2 = t*t;

	fld	DWORD PTR _t$[esp+28]
	push	ebx
	fmul	DWORD PTR _t$[esp+32]
	push	ebp

; 2640 :     t3 = t2*t;

	fld	DWORD PTR _t$[esp+36]
	push	esi
	push	edi
	fmul	ST(0), ST(1)

; 2641 : 
; 2642 :  // Q(t) = .5(P1(-t^3+2t^2-t) + P2(3t^3-5t^2+2) + P3(-3t^3+4t^2+t) + P4(t^3-t^2))
; 2643 : 
; 2644 : 	opt1 = -t3+2.f*t2-t;

	fld	ST(1)
	fadd	ST(0), ST(0)
	fsub	ST(0), ST(1)
	fsub	DWORD PTR _t$[esp+44]
	fstp	DWORD PTR _opt1$[esp+48]

; 2645 : 	opt2 = 3.f*t3-5.f*t2+2.;

	fld	DWORD PTR __real@40400000
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	DWORD PTR __real@40a00000
	fsubr	ST(0), ST(1)
	fadd	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR _opt2$[esp+48]

; 2646 : 	opt3 = -3.f*t3+4.f*t2+t;

	fld	ST(2)
	fmul	DWORD PTR __real@40800000
	fsub	ST(0), ST(1)
	fadd	DWORD PTR _t$[esp+44]
	fstp	DWORD PTR _opt3$[esp+44]
	fstp	ST(0)

; 2647 : 	opt4 = t3-t2;

	fsubrp	ST(1), ST(0)

; 2648 : 
; 2649 : 	NewLocation=.5f*((p1*opt1)+(p2*opt2)+(p3*opt3)+(p4*opt4));

	fld	DWORD PTR _p4$[esp+44]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _p4$[esp+48]
	fmul	ST(0), ST(2)
	fld	DWORD PTR _p4$[esp+52]
	fmul	ST(0), ST(3)
	fstp	DWORD PTR $T140734[esp+56]
	fld	DWORD PTR _p3$[esp+44]
	fmul	DWORD PTR _opt3$[esp+44]
	fld	DWORD PTR _p3$[esp+48]
	fmul	DWORD PTR _opt3$[esp+44]
	fld	DWORD PTR _p3$[esp+52]
	fmul	DWORD PTR _opt3$[esp+44]
	fstp	DWORD PTR $T140732[esp+56]
	fld	DWORD PTR _p2$[esp+44]
	fmul	DWORD PTR _opt2$[esp+48]
	fld	DWORD PTR _p2$[esp+48]
	fmul	DWORD PTR _opt2$[esp+48]
	fld	DWORD PTR _p2$[esp+52]
	fmul	DWORD PTR _opt2$[esp+48]
	fstp	DWORD PTR $T140730[esp+52]
	fld	DWORD PTR _p1$[esp+44]
	fmul	DWORD PTR _opt1$[esp+48]
	fstp	DWORD PTR $T140729[esp+44]
	fld	DWORD PTR _p1$[esp+48]
	fmul	DWORD PTR _opt1$[esp+48]
	fstp	DWORD PTR $T140729[esp+48]
	fld	DWORD PTR _p1$[esp+52]
	fmul	DWORD PTR _opt1$[esp+48]
	fstp	DWORD PTR $T140729[esp+52]
	fld	DWORD PTR $T140729[esp+44]
	fadd	ST(0), ST(2)
	fstp	DWORD PTR $T140731[esp+44]
	fld	DWORD PTR $T140729[esp+48]
	fadd	ST(0), ST(1)
	fstp	DWORD PTR $T140731[esp+48]
	fstp	ST(0)
	fstp	ST(0)
	fld	DWORD PTR $T140729[esp+52]
	fadd	DWORD PTR $T140730[esp+52]
	fstp	DWORD PTR $T140731[esp+52]
	fld	DWORD PTR $T140731[esp+44]
	mov	eax, DWORD PTR _NewLocation$[esp+44]
	fadd	ST(0), ST(2)
	fstp	DWORD PTR $T140733[esp+44]
	fld	DWORD PTR $T140731[esp+48]
	fadd	ST(0), ST(1)
	fstp	ST(2)
	fstp	ST(0)
	fld	DWORD PTR $T140731[esp+52]
	fadd	DWORD PTR $T140732[esp+56]
	fstp	DWORD PTR $T140733[esp+52]
	fld	DWORD PTR $T140733[esp+44]
	fadd	ST(0), ST(3)
	fstp	DWORD PTR $T140735[esp+44]
	fadd	ST(0), ST(1)
	fstp	ST(2)
	fstp	ST(0)
	fld	DWORD PTR $T140733[esp+52]
	fadd	DWORD PTR $T140734[esp+56]
	fld	DWORD PTR $T140735[esp+44]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR $T140736[esp+44]
	mov	ecx, DWORD PTR $T140736[esp+44]
	fxch	ST(1)
	fmul	DWORD PTR __real@3f000000
	mov	DWORD PTR [eax], ecx
	fstp	DWORD PTR $T140736[esp+48]
	mov	edx, DWORD PTR $T140736[esp+48]
	fmul	DWORD PTR __real@3f000000
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T140736[esp+52]

; 2650 : 	NewRotation=.5f*((PreviousRotation*opt1)+(Rotation*opt2)+(NextRotation*opt3)+(Next2Rotation*opt4));

	fild	DWORD PTR _Next2Rotation$[esp+44]
	mov	ecx, DWORD PTR $T140736[esp+52]
	mov	DWORD PTR [eax+8], ecx
	fmul	ST(0), ST(1)
	call	__ftol
	fild	DWORD PTR _Next2Rotation$[esp+48]
	mov	esi, eax
	fmul	ST(0), ST(1)
	call	__ftol
	fild	DWORD PTR _Next2Rotation$[esp+52]
	mov	edi, eax
	fmul	ST(0), ST(1)
	call	__ftol
	fstp	ST(0)
	fild	DWORD PTR _NextRotation$[esp+44]
	mov	ebx, eax
	fmul	DWORD PTR _opt3$[esp+44]
	call	__ftol
	fild	DWORD PTR _NextRotation$[esp+48]
	mov	ebp, eax
	fmul	DWORD PTR _opt3$[esp+44]
	call	__ftol
	fild	DWORD PTR _NextRotation$[esp+52]
	mov	DWORD PTR $T140740[esp+48], eax
	fmul	DWORD PTR _opt3$[esp+44]
	call	__ftol
	fild	DWORD PTR _Rotation$[esp+44]
	mov	DWORD PTR $T140740[esp+52], eax
	fmul	DWORD PTR _opt2$[esp+48]
	call	__ftol
	fild	DWORD PTR _Rotation$[esp+48]
	mov	DWORD PTR $T140738[esp+44], eax
	fmul	DWORD PTR _opt2$[esp+48]
	call	__ftol
	fild	DWORD PTR _Rotation$[esp+52]
	mov	DWORD PTR $T140738[esp+48], eax
	fmul	DWORD PTR _opt2$[esp+48]
	call	__ftol
	mov	DWORD PTR $T140738[esp+52], eax
	fild	DWORD PTR _PreviousRotation$[esp+44]
	fmul	DWORD PTR _opt1$[esp+48]
	call	__ftol
	fild	DWORD PTR _PreviousRotation$[esp+48]
	mov	DWORD PTR $T140737[esp+44], eax
	fmul	DWORD PTR _opt1$[esp+48]
	call	__ftol
	fild	DWORD PTR _PreviousRotation$[esp+52]
	mov	DWORD PTR $T140737[esp+48], eax
	fmul	DWORD PTR _opt1$[esp+48]
	call	__ftol
	mov	ecx, DWORD PTR $T140738[esp+44]
	mov	edx, DWORD PTR $T140737[esp+44]
	add	edx, ecx
	mov	ecx, DWORD PTR $T140738[esp+48]
	mov	DWORD PTR $T140739[esp+44], edx
	mov	edx, DWORD PTR $T140737[esp+48]
	add	ecx, edx
	mov	edx, DWORD PTR $T140738[esp+52]
	add	eax, edx
	mov	edx, DWORD PTR $T140739[esp+44]
	add	edx, ebp
	mov	ebp, DWORD PTR $T140740[esp+48]
	add	ecx, ebp
	mov	ebp, DWORD PTR $T140740[esp+52]
	add	eax, ebp
	add	eax, ebx
	mov	DWORD PTR $T140743[esp+52], eax
	fild	DWORD PTR $T140743[esp+52]
	add	edx, esi
	add	ecx, edi
	fmul	DWORD PTR __real@3f000000
	mov	DWORD PTR $T140743[esp+44], edx
	mov	DWORD PTR $T140743[esp+48], ecx
	call	__ftol
	fild	DWORD PTR $T140743[esp+48]
	push	eax
	fmul	DWORD PTR __real@3f000000
	call	__ftol
	fild	DWORD PTR $T140743[esp+48]
	push	eax
	fmul	DWORD PTR __real@3f000000
	call	__ftol
	push	eax
	lea	ecx, DWORD PTR $T140744[esp+56]
	call	DWORD PTR __imp_??0FRotator@@QAE@HHH@Z
	mov	ecx, DWORD PTR $T140744[esp+44]
	mov	eax, DWORD PTR _NewRotation$[esp+44]
	mov	edx, DWORD PTR $T140744[esp+48]
	pop	edi
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T140744[esp+48]
	pop	esi
	mov	DWORD PTR [eax+4], edx
	pop	ebp
	mov	DWORD PTR [eax+8], ecx
	pop	ebx

; 2651 : 
; 2652 : }

	add	esp, 32					; 00000020H
	ret	0
?KRSpline_Sample@@YAXMAAVFVector@@AAVFRotator@@V1@V2@232323@Z ENDP ; KRSpline_Sample
_TEXT	ENDS
PUBLIC	?QueueParticleShutdown@UD3DRenderDevice@@QAIXXZ	; UD3DRenderDevice::QueueParticleShutdown
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
;	COMDAT ?QueueParticleShutdown@UD3DRenderDevice@@QAIXXZ
_TEXT	SEGMENT
?QueueParticleShutdown@UD3DRenderDevice@@QAIXXZ PROC NEAR ; UD3DRenderDevice::QueueParticleShutdown, COMDAT
; _this$ = ecx

; 3132 : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 3133 : 		VALIDATE;
; 3134 : 
; 3135 : 		for(int i=0;i<QueuedParticles.Num();i++)

	mov	eax, DWORD PTR [esi+675228]
	xor	ebx, ebx
	test	eax, eax
	jle	SHORT $L124126
	push	edi
	xor	edi, edi
$L124124:

; 3136 : 			if(QueuedParticles(i).p&&QueuedParticles(i).ParticleMax)

	mov	eax, DWORD PTR [esi+675224]
	mov	edx, DWORD PTR [eax+edi+4]
	add	eax, edi
	test	edx, edx
	je	SHORT $L124125
	mov	ecx, DWORD PTR [eax+12]
	test	ecx, ecx
	je	SHORT $L124125

; 3137 : 				appFree(QueuedParticles(i).p);

	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR [eax+8]
$L124125:
	mov	eax, DWORD PTR [esi+675228]
	inc	ebx
	add	edi, 16					; 00000010H
	cmp	ebx, eax
	jl	SHORT $L124124
	pop	edi
$L124126:
	pop	esi
	pop	ebx

; 3138 : 	}

	ret	0
?QueueParticleShutdown@UD3DRenderDevice@@QAIXXZ ENDP	; UD3DRenderDevice::QueueParticleShutdown
_TEXT	ENDS
PUBLIC	??_C@_1CC@NBJF@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CC@NBJF@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_1CC@NBJF@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ DB 'Q'
	DB	00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'P', 00H, 'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, 00H, 00H		; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z
_TEXT	SEGMENT
_Texture$ = 8
?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z PROC NEAR ; UD3DRenderDevice::QueuedParticleAlloc, COMDAT
; _this$ = ecx

; 3142 : 	{

	push	ebx

; 3143 : 		VALIDATE;
; 3144 : 
; 3145 : 		// Attempt to find the bin this texture fits under, or allocate one if nessecary:
; 3146 : 		for(int bin=0;bin<QueuedParticles.Num();bin++)

	mov	ebx, DWORD PTR _Texture$[esp]
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
	mov	ecx, DWORD PTR [edi+675228]
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L141027
	mov	edx, DWORD PTR [edi+675224]

; 3179 : 	}

	npad	4
$L124131:

; 3147 : 			if(QueuedParticles(bin).Texture==Texture)

	cmp	DWORD PTR [edx], ebx
	je	SHORT $L141027
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	jl	SHORT $L124131
$L141027:

; 3148 : 				break;
; 3149 : 
; 3150 : 		// Couldn't locate the bin for this particle system, allocate one of the free bins.
; 3151 : 		if(bin>=QueuedParticles.Num())

	cmp	eax, ecx
	jl	SHORT $L124135

; 3152 : 		{
; 3153 : 			// Find an empty bin (ie, particle count is zero)
; 3154 : 			for(bin=0;bin<QueuedParticles.Num();bin++)

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L141028
	mov	edx, DWORD PTR [edi+675224]
	add	edx, 8

; 3179 : 	}

	npad	1

; 3152 : 		{
; 3153 : 			// Find an empty bin (ie, particle count is zero)
; 3154 : 			for(bin=0;bin<QueuedParticles.Num();bin++)

$L124136:

; 3155 : 				if(!QueuedParticles(bin).ParticleCount)

	cmp	DWORD PTR [edx], 0
	je	SHORT $L141028
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	jl	SHORT $L124136
$L141028:

; 3156 : 					break;
; 3157 : 
; 3158 : 			// No bins available, allocate and initialize one:
; 3159 : 			if(bin>=QueuedParticles.Num())

	cmp	eax, ecx
	jl	SHORT $L124140

; 3160 : 				bin=QueuedParticles.AddZeroed();

	push	16					; 00000010H
	lea	esi, DWORD PTR [edi+675224]
	push	1
	mov	ecx, esi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	ebp, DWORD PTR [esi]
	xor	ecx, ecx
	mov	edx, eax
	shl	edx, 4
	add	edx, ebp
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], ecx
	mov	DWORD PTR [edx+12], ecx
$L124140:

; 3161 : 
; 3162 : 			// Set the bin's texture to my own.
; 3163 : 			QueuedParticles(bin).Texture=Texture;

	mov	edx, DWORD PTR [edi+675224]
	mov	ecx, eax
	shl	ecx, 4
	mov	DWORD PTR [ecx+edx], ebx
$L124135:

; 3164 : 		}
; 3165 : 
; 3166 : 		// Ok, I've got a valid bin, now allocate a particle out of it:
; 3167 : 	    int ParticleIndex=QueuedParticles(bin).ParticleCount;

	shl	eax, 4
	mov	ebx, eax
	mov	eax, DWORD PTR [edi+675224]
	mov	ebp, DWORD PTR [ebx+eax+8]
	lea	eax, DWORD PTR [ebx+eax+8]

; 3168 : 		QueuedParticles(bin).ParticleCount++;

	mov	esi, ebp
	inc	esi
	mov	DWORD PTR [eax], esi

; 3169 : 
; 3170 : 		// Do I need to allocate more particles to make room for the new one?
; 3171 : 		if(QueuedParticles(bin).ParticleCount>=QueuedParticles(bin).ParticleMax)

	mov	ecx, DWORD PTR [edi+675224]
	mov	edx, DWORD PTR [ebx+ecx+8]
	lea	eax, DWORD PTR [ebx+ecx]
	mov	ecx, DWORD PTR [eax+12]
	cmp	edx, ecx
	jl	SHORT $L124142

; 3172 : 		{
; 3173 : 			QueuedParticles(bin).ParticleMax+=Min(Max(QueuedParticles(bin).ParticleMax+1,4),256);	// Basically double the size of the particle queue until we hit 256 particles, then alloc no more than 256 at a time.

	inc	ecx
	cmp	ecx, 4
	jge	SHORT $L141002
	mov	ecx, 4
	jmp	SHORT $L141010
$L141002:
	cmp	ecx, 256				; 00000100H
	jle	SHORT $L141010
	mov	ecx, 256				; 00000100H
$L141010:
	add	DWORD PTR [eax+12], ecx

; 3174 : 			QueuedParticles(bin).p=(QueuedParticle *)appRealloc(QueuedParticles(bin).p,(QueuedParticles(bin).ParticleMax+1)*sizeof(QueuedParticle),_T("Queued Particles"));

	mov	edx, DWORD PTR [edi+675224]
	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ebx+edx+12]
	lea	esi, DWORD PTR [ebx+edx]
	mov	edx, DWORD PTR [ecx]
	inc	eax
	lea	eax, DWORD PTR [eax+eax*8]
	push	OFFSET FLAT:??_C@_1CC@NBJF@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
	shl	eax, 4
	push	eax
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax
$L124142:

; 3175 : 		}
; 3176 : 		
; 3177 : 		// Return a reference to the allocated particle:
; 3178 : 		return QueuedParticles(bin).p[ParticleIndex];

	mov	ecx, DWORD PTR [edi+675224]
	mov	edx, DWORD PTR [ebx+ecx+4]
	pop	edi
	lea	eax, DWORD PTR [ebp+ebp*8]
	pop	esi
	shl	eax, 4
	pop	ebp
	add	eax, edx
	pop	ebx

; 3179 : 	}

	ret	4
?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z ENDP ; UD3DRenderDevice::QueuedParticleAlloc
_TEXT	ENDS
PUBLIC	?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z ; FD3DVertexBuffer<FD3DParticle>::Lock
PUBLIC	?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ	; FD3DVertexBuffer<FD3DParticle>::Set
PUBLIC	??_C@_0DA@DNJO@TotalParticleCount?$CK6?$DMPARTICLE_VE@ ; `string'
EXTRN	__imp_?STY2PolyFlags@AActor@@QAIXPAUFSceneNode@@AAK1@Z:NEAR
;	COMDAT ??_C@_0DA@DNJO@TotalParticleCount?$CK6?$DMPARTICLE_VE@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0DA@DNJO@TotalParticleCount?$CK6?$DMPARTICLE_VE@ DB 'TotalParticleC'
	DB	'ount*6<PARTICLE_VERTEXBUFFER_SIZE', 00H	; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?QueueParticleFlush@UD3DRenderDevice@@QAIXAAVAParticleSystem@@PAUFSceneNode@@@Z
_TEXT	SEGMENT
_PolyFlags$ = -144
_PolyFlagsEx$ = -140
_i$ = -152
_First$ = -132
_CurrentTextureInfo$ = -128
_ParticleIndex$ = -156
_System$ = -136
_Frame$ = 8
_Xor$141047 = -152
$T141090 = -156
$T141091 = -148
$T141098 = -152
?QueueParticleFlush@UD3DRenderDevice@@QAIXAAVAParticleSystem@@PAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::QueueParticleFlush, COMDAT
; _this$ = ecx
; _System$ = edx

; 3182 : 	{

	sub	esp, 156				; 0000009cH
	push	ebp
	mov	ebp, ecx

; 3183 : 		VALIDATE;
; 3184 : 
; 3185 : 		// Early out if there are no particles queued for rendering.
; 3186 : 		if(!QueuedParticles.Num()) 

	mov	eax, DWORD PTR [ebp+675228]
	test	eax, eax
	push	esi
	mov	esi, edx
	mov	DWORD PTR _System$[esp+164], esi
	je	$L124195

; 3187 : 			return;
; 3188 : 
; 3189 : 		DWORD PolyFlags,
; 3190 : 			  PolyFlagsEx;
; 3191 : 		//GetActorPolyFlags(Frame,&System,PolyFlags,PolyFlagsEx);
; 3192 : 		System.STY2PolyFlags( Frame, PolyFlags, PolyFlagsEx);

	mov	edx, DWORD PTR _Frame$[esp+160]
	lea	eax, DWORD PTR _PolyFlagsEx$[esp+164]
	push	eax
	lea	ecx, DWORD PTR _PolyFlags$[esp+168]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_?STY2PolyFlags@AActor@@QAIXPAUFSceneNode@@AAK1@Z

; 3193 : 		PolyFlags|=PF_TwoSided;

	mov	eax, DWORD PTR _PolyFlags$[esp+164]

; 3194 : 		PolyFlagsEx|=PFX_Clip;

	mov	edx, DWORD PTR _PolyFlagsEx$[esp+164]

; 3195 : 
; 3196 : 		// Configure the Z-Buffer
; 3197 : 		     if(System.ZBufferMode==ZBM_Occlude) PolyFlags|=PF_Occlude;	// Full Z buffer occlusion	

	mov	cl, BYTE PTR [esi+1552]
	or	eax, 256				; 00000100H
	or	edx, 2
	test	cl, cl
	mov	DWORD PTR _PolyFlags$[esp+164], eax
	mov	DWORD PTR _PolyFlagsEx$[esp+164], edx
	jne	SHORT $L124159
	or	eax, -2147483648			; 80000000H

; 3198 : 		else if(System.ZBufferMode==ZBM_None)							// No Z buffer interaction whatsoever

	jmp	SHORT $L141189
$L124159:
	cmp	cl, 2
	jne	SHORT $L124161

; 3199 : 		{
; 3200 : 			Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_ALWAYS );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	8
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [edx+200]

; 3201 : 			PolyFlags&=~PF_Occlude;

	mov	eax, DWORD PTR _PolyFlags$[esp+164]

; 3202 : 		}
; 3203 : 		else PolyFlags&=~PF_Occlude;	// Read only Z Buffer

	mov	edx, DWORD PTR _PolyFlagsEx$[esp+164]
$L124161:
	and	eax, 2147483647				; 7fffffffH
$L141189:
	push	ebx
	push	edi

; 3204 : 
; 3205 : 		UBOOL VariableAlpha=true;
; 3206 : 		if((System.AlphaStart==1.f)&&(System.AlphaEnd==1.f)) VariableAlpha=false;

	mov	edi, DWORD PTR [esi+1576]
	mov	ecx, 1065353216				; 3f800000H
	cmp	edi, ecx
	mov	DWORD PTR _PolyFlags$[esp+172], eax
	jne	SHORT $L141177
	cmp	DWORD PTR [esi+1584], ecx

; 3207 : 		if(VariableAlpha) PolyFlags|=PF_Translucent;

	je	SHORT $L124165
$L141177:
	or	eax, 4
	mov	DWORD PTR _PolyFlags$[esp+172], eax
$L124165:

; 3208 : 		
; 3209 : 		SetBlending(PolyFlags,PolyFlagsEx);

	mov	edi, eax
	and	edi, 1073741892				; 40000044H
	cmp	edi, 1073741824				; 40000000H
	mov	ecx, eax
	mov	DWORD PTR $T141091[esp+172], edx
	mov	DWORD PTR $T141090[esp+172], ecx
	jne	SHORT $L141043
	mov	edi, DWORD PTR [ebp+19148]
	test	edi, edi
	jne	SHORT $L141042
$L141043:
	and	eax, -1073741825			; bfffffffH
	mov	ecx, eax
	mov	DWORD PTR $T141090[esp+172], ecx
$L141042:
	test	cl, 68					; 00000044H
	jne	SHORT $L141044
	test	dl, 113					; 00000071H
	jne	SHORT $L141044
	or	ecx, -2147483648			; 80000000H
	jmp	SHORT $L141190
$L141044:
	test	cl, 4
	je	SHORT $L141046
	and	ecx, -3					; fffffffdH
$L141190:
	mov	DWORD PTR $T141090[esp+172], ecx
$L141046:
	mov	edi, DWORD PTR [ebp+19616]
	mov	ebx, DWORD PTR [ebp+19620]
	xor	edi, ecx
	xor	ebx, edx
	test	edi, 256				; 00000100H
	mov	DWORD PTR _Xor$141047[esp+172], edi
	je	SHORT $L141049
	mov	edx, DWORD PTR $T141090[esp+172]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	not	edx
	and	edx, 256				; 00000100H
	or	edx, 128				; 00000080H
	shr	edx, 7
	push	edx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR $T141090[esp+172]
	mov	edx, DWORD PTR $T141091[esp+172]
$L141049:
	test	bl, 2
	je	SHORT $L141050
	mov	edx, DWORD PTR $T141091[esp+172]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, 1
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR $T141090[esp+172]
	mov	edx, DWORD PTR $T141091[esp+172]
$L141050:
	test	bl, 8
	je	SHORT $L141051
	mov	edx, DWORD PTR $T141091[esp+172]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR $T141090[esp+172]
	mov	edx, DWORD PTR $T141091[esp+172]
$L141051:
	test	DWORD PTR _Xor$141047[esp+172], -754972601 ; d3000847H
	jne	SHORT $L141053
	test	bl, 113					; 00000071H
	je	$L141089
	mov	ecx, DWORD PTR $T141090[esp+172]
	mov	edx, DWORD PTR $T141091[esp+172]
$L141053:
	test	DWORD PTR _Xor$141047[esp+172], 268435525 ; 10000045H
	jne	SHORT $L141055
	test	bl, 113					; 00000071H
	je	$L141075
$L141055:
	test	bl, 1
	je	SHORT $L141056
	test	dl, 1
	jne	SHORT $L141056
	mov	eax, DWORD PTR [ebp+19128]
	test	eax, eax
	mov	eax, DWORD PTR [ebp+19124]
	je	SHORT $L141057
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	jmp	SHORT $L141058
$L141057:
	mov	edx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L141058:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	ecx, DWORD PTR $T141090[esp+172]
	mov	edx, DWORD PTR $T141091[esp+172]
$L141056:
	test	ecx, 268435525				; 10000045H
	jne	SHORT $L141059
	test	dl, 113					; 00000071H
	jne	SHORT $L141059
	xor	edx, edx
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	jmp	$L141075
$L141059:
	test	dl, 64					; 00000040H
	je	SHORT $L141061
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
$L141191:
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L141075
$L141061:
	test	cl, 1
	je	SHORT $L141063
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
$L141193:
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L141075
$L141063:
	test	dl, 32					; 00000020H
	je	SHORT $L141065
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L141075
$L141065:
	test	dl, 16					; 00000010H
	je	SHORT $L141067
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	SHORT $L141193
$L141067:
	test	cl, 4
	je	SHORT $L141069
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	$L141191
$L141069:
	test	cl, 64					; 00000040H
	je	SHORT $L141071
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L141075
$L141071:
	test	ecx, 268435456				; 10000000H
	je	SHORT $L141073
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L141075
$L141073:
	test	dl, 1
	je	$L141075
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	5
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	6
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L141075:
	test	BYTE PTR _Xor$141047[esp+172], 1
	je	SHORT $L141076
	mov	edx, DWORD PTR $T141090[esp+172]
	and	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L141076:
	mov	eax, DWORD PTR _Xor$141047[esp+172]
	test	eax, eax
	jns	SHORT $L141078
	mov	ecx, DWORD PTR $T141090[esp+172]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	shr	ecx, 31					; 0000001fH
	push	ecx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
$L141078:
	test	BYTE PTR _Xor$141047[esp+172], 2
	je	SHORT $L141081
	test	BYTE PTR $T141090[esp+172], 2
	mov	eax, DWORD PTR [ebp+19124]
	je	SHORT $L141080
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	jmp	SHORT $L141081
$L141080:
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L141081:
	mov	edi, DWORD PTR _Xor$141047[esp+172]
	test	edi, 2048				; 00000800H
	mov	ebx, DWORD PTR $T141090[esp+172]
	je	SHORT $L141082
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	mov	esi, ebx
	and	esi, 2048				; 00000800H
	neg	esi
	sbb	esi, esi
	add	esi, 2
	push	esi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	esi, DWORD PTR _System$[esp+172]
$L141082:
	test	edi, 1073741824				; 40000000H
	je	SHORT $L141083
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	mov	ecx, ebx
	shr	ecx, 30					; 0000001eH
	and	ecx, 1
	push	ecx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
$L141083:
	test	edi, 50331648				; 03000000H
	je	SHORT $L141089
	test	ebx, 16777216				; 01000000H
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	je	SHORT $L141086
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	3
	jmp	SHORT $L141194
$L141086:
	test	ebx, 33554432				; 02000000H
	je	SHORT $L141088
	push	3
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	2
	jmp	SHORT $L141194
$L141088:
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	1
$L141194:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
$L141089:
	mov	edx, DWORD PTR $T141090[esp+172]
	mov	eax, DWORD PTR $T141091[esp+172]
	mov	DWORD PTR [ebp+19616], edx
	mov	DWORD PTR [ebp+19620], eax

; 3210 : 
; 3211 : 		// Set the zbias for the entire particle system:
; 3212 : 		SetZBias(System.ZBias); //Direct3DDevice8->SetRenderState(D3DRS_ZBIAS,System.ZBias);

	mov	ecx, DWORD PTR [esi+1556]
	push	1098907648				; 41800000H
	mov	edx, ecx
	push	0
	push	edx
	mov	DWORD PTR $T141098[esp+184], ecx
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [ebp+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L141097
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L141178
$L141097:
	mov	esi, DWORD PTR [ebp+19124]
	fst	DWORD PTR [ebp+675164]
	mov	edi, DWORD PTR [esi]
	call	__ftol
	push	eax
	push	47					; 0000002fH
	push	esi
	call	DWORD PTR [edi+200]
	jmp	SHORT $L141096
$L141178:
	fstp	ST(0)
$L141096:

; 3213 : 		SetTextureNULL(1);

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	1
	push	eax
	call	DWORD PTR [ecx+244]
	lea	eax, DWORD PTR [ebp+16624]
	mov	DWORD PTR [ebp+19716], eax

; 3214 : 
; 3215 : 		SetDistanceFog(false);

	mov	eax, DWORD PTR [ebp+675196]
	test	eax, eax
	je	SHORT $L141107
	mov	eax, DWORD PTR [ebp+675192]
	test	eax, eax
	je	SHORT $L141107
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [ebp+675192], 0
$L141107:

; 3216 : 
; 3217 : 		// Count the total number of particles in this system, tallying the particles queued for each material.
; 3218 : 		int TotalParticleCount=0;
; 3219 : 		for(int i=0;i<QueuedParticles.Num();i++)

	mov	edx, DWORD PTR [ebp+675228]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $L124170
	mov	ecx, DWORD PTR [ebp+675224]
	add	ecx, 8
$L124168:

; 3220 : 		{
; 3221 : 			TotalParticleCount+=QueuedParticles(i).ParticleCount;

	add	eax, DWORD PTR [ecx]
	add	ecx, 16					; 00000010H
	dec	edx
	jne	SHORT $L124168
$L124170:

; 3222 : 		}
; 3223 : 
; 3224 : 		Stats.Particles+=TotalParticleCount;

	mov	edx, DWORD PTR [ebp+19684]

; 3225 : 
; 3226 : 		// First set up the vertex buffer:
; 3227 : 		verify(TotalParticleCount*6<PARTICLE_VERTEXBUFFER_SIZE);

	lea	esi, DWORD PTR [eax+eax*2]
	add	edx, eax
	shl	esi, 1
	cmp	esi, 16384				; 00004000H
	mov	DWORD PTR [ebp+19684], edx
	jl	SHORT $L124171
	push	3227					; 00000c9bH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0DA@DNJO@TotalParticleCount?$CK6?$DMPARTICLE_VE@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L124171:

; 3228 : 		FD3DParticle *Vertices=(FD3DParticle*)ParticleVertices.Lock(TotalParticleCount*6);

	push	-1
	lea	ecx, DWORD PTR [ebp+16740]
	push	esi
	call	?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z ; FD3DVertexBuffer<FD3DParticle>::Lock

; 3229 : 		FD3DParticle *v=Vertices;
; 3230 : 		for(i=0;i<QueuedParticles.Num();i++)

	mov	ecx, DWORD PTR [ebp+675228]
	mov	ebx, eax
	xor	eax, eax
	cmp	ecx, eax
	mov	DWORD PTR _i$[esp+172], eax
	jle	SHORT $L124178
	mov	edx, DWORD PTR [ebp+675224]
$L124176:

; 3231 : 			if(QueuedParticles(i).ParticleCount)

	mov	ecx, DWORD PTR [eax+edx+8]
	test	ecx, ecx
	je	SHORT $L124177

; 3232 : 			{
; 3233 : 				memcpy(v,QueuedParticles(i).p,QueuedParticles(i).ParticleCount*sizeof(QueuedParticle));

	mov	esi, DWORD PTR [eax+edx+4]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	shl	ecx, 4
	mov	edx, ecx
	shr	ecx, 2
	mov	edi, ebx
	rep movsd
	mov	ecx, edx
	and	ecx, 3
	rep movsb

; 3234 : 				v+=QueuedParticles(i).ParticleCount*6;

	mov	edx, DWORD PTR [ebp+675224]
	mov	ecx, DWORD PTR [eax+edx+8]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	shl	ecx, 4
	add	ebx, ecx
$L124177:
	mov	ecx, DWORD PTR _i$[esp+172]
	mov	esi, DWORD PTR [ebp+675228]
	inc	ecx
	add	eax, 16					; 00000010H
	cmp	ecx, esi
	mov	DWORD PTR _i$[esp+172], ecx
	jl	SHORT $L124176
$L124178:

; 3235 : 			}
; 3236 : 
; 3237 : 		INT	First = ParticleVertices.Unlock();

	mov	eax, DWORD PTR [ebp+16744]
	test	eax, eax
	lea	esi, DWORD PTR [ebp+16740]
	jne	SHORT $L141137
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L141137:
	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+48]
	test	eax, eax
	jge	SHORT $L141138
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L141138:
	mov	edx, DWORD PTR [esi+12]

; 3238 : 		
; 3239 : 		// Now render the vertex buffer:
; 3240 : 		ParticleVertices.Set();

	mov	ecx, esi
	mov	DWORD PTR _First$[esp+172], edx
	call	?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ ; FD3DVertexBuffer<FD3DParticle>::Set

; 3241 : 
; 3242 : 		UTexture *CurrentTexture=NULL;
; 3243 : 		FTextureInfo CurrentTextureInfo;
; 3244 : 		int ParticleIndex=0;
; 3245 : 		SetTextureNULL(1);

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	xor	esi, esi
	push	esi
	push	1
	xor	edi, edi
	push	eax
	mov	DWORD PTR _ParticleIndex$[esp+184], edi
	call	DWORD PTR [ecx+244]
	lea	eax, DWORD PTR [ebp+16624]
	mov	DWORD PTR [ebp+19716], eax

; 3246 : 
; 3247 : 		for(i=0;i<QueuedParticles.Num();i++)

	cmp	DWORD PTR [ebp+675228], esi
	mov	DWORD PTR _i$[esp+172], esi
	jle	$L124193

; 3235 : 			}
; 3236 : 
; 3237 : 		INT	First = ParticleVertices.Unlock();

	mov	DWORD PTR -148+[esp+172], esi

; 3296 : 	}

	npad	6
$L124185:

; 3248 : 		{
; 3249 : 			int RunLength=QueuedParticles(i).ParticleCount;

	mov	edx, DWORD PTR [ebp+675224]
	mov	eax, DWORD PTR -148+[esp+172]
	mov	ebx, DWORD PTR [edx+eax+8]

; 3250 : 			QueuedParticles(i).ParticleCount=0;	
; 3251 : 			if(!RunLength) 

	test	ebx, ebx
	lea	eax, DWORD PTR [edx+eax+8]
	mov	DWORD PTR [eax], 0
	je	$L124186

; 3252 : 				continue;
; 3253 : 
; 3254 : 			// Unset the current texture if any:
; 3255 : 			if(CurrentTexture)

	test	esi, esi
	je	SHORT $L124190

; 3256 : 			{
; 3257 : 				CurrentTexture->Unlock( CurrentTextureInfo );

	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR _CurrentTextureInfo$[esp+172]
	mov	ecx, esi
	call	DWORD PTR [eax+76]
$L124190:

; 3258 : 				CurrentTexture=NULL;
; 3259 : 			}
; 3260 : 
; 3261 : 
; 3262 : 			CurrentTexture=QueuedParticles(i).Texture;

	mov	ecx, DWORD PTR [ebp+675224]
	mov	edx, DWORD PTR -148+[esp+172]
	mov	esi, DWORD PTR [edx+ecx]

; 3263 : 			if(CurrentTexture)

	test	esi, esi

; 3264 : 			{
; 3265 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	je	SHORT $L124191
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 3266 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3267 : 				
; 3268 : 				CurrentTexture->Lock( CurrentTextureInfo, 0/*Frame->Viewport->CurrentTime*/, -1, Frame->Viewport->RenDev );

	mov	ecx, DWORD PTR _Frame$[esp+168]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+92]
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	-1
	push	0
	push	0
	lea	edx, DWORD PTR _CurrentTextureInfo$[esp+188]
	mov	ecx, esi
	call	DWORD PTR [eax+72]

; 3269 : 				SetTexture( 0, CurrentTextureInfo, PolyFlags, 0, PolyFlagsEx|CurrentTexture->PolyFlagsEx );

	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+172]
	mov	edx, DWORD PTR [esi+196]
	mov	eax, DWORD PTR _PolyFlags$[esp+172]
	push	0
	or	edx, ecx
	push	edx
	push	0
	push	eax
	lea	ecx, DWORD PTR _CurrentTextureInfo$[esp+188]
	push	ecx
	xor	edx, edx
	mov	ecx, ebp
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 3270 : 				SetBlending(PolyFlags,PolyFlagsEx|CurrentTexture->PolyFlagsEx);

	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+172]
	mov	edx, DWORD PTR [esi+196]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _PolyFlags$[esp+176]
	mov	ecx, ebp
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 3271 : 			} 
; 3272 : 			else

	jmp	SHORT $L124192
$L124191:

; 3273 : 			{
; 3274 : 				//!!should optimize to avoid changing shade mode, color op, alpha op.
; 3275 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE  );

	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 3276 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L124192:

; 3277 : 			}
; 3278 : 
; 3279 : 
; 3280 : 			Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLELIST, First+(ParticleIndex*6), RunLength*2);

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ebx+ebx]
	push	edx
	lea	edx, DWORD PTR [edi+edi*2]
	mov	edi, DWORD PTR _First$[esp+176]
	lea	edx, DWORD PTR [edi+edx*2]
	push	edx
	push	4
	push	eax
	call	DWORD PTR [ecx+280]

; 3281 : 			ParticleIndex+=RunLength;

	mov	edi, DWORD PTR _ParticleIndex$[esp+172]
	add	edi, ebx
	mov	DWORD PTR _ParticleIndex$[esp+172], edi
$L124186:
	mov	eax, DWORD PTR _i$[esp+172]
	mov	edx, DWORD PTR -148+[esp+172]
	mov	ecx, DWORD PTR [ebp+675228]
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	mov	DWORD PTR _i$[esp+172], eax
	mov	DWORD PTR -148+[esp+172], edx
	jl	$L124185

; 3282 : 		}
; 3283 : 
; 3284 : 		if(CurrentTexture)

	test	esi, esi
	je	SHORT $L124193

; 3285 : 		{
; 3286 : 			CurrentTexture->Unlock(CurrentTextureInfo);

	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR _CurrentTextureInfo$[esp+172]
	mov	ecx, esi
	call	DWORD PTR [eax+76]

; 3287 : 			CurrentTexture=NULL;
; 3288 : 		} else

	jmp	SHORT $L124194
$L124193:

; 3289 : 		{
; 3290 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 3291 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L124194:

; 3292 : 		}
; 3293 : 
; 3294 : 		if(System.ZBufferMode==ZBM_None)							// No Z buffer interaction whatsoever

	mov	eax, DWORD PTR _System$[esp+172]
	cmp	BYTE PTR [eax+1552], 2
	pop	edi
	pop	ebx
	jne	SHORT $L124195

; 3295 : 			Direct3DDevice8->SetRenderState(D3DRS_ZFUNC,D3DCMP_LESSEQUAL);

	mov	ebp, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [ebp]
	push	4
	push	23					; 00000017H
	push	ebp
	call	DWORD PTR [ecx+200]
$L124195:
	pop	esi
	pop	ebp

; 3296 : 	}

	add	esp, 156				; 0000009cH
	ret	4
?QueueParticleFlush@UD3DRenderDevice@@QAIXAAVAParticleSystem@@PAUFSceneNode@@@Z ENDP ; UD3DRenderDevice::QueueParticleFlush
_TEXT	ENDS
PUBLIC	?Unlock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEHXZ ; FD3DVertexBuffer<FD3DParticle>::Unlock
PUBLIC	__real@3b800000
PUBLIC	__real@43000000
EXTRN	__imp_?AddZeroed@FArray@@QAEHHH@Z:NEAR
;	COMDAT __real@3b800000
; File ..\..\Core\Inc\UnVcWin32.h
CONST	SEGMENT
__real@3b800000 DD 03b800000r			; 0.00390625
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?dnDrawParticles@UD3DRenderDevice@@UAIXAAVASoftParticleSystem@@PAUFSceneNode@@@Z
_TEXT	SEGMENT
$T141224 = -416
$T141225 = -524
$T141226 = -304
$T141227 = -368
$T141228 = -340
$T141229 = -380
$T141230 = -544
_L$141234 = -620
_H$141235 = -568
$T141458 = -464
$T141459 = -428
$T141460 = -416
$T141461 = -392
$T141462 = -564
$T141463 = -404
$T141464 = -304
$T141465 = -484
$T141466 = -292
$T141467 = -340
$T141468 = -492
$T141469 = -316
$T141470 = -328
$T141471 = -500
_ParticleCount$ = -576
_Particles$ = -584
_CurrentTexture$ = -532
_CurrentTextureInfo$ = -256
_i$124205 = -620
_PreviousLocation$124209 = -608
_NextLocation$124210 = -544
_Distance$124224 = -524
_Length$124226 = -572
_Direction$124228 = -556
_Midpoint$124229 = -476
_BaseParticleScaleX$124238 = -344
_BaseParticleScaleY$124239 = -348
_VariableAlpha$124241 = -576
_SystemAlphaScale$124243 = -356
_dwDiffuse$124252 = -564
_alphaLevel$124254 = -612
_CurrentTextureInfo$141531 = -128
_dwDiffuseEnd$141543 = -580
_UpVector$141544 = -596
$T141548 = -616
$T141549 = -612
$T141550 = -572
$T141551 = -528
_DrawScaleU$124296 = -572
_DrawScaleV$124297 = -528
_RightVector$124298 = -608
_UpVector$124299 = -596
_forward$124300 = -452
_vecPos$124306 = -556
$T141712 = -580
$T141724 = -620
$T141737 = -620
$T141750 = -620
_q$141769 = -440
_System$ = -512
_Frame$ = 8
$T141783 = -352
_q$141801 = -464
_costheta$141802 = -584
_PolyFlags$142027 = -616
_PolyFlagsEx$142028 = -612
_i$142037 = -576
_First$142048 = -564
_CurrentTextureInfo$142050 = -128
_ParticleIndex$142051 = -568
_L$142102 = -568
_H$142103 = -564
$T141201 = -380
$T141202 = -368
$T141205 = -268
$T141206 = -440
$T141207 = -280
$T141208 = -452
$T141215 = -280
$T141216 = -328
$T141217 = -404
$T141218 = -428
$T141219 = -268
$T141220 = -392
$T141221 = -476
$T141222 = -292
$T141223 = -316
?dnDrawParticles@UD3DRenderDevice@@UAIXAAVASoftParticleSystem@@PAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::dnDrawParticles, COMDAT
; _this$ = ecx
; _System$ = edx

; 3299 : 	{

	sub	esp, 620				; 0000026cH

; 3300 : 		VALIDATE;
; 3301 : 
; 3302 : 		if(!RenderParticles) 

	mov	eax, DWORD PTR ?RenderParticles@@3HA	; RenderParticles
	test	eax, eax
	push	ebp
	push	esi
	mov	esi, edx
	mov	DWORD PTR _System$[esp+628], esi
	mov	ebp, ecx
	je	$L124197

; 3303 : 			return;
; 3304 : 
; 3305 : 		clock(Stats.ParticleTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], 0
	mov	DWORD PTR _L$141234[esp+628], 0
	je	SHORT $L141236
	rdtsc
	mov	DWORD PTR _L$141234[esp+628], eax
	mov	DWORD PTR _H$141235[esp+628], edx
$L141236:
	mov	edx, DWORD PTR [ebp+19636]
	mov	ecx, DWORD PTR _L$141234[esp+628]

; 3306 : 		INT ParticleCount=System.HighestParticleNumber;
; 3307 : 		
; 3308 : 		// Make sure the xform matrix is correctly set up:
; 3309 : 		PreRender(Frame);

	mov	eax, DWORD PTR [ebp]
	push	ebx
	sub	edx, ecx
	push	edi
	mov	edi, DWORD PTR _Frame$[esp+632]
	mov	DWORD PTR [ebp+19636], edx
	mov	ebx, DWORD PTR [esi+3060]
	mov	edx, edi
	mov	ecx, ebp
	mov	DWORD PTR _ParticleCount$[esp+636], ebx
	call	DWORD PTR [eax+140]

; 3310 : 		FParticle *Particles=(FParticle *)System.ParticleSystemHandle;
; 3311 : 
; 3312 : 		// Texture Management:
; 3313 : 		UTexture *CurrentTexture=NULL;
; 3314 : 		FTextureInfo CurrentTextureInfo;
; 3315 : 
; 3316 : 		if(System.UseLines)

	test	BYTE PTR [esi+2692], 1
	mov	ecx, DWORD PTR [esi+3068]
	mov	DWORD PTR _Particles$[esp+636], ecx
	mov	DWORD PTR _CurrentTexture$[esp+636], 0
	je	$L124204

; 3317 : 		{
; 3318 : 			for(INT i=0; i<ParticleCount; i++)

	test	ebx, ebx
	mov	DWORD PTR _i$124205[esp+636], 0
	jle	$L124247
	mov	edx, ecx
	lea	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR -532+[esp+636], ecx
$L124206:

; 3319 : 			{
; 3320 : 				FVector PreviousLocation;
; 3321 : 				FVector NextLocation;
; 3322 : 
; 3323 : 				// Am I drawing a series of connected particle lines?
; 3324 : 				if(System.Connected)

	mov	eax, DWORD PTR [esi+2692]
	test	al, 2
	je	$L124211

; 3325 : 				{
; 3326 : 					int SuccessorIndex=-1;
; 3327 : 
; 3328 : 					// Attempt to find my successor: 
; 3329 : 					// First try the very next particle in sequence.  In non-starved particle systems, where particles have a constant lifetime, it is VERY likely to be the next particle in sequence. 
; 3330 : 					if((i<(ParticleCount-1))&&((Particles[i+1].SpawnNumber)==(Particles[i].SpawnNumber+1)))

	mov	eax, DWORD PTR _i$124205[esp+636]
	lea	edx, DWORD PTR [ebx-1]
	cmp	eax, edx
	jge	SHORT $L124213
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+160]
	inc	edx
	cmp	edi, edx
	jne	SHORT $L124213

; 3331 : 						SuccessorIndex=i+1;

	inc	eax
$L124218:

; 3338 : 							{
; 3339 : 								SuccessorIndex=j;
; 3340 : 								break;
; 3341 : 							}
; 3342 : 					}
; 3343 : 
; 3344 : 					if(SuccessorIndex==-1) continue; // No sucessor found, can't draw this segment.

	cmp	eax, -1
	je	$L124207

; 3345 : 					PreviousLocation=Particles[i].Location;

	lea	edx, DWORD PTR [ecx+16]
	mov	ebx, DWORD PTR [edx]
	mov	edi, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]

; 3346 : 					NextLocation=Particles[SuccessorIndex].Location;

	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR _PreviousLocation$124209[esp+644], edx
	mov	edx, DWORD PTR _Particles$[esp+636]
	shl	eax, 5
	lea	eax, DWORD PTR [eax+edx+20]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _NextLocation$124210[esp+636], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _PreviousLocation$124209[esp+636], ebx
	mov	DWORD PTR _PreviousLocation$124209[esp+640], edi
	mov	DWORD PTR _NextLocation$124210[esp+640], edx
	mov	DWORD PTR _NextLocation$124210[esp+644], eax

; 3347 : 				} else

	jmp	$L124227
$L124213:

; 3332 : 					else
; 3333 : 					{
; 3334 : 						Stats.SuccessorMisses++;	// Track how many sucessors were missed.

	inc	DWORD PTR [ebp+19696]
	mov	edx, DWORD PTR [ecx]
	lea	edi, DWORD PTR [edx+1]
	mov	edx, DWORD PTR _Particles$[esp+636]

; 3335 : 						// Scan through the particles and try to find my successor:
; 3336 : 						for(INT j=0;j<ParticleCount;j++)							 // Scan through all potentially active particles.

	xor	eax, eax
	add	edx, 4
$L124216:

; 3337 : 							if(Particles[j].SpawnNumber==Particles[i].SpawnNumber+1) // And it's my successor.

	cmp	DWORD PTR [edx], edi
	je	SHORT $L124218
	inc	eax
	add	edx, 160				; 000000a0H
	cmp	eax, ebx
	jl	SHORT $L124216

; 3395 : 
; 3396 : 				QueuedParticle &p=QueuedParticleAlloc(Particles[i].Texture);

	jmp	$L124207
$L124211:

; 3348 : 				{
; 3349 : 					PreviousLocation=Particles[i].PreviousLocation;

	lea	edx, DWORD PTR [ecx+28]
	mov	ebx, DWORD PTR [edx]
	mov	edi, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _PreviousLocation$124209[esp+644], edx

; 3350 : 					NextLocation=Particles[i].Location;

	lea	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _PreviousLocation$124209[esp+640], edi
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR _NextLocation$124210[esp+636], edi
	mov	edi, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _NextLocation$124210[esp+644], edx

; 3351 : 
; 3352 : 					// If drawscale isn't one, then compute new line length:
; 3353 : 					if((Particles[i].DrawScale!=1)||System.ConstantLength)

	cmp	DWORD PTR [ecx+96], 1065353216		; 3f800000H
	mov	DWORD PTR _PreviousLocation$124209[esp+636], ebx
	mov	DWORD PTR _NextLocation$124210[esp+640], edi
	jne	SHORT $L124223
	test	al, 4
	je	$L124227
$L124223:

; 3354 : 					{
; 3355 : 						FVector Distance=NextLocation-PreviousLocation;

	fld	DWORD PTR _NextLocation$124210[esp+636]

; 3356 : 						FLOAT   Length=System.ConstantLength?1:Distance.Size();

	shr	eax, 2
	fsub	DWORD PTR _PreviousLocation$124209[esp+636]
	mov	edx, eax
	and	edx, 1
	fstp	DWORD PTR _Distance$124224[esp+636]
	fld	DWORD PTR _NextLocation$124210[esp+640]
	fsub	DWORD PTR _PreviousLocation$124209[esp+640]
	fstp	DWORD PTR _Distance$124224[esp+640]
	fld	DWORD PTR _NextLocation$124210[esp+644]
	fsub	DWORD PTR _PreviousLocation$124209[esp+644]
	fstp	DWORD PTR _Distance$124224[esp+644]
	je	SHORT $L141198
	fld	DWORD PTR __real@3f800000
	jmp	SHORT $L142126
$L141198:
	fld	DWORD PTR _Distance$124224[esp+636]
	fmul	DWORD PTR _Distance$124224[esp+636]
	fld	DWORD PTR _Distance$124224[esp+644]
	fmul	DWORD PTR _Distance$124224[esp+644]

; 3469 : 		unclock(Stats.ParticleTime);

	faddp	ST(1), ST(0)
	fld	DWORD PTR _Distance$124224[esp+640]
	fmul	DWORD PTR _Distance$124224[esp+640]
	faddp	ST(1), ST(0)
	fsqrt
	fcom	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L142135
$L142126:

; 3359 : 						{
; 3360 : 							FVector Direction=Distance;
; 3361 : 							Direction.Normalize();

	fld	DWORD PTR _Distance$124224[esp+636]
	mov	eax, DWORD PTR _Distance$124224[esp+636]
	fmul	DWORD PTR _Distance$124224[esp+636]
	mov	DWORD PTR _Direction$124228[esp+636], eax
	fld	DWORD PTR _Distance$124224[esp+644]
	mov	eax, DWORD PTR _Distance$124224[esp+640]
	fmul	DWORD PTR _Distance$124224[esp+644]
	mov	DWORD PTR _Direction$124228[esp+640], eax
	mov	eax, DWORD PTR _Distance$124224[esp+644]
	mov	DWORD PTR _Direction$124228[esp+644], eax
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Distance$124224[esp+640]
	fmul	DWORD PTR _Distance$124224[esp+640]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142133
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Distance$124224[esp+636]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$124228[esp+636]
	fld	DWORD PTR _Direction$124228[esp+640]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$124228[esp+640]
	fmul	DWORD PTR _Direction$124228[esp+644]
	fstp	DWORD PTR _Direction$124228[esp+644]
	jmp	SHORT $L141281
$L142133:
	fstp	ST(0)
$L141281:

; 3362 : 							FVector Midpoint=System.ConstantLength?NextLocation:(PreviousLocation+Direction*(Length/2));

	test	edx, edx
	je	SHORT $L141203
	lea	eax, DWORD PTR _NextLocation$124210[esp+636]
	jmp	SHORT $L141204
$L141203:
	fld	DWORD PTR __real@3f000000
	lea	eax, DWORD PTR $T141202[esp+636]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Direction$124228[esp+636]
	fmul	ST(0), ST(1)
	fld	ST(1)
	fmul	DWORD PTR _Direction$124228[esp+640]
	fstp	DWORD PTR $T141201[esp+640]
	fxch	ST(1)
	fmul	DWORD PTR _Direction$124228[esp+644]
	fstp	DWORD PTR $T141201[esp+644]
	fadd	DWORD PTR _PreviousLocation$124209[esp+636]
	fstp	DWORD PTR $T141202[esp+636]
	fld	DWORD PTR _PreviousLocation$124209[esp+640]
	fadd	DWORD PTR $T141201[esp+640]
	fstp	DWORD PTR $T141202[esp+640]
	fld	DWORD PTR _PreviousLocation$124209[esp+644]
	fadd	DWORD PTR $T141201[esp+644]
	fstp	DWORD PTR $T141202[esp+644]
$L141204:

; 3363 : 
; 3364 : 							Length*=Particles[i].DrawScale;

	fmul	DWORD PTR [ecx+96]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _Midpoint$124229[esp+636], edx
	mov	edx, DWORD PTR [eax+4]

; 3365 : 							Length/=2;

	fmul	DWORD PTR __real@3f000000
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _Midpoint$124229[esp+640], edx
	fstp	DWORD PTR _Length$124226[esp+636]
	mov	DWORD PTR _Midpoint$124229[esp+644], eax

; 3366 : 
; 3367 : 							PreviousLocation=Midpoint-(Direction*Length);

	fld	DWORD PTR _Direction$124228[esp+636]
	fmul	DWORD PTR _Length$124226[esp+636]
	fst	DWORD PTR $T141205[esp+636]
	fld	DWORD PTR _Direction$124228[esp+640]
	fmul	DWORD PTR _Length$124226[esp+636]
	fld	ST(0)
	fld	DWORD PTR _Direction$124228[esp+644]
	fmul	DWORD PTR _Length$124226[esp+636]
	fst	DWORD PTR -568+[esp+636]
	fld	DWORD PTR _Midpoint$124229[esp+636]
	fsub	DWORD PTR $T141205[esp+636]
	fstp	DWORD PTR $T141206[esp+636]
	fld	DWORD PTR _Midpoint$124229[esp+640]
	mov	ebx, DWORD PTR $T141206[esp+636]
	fsub	ST(0), ST(2)
	mov	DWORD PTR _PreviousLocation$124209[esp+636], ebx
	fstp	DWORD PTR $T141206[esp+640]
	fld	DWORD PTR _Midpoint$124229[esp+644]
	mov	edx, DWORD PTR $T141206[esp+640]
	fsub	ST(0), ST(1)
	mov	DWORD PTR _PreviousLocation$124209[esp+640], edx
	fstp	DWORD PTR $T141206[esp+644]
	mov	eax, DWORD PTR $T141206[esp+644]
	fstp	ST(0)
	mov	DWORD PTR _PreviousLocation$124209[esp+644], eax
	fstp	ST(0)

; 3368 : 							NextLocation=Midpoint+(Direction*Length);

	fxch	ST(1)
	fstp	DWORD PTR $T141207[esp+636]
	fld	DWORD PTR -568+[esp+636]
	fld	DWORD PTR $T141207[esp+636]
	fadd	DWORD PTR _Midpoint$124229[esp+636]
	fstp	DWORD PTR $T141208[esp+636]
	fld	DWORD PTR _Midpoint$124229[esp+640]
	mov	edx, DWORD PTR $T141208[esp+636]
	fadd	ST(0), ST(2)
	mov	DWORD PTR _NextLocation$124210[esp+636], edx
	fstp	DWORD PTR $T141208[esp+640]
	fld	DWORD PTR _Midpoint$124229[esp+644]
	mov	eax, DWORD PTR $T141208[esp+640]
	fadd	ST(0), ST(1)
	mov	DWORD PTR _NextLocation$124210[esp+640], eax
	fstp	DWORD PTR $T141208[esp+644]
	mov	edx, DWORD PTR $T141208[esp+644]
	fstp	ST(0)
	mov	DWORD PTR _NextLocation$124210[esp+644], edx
$L142135:

; 3357 : 						
; 3358 : 						if(Length)

	fstp	ST(0)
$L124227:

; 3369 : 						}
; 3370 : 					}
; 3371 : 				}
; 3372 : 				dnDraw3DLine(Frame,Particles[i].Texture,0,PreviousLocation,NextLocation,System.LineStartWidth,System.LineEndWidth,System.LineStartColor,System.LineEndColor);

	mov	eax, DWORD PTR [esi+2700]
	mov	edx, DWORD PTR [esi+2696]
	mov	edi, DWORD PTR [ecx+88]
	mov	DWORD PTR $T141551[esp+636], eax
	mov	eax, DWORD PTR [esi+2708]
	mov	DWORD PTR $T141549[esp+636], eax
	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	test	eax, eax
	mov	DWORD PTR $T141550[esp+636], edx
	mov	edx, DWORD PTR [esi+2704]
	mov	DWORD PTR $T141548[esp+636], edx
	je	$L142143
	fld	DWORD PTR $T141548[esp+636]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L141528
	fld	DWORD PTR $T141549[esp+636]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L141528
	test	edi, edi
	mov	esi, 2
	je	SHORT $L141530
	mov	esi, DWORD PTR [edi+196]
	or	esi, 2
$L141530:
	push	esi
	xor	edx, edx
	mov	ecx, ebp
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	push	0
	mov	ecx, ebp
	call	?SetZBias@UD3DRenderDevice@@QAIMM@Z	; UD3DRenderDevice::SetZBias
	fstp	ST(0)
	test	edi, edi
	je	SHORT $L141532
	mov	ecx, DWORD PTR _Frame$[esp+632]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+172]
	mov	edx, DWORD PTR [edx+168]
	mov	eax, DWORD PTR [edi]
	push	ebp
	push	-1
	push	ecx
	push	edx
	lea	edx, DWORD PTR _CurrentTextureInfo$141531[esp+652]
	mov	ecx, edi
	call	DWORD PTR [eax+72]
	push	0
	push	esi
	push	0
	push	0
	lea	eax, DWORD PTR _CurrentTextureInfo$141531[esp+652]
	push	eax
	xor	edx, edx
	mov	ecx, ebp
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	jmp	SHORT $L141533
$L141532:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L141533:
	push	-1
	lea	esi, DWORD PTR [ebp+16720]
	push	2
	mov	ecx, esi
	call	?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ; FD3DVertexBuffer<FD3DVertex>::Lock
	mov	edx, DWORD PTR _PreviousLocation$124209[esp+640]
	mov	ecx, eax
	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _PreviousLocation$124209[esp+644]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR $T141550[esp+636]

; 3469 : 		unclock(Stats.ParticleTime);

	xor	edx, edx
	mov	dl, BYTE PTR $T141550[esp+638]
	mov	ebx, ecx
	and	ebx, 255				; 000000ffH
	and	ecx, 65280				; 0000ff00H
	shl	ebx, 16					; 00000010H
	add	edx, ebx
	add	edx, ecx
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR _NextLocation$124210[esp+636]
	lea	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _NextLocation$124210[esp+640]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _NextLocation$124210[esp+644]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR $T141551[esp+636]
	xor	edx, edx
	mov	dl, BYTE PTR $T141551[esp+638]
	mov	ebx, ecx
	and	ebx, 255				; 000000ffH
	shl	ebx, 16					; 00000010H
	and	ecx, 65280				; 0000ff00H
	add	edx, ebx
	add	edx, ecx
	mov	ecx, esi
	mov	DWORD PTR [eax+28], edx
	call	?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DVertex>::Unlock
	mov	ecx, esi
	mov	ebx, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DVertex>::Set
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	ebx
	push	2
	push	eax
	call	DWORD PTR [ecx+280]
	mov	ecx, DWORD PTR [ebp+19684]
	inc	ecx
	test	edi, edi
	mov	DWORD PTR [ebp+19684], ecx
	je	SHORT $L141536
	mov	eax, DWORD PTR [edi]
	lea	edx, DWORD PTR _CurrentTextureInfo$141531[esp+636]
	mov	ecx, edi
	call	DWORD PTR [eax+76]
	jmp	$L142153

; 3369 : 						}
; 3370 : 					}
; 3371 : 				}
; 3372 : 				dnDraw3DLine(Frame,Particles[i].Texture,0,PreviousLocation,NextLocation,System.LineStartWidth,System.LineEndWidth,System.LineStartColor,System.LineEndColor);

$L141536:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	jmp	$L142153
$L141528:
	push	edi
	mov	ecx, ebp
	call	?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z ; UD3DRenderDevice::QueuedParticleAlloc
	lea	ecx, DWORD PTR $T141550[esp+636]
	mov	ebx, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	lea	ecx, DWORD PTR $T141551[esp+636]
	mov	esi, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	fld	DWORD PTR _NextLocation$124210[esp+644]
	fsub	DWORD PTR [ebp+184]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T141459[esp+648]
	mov	DWORD PTR _dwDiffuseEnd$141543[esp+648], eax
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _NextLocation$124210[esp+652]
	fsub	DWORD PTR [ebp+180]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _NextLocation$124210[esp+648]
	fsub	DWORD PTR [ebp+176]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _PreviousLocation$124209[esp+644]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR [ebp+184]
	lea	ecx, DWORD PTR $T141458[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _PreviousLocation$124209[esp+652]
	fsub	DWORD PTR [ebp+180]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _PreviousLocation$124209[esp+648]
	fsub	DWORD PTR [ebp+176]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T141458[esp+636]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR $T141459[esp+652]
	lea	ecx, DWORD PTR _UpVector$141544[esp+648]
	fld	DWORD PTR $T141459[esp+648]
	fmul	DWORD PTR $T141458[esp+652]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T141459[esp+648]
	fmul	DWORD PTR $T141458[esp+656]
	fld	DWORD PTR $T141458[esp+648]
	fmul	DWORD PTR $T141459[esp+656]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T141459[esp+656]
	fmul	DWORD PTR $T141458[esp+652]
	fld	DWORD PTR $T141459[esp+652]
	fmul	DWORD PTR $T141458[esp+656]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _UpVector$141544[esp+636]
	fmul	DWORD PTR _UpVector$141544[esp+636]
	fld	DWORD PTR _UpVector$141544[esp+640]
	fmul	DWORD PTR _UpVector$141544[esp+640]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _UpVector$141544[esp+644]
	fmul	DWORD PTR _UpVector$141544[esp+644]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142138
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _UpVector$141544[esp+636]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$141544[esp+636]
	fld	DWORD PTR _UpVector$141544[esp+640]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$141544[esp+640]
	fmul	DWORD PTR _UpVector$141544[esp+644]
	fstp	DWORD PTR _UpVector$141544[esp+644]
	jmp	SHORT $L141499
$L142138:
	fstp	ST(0)
$L141499:
	fld	DWORD PTR $T141548[esp+636]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR _UpVector$141544[esp+656]
	lea	ecx, DWORD PTR $T141460[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T141548[esp+648]
	fmul	DWORD PTR _UpVector$141544[esp+652]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$141544[esp+648]
	fmul	DWORD PTR $T141548[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _PreviousLocation$124209[esp+644]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T141460[esp+656]
	lea	ecx, DWORD PTR $T141461[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _PreviousLocation$124209[esp+652]
	fadd	DWORD PTR $T141460[esp+652]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T141460[esp+648]
	fadd	DWORD PTR _PreviousLocation$124209[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	ecx, DWORD PTR $T141461[esp+636]
	fld	DWORD PTR $T141548[esp+636]
	mov	edx, DWORD PTR $T141461[esp+640]
	mov	eax, ebx
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T141461[esp+644]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [ebx+12], esi
	mov	DWORD PTR $T141462[esp+636], 1065353216	; 3f800000H
	mov	edx, DWORD PTR $T141462[esp+636]
	mov	DWORD PTR $T141462[esp+640], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T141462[esp+640]
	mov	DWORD PTR [ebx+16], edx
	mov	DWORD PTR [ebx+20], eax
	fmul	DWORD PTR _UpVector$141544[esp+644]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T141463[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T141548[esp+648]
	fmul	DWORD PTR _UpVector$141544[esp+652]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$141544[esp+648]
	fmul	DWORD PTR $T141548[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _PreviousLocation$124209[esp+644]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T141463[esp+656]
	lea	ecx, DWORD PTR $T141464[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _PreviousLocation$124209[esp+652]
	fsub	DWORD PTR $T141463[esp+652]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _PreviousLocation$124209[esp+648]
	fsub	DWORD PTR $T141463[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	edx, DWORD PTR $T141464[esp+636]
	fld	DWORD PTR $T141549[esp+636]
	mov	eax, DWORD PTR $T141464[esp+640]
	lea	ecx, DWORD PTR [ebx+24]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR $T141464[esp+644]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR $T141465[esp+636], 0
	mov	eax, DWORD PTR $T141465[esp+636]
	mov	DWORD PTR $T141465[esp+640], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR $T141465[esp+640]
	mov	DWORD PTR [ebx+36], esi
	mov	DWORD PTR [ebx+40], eax
	mov	DWORD PTR [ebx+44], ecx
	fmul	DWORD PTR _UpVector$141544[esp+644]
	sub	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T141549[esp+648]
	fmul	DWORD PTR _UpVector$141544[esp+652]
	lea	ecx, DWORD PTR $T141466[esp+648]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$141544[esp+648]
	fmul	DWORD PTR $T141549[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _NextLocation$124210[esp+644]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T141466[esp+656]
	lea	ecx, DWORD PTR $T141467[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _NextLocation$124210[esp+652]
	fsub	DWORD PTR $T141466[esp+652]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _NextLocation$124210[esp+648]
	fsub	DWORD PTR $T141466[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	eax, DWORD PTR $T141467[esp+636]
	fld	DWORD PTR $T141549[esp+636]
	mov	ecx, DWORD PTR $T141467[esp+640]
	lea	esi, DWORD PTR [ebx+48]
	mov	edx, esi
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR $T141467[esp+644]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _dwDiffuseEnd$141543[esp+636]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [ebx+60], ecx
	mov	DWORD PTR $T141468[esp+636], 0
	mov	edx, DWORD PTR $T141468[esp+636]
	mov	DWORD PTR [ebx+64], edx
	mov	DWORD PTR $T141468[esp+640], 0
	mov	eax, DWORD PTR $T141468[esp+640]
	mov	DWORD PTR [ebx+68], eax
	lea	edi, DWORD PTR [ebx+72]
	mov	ecx, 6
	rep movsd
	fmul	DWORD PTR _UpVector$141544[esp+644]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T141469[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T141549[esp+648]
	fmul	DWORD PTR _UpVector$141544[esp+652]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$141544[esp+648]
	fmul	DWORD PTR $T141549[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _NextLocation$124210[esp+644]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T141469[esp+656]
	lea	ecx, DWORD PTR $T141470[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _NextLocation$124210[esp+652]
	fadd	DWORD PTR $T141469[esp+652]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T141469[esp+648]
	fadd	DWORD PTR _NextLocation$124210[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	edx, DWORD PTR $T141470[esp+636]
	mov	eax, DWORD PTR $T141470[esp+640]
	lea	ecx, DWORD PTR [ebx+96]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR $T141470[esp+644]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _dwDiffuseEnd$141543[esp+636]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR $T141471[esp+636], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR $T141471[esp+636]
	mov	DWORD PTR [ebx+112], ecx
	mov	DWORD PTR $T141471[esp+640], 0
	mov	edx, DWORD PTR $T141471[esp+640]
	lea	edi, DWORD PTR [ebx+120]
	mov	ecx, 6
	mov	esi, ebx
	mov	DWORD PTR [ebx+108], eax
	mov	DWORD PTR [ebx+116], edx
	rep movsd
$L142153:
	mov	ecx, DWORD PTR -532+[esp+636]
	mov	esi, DWORD PTR _System$[esp+636]
$L142143:
	mov	ebx, DWORD PTR _ParticleCount$[esp+636]
$L124207:

; 3317 : 		{
; 3318 : 			for(INT i=0; i<ParticleCount; i++)

	mov	eax, DWORD PTR _i$124205[esp+636]
	inc	eax
	add	ecx, 160				; 000000a0H
	cmp	eax, ebx
	mov	DWORD PTR _i$124205[esp+636], eax
	mov	DWORD PTR -532+[esp+636], ecx
	jl	$L124206

; 3373 : 			}
; 3374 : 		} else	

	jmp	$L124247
$L124204:

; 3375 : 		{
; 3376 : 
; 3377 : 			float BaseParticleScaleX=1.f,
; 3378 : 				  BaseParticleScaleY=1.f;
; 3379 : 	
; 3380 : 			if(Particles[0].Texture)

	mov	eax, DWORD PTR _Particles$[esp+636]
	mov	ecx, DWORD PTR [eax+92]
	add	eax, 92					; 0000005cH
	test	ecx, ecx
	mov	DWORD PTR _BaseParticleScaleX$124238[esp+636], 1065353216 ; 3f800000H
	mov	DWORD PTR _BaseParticleScaleY$124239[esp+636], 1065353216 ; 3f800000H
	mov	DWORD PTR -580+[esp+636], eax
	je	SHORT $L124240

; 3381 : 			{
; 3382 : 				//Particles[0].Texture=Particles[0].Texture->Get(appSeconds()/*Frame->Viewport->CurrentTime*/);
; 3383 : 				Particles[0].Texture->Lock( CurrentTextureInfo, 0/*Frame->Viewport->CurrentTime*/, -1, Frame->Viewport->RenDev );

	mov	edx, DWORD PTR [edi]
	mov	edx, DWORD PTR [edx+92]
	mov	eax, DWORD PTR [ecx]
	push	edx
	push	-1
	push	0
	push	0
	lea	edx, DWORD PTR _CurrentTextureInfo$[esp+652]
	call	DWORD PTR [eax+72]

; 3384 : 				SetTexture( 0, CurrentTextureInfo, 0, false );

	push	0
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _CurrentTextureInfo$[esp+652]
	push	eax
	xor	edx, edx
	mov	ecx, ebp
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 3385 : 				Particles[0].Texture->Unlock(CurrentTextureInfo);

	mov	ecx, DWORD PTR -580+[esp+636]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR _CurrentTextureInfo$[esp+636]
	call	DWORD PTR [eax+76]
$L124240:

; 3386 : 			} 
; 3387 : 
; 3388 : 			UBOOL VariableAlpha=true;
; 3389 : 			if((System.AlphaStart==1.f)&&(System.AlphaEnd==1.f)) VariableAlpha=false;

	mov	ecx, DWORD PTR [esi+1576]
	mov	eax, 1065353216				; 3f800000H
	cmp	ecx, eax
	mov	DWORD PTR _VariableAlpha$124241[esp+636], 1
	jne	SHORT $L124242
	cmp	DWORD PTR [esi+1584], eax
	jne	SHORT $L124242
	mov	DWORD PTR _VariableAlpha$124241[esp+636], 0
$L124242:

; 3390 : 			FLOAT SystemAlphaScale=System.AlphaStartUseSystemAlpha?1.f:System.SystemAlphaScale; 

	test	BYTE PTR [esi+1592], 1
	je	SHORT $L141209
	mov	DWORD PTR _SystemAlphaScale$124243[esp+636], 1065353216 ; 3f800000H
	jmp	SHORT $L141210
$L141209:
	mov	ecx, DWORD PTR [esi+1560]
	mov	DWORD PTR _SystemAlphaScale$124243[esp+636], ecx
$L141210:

; 3391 : 
; 3392 : 			for(INT i=0;i<ParticleCount;i++)

	test	ebx, ebx
	jle	$L124247
	mov	edx, DWORD PTR -580+[esp+636]
	mov	DWORD PTR -616+[esp+636], edx
	mov	DWORD PTR -568+[esp+636], ebx

; 3470 : 	}

	npad	3

; 3391 : 
; 3392 : 			for(INT i=0;i<ParticleCount;i++)

$L124245:

; 3393 : 			{
; 3394 : 				if(!Particles[i].Texture) continue;		// Ignore untextured particles

	mov	eax, DWORD PTR -616+[esp+636]
	mov	esi, DWORD PTR [eax]
	test	esi, esi
	je	$L124246

; 3395 : 
; 3396 : 				QueuedParticle &p=QueuedParticleAlloc(Particles[i].Texture);

	mov	ecx, DWORD PTR [ebp+675228]
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L142116
	mov	edx, DWORD PTR [ebp+675224]
$L141630:
	cmp	DWORD PTR [edx], esi
	je	SHORT $L142116
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	jl	SHORT $L141630
$L142116:
	cmp	eax, ecx
	jl	SHORT $L141634
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L142117
	mov	edx, DWORD PTR [ebp+675224]
	add	edx, 8

; 3470 : 	}

	npad	1

; 3395 : 
; 3396 : 				QueuedParticle &p=QueuedParticleAlloc(Particles[i].Texture);

$L141635:
	cmp	DWORD PTR [edx], 0
	je	SHORT $L142117
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	jl	SHORT $L141635
$L142117:
	cmp	eax, ecx
	jl	SHORT $L141639
	push	1
	push	16					; 00000010H
	lea	ecx, DWORD PTR [ebp+675224]
	call	DWORD PTR __imp_?AddZeroed@FArray@@QAEHHH@Z
$L141639:
	mov	edx, DWORD PTR [ebp+675224]
	mov	ecx, eax
	shl	ecx, 4
	mov	DWORD PTR [ecx+edx], esi
$L141634:
	shl	eax, 4
	mov	edi, eax
	mov	eax, DWORD PTR [ebp+675224]
	mov	ebx, DWORD PTR [eax+edi+8]
	lea	eax, DWORD PTR [eax+edi+8]
	mov	esi, ebx
	inc	esi
	mov	DWORD PTR [eax], esi
	mov	ecx, DWORD PTR [ebp+675224]
	mov	edx, DWORD PTR [ecx+edi+8]
	lea	eax, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [eax+12]
	cmp	edx, ecx
	jl	SHORT $L141641
	inc	ecx
	cmp	ecx, 4
	jge	SHORT $L141674
	mov	ecx, 4
	jmp	SHORT $L141678
$L141674:
	cmp	ecx, 256				; 00000100H
	jle	SHORT $L141678
	mov	ecx, 256				; 00000100H
$L141678:
	add	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [ebp+675224]
	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+edi+12]
	lea	esi, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [ecx]
	inc	eax
	lea	eax, DWORD PTR [eax+eax*8]
	push	OFFSET FLAT:??_C@_1CC@NBJF@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
	shl	eax, 4
	push	eax
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax
$L141641:
	mov	ecx, DWORD PTR [ebp+675224]
	mov	edx, DWORD PTR [ecx+edi+4]

; 3397 : 				
; 3398 : 				// Manage the texture swaps:
; 3399 : 				if(Particles[i].Texture!=CurrentTexture)

	mov	edi, DWORD PTR -616+[esp+636]
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR _CurrentTexture$[esp+636]
	lea	ebx, DWORD PTR [ebx+ebx*8]
	shl	ebx, 4
	add	ebx, edx
	cmp	eax, ecx
	je	SHORT $L124250

; 3400 : 				{
; 3401 : 					CurrentTexture=Particles[i].Texture;
; 3402 : 					BaseParticleScaleX=System.TextureScaleX*128*(Particles[i].Texture->USize*(1/256.f));

	fild	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR _System$[esp+636]
	mov	DWORD PTR _CurrentTexture$[esp+636], eax
	fmul	DWORD PTR __real@3b800000
	fmul	DWORD PTR [ecx+2780]
	fmul	DWORD PTR __real@43000000
	fstp	DWORD PTR _BaseParticleScaleX$124238[esp+636]

; 3403 : 					BaseParticleScaleY=System.TextureScaleY*128*(Particles[i].Texture->VSize*(1/256.f));

	fild	DWORD PTR [eax+56]
	fmul	DWORD PTR __real@3b800000
	fmul	DWORD PTR [ecx+2784]
	fmul	DWORD PTR __real@43000000
	fstp	DWORD PTR _BaseParticleScaleY$124239[esp+636]
$L124250:

; 3404 : 				}
; 3405 : 				
; 3406 : 				FD3DParticle *Vertices=p.v;
; 3407 : 
; 3408 : 				DWORD dwDiffuse;
; 3409 : 				
; 3410 : 				if(VariableAlpha)

	mov	eax, DWORD PTR _VariableAlpha$124241[esp+636]
	test	eax, eax
	je	$L124253

; 3411 : 				{
; 3412 : 					FLOAT alphaLevel=Clamp((float)(Particles[i].Alpha*SystemAlphaScale),0.f,1.f);

	fld	DWORD PTR _SystemAlphaScale$124243[esp+636]
	fmul	DWORD PTR [edi+12]
	fcom	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L141697
	mov	DWORD PTR _alphaLevel$124254[esp+636], 0
	jmp	SHORT $L142151
$L141697:
	fcom	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L141695
	fstp	DWORD PTR _alphaLevel$124254[esp+636]
	jmp	SHORT $L141696
$L141695:
	mov	DWORD PTR _alphaLevel$124254[esp+636], 1065353216 ; 3f800000H
$L142151:
	fstp	ST(0)
$L141696:

; 3413 : 					dwDiffuse=D3DCOLOR_RGBA((int)Clamp(((float)(alphaLevel*Stages[0]->MaxColor.R)),0.f,(float)Stages[0]->MaxColor.R),

	mov	ecx, DWORD PTR [ebp+19712]
	movzx	edx, BYTE PTR [ecx+35]
	mov	DWORD PTR -564+[esp+636], edx
	fild	DWORD PTR -564+[esp+636]
	fst	DWORD PTR $T141712[esp+636]
	fmul	DWORD PTR _alphaLevel$124254[esp+636]
	fcom	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L141709
	fstp	ST(0)
	fld	DWORD PTR __real@00000000
	jmp	SHORT $L141708
$L141709:
	fcom	DWORD PTR $T141712[esp+636]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L141708
	fstp	ST(0)
	fld	DWORD PTR $T141712[esp+636]
$L141708:
	movzx	eax, BYTE PTR [ecx+32]
	mov	DWORD PTR -564+[esp+636], eax
	fild	DWORD PTR -564+[esp+636]
	fld	DWORD PTR _alphaLevel$124254[esp+636]
	fmul	ST(0), ST(1)
	fst	DWORD PTR $T141724[esp+636]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L141722
	fstp	ST(0)
	fld	DWORD PTR __real@00000000
	jmp	SHORT $L141721
$L141722:
	fld	DWORD PTR $T141724[esp+636]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L141721
	fstp	ST(0)
	fld	DWORD PTR $T141724[esp+636]
$L141721:
	movzx	edx, BYTE PTR [ecx+33]
	mov	DWORD PTR -564+[esp+636], edx
	fild	DWORD PTR -564+[esp+636]
	fld	DWORD PTR _alphaLevel$124254[esp+636]
	fmul	ST(0), ST(1)
	fst	DWORD PTR $T141737[esp+636]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L141735
	fstp	ST(0)
	fld	DWORD PTR __real@00000000
	jmp	SHORT $L141734
$L141735:
	fld	DWORD PTR $T141737[esp+636]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L141734
	fstp	ST(0)
	fld	DWORD PTR $T141737[esp+636]
$L141734:
	movzx	eax, BYTE PTR [ecx+34]
	mov	DWORD PTR -564+[esp+636], eax
	fild	DWORD PTR -564+[esp+636]
	fld	DWORD PTR _alphaLevel$124254[esp+636]
	fmul	ST(0), ST(1)
	fst	DWORD PTR $T141750[esp+636]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L141748
	fstp	ST(0)
	fld	DWORD PTR __real@00000000
	jmp	SHORT $L141747
$L141748:
	fld	DWORD PTR $T141750[esp+636]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L141747
	fstp	ST(0)
	fld	DWORD PTR $T141750[esp+636]
$L141747:
	fxch	ST(2)
	call	__ftol
	fxch	ST(2)
	mov	esi, eax
	and	esi, 255				; 000000ffH
	call	__ftol
	fxch	ST(1)
	shl	eax, 8
	or	esi, eax
	shl	esi, 8
	call	__ftol
	and	eax, 255				; 000000ffH
	or	esi, eax
	shl	esi, 8
	call	__ftol
	and	eax, 255				; 000000ffH
	or	esi, eax
	mov	DWORD PTR _dwDiffuse$124252[esp+636], esi

; 3414 : 											(int)Clamp(((float)(alphaLevel*Stages[0]->MaxColor.G)),0.f,(float)Stages[0]->MaxColor.G),
; 3415 : 											(int)Clamp(((float)(alphaLevel*Stages[0]->MaxColor.B)),0.f,(float)Stages[0]->MaxColor.B),
; 3416 : 											(int)Clamp(((float)(alphaLevel*Stages[0]->MaxColor.A)),0.f,(float)Stages[0]->MaxColor.A));
; 3417 : 
; 3418 : 				} else

	jmp	SHORT $L124294
$L124253:

; 3419 : 				{
; 3420 : 					dwDiffuse=D3DCOLOR_RGBA(Stages[0]->MaxColor.R,

	mov	eax, DWORD PTR [ebp+19712]
	movzx	edx, BYTE PTR [eax+33]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax+35]
	mov	cl, BYTE PTR [eax+32]
	movzx	eax, BYTE PTR [eax+34]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
	mov	DWORD PTR _dwDiffuse$124252[esp+636], ecx
$L124294:

; 3421 : 										    Stages[0]->MaxColor.G, 
; 3422 : 											Stages[0]->MaxColor.B,
; 3423 : 											Stages[0]->MaxColor.A); 
; 3424 : 
; 3425 : 				}
; 3426 : 
; 3427 : 				float DrawScaleU=(Particles[i].DrawScale*BaseParticleScaleX);
; 3428 : 				float DrawScaleV=(Particles[i].DrawScale*BaseParticleScaleY);
; 3429 : 			
; 3430 : 				// NJS: New:
; 3431 : 				FVector RightVector=Frame->Coords.XAxis;

	mov	eax, DWORD PTR _Frame$[esp+632]
	fld	DWORD PTR _BaseParticleScaleX$124238[esp+636]
	fmul	DWORD PTR [edi+8]
	lea	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _RightVector$124298[esp+636], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _RightVector$124298[esp+640], edx

; 3432 : 				FVector UpVector   =Frame->Coords.YAxis;

	lea	edx, DWORD PTR [eax+76]
	fstp	DWORD PTR _DrawScaleU$124296[esp+636]
	fld	DWORD PTR _BaseParticleScaleY$124239[esp+636]
	mov	DWORD PTR _RightVector$124298[esp+644], ecx
	fmul	DWORD PTR [edi+8]
	mov	ecx, DWORD PTR [edx]

; 3433 : 				FVector forward    =Frame->Coords.ZAxis;

	add	eax, 88					; 00000058H
	mov	DWORD PTR _UpVector$124299[esp+636], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	fstp	DWORD PTR _DrawScaleV$124297[esp+636]

; 3434 : 
; 3435 : 				// NJS: Do I have rotation?
; 3436 : 				if(Particles[i].Rotation)	

	fld	DWORD PTR [edi+16]
	mov	DWORD PTR _UpVector$124299[esp+640], ecx
	mov	ecx, DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	mov	DWORD PTR _UpVector$124299[esp+644], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _forward$124300[esp+644], eax
	fnstsw	ax
	mov	DWORD PTR _forward$124300[esp+636], ecx
	test	ah, 68					; 00000044H
	mov	DWORD PTR _forward$124300[esp+640], edx
	jnp	$L124301

; 3437 : 				{
; 3438 : 					UpVector   =RotateAboutAxis(UpVector,Particles[i].Rotation,forward);

	fld	DWORD PTR _forward$124300[esp+640]
	mov	ecx, DWORD PTR [edi+16]
	fld	DWORD PTR _forward$124300[esp+644]
	mov	DWORD PTR $T141783[esp+636], ecx
	fld	DWORD PTR _forward$124300[esp+636]
	fld	ST(0)
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142137
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fmulp	ST(2), ST(0)
	jmp	SHORT $L141777
$L142137:
	fstp	ST(0)
$L141777:
	fld	DWORD PTR $T141783[esp+636]
	fcos
	fld	DWORD PTR $T141783[esp+636]
	fsin
	fld	DWORD PTR __real@3f800000
	fsub	ST(0), ST(2)
	fld	ST(0)
	fmul	ST(0), ST(4)
	fst	DWORD PTR -620+[esp+636]

; 3469 : 		unclock(Stats.ParticleTime);

	fmul	ST(0), ST(6)
	fstp	DWORD PTR -584+[esp+636]
	fld	ST(1)
	fmul	ST(0), ST(5)
	fstp	DWORD PTR -580+[esp+636]
	fld	DWORD PTR -620+[esp+636]
	fmul	ST(0), ST(5)
	fstp	DWORD PTR -508+[esp+636]
	fld	ST(1)
	fmul	ST(0), ST(6)
	fstp	DWORD PTR -504+[esp+636]
	fld	DWORD PTR -620+[esp+636]
	fmul	ST(0), ST(4)
	fadd	ST(0), ST(3)
	fmul	DWORD PTR _UpVector$124299[esp+636]
	fld	DWORD PTR -584+[esp+636]
	fsub	DWORD PTR -580+[esp+636]
	fmul	DWORD PTR _UpVector$124299[esp+640]
	faddp	ST(1), ST(0)
	fld	DWORD PTR -504+[esp+636]
	fadd	DWORD PTR -508+[esp+636]
	fmul	DWORD PTR _UpVector$124299[esp+644]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _q$141769[esp+636]
	fld	ST(0)
	fmul	ST(0), ST(5)
	fst	DWORD PTR -492+[esp+636]
	fmul	ST(0), ST(6)
	fstp	DWORD PTR -500+[esp+636]
	fld	ST(3)
	fmul	ST(0), ST(2)
	fstp	DWORD PTR -620+[esp+636]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(5)
	fadd	ST(0), ST(2)
	fmul	DWORD PTR _UpVector$124299[esp+640]
	fld	DWORD PTR -580+[esp+636]
	fadd	DWORD PTR -584+[esp+636]
	fmul	DWORD PTR _UpVector$124299[esp+636]
	faddp	ST(1), ST(0)
	fld	DWORD PTR -500+[esp+636]
	fsub	DWORD PTR -620+[esp+636]
	fmul	DWORD PTR _UpVector$124299[esp+644]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _q$141769[esp+640]
	fstp	ST(0)
	fld	DWORD PTR -508+[esp+636]
	fsub	DWORD PTR -504+[esp+636]
	fmul	DWORD PTR _UpVector$124299[esp+636]
	fld	DWORD PTR -620+[esp+636]
	fadd	DWORD PTR -500+[esp+636]
	fmul	DWORD PTR _UpVector$124299[esp+640]
	faddp	ST(1), ST(0)
	fld	DWORD PTR -492+[esp+636]
	fmul	ST(0), ST(4)
	fadd	ST(0), ST(2)
	fmul	DWORD PTR _UpVector$124299[esp+644]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _q$141769[esp+640]
	mov	edx, DWORD PTR _q$141769[esp+636]
	mov	DWORD PTR _UpVector$124299[esp+640], eax
	fstp	DWORD PTR _q$141769[esp+644]
	mov	ecx, DWORD PTR _q$141769[esp+644]
	mov	DWORD PTR _UpVector$124299[esp+636], edx
	fstp	ST(0)
	mov	DWORD PTR _UpVector$124299[esp+644], ecx
	fld	DWORD PTR [edi+16]
	fld	ST(1)
	fmul	ST(0), ST(2)
	fld	ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142136
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	ST(0)
	fmulp	ST(3), ST(0)
	fld	ST(0)
	fmulp	ST(5), ST(0)
	fmulp	ST(3), ST(0)
	jmp	SHORT $L141809
$L142136:

; 3439 : 					RightVector=RotateAboutAxis(RightVector,Particles[i].Rotation,forward);

	fstp	ST(0)
$L141809:
	fld	ST(0)
	fcos
	fstp	DWORD PTR _costheta$141802[esp+636]
	fsin
	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR _costheta$141802[esp+636]
	fst	DWORD PTR -620+[esp+636]
	fmul	ST(0), ST(2)

; 3469 : 		unclock(Stats.ParticleTime);

	fld	ST(0)
	fmul	ST(0), ST(5)
	fstp	DWORD PTR -500+[esp+636]
	fld	ST(1)
	fmul	ST(0), ST(4)
	fstp	DWORD PTR -492+[esp+636]
	fld	ST(0)
	fmul	ST(0), ST(4)
	fstp	DWORD PTR -504+[esp+636]
	fld	ST(1)
	fmul	ST(0), ST(5)
	fstp	DWORD PTR -508+[esp+636]
	fmul	ST(0), ST(2)
	fadd	DWORD PTR _costheta$141802[esp+636]
	fmul	DWORD PTR _RightVector$124298[esp+636]
	fld	DWORD PTR -500+[esp+636]
	fsub	DWORD PTR -492+[esp+636]
	fmul	DWORD PTR _RightVector$124298[esp+640]
	faddp	ST(1), ST(0)
	fld	DWORD PTR -508+[esp+636]
	fadd	DWORD PTR -504+[esp+636]
	fmul	DWORD PTR _RightVector$124298[esp+644]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _q$141801[esp+636]
	fld	DWORD PTR -620+[esp+636]
	fmul	ST(0), ST(3)
	fst	DWORD PTR -484+[esp+636]
	fmul	ST(0), ST(4)
	fstp	DWORD PTR -580+[esp+636]
	fmulp	ST(1), ST(0)
	fld	DWORD PTR -620+[esp+636]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	fadd	DWORD PTR _costheta$141802[esp+636]
	fmul	DWORD PTR _RightVector$124298[esp+640]
	fld	DWORD PTR -492+[esp+636]
	fadd	DWORD PTR -500+[esp+636]
	fmul	DWORD PTR _RightVector$124298[esp+636]
	faddp	ST(1), ST(0)
	fld	DWORD PTR -580+[esp+636]
	fsub	ST(0), ST(2)
	fmul	DWORD PTR _RightVector$124298[esp+644]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _q$141801[esp+640]
	fld	DWORD PTR -504+[esp+636]
	fsub	DWORD PTR -508+[esp+636]
	fmul	DWORD PTR _RightVector$124298[esp+636]
	fxch	ST(1)
	fadd	DWORD PTR -580+[esp+636]
	fmul	DWORD PTR _RightVector$124298[esp+640]
	faddp	ST(1), ST(0)
	fld	DWORD PTR -484+[esp+636]
	fmul	ST(0), ST(2)
	fadd	DWORD PTR _costheta$141802[esp+636]
	fmul	DWORD PTR _RightVector$124298[esp+644]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _q$141801[esp+644]
	fstp	ST(0)
	mov	edx, DWORD PTR _q$141801[esp+636]
	fstp	ST(0)
	mov	eax, DWORD PTR _q$141801[esp+640]
	mov	ecx, DWORD PTR _q$141801[esp+644]
	mov	DWORD PTR _RightVector$124298[esp+636], edx
	mov	DWORD PTR _RightVector$124298[esp+640], eax
	mov	DWORD PTR _RightVector$124298[esp+644], ecx
$L124301:
	fld	DWORD PTR _UpVector$124299[esp+636]
	mov	edx, DWORD PTR -616+[esp+636]
	fmul	DWORD PTR _DrawScaleV$124297[esp+636]
	add	edx, -48				; ffffffd0H
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	fstp	DWORD PTR _UpVector$124299[esp+636]
	mov	edx, DWORD PTR [edx+8]
	fld	DWORD PTR _DrawScaleV$124297[esp+636]
	mov	DWORD PTR _vecPos$124306[esp+636], eax
	fmul	DWORD PTR _UpVector$124299[esp+640]
	mov	DWORD PTR _vecPos$124306[esp+640], ecx
	mov	DWORD PTR _vecPos$124306[esp+644], edx
	mov	eax, ebx
	fstp	DWORD PTR _UpVector$124299[esp+640]
	mov	DWORD PTR $T141218[esp+636], 1065353216	; 3f800000H
	fld	DWORD PTR _DrawScaleV$124297[esp+636]
	mov	DWORD PTR $T141218[esp+640], 1065353216	; 3f800000H
	fmul	DWORD PTR _UpVector$124299[esp+644]
	fstp	DWORD PTR _UpVector$124299[esp+644]
	fld	DWORD PTR _RightVector$124298[esp+636]
	fmul	DWORD PTR _DrawScaleU$124296[esp+636]
	fstp	DWORD PTR _RightVector$124298[esp+636]
	fld	DWORD PTR _DrawScaleU$124296[esp+636]
	fmul	DWORD PTR _RightVector$124298[esp+640]
	fstp	DWORD PTR _RightVector$124298[esp+640]
	fld	DWORD PTR _DrawScaleU$124296[esp+636]
	fmul	DWORD PTR _RightVector$124298[esp+644]
	fstp	DWORD PTR _RightVector$124298[esp+644]
	fld	DWORD PTR _RightVector$124298[esp+636]
	fchs
	fst	DWORD PTR $T141215[esp+636]
	fld	DWORD PTR _RightVector$124298[esp+640]
	fchs
	fld	ST(0)
	fld	DWORD PTR _RightVector$124298[esp+644]
	fchs
	fst	DWORD PTR -484+[esp+636]
	fld	DWORD PTR $T141215[esp+636]
	fadd	DWORD PTR _UpVector$124299[esp+636]
	fstp	DWORD PTR $T141216[esp+636]
	fxch	ST(1)
	fadd	DWORD PTR _UpVector$124299[esp+640]
	fstp	DWORD PTR $T141216[esp+640]
	fadd	DWORD PTR _UpVector$124299[esp+644]
	fld	DWORD PTR $T141216[esp+636]
	fadd	DWORD PTR _vecPos$124306[esp+636]
	fstp	DWORD PTR $T141217[esp+636]
	fld	DWORD PTR _vecPos$124306[esp+640]
	mov	ecx, DWORD PTR $T141217[esp+636]
	fadd	DWORD PTR $T141216[esp+640]
	mov	DWORD PTR [eax], ecx
	fstp	DWORD PTR $T141217[esp+640]
	fld	DWORD PTR _vecPos$124306[esp+644]
	mov	edx, DWORD PTR $T141217[esp+640]
	fadd	ST(0), ST(1)
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR $T141218[esp+636]
	mov	DWORD PTR [ebx+16], edx
	fstp	DWORD PTR $T141217[esp+644]
	mov	ecx, DWORD PTR $T141217[esp+644]
	fstp	ST(0)
	mov	DWORD PTR [eax+8], ecx
	fld	DWORD PTR _RightVector$124298[esp+636]
	mov	eax, DWORD PTR _dwDiffuse$124252[esp+636]
	fadd	DWORD PTR _UpVector$124299[esp+636]
	mov	ecx, DWORD PTR $T141218[esp+640]
	fld	DWORD PTR _RightVector$124298[esp+640]
	mov	DWORD PTR [ebx+12], eax
	fadd	DWORD PTR _UpVector$124299[esp+640]
	mov	DWORD PTR [ebx+20], ecx
	fld	DWORD PTR _RightVector$124298[esp+644]
	fadd	DWORD PTR _UpVector$124299[esp+644]
	fstp	DWORD PTR $T141219[esp+644]
	fxch	ST(1)
	lea	edx, DWORD PTR [ebx+24]
	fadd	DWORD PTR _vecPos$124306[esp+636]
	mov	DWORD PTR $T141221[esp+636], 0
	mov	DWORD PTR $T141221[esp+640], 1065353216	; 3f800000H
	lea	esi, DWORD PTR [ebx+48]
	fstp	DWORD PTR $T141220[esp+636]
	fld	DWORD PTR _vecPos$124306[esp+640]
	mov	ecx, DWORD PTR $T141220[esp+636]
	fadd	ST(0), ST(1)
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR $T141225[esp+640], 0
	mov	DWORD PTR $T141225[esp+636], 0
	fstp	DWORD PTR $T141220[esp+640]
	mov	ecx, DWORD PTR $T141220[esp+640]
	fstp	ST(0)
	mov	DWORD PTR [edx+4], ecx
	fld	DWORD PTR _vecPos$124306[esp+644]
	lea	edi, DWORD PTR [ebx+72]
	fadd	DWORD PTR $T141219[esp+644]
	mov	DWORD PTR [ebx+60], eax
	mov	DWORD PTR [ebx+36], eax
	fstp	DWORD PTR $T141220[esp+644]
	fld	DWORD PTR _UpVector$124299[esp+636]
	mov	ecx, DWORD PTR $T141220[esp+644]
	fchs
	mov	DWORD PTR [edx+8], ecx
	fst	DWORD PTR $T141222[esp+636]
	mov	edx, DWORD PTR $T141221[esp+636]
	fld	DWORD PTR _UpVector$124299[esp+640]
	mov	ecx, DWORD PTR $T141221[esp+640]
	fchs
	mov	DWORD PTR [ebx+44], ecx
	fld	ST(0)
	mov	DWORD PTR [ebx+40], edx
	fld	DWORD PTR _UpVector$124299[esp+644]
	mov	edx, esi
	fchs
	fst	DWORD PTR -564+[esp+636]
	fld	DWORD PTR $T141222[esp+636]
	fadd	DWORD PTR _RightVector$124298[esp+636]
	fstp	DWORD PTR $T141223[esp+636]
	fxch	ST(1)
	fadd	DWORD PTR _RightVector$124298[esp+640]
	fstp	DWORD PTR $T141223[esp+640]
	fadd	DWORD PTR _RightVector$124298[esp+644]
	fld	DWORD PTR $T141223[esp+636]
	fadd	DWORD PTR _vecPos$124306[esp+636]
	fstp	DWORD PTR $T141224[esp+636]
	fld	DWORD PTR _vecPos$124306[esp+640]
	mov	ecx, DWORD PTR $T141224[esp+636]
	fadd	DWORD PTR $T141223[esp+640]
	mov	DWORD PTR [edx], ecx
	fstp	DWORD PTR $T141224[esp+640]
	fld	DWORD PTR _vecPos$124306[esp+644]
	mov	ecx, DWORD PTR $T141224[esp+640]
	fadd	ST(0), ST(1)
	mov	DWORD PTR [edx+4], ecx
	fstp	DWORD PTR $T141224[esp+644]
	mov	ecx, DWORD PTR $T141224[esp+644]
	mov	DWORD PTR [edx+8], ecx
	fstp	ST(0)
	mov	ecx, DWORD PTR $T141225[esp+640]
	fxch	ST(1)
	mov	edx, DWORD PTR $T141225[esp+636]
	fstp	DWORD PTR $T141227[esp+636]
	mov	DWORD PTR [ebx+68], ecx
	mov	ecx, 6
	mov	DWORD PTR [ebx+64], edx
	rep movsd
	fstp	DWORD PTR $T141227[esp+640]
	mov	edx, DWORD PTR -564+[esp+636]
	fxch	ST(1)
	mov	DWORD PTR $T141227[esp+644], edx
	fstp	DWORD PTR $T141226[esp+636]
	lea	ecx, DWORD PTR [ebx+96]
	fld	DWORD PTR -484+[esp+636]
	mov	DWORD PTR $T141230[esp+640], 0
	fld	DWORD PTR $T141226[esp+636]
	mov	DWORD PTR [ebx+108], eax
	fadd	DWORD PTR $T141227[esp+636]
	mov	DWORD PTR $T141230[esp+636], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T141230[esp+636]
	lea	edi, DWORD PTR [ebx+120]
	fstp	DWORD PTR $T141228[esp+636]
	fxch	ST(1)
	mov	esi, ebx
	fadd	DWORD PTR $T141227[esp+640]
	mov	DWORD PTR [ebx+112], eax
	fstp	DWORD PTR $T141228[esp+640]
	fadd	DWORD PTR $T141227[esp+644]
	fld	DWORD PTR $T141228[esp+636]
	fadd	DWORD PTR _vecPos$124306[esp+636]
	fstp	DWORD PTR $T141229[esp+636]
	fld	DWORD PTR _vecPos$124306[esp+640]
	mov	edx, DWORD PTR $T141229[esp+636]
	fadd	DWORD PTR $T141228[esp+640]
	mov	DWORD PTR [ecx], edx
	fstp	DWORD PTR $T141229[esp+640]
	fld	DWORD PTR _vecPos$124306[esp+644]
	mov	edx, DWORD PTR $T141229[esp+640]
	fadd	ST(0), ST(1)
	mov	DWORD PTR [ecx+4], edx
	fstp	DWORD PTR $T141229[esp+644]
	mov	edx, DWORD PTR $T141229[esp+644]
	mov	DWORD PTR [ecx+8], edx
	fstp	ST(0)
	mov	ecx, DWORD PTR $T141230[esp+640]
	mov	DWORD PTR [ebx+116], ecx
	mov	ecx, 6
	rep movsd
$L124246:
	mov	ecx, DWORD PTR -616+[esp+636]
	mov	eax, DWORD PTR -568+[esp+636]
	add	ecx, 160				; 000000a0H
	dec	eax
	mov	DWORD PTR -616+[esp+636], ecx
	mov	DWORD PTR -568+[esp+636], eax
	jne	$L124245
$L124247:

; 3440 : 				}
; 3441 : 
; 3442 : 				UpVector*=DrawScaleV;
; 3443 : 				RightVector*=DrawScaleU; 
; 3444 : 				FVector vecPos=Particles[i].WorldLocation;
; 3445 : 
; 3446 : 				Vertices[0].Position = vecPos + (-RightVector+UpVector);
; 3447 : 				Vertices[0].Diffuse = dwDiffuse;
; 3448 : 				Vertices[0].TextureVector = D3DXVECTOR2(1.0f, 1.0f);
; 3449 : 
; 3450 : 				Vertices[1].Position = vecPos + (RightVector+UpVector);
; 3451 : 				Vertices[1].Diffuse = dwDiffuse;
; 3452 : 				Vertices[1].TextureVector = D3DXVECTOR2(0.0f, 1.0f);
; 3453 : 
; 3454 : 				Vertices[2].Position = vecPos + (RightVector+-UpVector);
; 3455 : 				Vertices[2].Diffuse = dwDiffuse;
; 3456 : 				Vertices[2].TextureVector = D3DXVECTOR2(0.0f, 0.0f);
; 3457 : 
; 3458 : 				Vertices[3]=Vertices[2];
; 3459 : 
; 3460 : 				Vertices[4].Position = vecPos + (-RightVector+-UpVector) ;
; 3461 : 				Vertices[4].Diffuse = dwDiffuse;
; 3462 : 				Vertices[4].TextureVector = D3DXVECTOR2(1.0f, 0.0f);
; 3463 : 
; 3464 : 				Vertices[5]=Vertices[0];
; 3465 : 			}
; 3466 : 		}
; 3467 : 
; 3468 : 		QueueParticleFlush(System,Frame);

	mov	eax, DWORD PTR [ebp+675228]
	test	eax, eax
	je	$L142062
	mov	esi, DWORD PTR _System$[esp+636]
	lea	edx, DWORD PTR _PolyFlagsEx$142028[esp+636]
	push	edx
	mov	edx, DWORD PTR _Frame$[esp+636]
	lea	eax, DWORD PTR _PolyFlags$142027[esp+640]
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?STY2PolyFlags@AActor@@QAIXPAUFSceneNode@@AAK1@Z
	mov	edi, DWORD PTR _PolyFlags$142027[esp+636]
	mov	edx, DWORD PTR _PolyFlagsEx$142028[esp+636]
	mov	al, BYTE PTR [esi+1552]
	or	edi, 256				; 00000100H
	or	edx, 2
	test	al, al
	mov	DWORD PTR _PolyFlags$142027[esp+636], edi
	mov	DWORD PTR _PolyFlagsEx$142028[esp+636], edx
	jne	SHORT $L142029
	mov	eax, edi
	or	eax, -2147483648			; 80000000H
	jmp	SHORT $L142152
$L142029:
	cmp	al, 2
	jne	SHORT $L142031
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]
$L142031:
	mov	eax, DWORD PTR _PolyFlags$142027[esp+636]
	and	eax, 2147483647				; 7fffffffH
$L142152:
	mov	ecx, DWORD PTR [esi+1576]
	mov	DWORD PTR _PolyFlags$142027[esp+636], eax
	mov	eax, 1065353216				; 3f800000H
	cmp	ecx, eax
	jne	SHORT $L142128
	cmp	DWORD PTR [esi+1584], eax
	je	SHORT $L142035
$L142128:
	or	DWORD PTR _PolyFlags$142027[esp+636], 4
$L142035:
	mov	edx, DWORD PTR _PolyFlagsEx$142028[esp+636]
	push	edx
	mov	edx, DWORD PTR _PolyFlags$142027[esp+640]
	mov	ecx, ebp
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	mov	eax, DWORD PTR [esi+1556]
	push	eax
	mov	ecx, ebp
	call	?SetZBias@UD3DRenderDevice@@QAIMM@Z	; UD3DRenderDevice::SetZBias
	fstp	ST(0)
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	1
	push	eax
	call	DWORD PTR [ecx+244]
	lea	eax, DWORD PTR [ebp+16624]
	push	0
	mov	ecx, ebp
	mov	DWORD PTR [ebp+19716], eax
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog
	mov	edx, DWORD PTR [ebp+675228]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $L142040
	mov	ecx, DWORD PTR [ebp+675224]
	add	ecx, 8
$L142038:
	add	eax, DWORD PTR [ecx]
	add	ecx, 16					; 00000010H
	dec	edx
	jne	SHORT $L142038
$L142040:
	mov	edx, DWORD PTR [ebp+19684]
	lea	esi, DWORD PTR [eax+eax*2]
	add	edx, eax
	shl	esi, 1
	cmp	esi, 16384				; 00004000H
	mov	DWORD PTR [ebp+19684], edx
	jl	SHORT $L142041
	push	3227					; 00000c9bH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0DA@DNJO@TotalParticleCount?$CK6?$DMPARTICLE_VE@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L142041:
	push	-1
	lea	ecx, DWORD PTR [ebp+16740]
	push	esi
	call	?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z ; FD3DVertexBuffer<FD3DParticle>::Lock
	mov	ebx, eax
	mov	eax, DWORD PTR [ebp+675228]
	test	eax, eax
	mov	DWORD PTR _i$142037[esp+636], 0
	jle	SHORT $L142046
	mov	edx, DWORD PTR [ebp+675224]
	xor	eax, eax
$L142044:
	mov	ecx, DWORD PTR [edx+eax+8]
	test	ecx, ecx
	je	SHORT $L142045
	mov	esi, DWORD PTR [edx+eax+4]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	shl	ecx, 4
	mov	edx, ecx
	shr	ecx, 2
	mov	edi, ebx
	rep movsd
	mov	ecx, edx
	and	ecx, 3
	rep movsb
	mov	edx, DWORD PTR [ebp+675224]
	mov	ecx, DWORD PTR [edx+eax+8]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	shl	ecx, 4
	add	ebx, ecx
$L142045:
	mov	ecx, DWORD PTR _i$142037[esp+636]
	mov	esi, DWORD PTR [ebp+675228]
	inc	ecx
	add	eax, 16					; 00000010H
	cmp	ecx, esi
	mov	DWORD PTR _i$142037[esp+636], ecx
	jl	SHORT $L142044
$L142046:
	lea	esi, DWORD PTR [ebp+16740]
	mov	ecx, esi
	call	?Unlock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEHXZ ; FD3DVertexBuffer<FD3DParticle>::Unlock
	mov	ecx, esi
	mov	DWORD PTR _First$142048[esp+636], eax
	call	?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ ; FD3DVertexBuffer<FD3DParticle>::Set
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	xor	esi, esi
	push	esi
	push	1
	xor	ebx, ebx
	push	eax
	mov	DWORD PTR _ParticleIndex$142051[esp+648], ebx
	call	DWORD PTR [edx+244]
	lea	eax, DWORD PTR [ebp+16624]
	mov	DWORD PTR [ebp+19716], eax
	cmp	DWORD PTR [ebp+675228], esi
	mov	DWORD PTR _i$142037[esp+636], esi
	jle	$L142060
	mov	DWORD PTR -584+[esp+636], esi
$L142052:
	mov	eax, DWORD PTR [ebp+675224]
	mov	ecx, DWORD PTR -584+[esp+636]
	mov	edi, DWORD PTR [eax+ecx+8]
	test	edi, edi
	lea	eax, DWORD PTR [eax+ecx+8]
	mov	DWORD PTR [eax], 0
	je	$L142053
	test	esi, esi
	je	SHORT $L142057
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR _CurrentTextureInfo$142050[esp+636]
	mov	ecx, esi
	call	DWORD PTR [eax+76]
$L142057:
	mov	ecx, DWORD PTR [ebp+675224]
	mov	edx, DWORD PTR -584+[esp+636]
	mov	esi, DWORD PTR [edx+ecx]
	test	esi, esi
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	je	$L142058
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	ecx, DWORD PTR _Frame$[esp+632]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+92]
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	-1
	push	0
	push	0
	lea	edx, DWORD PTR _CurrentTextureInfo$142050[esp+652]
	mov	ecx, esi
	call	DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _PolyFlagsEx$142028[esp+636]
	mov	edx, DWORD PTR [esi+196]
	mov	eax, DWORD PTR _PolyFlags$142027[esp+636]
	push	0
	or	edx, ecx
	push	edx
	push	0
	push	eax
	lea	ecx, DWORD PTR _CurrentTextureInfo$142050[esp+652]
	push	ecx
	xor	edx, edx
	mov	ecx, ebp
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	mov	ecx, DWORD PTR _PolyFlagsEx$142028[esp+636]
	mov	edx, DWORD PTR [esi+196]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _PolyFlags$142027[esp+640]
	mov	ecx, ebp
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	jmp	SHORT $L142059
$L142058:
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L142059:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [edi+edi]
	push	edx
	lea	edx, DWORD PTR [ebx+ebx*2]
	mov	ebx, DWORD PTR _First$142048[esp+640]
	lea	edx, DWORD PTR [ebx+edx*2]
	push	edx
	push	4
	push	eax
	call	DWORD PTR [ecx+280]
	mov	ebx, DWORD PTR _ParticleIndex$142051[esp+636]
	add	ebx, edi
	mov	DWORD PTR _ParticleIndex$142051[esp+636], ebx
$L142053:
	mov	eax, DWORD PTR _i$142037[esp+636]
	mov	edx, DWORD PTR -584+[esp+636]
	mov	ecx, DWORD PTR [ebp+675228]
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	mov	DWORD PTR _i$142037[esp+636], eax
	mov	DWORD PTR -584+[esp+636], edx
	jl	$L142052
	test	esi, esi
	je	SHORT $L142060
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR _CurrentTextureInfo$142050[esp+636]
	mov	ecx, esi
	call	DWORD PTR [eax+76]
	jmp	SHORT $L142061
$L142060:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L142061:
	mov	eax, DWORD PTR _System$[esp+636]
	cmp	BYTE PTR [eax+1552], 2
	jne	SHORT $L142062
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]
$L142062:

; 3469 : 		unclock(Stats.ParticleTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], 0
	pop	edi
	mov	DWORD PTR _L$142102[esp+632], 0
	pop	ebx
	je	SHORT $L142104
	rdtsc
	mov	DWORD PTR _L$142102[esp+628], eax
	mov	DWORD PTR _H$142103[esp+628], edx
$L142104:
	mov	eax, DWORD PTR _L$142102[esp+628]
	mov	ecx, DWORD PTR [ebp+19636]
	add	eax, -34				; ffffffdeH
	add	ecx, eax
	mov	DWORD PTR [ebp+19636], ecx
$L124197:
	pop	esi
	pop	ebp

; 3470 : 	}

	add	esp, 620				; 0000026cH
	ret	4
?dnDrawParticles@UD3DRenderDevice@@UAIXAAVASoftParticleSystem@@PAUFSceneNode@@@Z ENDP ; UD3DRenderDevice::dnDrawParticles
_TEXT	ENDS
EXTRN	__imp_??0FVector@@QAE@XZ:NEAR
; Function compile flags: /Ogty
;	COMDAT ?QueuedLinesFlush@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAUFSceneNode@@PAVUTexture@@K@Z
_TEXT	SEGMENT
_ParticleIndex$142337 = -372
_D$142355 = -372
_D$142359 = -372
_Temp$142410 = -332
$T142503 = -348
$T142533 = -352
_PolyFlags$142590 = -380
_PolyFlagsEx$142591 = -364
_i$142600 = -368
_First$142611 = -352
_CurrentTextureInfo$142613 = -128
_QueuedLineCount$ = -344
_ParticleIndex$142614 = -372
_LastStart$ = -272
_SubTextureHeight$ = -360
_ReversePanPassDone$ = -373
_XSystemStart$124335 = -380
_XFraction$124343 = -340
_SubTextureIndex$124344 = -316
_i$124346 = -364
_dwDiffuseEnd$124356 = -300
_UpVector$124357 = -296
_TexLeft$124361 = -372
_TexBottom$124364 = -368
_VertPan$124370 = -336
_System$ = -356
_Frame$ = 8
_Texture$ = 12
$T142157 = -328
$T142158 = -312
$T142159 = -176
$T142160 = -228
$T142161 = -164
$T142162 = -216
$T142163 = -248
$T142164 = -196
$T142165 = -152
$T142166 = -284
$T142167 = -184
$T142168 = -140
$T142169 = -240
$T142170 = -204
_Temp$142209 = -188
?QueuedLinesFlush@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAUFSceneNode@@PAVUTexture@@K@Z PROC NEAR ; UD3DRenderDevice::QueuedLinesFlush, COMDAT
; _this$ = ecx
; _System$ = edx

; 3485 : 	{

	sub	esp, 380				; 0000017cH
	push	ebx
	push	ebp
	mov	ebx, ecx

; 3486 : 		VALIDATE;
; 3487 : 
; 3488 : 		int QueuedLineCount=QueuedLines.Num();

	mov	eax, DWORD PTR [ebx+675240]

; 3489 : 		if(!QueuedLineCount) return;

	test	eax, eax
	push	esi
	mov	esi, edx
	push	edi
	mov	DWORD PTR _System$[esp+396], esi
	mov	DWORD PTR _QueuedLineCount$[esp+396], eax
	je	$L142625

; 3490 : 		SetZBias(0);

	fld	DWORD PTR [ebx+675164]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L142189
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L142188
$L142189:
	mov	eax, DWORD PTR [ebx+19124]
	push	0
	push	47					; 0000002fH
	mov	DWORD PTR [ebx+675164], 0
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+200]
$L142188:

; 3491 : 
; 3492 : 		FVector LastStart[2];

	lea	edi, DWORD PTR _LastStart$[esp+396]
	mov	ebp, 2
$L142200:
	mov	ecx, edi
	call	DWORD PTR __imp_??0FVector@@QAE@XZ
	add	edi, 12					; 0000000cH
	dec	ebp
	jne	SHORT $L142200

; 3493 : 
; 3494 : 		// Compute the height of a sub texture segment
; 3495 : 		float SubTextureHeight=1.f;
; 3496 : 		if(System.SubTextureCount>1) SubTextureHeight=(1.f/System.SubTextureCount);

	mov	eax, DWORD PTR [esi+1664]
	cmp	eax, 1
	mov	DWORD PTR _SubTextureHeight$[esp+396], 1065353216 ; 3f800000H
	mov	DWORD PTR -372+[esp+396], eax
	jle	SHORT $L124330
	fild	DWORD PTR -372+[esp+396]
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR _SubTextureHeight$[esp+396]
$L124330:

; 3586 : 				continue;

	fild	DWORD PTR _QueuedLineCount$[esp+396]
	mov	BYTE PTR _ReversePanPassDone$[esp+396], 0
	fstp	DWORD PTR -352+[esp+396]
$L124333:
	mov	edx, DWORD PTR [esi+112]
	fld	DWORD PTR [edx+1520]
	mov	al, BYTE PTR [esi+1692]
	test	al, 1
	fmul	DWORD PTR [esi+1676]
	fadd	DWORD PTR [esi+1684]
	fst	DWORD PTR _XSystemStart$124335[esp+396]
	fadd	DWORD PTR [esi+1668]
	je	SHORT $L142208
	mov	al, BYTE PTR _ReversePanPassDone$[esp+396]
	test	al, al
	je	SHORT $L142208
	mov	eax, DWORD PTR _XSystemStart$124335[esp+396]
	fstp	DWORD PTR _XSystemStart$124335[esp+396]
	mov	DWORD PTR _Temp$142209[esp+396], eax
	fld	DWORD PTR _Temp$142209[esp+396]
$L142208:
	fsub	DWORD PTR _XSystemStart$124335[esp+396]
	mov	eax, DWORD PTR [esi+1664]
	xor	edi, edi
	cmp	eax, 1
	fdiv	DWORD PTR -352+[esp+396]
	mov	DWORD PTR _SubTextureIndex$124344[esp+396], edi
	fstp	DWORD PTR _XFraction$124343[esp+396]
	jle	SHORT $L124345
	call	DWORD PTR __imp__rand
	cdq
	idiv	DWORD PTR [esi+1664]
	mov	DWORD PTR _SubTextureIndex$124344[esp+396], edx
$L124345:
	cmp	DWORD PTR _QueuedLineCount$[esp+396], edi
	mov	DWORD PTR _i$124346[esp+396], edi
	jle	$L124349

; 3594 : 	}

	npad	7
$L124347:

; 3497 : 
; 3498 : 		// Whether the reverse pan pass has been performed yet or not.
; 3499 : 		bool ReversePanPassDone=false;
; 3500 : 
; 3501 : 		for(;;)
; 3502 : 		{
; 3503 : 			float XSystemStart=System.BeamTexturePanOffsetX+(System.BeamTexturePanX*System.Level->GameTimeSeconds);
; 3504 : 			float XSystemEnd=XSystemStart+System.BeamTextureScaleX;
; 3505 : 
; 3506 : 			if((System.BeamReversePanPass&&ReversePanPassDone))
; 3507 : 				Exchange(XSystemStart,XSystemEnd);
; 3508 : 
; 3509 : 			float XFraction=(XSystemEnd-XSystemStart)/QueuedLineCount;
; 3510 : 
; 3511 : 			int SubTextureIndex=0;
; 3512 : 
; 3513 : 			if(System.SubTextureCount>1) 
; 3514 : 				SubTextureIndex=appRand()%System.SubTextureCount;
; 3515 : 
; 3516 : 			for(int i=0;i<QueuedLineCount;i++)
; 3517 : 			{
; 3518 : 				QueuedLineSegment &l=QueuedLines(i);

	mov	eax, DWORD PTR _i$124346[esp+396]
	mov	edx, DWORD PTR [ebx+675236]
	mov	esi, DWORD PTR _Texture$[esp+392]
	lea	ecx, DWORD PTR [eax+eax*8]
	lea	ebp, DWORD PTR [edx+ecx*4]

; 3519 : 				QueuedParticle &p=QueuedParticleAlloc(Texture);	// Alloc the particle to hold this line segment.

	mov	ecx, DWORD PTR [ebx+675228]
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L142676

; 3497 : 
; 3498 : 		// Whether the reverse pan pass has been performed yet or not.
; 3499 : 		bool ReversePanPassDone=false;
; 3500 : 
; 3501 : 		for(;;)
; 3502 : 		{
; 3503 : 			float XSystemStart=System.BeamTexturePanOffsetX+(System.BeamTexturePanX*System.Level->GameTimeSeconds);
; 3504 : 			float XSystemEnd=XSystemStart+System.BeamTextureScaleX;
; 3505 : 
; 3506 : 			if((System.BeamReversePanPass&&ReversePanPassDone))
; 3507 : 				Exchange(XSystemStart,XSystemEnd);
; 3508 : 
; 3509 : 			float XFraction=(XSystemEnd-XSystemStart)/QueuedLineCount;
; 3510 : 
; 3511 : 			int SubTextureIndex=0;
; 3512 : 
; 3513 : 			if(System.SubTextureCount>1) 
; 3514 : 				SubTextureIndex=appRand()%System.SubTextureCount;
; 3515 : 
; 3516 : 			for(int i=0;i<QueuedLineCount;i++)
; 3517 : 			{
; 3518 : 				QueuedLineSegment &l=QueuedLines(i);

	mov	edx, DWORD PTR [ebx+675224]

; 3594 : 	}

	npad	7

; 3519 : 				QueuedParticle &p=QueuedParticleAlloc(Texture);	// Alloc the particle to hold this line segment.

$L142327:
	cmp	DWORD PTR [edx], esi
	je	SHORT $L142676
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	jl	SHORT $L142327
$L142676:
	cmp	eax, ecx
	jl	SHORT $L142331
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L142677
	mov	edx, DWORD PTR [ebx+675224]
	add	edx, 8

; 3594 : 	}

	npad	1

; 3519 : 				QueuedParticle &p=QueuedParticleAlloc(Texture);	// Alloc the particle to hold this line segment.

$L142332:
	cmp	DWORD PTR [edx], 0
	je	SHORT $L142677
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	jl	SHORT $L142332
$L142677:
	cmp	eax, ecx
	jl	SHORT $L142336
	push	1
	push	16					; 00000010H
	lea	ecx, DWORD PTR [ebx+675224]
	call	DWORD PTR __imp_?AddZeroed@FArray@@QAEHHH@Z
$L142336:
	mov	edx, DWORD PTR [ebx+675224]
	mov	ecx, eax
	shl	ecx, 4
	mov	DWORD PTR [ecx+edx], esi
$L142331:
	shl	eax, 4
	mov	esi, eax
	mov	eax, DWORD PTR [ebx+675224]
	mov	edx, DWORD PTR [eax+esi+8]
	lea	eax, DWORD PTR [eax+esi+8]
	mov	ecx, edx
	inc	ecx
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [ebx+675224]
	mov	edi, DWORD PTR [ecx+esi+8]
	lea	eax, DWORD PTR [ecx+esi]
	mov	ecx, DWORD PTR [eax+12]
	cmp	edi, ecx
	mov	DWORD PTR _ParticleIndex$142337[esp+396], edx
	jl	SHORT $L142338
	inc	ecx
	cmp	ecx, 4
	jge	SHORT $L142311
	mov	ecx, 4
	jmp	SHORT $L142315
$L142311:
	cmp	ecx, 256				; 00000100H
	jle	SHORT $L142315
	mov	ecx, 256				; 00000100H
$L142315:
	add	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [ebx+675224]
	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+esi+12]
	lea	edi, DWORD PTR [edx+esi]
	mov	edx, DWORD PTR [ecx]
	inc	eax
	lea	eax, DWORD PTR [eax+eax*8]
	push	OFFSET FLAT:??_C@_1CC@NBJF@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
	shl	eax, 4
	push	eax
	mov	eax, DWORD PTR [edi+4]
	push	eax
	call	DWORD PTR [edx+4]
	mov	edx, DWORD PTR _ParticleIndex$142337[esp+396]
	mov	DWORD PTR [edi+4], eax
$L142338:

; 3520 : 				FVector &Start=l.v[0];
; 3521 : 				FVector &End  =l.v[1];
; 3522 : 
; 3523 : 				FD3DParticle *Vertices=p.v; 
; 3524 : 				DWORD dwDiffuseStart=l.StartColor.TrueColor(); 
; 3525 : 				DWORD dwDiffuseEnd  =l.EndColor.TrueColor(); 
; 3526 : 			
; 3527 : 				//FVector forward=Frame->Coords.ZAxis;			
; 3528 : 				FVector UpVector=(Start-ViewLocation) cross (End-ViewLocation);

	fld	DWORD PTR [ebp+12]
	mov	ecx, DWORD PTR [ebx+675224]
	fsub	DWORD PTR [ebx+176]
	mov	eax, DWORD PTR [ecx+esi+4]
	mov	esi, DWORD PTR [ebp+28]
	lea	edx, DWORD PTR [edx+edx*8]
	fstp	DWORD PTR $T142158[esp+396]
	fld	DWORD PTR [ebp+16]
	shl	edx, 4
	fsub	DWORD PTR [ebx+180]
	add	edx, eax
	xor	eax, eax
	mov	DWORD PTR _D$142355[esp+396], esi
	fstp	DWORD PTR $T142158[esp+400]
	fld	DWORD PTR [ebp+20]
	mov	al, BYTE PTR _D$142355[esp+398]
	fsub	DWORD PTR [ebx+184]
	mov	ecx, esi
	and	ecx, 255				; 000000ffH
	shl	ecx, 16					; 00000010H
	fstp	DWORD PTR $T142158[esp+404]
	fld	DWORD PTR [ebp]
	and	esi, 65280				; 0000ff00H
	fsub	DWORD PTR [ebx+176]
	add	eax, ecx
	add	eax, esi
	fstp	DWORD PTR $T142157[esp+396]
	fld	DWORD PTR [ebp+4]
	mov	esi, DWORD PTR [ebp+32]
	fsub	DWORD PTR [ebx+180]
	mov	edi, eax
	xor	eax, eax
	mov	DWORD PTR _D$142359[esp+396], esi
	fstp	DWORD PTR $T142157[esp+400]
	fld	DWORD PTR [ebp+8]
	mov	al, BYTE PTR _D$142359[esp+398]
	fsub	DWORD PTR [ebx+184]
	mov	ecx, esi
	and	ecx, 255				; 000000ffH
	shl	ecx, 16					; 00000010H
	fstp	DWORD PTR $T142157[esp+404]
	fld	DWORD PTR $T142157[esp+400]
	and	esi, 65280				; 0000ff00H
	fmul	DWORD PTR $T142158[esp+404]
	fld	DWORD PTR $T142157[esp+404]
	add	eax, ecx
	fmul	DWORD PTR $T142158[esp+400]
	add	eax, esi
	mov	DWORD PTR _dwDiffuseEnd$124356[esp+396], eax
	fsubp	ST(1), ST(0)
	fld	DWORD PTR $T142157[esp+404]
	fmul	DWORD PTR $T142158[esp+396]
	fld	DWORD PTR $T142158[esp+404]
	fmul	DWORD PTR $T142157[esp+396]
	fsubp	ST(1), ST(0)
	fld	DWORD PTR $T142158[esp+400]
	fmul	DWORD PTR $T142157[esp+396]
	fld	DWORD PTR $T142157[esp+400]
	fmul	DWORD PTR $T142158[esp+396]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _UpVector$124357[esp+404]

; 3529 : 				UpVector.Normalize();

	fld	ST(1)
	fmul	ST(0), ST(2)
	fld	DWORD PTR _UpVector$124357[esp+404]
	fmul	DWORD PTR _UpVector$124357[esp+404]
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142688
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fxch	ST(2)
	fmul	ST(0), ST(2)
	fxch	ST(2)
	fxch	ST(1)
	fmul	ST(0), ST(1)
	fxch	ST(1)
	fld	DWORD PTR _UpVector$124357[esp+404]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$124357[esp+404]
$L142688:

; 3530 : 
; 3531 : 				// texture coordinates:
; 3532 : 				float TexLeft=0.f,
; 3533 : 					  TexTop=1.f,
; 3534 : 					  TexRight=1.f,
; 3535 : 					  TexBottom=0.f;
; 3536 : 
; 3537 : 				if(System.SubTextureCount>1) 

	mov	eax, DWORD PTR _System$[esp+396]
	fstp	ST(0)
	mov	ecx, DWORD PTR [eax+1664]
	fld	DWORD PTR __real@3f800000
	cmp	ecx, 1
	mov	DWORD PTR _TexBottom$124364[esp+396], 0
	jle	SHORT $L124365
	fstp	ST(0)

; 3538 : 				{
; 3539 : 					TexBottom=SubTextureIndex*SubTextureHeight;

	fild	DWORD PTR _SubTextureIndex$124344[esp+396]
	fmul	DWORD PTR _SubTextureHeight$[esp+396]
	fst	DWORD PTR _TexBottom$124364[esp+396]

; 3540 : 					TexTop=TexBottom+SubTextureHeight;

	fadd	DWORD PTR _SubTextureHeight$[esp+396]
$L124365:

; 3541 : 				}
; 3542 : 
; 3543 : 				TexLeft=XSystemStart+(i*XFraction);

	fild	DWORD PTR _i$124346[esp+396]

; 3544 : 				TexRight=TexLeft+XFraction;
; 3545 : 
; 3546 : 				Exchange(TexLeft,TexRight);
; 3547 : 
; 3548 : 				float VertPan=System.BeamTexturePanOffsetY+(System.BeamTexturePanY*System.Level->GameTimeSeconds);

	mov	ecx, DWORD PTR [eax+112]
	fmul	DWORD PTR _XFraction$124343[esp+396]
	fadd	DWORD PTR _XSystemStart$124335[esp+396]
	fst	DWORD PTR _Temp$142410[esp+396]
	fadd	DWORD PTR _XFraction$124343[esp+396]
	fstp	DWORD PTR _TexLeft$124361[esp+396]
	fld	DWORD PTR [ecx+1520]
	fmul	DWORD PTR [eax+1680]
	fadd	DWORD PTR [eax+1688]

; 3549 : 				TexTop+=VertPan;
; 3550 : 				TexBottom+=VertPan;
; 3551 : 
; 3552 : 				if(i)

	mov	eax, DWORD PTR _i$124346[esp+396]
	test	eax, eax
	fst	DWORD PTR _VertPan$124370[esp+396]

; 3553 : 				{
; 3554 : 					Vertices[0].Position=LastStart[0];

	mov	eax, edx
	faddp	ST(1), ST(0)
	fld	DWORD PTR _VertPan$124370[esp+396]
	fadd	DWORD PTR _TexBottom$124364[esp+396]
	fst	DWORD PTR _TexBottom$124364[esp+396]
	je	SHORT $L124371
	mov	ecx, DWORD PTR _LastStart$[esp+396]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _LastStart$[esp+400]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _LastStart$[esp+404]
	mov	DWORD PTR [eax+8], ecx

; 3555 : 					Vertices[1].Position=LastStart[1];

	mov	ecx, DWORD PTR _LastStart$[esp+408]
	lea	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _LastStart$[esp+412]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _LastStart$[esp+416]

; 3556 : 				} else

	jmp	$L142698
$L124371:

; 3557 : 				{
; 3558 : 					Vertices[0].Position=Start+UpVector*l.Width;

	fld	DWORD PTR [ebp+24]
	fld	ST(4)
	fmul	ST(0), ST(1)
	fld	ST(4)
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T142159[esp+400]
	fld	DWORD PTR _UpVector$124357[esp+404]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T142159[esp+404]
	fadd	DWORD PTR [ebp]
	fstp	DWORD PTR $T142160[esp+396]
	mov	ecx, DWORD PTR $T142160[esp+396]
	fstp	ST(0)
	fld	DWORD PTR $T142159[esp+400]
	fadd	DWORD PTR [ebp+4]
	fstp	DWORD PTR $T142160[esp+400]
	fld	DWORD PTR $T142159[esp+404]
	fadd	DWORD PTR [ebp+8]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T142160[esp+400]
	mov	DWORD PTR [eax+4], ecx
	fstp	DWORD PTR $T142160[esp+404]
	mov	ecx, DWORD PTR $T142160[esp+404]
	mov	DWORD PTR [eax+8], ecx

; 3559 : 					Vertices[1].Position=Start-UpVector*l.Width;

	fld	DWORD PTR [ebp+24]
	fld	ST(0)
	lea	eax, DWORD PTR [edx+24]
	fmul	ST(0), ST(5)
	fld	ST(4)
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T142161[esp+400]
	fld	DWORD PTR _UpVector$124357[esp+404]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T142161[esp+404]
	fld	DWORD PTR [ebp]
	fsub	ST(0), ST(1)
	fstp	DWORD PTR $T142162[esp+396]
	mov	ecx, DWORD PTR $T142162[esp+396]
	fstp	ST(0)
	fstp	ST(0)
	fld	DWORD PTR [ebp+4]
	fsub	DWORD PTR $T142161[esp+400]
	fstp	DWORD PTR $T142162[esp+400]
	fld	DWORD PTR [ebp+8]
	mov	DWORD PTR [eax], ecx
	fsub	DWORD PTR $T142161[esp+404]
	mov	ecx, DWORD PTR $T142162[esp+400]
	mov	DWORD PTR [eax+4], ecx
	fstp	DWORD PTR $T142162[esp+404]
	mov	ecx, DWORD PTR $T142162[esp+404]
$L142698:

; 3560 : 				}
; 3561 : 
; 3562 : 				Vertices[0].Diffuse=dwDiffuseStart;
; 3563 : 				Vertices[0].TextureVector=D3DXVECTOR2(TexRight, TexBottom);

	fld	DWORD PTR _Temp$142410[esp+396]
	mov	DWORD PTR [eax+8], ecx
	fstp	DWORD PTR $T142163[esp+396]
	mov	eax, DWORD PTR $T142163[esp+396]
	fstp	DWORD PTR $T142163[esp+400]
	mov	ecx, DWORD PTR $T142163[esp+400]

; 3564 : 
; 3565 : 				Vertices[1].Diffuse=dwDiffuseStart;
; 3566 : 				Vertices[1].TextureVector=D3DXVECTOR2(TexRight, TexTop);

	fld	DWORD PTR _Temp$142410[esp+396]
	mov	DWORD PTR [edx+20], ecx
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR [edx+12], edi
	mov	DWORD PTR [edx+36], edi
	fstp	DWORD PTR $T142164[esp+396]
	mov	eax, DWORD PTR $T142164[esp+396]
	fst	DWORD PTR $T142164[esp+400]
	mov	ecx, DWORD PTR $T142164[esp+400]
	mov	DWORD PTR [edx+44], ecx
	mov	DWORD PTR [edx+40], eax

; 3567 : 
; 3568 : 				Vertices[2].Position=End -UpVector * l.Width; //EndWidth;

	fld	DWORD PTR [ebp+24]
	fld	ST(0)
	lea	esi, DWORD PTR [edx+48]
	fmul	ST(0), ST(4)
	mov	ecx, esi
	fld	ST(3)
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T142165[esp+400]
	fld	DWORD PTR _UpVector$124357[esp+404]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T142165[esp+404]
	fld	DWORD PTR [ebp+12]
	fsub	ST(0), ST(1)
	fstp	DWORD PTR $T142166[esp+396]
	mov	eax, DWORD PTR $T142166[esp+396]
	fstp	ST(0)
	fstp	ST(0)
	fld	DWORD PTR [ebp+16]
	fsub	DWORD PTR $T142165[esp+400]
	fstp	DWORD PTR $T142166[esp+400]
	fld	DWORD PTR [ebp+20]
	mov	edi, DWORD PTR $T142166[esp+400]
	fsub	DWORD PTR $T142165[esp+404]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edi
	fstp	DWORD PTR $T142166[esp+404]

; 3569 : 				Vertices[2].Diffuse=dwDiffuseEnd;
; 3570 : 				Vertices[2].TextureVector=D3DXVECTOR2(TexLeft, TexTop);

	fld	DWORD PTR _TexLeft$124361[esp+396]
	mov	edi, DWORD PTR $T142166[esp+404]
	mov	DWORD PTR [ecx+8], edi
	mov	ecx, DWORD PTR _dwDiffuseEnd$124356[esp+396]
	mov	DWORD PTR [edx+60], ecx
	fstp	DWORD PTR $T142167[esp+396]
	mov	ecx, DWORD PTR $T142167[esp+396]
	fstp	DWORD PTR $T142167[esp+400]
	mov	DWORD PTR [edx+64], ecx
	mov	ecx, DWORD PTR $T142167[esp+400]

; 3571 : 
; 3572 : 				Vertices[3]=Vertices[2];
; 3573 : 				
; 3574 : 				Vertices[4].Position=End+UpVector*l.Width; 

	fxch	ST(1)
	mov	DWORD PTR [edx+68], ecx
	lea	edi, DWORD PTR [edx+72]
	mov	ecx, 6
	rep movsd
	mov	ecx, DWORD PTR [ebp+24]
	mov	DWORD PTR $T142503[esp+396], ecx
	fmul	DWORD PTR $T142503[esp+396]
	fstp	DWORD PTR $T142168[esp+396]
	fmul	DWORD PTR $T142503[esp+396]
	fld	DWORD PTR _UpVector$124357[esp+404]
	fmul	DWORD PTR $T142503[esp+396]
	fld	DWORD PTR $T142168[esp+396]
	fadd	DWORD PTR [ebp+12]
	fstp	DWORD PTR $T142169[esp+396]
	mov	esi, DWORD PTR $T142169[esp+396]
	fxch	ST(1)
	fadd	DWORD PTR [ebp+16]

; 3575 : 				Vertices[4].Diffuse=dwDiffuseEnd;
; 3576 : 				Vertices[4].TextureVector=D3DXVECTOR2(TexLeft, TexBottom);
; 3577 : 
; 3578 : 				Vertices[5]=Vertices[0];

	lea	edi, DWORD PTR [edx+120]
	fstp	DWORD PTR $T142169[esp+400]
	fadd	DWORD PTR [ebp+20]
	lea	ebp, DWORD PTR [edx+96]
	mov	ecx, ebp
	mov	DWORD PTR [ecx], esi
	mov	esi, DWORD PTR $T142169[esp+400]
	mov	DWORD PTR [ecx+4], esi
	fstp	DWORD PTR $T142169[esp+404]
	mov	esi, DWORD PTR $T142169[esp+404]
	fld	DWORD PTR _TexLeft$124361[esp+396]
	mov	DWORD PTR [ecx+8], esi
	mov	ecx, DWORD PTR _dwDiffuseEnd$124356[esp+396]
	mov	DWORD PTR [edx+108], ecx
	mov	ecx, DWORD PTR _TexBottom$124364[esp+396]
	mov	DWORD PTR $T142170[esp+400], ecx
	fstp	DWORD PTR $T142170[esp+396]
	mov	ecx, DWORD PTR $T142170[esp+396]
	mov	DWORD PTR [edx+112], ecx
	mov	ecx, DWORD PTR $T142170[esp+400]
	mov	DWORD PTR [edx+116], ecx
	mov	esi, edx

; 3579 : 
; 3580 : 				LastStart[1]=Vertices[2].Position;

	mov	edx, DWORD PTR $T142166[esp+400]
	mov	ecx, 6
	rep movsd
	mov	DWORD PTR _LastStart$[esp+408], eax
	mov	eax, DWORD PTR $T142166[esp+404]
	mov	DWORD PTR _LastStart$[esp+416], eax
	mov	DWORD PTR _LastStart$[esp+412], edx

; 3581 : 				LastStart[0]=Vertices[4].Position;

	mov	ecx, DWORD PTR [ebp]
	mov	DWORD PTR _LastStart$[esp+396], ecx
	mov	edx, DWORD PTR [ebp+4]
	mov	ecx, DWORD PTR _QueuedLineCount$[esp+396]
	mov	DWORD PTR _LastStart$[esp+400], edx
	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR _LastStart$[esp+404], eax
	mov	eax, DWORD PTR _i$124346[esp+396]
	inc	eax
	cmp	eax, ecx
	mov	DWORD PTR _i$124346[esp+396], eax
	jl	$L124347
$L124349:

; 3582 : 			}
; 3583 : 			if(System.BeamReversePanPass&&!ReversePanPassDone)

	mov	ecx, DWORD PTR _System$[esp+396]
	test	BYTE PTR [ecx+1692], 1
	je	SHORT $L124385
	mov	al, BYTE PTR _ReversePanPassDone$[esp+396]
	test	al, al
	jne	SHORT $L124385

; 3584 : 			{
; 3585 : 				ReversePanPassDone=true;

	mov	BYTE PTR _ReversePanPassDone$[esp+396], 1

; 3586 : 				continue;

	mov	esi, ecx
	jmp	$L124333
$L124385:

; 3587 : 			}
; 3588 : 
; 3589 : 			break;
; 3590 : 		}
; 3591 : 
; 3592 : 		QueuedLines.Clear();
; 3593 : 		QueueParticleFlush(System,Frame);

	mov	eax, DWORD PTR [ebx+675228]
	test	eax, eax
	mov	DWORD PTR [ebx+675240], 0
	je	$L142625
	mov	esi, DWORD PTR _System$[esp+396]
	lea	edx, DWORD PTR _PolyFlagsEx$142591[esp+396]
	push	edx
	mov	edx, DWORD PTR _Frame$[esp+396]
	lea	eax, DWORD PTR _PolyFlags$142590[esp+400]
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?STY2PolyFlags@AActor@@QAIXPAUFSceneNode@@AAK1@Z
	mov	edi, DWORD PTR _PolyFlags$142590[esp+396]
	mov	edx, DWORD PTR _PolyFlagsEx$142591[esp+396]
	mov	al, BYTE PTR [esi+1552]
	or	edi, 256				; 00000100H
	or	edx, 2
	test	al, al
	mov	DWORD PTR _PolyFlags$142590[esp+396], edi
	mov	DWORD PTR _PolyFlagsEx$142591[esp+396], edx
	jne	SHORT $L142592
	mov	eax, edi
	or	eax, -2147483648			; 80000000H
	jmp	SHORT $L142699
$L142592:
	cmp	al, 2
	jne	SHORT $L142594
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]
$L142594:
	mov	eax, DWORD PTR _PolyFlags$142590[esp+396]
	and	eax, 2147483647				; 7fffffffH
$L142699:
	mov	ecx, DWORD PTR [esi+1576]
	mov	DWORD PTR _PolyFlags$142590[esp+396], eax
	mov	eax, 1065353216				; 3f800000H
	cmp	ecx, eax
	jne	SHORT $L142687
	cmp	DWORD PTR [esi+1584], eax
	je	SHORT $L142598
$L142687:
	or	DWORD PTR _PolyFlags$142590[esp+396], 4
$L142598:
	mov	edx, DWORD PTR _PolyFlagsEx$142591[esp+396]
	push	edx
	mov	edx, DWORD PTR _PolyFlags$142590[esp+400]
	mov	ecx, ebx
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	mov	eax, DWORD PTR [esi+1556]
	push	1098907648				; 41800000H
	mov	ecx, eax
	push	0
	push	ecx
	mov	DWORD PTR $T142533[esp+408], eax
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [ebx+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L142633
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L142689
$L142633:
	mov	esi, DWORD PTR [ebx+19124]
	fst	DWORD PTR [ebx+675164]
	mov	edi, DWORD PTR [esi]
	call	__ftol
	push	eax
	push	47					; 0000002fH
	push	esi
	call	DWORD PTR [edi+200]
	jmp	SHORT $L142632
$L142689:
	fstp	ST(0)
$L142632:
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	1
	push	eax
	call	DWORD PTR [edx+244]
	lea	eax, DWORD PTR [ebx+16624]
	push	0
	mov	ecx, ebx
	mov	DWORD PTR [ebx+19716], eax
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog
	mov	edx, DWORD PTR [ebx+675228]
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $L142603
	mov	eax, DWORD PTR [ebx+675224]
	add	eax, 8
$L142601:
	add	ecx, DWORD PTR [eax]
	add	eax, 16					; 00000010H
	dec	edx
	jne	SHORT $L142601
$L142603:
	mov	edx, DWORD PTR [ebx+19684]
	lea	esi, DWORD PTR [ecx+ecx*2]
	add	edx, ecx
	shl	esi, 1
	cmp	esi, 16384				; 00004000H
	mov	DWORD PTR [ebx+19684], edx
	jl	SHORT $L142604
	push	3227					; 00000c9bH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0DA@DNJO@TotalParticleCount?$CK6?$DMPARTICLE_VE@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L142604:
	push	-1
	lea	ecx, DWORD PTR [ebx+16740]
	push	esi
	call	?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z ; FD3DVertexBuffer<FD3DParticle>::Lock
	mov	ebp, eax
	mov	eax, DWORD PTR [ebx+675228]
	test	eax, eax
	mov	DWORD PTR _i$142600[esp+396], 0
	jle	SHORT $L142609
	mov	edx, DWORD PTR [ebx+675224]
	xor	eax, eax
$L142607:
	mov	ecx, DWORD PTR [eax+edx+8]
	test	ecx, ecx
	je	SHORT $L142608
	mov	esi, DWORD PTR [eax+edx+4]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	shl	ecx, 4
	mov	edx, ecx
	shr	ecx, 2
	mov	edi, ebp
	rep movsd
	mov	ecx, edx
	and	ecx, 3
	rep movsb
	mov	edx, DWORD PTR [ebx+675224]
	mov	ecx, DWORD PTR [eax+edx+8]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	shl	ecx, 4
	add	ebp, ecx
$L142608:
	mov	ecx, DWORD PTR _i$142600[esp+396]
	mov	esi, DWORD PTR [ebx+675228]
	inc	ecx
	add	eax, 16					; 00000010H
	cmp	ecx, esi
	mov	DWORD PTR _i$142600[esp+396], ecx
	jl	SHORT $L142607
$L142609:
	lea	esi, DWORD PTR [ebx+16740]
	mov	ecx, esi
	call	?Unlock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEHXZ ; FD3DVertexBuffer<FD3DParticle>::Unlock
	mov	ecx, esi
	mov	DWORD PTR _First$142611[esp+396], eax
	call	?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ ; FD3DVertexBuffer<FD3DParticle>::Set
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	xor	esi, esi
	push	esi
	push	1
	xor	edi, edi
	push	eax
	mov	DWORD PTR _ParticleIndex$142614[esp+408], edi
	call	DWORD PTR [edx+244]
	lea	eax, DWORD PTR [ebx+16624]
	mov	DWORD PTR [ebx+19716], eax
	cmp	DWORD PTR [ebx+675228], esi
	mov	DWORD PTR _i$142600[esp+396], esi
	jle	$L142623
	mov	DWORD PTR -360+[esp+396], esi
$L142615:
	mov	eax, DWORD PTR [ebx+675224]
	mov	ecx, DWORD PTR -360+[esp+396]
	mov	ebp, DWORD PTR [ecx+eax+8]
	test	ebp, ebp
	lea	eax, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR [eax], 0
	je	$L142616
	test	esi, esi
	je	SHORT $L142620
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR _CurrentTextureInfo$142613[esp+396]
	mov	ecx, esi
	call	DWORD PTR [eax+76]
$L142620:
	mov	ecx, DWORD PTR [ebx+675224]
	mov	edx, DWORD PTR -360+[esp+396]
	mov	esi, DWORD PTR [edx+ecx]
	test	esi, esi
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	je	$L142621
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	ecx, DWORD PTR _Frame$[esp+392]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+92]
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	-1
	push	0
	push	0
	lea	edx, DWORD PTR _CurrentTextureInfo$142613[esp+412]
	mov	ecx, esi
	call	DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _PolyFlagsEx$142591[esp+396]
	mov	edx, DWORD PTR [esi+196]
	mov	eax, DWORD PTR _PolyFlags$142590[esp+396]
	push	0
	or	edx, ecx
	push	edx
	push	0
	push	eax
	lea	ecx, DWORD PTR _CurrentTextureInfo$142613[esp+412]
	push	ecx
	xor	edx, edx
	mov	ecx, ebx
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	mov	ecx, DWORD PTR _PolyFlagsEx$142591[esp+396]
	mov	edx, DWORD PTR [esi+196]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _PolyFlags$142590[esp+400]
	mov	ecx, ebx
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	jmp	SHORT $L142622
$L142621:
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L142622:
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ebp+ebp]
	push	edx
	lea	edx, DWORD PTR [edi+edi*2]
	mov	edi, DWORD PTR _First$142611[esp+400]
	lea	edx, DWORD PTR [edi+edx*2]
	push	edx
	push	4
	push	eax
	call	DWORD PTR [ecx+280]
	mov	edi, DWORD PTR _ParticleIndex$142614[esp+396]
	add	edi, ebp
	mov	DWORD PTR _ParticleIndex$142614[esp+396], edi
$L142616:
	mov	eax, DWORD PTR _i$142600[esp+396]
	mov	edx, DWORD PTR -360+[esp+396]
	mov	ecx, DWORD PTR [ebx+675228]
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	mov	DWORD PTR _i$142600[esp+396], eax
	mov	DWORD PTR -360+[esp+396], edx
	jl	$L142615
	test	esi, esi
	je	SHORT $L142623
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR _CurrentTextureInfo$142613[esp+396]
	mov	ecx, esi
	call	DWORD PTR [eax+76]
	jmp	SHORT $L142624
$L142623:
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L142624:
	mov	eax, DWORD PTR _System$[esp+396]
	cmp	BYTE PTR [eax+1552], 2
	jne	SHORT $L142625
	mov	ebx, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [ebx]
	push	4
	push	23					; 00000017H
	push	ebx
	call	DWORD PTR [ecx+200]
$L142625:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3594 : 	}

	add	esp, 380				; 0000017cH
	ret	12					; 0000000cH
?QueuedLinesFlush@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAUFSceneNode@@PAVUTexture@@K@Z ENDP ; UD3DRenderDevice::QueuedLinesFlush
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z
_TEXT	SEGMENT
_PolyFlagsEx$124390 = -160
_CurrentTextureInfo$124392 = -128
_UpVector$ = -156
$T142705 = -140
$T142706 = -176
$T142707 = -140
$T142708 = -176
$T142709 = -176
$T142710 = -140
$T142711 = -176
$T142712 = -176
$T142713 = -140
$T142714 = -176
$T142715 = -176
$T142716 = -140
$T142717 = -176
$T142718 = -176
_Xor$142727 = -144
$T142770 = -164
_Frame$ = -176
_Texture$ = 8
_PolyFlags$ = 12
_Start$ = 16
_End$ = 28
_StartWidth$ = 40
_EndWidth$ = 44
_StartColor$ = 48
_EndColor$ = 52
_Connected$ = 56
?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z PROC NEAR ; UD3DRenderDevice::dnDraw3DLine, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 3610 : 	{

	sub	esp, 176				; 000000b0H

; 3611 : 		VALIDATE;
; 3612 : 
; 3613 : 		if(!RenderLines) 

	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	test	eax, eax
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	DWORD PTR _Frame$[esp+192], edx
	mov	esi, ecx
	je	$L124387

; 3614 : 			return;
; 3615 : 
; 3616 : 		// Special case single width lines:
; 3617 : 		if((StartWidth==1.f)&&(EndWidth==1.f))

	fld	DWORD PTR _StartWidth$[esp+188]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L124389
	fld	DWORD PTR _EndWidth$[esp+188]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L124389

; 3618 : 		{
; 3619 : 			DWORD PolyFlagsEx=PFX_Clip;
; 3620 : 			if(Texture) PolyFlagsEx|=Texture->PolyFlagsEx;

	mov	ebp, DWORD PTR _Texture$[esp+188]
	test	ebp, ebp
	mov	DWORD PTR _PolyFlagsEx$124390[esp+192], 2
	je	SHORT $L124391
	mov	eax, DWORD PTR [ebp+196]
	or	eax, 2
	mov	DWORD PTR _PolyFlagsEx$124390[esp+192], eax
$L124391:

; 3621 : 
; 3622 : 			SetBlending(PolyFlags,PolyFlagsEx);

	mov	edi, DWORD PTR _PolyFlags$[esp+188]
	mov	eax, edi
	and	eax, 1073741892				; 40000044H
	cmp	eax, 1073741824				; 40000000H
	mov	DWORD PTR $T142770[esp+192], edi
	jne	SHORT $L142723
	mov	eax, DWORD PTR [esi+19148]
	test	eax, eax
	jne	SHORT $L142722
$L142723:
	mov	eax, edi
	and	eax, -1073741825			; bfffffffH
	mov	DWORD PTR $T142770[esp+192], eax
$L142722:
	mov	ecx, DWORD PTR $T142770[esp+192]
	test	cl, 68					; 00000044H
	jne	SHORT $L142724
	test	BYTE PTR _PolyFlagsEx$124390[esp+192], 113 ; 00000071H
	jne	SHORT $L142724
	or	ecx, -2147483648			; 80000000H
	jmp	SHORT $L142896
$L142724:
	test	cl, 4
	je	SHORT $L142726
	and	ecx, -3					; fffffffdH
$L142896:
	mov	DWORD PTR $T142770[esp+192], ecx
$L142726:
	mov	eax, DWORD PTR [esi+19616]
	mov	ebx, DWORD PTR [esi+19620]
	mov	edx, DWORD PTR _PolyFlagsEx$124390[esp+192]
	xor	eax, ecx
	xor	ebx, edx
	test	ah, 1
	mov	DWORD PTR _Xor$142727[esp+192], eax
	je	SHORT $L142729
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	not	ecx
	and	ecx, 256				; 00000100H
	or	ecx, 128				; 00000080H
	shr	ecx, 7
	push	ecx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [edx+200]
$L142729:
	test	bl, 2
	je	SHORT $L142730
	mov	edx, DWORD PTR _PolyFlagsEx$124390[esp+192]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, 1
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
$L142730:
	test	bl, 8
	je	SHORT $L142731
	mov	edx, DWORD PTR _PolyFlagsEx$124390[esp+192]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
$L142731:
	mov	eax, DWORD PTR _Xor$142727[esp+192]
	test	eax, -754972601				; d3000847H
	jne	SHORT $L142733
	test	bl, 113					; 00000071H
	je	$L142769
$L142733:
	test	eax, 268435525				; 10000045H
	jne	SHORT $L142735
	test	bl, 113					; 00000071H
	je	$L142755
$L142735:
	test	bl, 1
	je	SHORT $L142736
	test	BYTE PTR _PolyFlagsEx$124390[esp+192], 1
	jne	SHORT $L142736
	mov	eax, DWORD PTR [esi+19128]
	test	eax, eax
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L142737
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	jmp	SHORT $L142738
$L142737:
	mov	edx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L142738:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
$L142736:
	mov	eax, DWORD PTR $T142770[esp+192]
	test	eax, 268435525				; 10000045H
	mov	cl, BYTE PTR _PolyFlagsEx$124390[esp+192]
	jne	SHORT $L142739
	test	cl, 113					; 00000071H
	jne	SHORT $L142739
	xor	edx, edx
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	jmp	$L142755
$L142739:
	test	cl, 64					; 00000040H
	je	SHORT $L142741
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
$L142897:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L142755
$L142741:
	test	al, 1
	je	SHORT $L142743
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
$L142899:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L142755
$L142743:
	test	cl, 32					; 00000020H
	je	SHORT $L142745
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L142755
$L142745:
	test	cl, 16					; 00000010H
	je	SHORT $L142747
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	SHORT $L142899
$L142747:
	test	al, 4
	je	SHORT $L142749
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	$L142897
$L142749:
	test	al, 64					; 00000040H
	je	SHORT $L142751
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L142755
$L142751:
	test	eax, 268435456				; 10000000H
	je	SHORT $L142753
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L142755
$L142753:
	test	cl, 1
	je	$L142755
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	5
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	6
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L142755:
	test	BYTE PTR _Xor$142727[esp+192], 1
	je	SHORT $L142756
	mov	edx, DWORD PTR $T142770[esp+192]
	and	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L142756:
	mov	eax, DWORD PTR _Xor$142727[esp+192]
	test	eax, eax
	jns	SHORT $L142758
	mov	ecx, DWORD PTR $T142770[esp+192]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	shr	ecx, 31					; 0000001fH
	push	ecx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
$L142758:
	test	BYTE PTR _Xor$142727[esp+192], 2
	je	SHORT $L142761
	test	BYTE PTR $T142770[esp+192], 2
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L142760
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	jmp	SHORT $L142761
$L142760:
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L142761:
	mov	eax, DWORD PTR _Xor$142727[esp+192]
	test	ah, 8
	je	SHORT $L142762
	mov	edi, DWORD PTR $T142770[esp+192]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	and	edi, 2048				; 00000800H
	neg	edi
	sbb	edi, edi
	add	edi, 2
	push	edi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	edi, DWORD PTR _PolyFlags$[esp+188]
$L142762:
	test	DWORD PTR _Xor$142727[esp+192], 1073741824 ; 40000000H
	je	SHORT $L142763
	mov	ecx, DWORD PTR $T142770[esp+192]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	shr	ecx, 30					; 0000001eH
	and	ecx, 1
	push	ecx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
$L142763:
	test	DWORD PTR _Xor$142727[esp+192], 50331648 ; 03000000H
	je	SHORT $L142769
	mov	eax, DWORD PTR $T142770[esp+192]
	test	eax, 16777216				; 01000000H
	je	SHORT $L142766
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	3
	jmp	SHORT $L142900
$L142766:
	test	eax, 33554432				; 02000000H
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	je	SHORT $L142768
	push	3
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	2
	jmp	SHORT $L142900
$L142768:
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	1
$L142900:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
$L142769:
	mov	edx, DWORD PTR $T142770[esp+192]
	mov	eax, DWORD PTR _PolyFlagsEx$124390[esp+192]

; 3623 : 			SetZBias(0);

	push	1098907648				; 41800000H
	push	0
	push	0
	mov	DWORD PTR [esi+19616], edx
	mov	DWORD PTR [esi+19620], eax
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [esi+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L142776
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L142885
$L142776:
	mov	edi, DWORD PTR [esi+19124]
	fst	DWORD PTR [esi+675164]
	mov	ebx, DWORD PTR [edi]
	call	__ftol
	push	eax
	push	47					; 0000002fH
	push	edi
	call	DWORD PTR [ebx+200]
	mov	edi, DWORD PTR _PolyFlags$[esp+188]
	jmp	SHORT $L142775
$L142885:
	fstp	ST(0)
$L142775:

; 3624 : 			FTextureInfo CurrentTextureInfo;
; 3625 : 			
; 3626 : 			if(Texture) 

	test	ebp, ebp
	je	SHORT $L124393

; 3627 : 			{
; 3628 : 				Texture->Lock( CurrentTextureInfo, Frame->Viewport->CurrentTime, -1, this );

	mov	ecx, DWORD PTR _Frame$[esp+192]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+172]
	mov	edx, DWORD PTR [edx+168]
	mov	eax, DWORD PTR [ebp]
	push	esi
	push	-1
	push	ecx
	push	edx
	lea	edx, DWORD PTR _CurrentTextureInfo$124392[esp+208]
	mov	ecx, ebp
	call	DWORD PTR [eax+72]

; 3629 : 				SetTexture( 0, CurrentTextureInfo, PolyFlags, 0, PolyFlagsEx );

	mov	eax, DWORD PTR _PolyFlagsEx$124390[esp+192]
	push	0
	push	eax
	push	0
	push	edi
	lea	ecx, DWORD PTR _CurrentTextureInfo$124392[esp+208]
	push	ecx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 3630 : 			} else

	jmp	SHORT $L124394
$L124393:

; 3631 : 			{
; 3632 : 				//!!should optimize to avoid changing shade mode, color op, alpha op.
; 3633 : 				Direct3DDevice8->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_DISABLE);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3634 : 				Direct3DDevice8->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L124394:

; 3635 : 			}
; 3636 : 
; 3637 : 			// Handle lines with a width of one:
; 3638 : 			FD3DVertex*	Vertices = (FD3DVertex*) LineVertices.Lock(2);

	push	-1
	lea	edi, DWORD PTR [esi+16720]
	push	2
	mov	ecx, edi
	call	?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ; FD3DVertexBuffer<FD3DVertex>::Lock

; 3639 : 
; 3640 : 			Vertices[0].Position=Start;

	mov	ecx, DWORD PTR _Start$[esp+188]
	mov	edx, eax
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _Start$[esp+192]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _Start$[esp+196]
	mov	DWORD PTR [edx+8], ecx

; 3641 : 			Vertices[0].Diffuse = FColor(StartColor).TrueColor();

	mov	ecx, DWORD PTR _StartColor$[esp+188]

; 3706 : 
; 3707 : 		Vertices[5]=Vertices[0];

	xor	edx, edx
	mov	dl, BYTE PTR _StartColor$[esp+190]
	mov	ebx, ecx
	and	ebx, 255				; 000000ffH
	shl	ebx, 16					; 00000010H
	and	ecx, 65280				; 0000ff00H
	add	edx, ebx
	add	edx, ecx
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR _End$[esp+188]
	lea	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _End$[esp+192]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _End$[esp+196]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _EndColor$[esp+188]
	xor	edx, edx
	mov	dl, BYTE PTR _EndColor$[esp+190]
	mov	ebx, ecx
	and	ebx, 255				; 000000ffH
	shl	ebx, 16					; 00000010H
	and	ecx, 65280				; 0000ff00H
	add	edx, ebx
	add	edx, ecx
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jne	SHORT $L142806
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L142806:
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L142807
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L142807:
	mov	ebx, DWORD PTR [edi+12]
	mov	ecx, edi
	call	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DVertex>::Set
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	ebx
	push	2
	push	eax
	call	DWORD PTR [ecx+280]
	mov	ecx, DWORD PTR [esi+19684]
	inc	ecx
	test	ebp, ebp
	mov	DWORD PTR [esi+19684], ecx
	je	SHORT $L124400
	mov	eax, DWORD PTR [ebp]
	lea	edx, DWORD PTR _CurrentTextureInfo$124392[esp+192]
	mov	ecx, ebp
	call	DWORD PTR [eax+76]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3708 : 	}

	add	esp, 176				; 000000b0H
	ret	52					; 00000034H
$L124400:

; 3642 : 
; 3643 : 			Vertices[1].Position=End;
; 3644 : 			Vertices[1].Diffuse = FColor(EndColor).TrueColor();
; 3645 : 
; 3646 : 			INT	First = LineVertices.Unlock();
; 3647 : 
; 3648 : 			LineVertices.Set();
; 3649 : 
; 3650 : 			Direct3DDevice8->DrawPrimitive( D3DPT_LINELIST, First, 1 );
; 3651 : 			Stats.Particles++;
; 3652 : 
; 3653 : 			if(Texture)
; 3654 : 			{
; 3655 : 				Texture->Unlock(CurrentTextureInfo);
; 3656 : 			} else
; 3657 : 			{
; 3658 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 3659 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	esi, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [esi]
	push	4
	push	4
	push	0
	push	esi
	call	DWORD PTR [edx+252]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3708 : 	}

	add	esp, 176				; 000000b0H
	ret	52					; 00000034H
$L124389:

; 3660 : 			}
; 3661 : 
; 3662 : 			return;
; 3663 : 		} 
; 3664 : 
; 3665 : 		if(Connected)

	mov	al, BYTE PTR _Connected$[esp+188]
	test	al, al
	je	$L124402

; 3666 : 		{
; 3667 : 			QueuedLineSegment &l=QueuedLines(QueuedLines.Add());

	add	esi, 675236				; 000a4da4H
	push	0
	push	1
	mov	ecx, esi
	call	?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::Add
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+eax*8]
	lea	eax, DWORD PTR [ecx+eax*4]

; 3668 : 
; 3669 : 			l.v[0]=Start;

	mov	ecx, DWORD PTR _Start$[esp+188]
	mov	edx, eax
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _Start$[esp+192]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _Start$[esp+196]
	mov	DWORD PTR [edx+8], ecx

; 3670 : 			l.v[1]=End;

	mov	ecx, DWORD PTR _End$[esp+188]
	lea	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _End$[esp+192]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _End$[esp+196]
	mov	DWORD PTR [edx+8], ecx

; 3671 : 			l.Width=StartWidth;

	mov	edx, DWORD PTR _StartWidth$[esp+188]

; 3672 : 			l.StartColor=StartColor;

	mov	ecx, DWORD PTR _StartColor$[esp+188]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax+24], edx

; 3673 : 			l.EndColor=EndColor;

	mov	edx, DWORD PTR _EndColor$[esp+180]
	pop	ebp
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+32], edx
	pop	ebx

; 3708 : 	}

	add	esp, 176				; 000000b0H
	ret	52					; 00000034H
$L124402:

; 3674 : 			return;
; 3675 : 		} 
; 3676 : 
; 3677 : 		// Draw unconnected non single width lines:
; 3678 : 		QueuedParticle &p=QueuedParticleAlloc(Texture);

	mov	eax, DWORD PTR _Texture$[esp+188]
	push	eax
	mov	ecx, esi
	call	?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z ; UD3DRenderDevice::QueuedParticleAlloc

; 3679 : 
; 3680 : 		FD3DParticle *Vertices=p.v; 
; 3681 : 		DWORD dwDiffuseStart = StartColor.TrueColor(); 
; 3682 : 		DWORD dwDiffuseEnd   = EndColor.TrueColor(); 
; 3683 : 
; 3684 : 		// Compute forward and up vectors
; 3685 : 		FVector UpVector=(Start-ViewLocation) cross (End-ViewLocation);

	fld	DWORD PTR _End$[esp+196]
	fsub	DWORD PTR [esi+184]
	xor	ecx, ecx
	mov	cl, BYTE PTR _StartColor$[esp+190]
	mov	ebx, eax
	mov	eax, DWORD PTR _StartColor$[esp+188]
	mov	edx, eax
	and	edx, 255				; 000000ffH
	shl	edx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	ecx, edx
	add	ecx, eax
	mov	eax, DWORD PTR _EndColor$[esp+188]
	mov	edi, ecx
	xor	ecx, ecx
	mov	cl, BYTE PTR _EndColor$[esp+190]
	sub	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp+8]
	mov	edx, eax
	fld	DWORD PTR _End$[esp+204]
	and	edx, 255				; 000000ffH
	fsub	DWORD PTR [esi+180]
	shl	edx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	fstp	DWORD PTR [esp+4]
	add	ecx, edx
	fld	DWORD PTR _End$[esp+200]
	add	ecx, eax
	fsub	DWORD PTR [esi+176]
	mov	ebp, ecx
	lea	ecx, DWORD PTR $T142706[esp+204]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _Start$[esp+196]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR [esi+184]
	lea	ecx, DWORD PTR $T142705[esp+204]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Start$[esp+204]
	fsub	DWORD PTR [esi+180]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _Start$[esp+200]
	fsub	DWORD PTR [esi+176]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T142706[esp+196]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR $T142705[esp+204]
	lea	ecx, DWORD PTR _UpVector$[esp+204]
	fld	DWORD PTR $T142705[esp+208]
	fmul	DWORD PTR $T142706[esp+204]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T142705[esp+212]
	fmul	DWORD PTR $T142706[esp+204]
	fld	DWORD PTR $T142706[esp+212]
	fmul	DWORD PTR $T142705[esp+204]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T142706[esp+212]
	fmul	DWORD PTR $T142705[esp+208]
	fld	DWORD PTR $T142706[esp+208]
	fmul	DWORD PTR $T142705[esp+212]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z

; 3686 : 		UpVector.Normalize();

	fld	DWORD PTR _UpVector$[esp+196]
	fmul	DWORD PTR _UpVector$[esp+196]
	fld	DWORD PTR _UpVector$[esp+200]
	fmul	DWORD PTR _UpVector$[esp+200]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _UpVector$[esp+192]
	fmul	DWORD PTR _UpVector$[esp+192]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142884
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _UpVector$[esp+192]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$[esp+192]
	fld	DWORD PTR _UpVector$[esp+196]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$[esp+196]
	fld	DWORD PTR _UpVector$[esp+200]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$[esp+200]
$L142884:
	fstp	ST(0)

; 3687 : 
; 3688 : 
; 3689 : 		Vertices[0].Position = Start   + UpVector * StartWidth;

	sub	esp, 12					; 0000000cH
	fld	DWORD PTR _UpVector$[esp+212]
	lea	ecx, DWORD PTR $T142707[esp+204]
	fmul	DWORD PTR _StartWidth$[esp+200]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$[esp+208]
	fmul	DWORD PTR _StartWidth$[esp+200]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$[esp+204]
	fmul	DWORD PTR _StartWidth$[esp+200]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _Start$[esp+196]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T142707[esp+212]
	lea	ecx, DWORD PTR $T142708[esp+204]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Start$[esp+204]
	fadd	DWORD PTR $T142707[esp+208]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T142707[esp+204]
	fadd	DWORD PTR _Start$[esp+200]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	ecx, DWORD PTR $T142708[esp+192]
	mov	edx, DWORD PTR $T142708[esp+196]
	mov	eax, ebx
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T142708[esp+200]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 3690 : 		Vertices[0].Diffuse = dwDiffuseStart;
; 3691 : 		Vertices[0].TextureVector = D3DXVECTOR2(1.f, 1.f);

	mov	DWORD PTR $T142709[esp+192], 1065353216	; 3f800000H
	mov	edx, DWORD PTR $T142709[esp+192]
	mov	DWORD PTR $T142709[esp+196], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T142709[esp+196]
	mov	DWORD PTR [ebx+12], edi
	mov	DWORD PTR [ebx+16], edx
	mov	DWORD PTR [ebx+20], eax

; 3692 : 
; 3693 : 		Vertices[1].Position = Start -  UpVector* StartWidth;

	fld	DWORD PTR _UpVector$[esp+200]
	fmul	DWORD PTR _StartWidth$[esp+188]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T142710[esp+204]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$[esp+208]
	fmul	DWORD PTR _StartWidth$[esp+200]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$[esp+204]
	fmul	DWORD PTR _StartWidth$[esp+200]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _Start$[esp+196]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T142710[esp+212]
	lea	ecx, DWORD PTR $T142711[esp+204]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Start$[esp+204]
	fsub	DWORD PTR $T142710[esp+208]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _Start$[esp+200]
	fsub	DWORD PTR $T142710[esp+204]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	edx, DWORD PTR $T142711[esp+192]
	mov	eax, DWORD PTR $T142711[esp+196]
	lea	ecx, DWORD PTR [ebx+24]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR $T142711[esp+200]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx

; 3694 : 		Vertices[1].Diffuse = dwDiffuseStart;
; 3695 : 		Vertices[1].TextureVector = D3DXVECTOR2(0.f, 1.f);

	mov	DWORD PTR $T142712[esp+192], 0
	mov	eax, DWORD PTR $T142712[esp+192]
	mov	DWORD PTR $T142712[esp+196], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR $T142712[esp+196]
	mov	DWORD PTR [ebx+36], edi
	mov	DWORD PTR [ebx+40], eax
	mov	DWORD PTR [ebx+44], ecx

; 3696 : 
; 3697 : 		Vertices[2].Position = End -UpVector * EndWidth;

	fld	DWORD PTR _UpVector$[esp+200]
	fmul	DWORD PTR _EndWidth$[esp+188]
	sub	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$[esp+208]
	lea	ecx, DWORD PTR $T142713[esp+204]
	fmul	DWORD PTR _EndWidth$[esp+200]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$[esp+204]
	fmul	DWORD PTR _EndWidth$[esp+200]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _End$[esp+196]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T142713[esp+212]
	lea	ecx, DWORD PTR $T142714[esp+204]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _End$[esp+204]
	fsub	DWORD PTR $T142713[esp+208]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _End$[esp+200]
	fsub	DWORD PTR $T142713[esp+204]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	eax, DWORD PTR $T142714[esp+192]
	mov	ecx, DWORD PTR $T142714[esp+196]
	lea	esi, DWORD PTR [ebx+48]
	mov	edx, esi
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR $T142714[esp+200]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax

; 3698 : 		Vertices[2].Diffuse = dwDiffuseEnd;
; 3699 : 		Vertices[2].TextureVector = D3DXVECTOR2(0.f, 0.f);

	mov	DWORD PTR $T142715[esp+192], 0
	mov	ecx, DWORD PTR $T142715[esp+192]
	mov	DWORD PTR [ebx+64], ecx
	mov	DWORD PTR [ebx+60], ebp
	mov	DWORD PTR $T142715[esp+196], 0
	mov	edx, DWORD PTR $T142715[esp+196]
	mov	DWORD PTR [ebx+68], edx

; 3700 : 
; 3701 : 		Vertices[3]=Vertices[2];

	lea	edi, DWORD PTR [ebx+72]
	mov	ecx, 6
	rep movsd

; 3702 : 		
; 3703 : 		Vertices[4].Position = End + UpVector * EndWidth;

	fld	DWORD PTR _UpVector$[esp+200]
	fmul	DWORD PTR _EndWidth$[esp+188]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T142716[esp+204]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$[esp+208]
	fmul	DWORD PTR _EndWidth$[esp+200]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$[esp+204]
	fmul	DWORD PTR _EndWidth$[esp+200]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _End$[esp+196]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T142716[esp+212]
	lea	ecx, DWORD PTR $T142717[esp+204]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _End$[esp+204]
	fadd	DWORD PTR $T142716[esp+208]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T142716[esp+204]
	fadd	DWORD PTR _End$[esp+200]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	ecx, DWORD PTR $T142717[esp+192]
	mov	edx, DWORD PTR $T142717[esp+196]
	lea	eax, DWORD PTR [ebx+96]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T142717[esp+200]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 3704 : 		Vertices[4].Diffuse = dwDiffuseEnd;
; 3705 : 		Vertices[4].TextureVector = D3DXVECTOR2(1.f, 0.f);

	mov	DWORD PTR $T142718[esp+192], 1065353216	; 3f800000H
	mov	edx, DWORD PTR $T142718[esp+192]
	mov	DWORD PTR $T142718[esp+196], 0
	mov	eax, DWORD PTR $T142718[esp+196]

; 3706 : 
; 3707 : 		Vertices[5]=Vertices[0];

	lea	edi, DWORD PTR [ebx+120]
	mov	ecx, 6
	mov	esi, ebx
	mov	DWORD PTR [ebx+108], ebp
	mov	DWORD PTR [ebx+112], edx
	mov	DWORD PTR [ebx+116], eax
	rep movsd
$L124387:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3708 : 	}

	add	esp, 176				; 000000b0H
	ret	52					; 00000034H
?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ENDP ; UD3DRenderDevice::dnDraw3DLine
_TEXT	ENDS
PUBLIC	??_C@_1O@IFBG@?$AAG?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@PMBP@?$AA?5?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@NBKC@?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@CCID@?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@ECOM@?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAf@ ; `string'
PUBLIC	??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
PUBLIC	??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@	; `string'
PUBLIC	??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
PUBLIC	??1?$TArray@VFVector@@@@QAE@XZ			; TArray<FVector>::~TArray<FVector>
PUBLIC	?Add@?$TArray@VFVector@@@@QAEHHH@Z		; TArray<FVector>::Add
EXTRN	__imp_?Exec@URenderDevice@@UAEHPBGAAVFOutputDevice@@@Z:NEAR
EXTRN	__imp_?appAtof@@YAMPBG@Z:NEAR
EXTRN	__imp_?Remove@FArray@@QAEXHHH@Z:NEAR
EXTRN	__imp_?ParseCommand@@YAHPAPBGPBG@Z:NEAR
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	SEGMENT
$T143085 DD	0ffffffffH
	DD	FLAT:$L142908
	DD	0ffffffffH
	DD	FLAT:$L143027
$T143067 DD	019930520H
	DD	02H
	DD	FLAT:$T143085
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_1O@IFBG@?$AAG?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1O@IFBG@?$AAG?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$AA@ DB 'G', 00H, 'e', 00H
	DB	't', 00H, 'R', 00H, 'e', 00H, 's', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1O@PMBP@?$AA?5?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@
_DATA	SEGMENT
??_C@_1O@PMBP@?$AA?5?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@ DB ' ', 00H, '%'
	DB	00H, 'i', 00H, 'x', 00H, '%', 00H, 'i', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@NBKC@?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@NBKC@?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@ DB '%', 00H, 'i', 00H
	DB	'x', 00H, '%', 00H, 'i', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@
_DATA	SEGMENT
??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ DB '..\..\Core\I'
	DB	'nc\UnTemplate.h', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@
_DATA	SEGMENT
??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ DB 'Index<=ArrayNum', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@
_DATA	SEGMENT
??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ DB 'Index+Count<=Array'
	DB	'Num', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BA@CCID@?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1BA@CCID@?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?$AA@ DB 'L', 00H, 'o'
	DB	00H, 'd', 00H, 'B', 00H, 'i', 00H, 'a', 00H, 's', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CK@ECOM@?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAf@
_DATA	SEGMENT
??_C@_1CK@ECOM@?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAf@ DB 'T'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, 'L', 00H, 'o', 00H, 'd', 00H, 'B', 00H, 'i', 00H, 'a'
	DB	00H, 's', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 'f', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?Exec@UD3DRenderDevice@@UAEHPBGAAVFOutputDevice@@@Z
_TEXT	SEGMENT
_this$ = -56
_Res$124431 = -36
$T142904 = -24
_Cmd$ = 8
_Ar$ = 12
$T142969 = -64
$T142970 = -60
__$EHRec$ = -12
?Exec@UD3DRenderDevice@@UAEHPBGAAVFOutputDevice@@@Z PROC NEAR ; UD3DRenderDevice::Exec, COMDAT
; _this$ = ecx

; 3711 : 	{

	push	-1
	push	$L143084
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 52					; 00000034H

; 3712 : 		VALIDATE;
; 3713 : 
; 3714 : 		if( URenderDevice::Exec( Cmd, Ar ) )

	mov	eax, DWORD PTR _Cmd$[esp+60]
	push	ebx
	mov	ebx, DWORD PTR _Ar$[esp+64]
	push	esi
	push	edi
	push	ebx
	mov	edi, ecx
	push	eax
	mov	DWORD PTR _this$[esp+84], edi
	call	DWORD PTR __imp_?Exec@URenderDevice@@UAEHPBGAAVFOutputDevice@@@Z
	test	eax, eax
	je	SHORT $L124426
	pop	edi
	pop	esi

; 3715 : 		{
; 3716 : 			return 1;

	mov	eax, 1
	pop	ebx

; 3739 : 		}
; 3740 : 
; 3741 : 		return 0;
; 3742 : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+64]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 64					; 00000040H
	ret	8
$L124426:

; 3717 : 		}
; 3718 : 		else if( ParseCommand(&Cmd,TEXT("GetRes")) )

	mov	esi, DWORD PTR __imp_?ParseCommand@@YAHPAPBGPBG@Z
	lea	ecx, DWORD PTR _Cmd$[esp+72]
	push	OFFSET FLAT:??_C@_1O@IFBG@?$AAG?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$AA@ ; `string'
	push	ecx
	call	esi
	add	esp, 8
	test	eax, eax
	je	$L124428

; 3719 : 		{
; 3720 : 			if(DisplayModes.Num())

	mov	ebx, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A+4
	xor	esi, esi
	cmp	ebx, esi
	je	$L124449

; 3721 : 			{
; 3722 : 				TArray<FVector> Res;

	xor	edi, edi
	mov	DWORD PTR _Res$124431[esp+76], esi
	mov	DWORD PTR _Res$124431[esp+80], edi
	mov	DWORD PTR _Res$124431[esp+84], esi

; 3723 : 				for( TArray<D3DDISPLAYMODE>::TIterator It(DisplayModes); It; ++It )

	cmp	ebx, esi
	mov	DWORD PTR __$EHRec$[esp+84], esi
	jle	$L124435
$L142931:

; 3724 : 					if( GetFormatBPP(It->Format) == 16)

	mov	eax, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	mov	edx, esi
	shl	edx, 4
	lea	ecx, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	add	esp, 4
	cmp	eax, 16					; 00000010H
	jne	$L124434

; 3725 : 						Res.AddUniqueItem( FVector(It->Width, It->Height, 0) );

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR -52+[esp+76], eax
	xor	eax, eax
	mov	DWORD PTR -52+[esp+80], eax
	fild	QWORD PTR -52+[esp+76]
	mov	DWORD PTR -44+[esp+76], ecx
	mov	DWORD PTR -44+[esp+80], eax
	mov	DWORD PTR $T142904[esp+84], eax
	fstp	DWORD PTR $T142970[esp+76]
	fild	QWORD PTR -44+[esp+76]
	mov	ecx, DWORD PTR $T142970[esp+76]
	mov	DWORD PTR $T142904[esp+80], ecx
	xor	ecx, ecx
	cmp	edi, eax
	fstp	DWORD PTR $T142969[esp+76]
	mov	edx, DWORD PTR $T142969[esp+76]
	mov	DWORD PTR $T142904[esp+76], edx
	jle	SHORT $L143008
	mov	edx, DWORD PTR _Res$124431[esp+76]
	add	edx, 8

; 3739 : 		}
; 3740 : 
; 3741 : 		return 0;
; 3742 : 	}

	npad	1

; 3725 : 						Res.AddUniqueItem( FVector(It->Width, It->Height, 0) );

$L143006:
	fld	DWORD PTR [edx-8]
	fcomp	DWORD PTR $T142969[esp+76]
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L142997
	fld	DWORD PTR [edx-4]
	fcomp	DWORD PTR $T142970[esp+76]
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L142997
	fld	DWORD PTR [edx]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $L124434
$L142997:
	inc	ecx
	add	edx, 12					; 0000000cH
	cmp	ecx, edi
	jl	SHORT $L143006
$L143008:
	push	1
	push	1
	lea	ecx, DWORD PTR _Res$124431[esp+84]
	call	?Add@?$TArray@VFVector@@@@QAEHHH@Z	; TArray<FVector>::Add
	mov	ecx, DWORD PTR _Res$124431[esp+76]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR $T142904[esp+76]
	mov	ecx, DWORD PTR $T142904[esp+80]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR $T142904[esp+84]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax
	mov	edi, DWORD PTR _Res$124431[esp+80]
	mov	ebx, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A+4
$L124434:
	inc	esi
	cmp	esi, ebx
	jl	$L142931
$L124435:

; 3726 : 				for( INT i=0; i<Res.Num() && i<16/*script limitation*/; i++ )

	xor	ebx, ebx
	test	edi, edi
	push	ebp
	jle	SHORT $L124441
	mov	ebp, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 3739 : 		}
; 3740 : 
; 3741 : 		return 0;
; 3742 : 	}

	npad	2
$L124439:

; 3726 : 				for( INT i=0; i<Res.Num() && i<16/*script limitation*/; i++ )

	cmp	ebx, 16					; 00000010H
	jge	SHORT $L124441

; 3727 : 					if( Res(i).X<=MaxResWidth && Res(i).Y<=MaxResHeight )

	mov	edx, DWORD PTR _Res$124431[esp+80]
	lea	ecx, DWORD PTR [ebx+ebx*2]
	lea	esi, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[esp+80]
	fild	DWORD PTR [ecx+19124]
	fcomp	DWORD PTR [esi]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L124440
	fild	DWORD PTR [ecx+19128]
	fcomp	DWORD PTR [esi+4]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L124440

; 3728 : 						Ar.Logf( i ? TEXT(" %ix%i") : TEXT("%ix%i"), (INT)Res(i).X, (INT)Res(i).Y );

	test	ebx, ebx
	mov	edi, OFFSET FLAT:??_C@_1O@PMBP@?$AA?5?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@ ; `string'
	jne	SHORT $L142906
	mov	edi, OFFSET FLAT:??_C@_1M@NBKC@?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@ ; `string'
$L142906:
	fld	DWORD PTR [esi+4]
	call	__ftol
	fld	DWORD PTR [esi]
	push	eax
	call	__ftol
	push	eax
	mov	eax, DWORD PTR _Ar$[esp+84]
	push	edi
	push	eax
	call	ebp
	mov	edi, DWORD PTR _Res$124431[esp+100]
	add	esp, 16					; 00000010H
$L124440:
	inc	ebx
	cmp	ebx, edi
	jl	SHORT $L124439
$L124441:

; 3729 : 				return 1;

	test	edi, edi
	mov	DWORD PTR __$EHRec$[esp+88], 1
	mov	esi, edi
	pop	ebp
	jge	SHORT $L143053
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	edi
	mov	eax, DWORD PTR _Res$124431[esp+92]
	add	esp, 12					; 0000000cH
	cmp	esi, eax
	jle	SHORT $L143053
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L143053:
	push	12					; 0000000cH
	push	esi
	push	0
	lea	ecx, DWORD PTR _Res$124431[esp+88]
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	mov	eax, DWORD PTR _Res$124431[esp+76]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+84], -1
	je	SHORT $L143063
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L143063:
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx

; 3739 : 		}
; 3740 : 
; 3741 : 		return 0;
; 3742 : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+64]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 64					; 00000040H
	ret	8
$L124428:

; 3730 : 			}
; 3731 : 		}
; 3732 : 		else if( ParseCommand(&Cmd,TEXT("LodBias")) )

	lea	eax, DWORD PTR _Cmd$[esp+72]
	push	OFFSET FLAT:??_C@_1BA@CCID@?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?$AA@ ; `string'
	push	eax
	call	esi
	add	esp, 8
	test	eax, eax
	je	SHORT $L124449

; 3733 : 		{
; 3734 : 			LodBias=appAtof(Cmd);

	mov	ecx, DWORD PTR _Cmd$[esp+72]
	push	ecx
	call	DWORD PTR __imp_?appAtof@@YAMPBG@Z
	fst	DWORD PTR ?LodBias@@3MA			; LodBias

; 3735 : 			Ar.Logf(TEXT("Texture LodBias = %f"),LodBias);	

	push	ecx
	fstp	QWORD PTR [esp]
	push	OFFSET FLAT:??_C@_1CK@ECOM@?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAf@ ; `string'
	push	ebx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 3736 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MIPMAPLODBIAS, *(DWORD*)&LodBias );

	mov	ecx, DWORD PTR ?LodBias@@3MA
	mov	eax, DWORD PTR [edi+19084]
	mov	edx, DWORD PTR [eax]
	add	esp, 16					; 00000010H
	push	ecx
	push	19					; 00000013H
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3737 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MIPMAPLODBIAS, *(DWORD*)&LodBias );

	mov	ecx, DWORD PTR ?LodBias@@3MA
	mov	eax, DWORD PTR [edi+19084]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	19					; 00000013H
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	pop	edi
	pop	esi

; 3738 : 			return 1;

	mov	eax, 1
	pop	ebx

; 3739 : 		}
; 3740 : 
; 3741 : 		return 0;
; 3742 : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+64]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 64					; 00000040H
	ret	8
$L124449:
	mov	ecx, DWORD PTR __$EHRec$[esp+76]
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 64					; 00000040H
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L142908:
	lea	ecx, DWORD PTR _Res$124431[ebp]
	jmp	??1?$TArray@VFVector@@@@QAE@XZ		; TArray<FVector>::~TArray<FVector>
$L143027:
	lea	ecx, DWORD PTR _Res$124431[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L143084:
	mov	eax, OFFSET FLAT:$T143067
	jmp	___CxxFrameHandler
text$x	ENDS
?Exec@UD3DRenderDevice@@UAEHPBGAAVFOutputDevice@@@Z ENDP ; UD3DRenderDevice::Exec
PUBLIC	??_C@_0BM@FAAL@?4?4?2?4?4?2Engine?2Inc?2UnRenDev?4h?$AA@ ; `string'
PUBLIC	??_C@_04BEIE@this?$AA@				; `string'
PUBLIC	??_C@_1KK@HEA@?$AAc?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AAL?$AAI?$AAN?$AAE?$AA_?$AAV?$AAE@ ; `string'
EXTRN	__imp__DebugBreak@0:NEAR
;	COMDAT ??_C@_0BM@FAAL@?4?4?2?4?4?2Engine?2Inc?2UnRenDev?4h?$AA@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0BM@FAAL@?4?4?2?4?4?2Engine?2Inc?2UnRenDev?4h?$AA@ DB '..\..\Engine'
	DB	'\Inc\UnRenDev.h', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04BEIE@this?$AA@
_DATA	SEGMENT
??_C@_04BEIE@this?$AA@ DB 'this', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1KK@HEA@?$AAc?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AAL?$AAI?$AAN?$AAE?$AA_?$AAV?$AAE@
_DATA	SEGMENT
??_C@_1KK@HEA@?$AAc?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AAL?$AAI?$AAN?$AAE?$AA_?$AAV?$AAE@ DB 'c'
	DB	00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, '(', 00H
	DB	'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '<', 00H, 'L'
	DB	00H, 'I', 00H, 'N', 00H, 'E', 00H, '_', 00H, 'V', 00H, 'E', 00H
	DB	'R', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'B', 00H, 'U', 00H, 'F'
	DB	00H, 'F', 00H, 'E', 00H, 'R', 00H, '_', 00H, 'S', 00H, 'I', 00H
	DB	'Z', 00H, 'E', 00H, ')', 00H, '&', 00H, '&', 00H, '(', 00H, 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '>', 00H, '=', 00H
	DB	'0', 00H, ')', 00H, ')', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 'd', 00H, '!', 00H, ' ', 00H, 'C', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '=', 00H, '%', 00H, 'i'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, ':', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'x', 00H, ' ', 00H, '[', 00H, '%'
	DB	00H, 's', 00H, ':', 00H, '%', 00H, 'i', 00H, ']', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?_Validate@UD3DRenderDevice@@UAIXPADH@Z
_TEXT	SEGMENT
_Line$ = 8
?_Validate@UD3DRenderDevice@@UAIXPADH@Z PROC NEAR	; UD3DRenderDevice::_Validate, COMDAT
; _this$ = ecx
; _File$ = edx

; 3745 : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 3746 : 		Super::_Validate(File,Line);

	test	esi, esi
	push	edi
	mov	ebx, edx
	jne	SHORT $L143093
	push	178					; 000000b2H
	push	OFFSET FLAT:??_C@_0BM@FAAL@?4?4?2?4?4?2Engine?2Inc?2UnRenDev?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_04BEIE@this?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L143093:

; 3747 : 
; 3748 : 		int Count=Queued3DLineVertices.Num();

	mov	edi, DWORD PTR [esi+675252]

; 3749 : 		if((Count>=LINE_VERTEXBUFFER_SIZE)||(Count<0))

	cmp	edi, 16384				; 00004000H
	jge	SHORT $L124458
	test	edi, edi
	jge	SHORT $L124457
$L124458:

; 3750 : 		{
; 3751 : 			appErrorf(TEXT("check((Count<LINE_VERTEXBUFFER_SIZE)&&(Count>=0)) failed! Count=%i this:%08x [%s:%i]"),Queued3DLineVertices.Num(),this,appFromAnsi(File),Line);

	mov	eax, DWORD PTR _Line$[esp+8]
	push	eax
	push	ebx
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	esi
	push	edi
	push	OFFSET FLAT:??_C@_1KK@HEA@?$AAc?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AAL?$AAI?$AAN?$AAE?$AA_?$AAV?$AAE@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 24					; 00000018H

; 3752 : 			DebugBreak();

	call	DWORD PTR __imp__DebugBreak@0
$L124457:
	pop	edi
	pop	esi
	pop	ebx

; 3753 : 		}
; 3754 : 
; 3755 : 	}

	ret	4
?_Validate@UD3DRenderDevice@@UAIXPADH@Z ENDP		; UD3DRenderDevice::_Validate
_TEXT	ENDS
PUBLIC	?Add@?$TArray@UFD3DVertex@@@@QAEHHH@Z		; TArray<FD3DVertex>::Add
; Function compile flags: /Ogty
;	COMDAT ?Queue3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
_TEXT	SEGMENT
$T143269 = 40
_I$143291 = 8
_I$143302 = 40
_I$143312 = 8
_I$143322 = 8
_Color$ = 8
_OrigP$ = 28
_OrigQ$ = 40
$T143105 = 28
$T143106 = 28
$T143121 = 28
$T143139 = -20
$T143157 = -16
$T143164 = 8
_I$143171 = -20
_I$143181 = -16
_I$143190 = -20
_I$143194 = -16
$T143215 = 28
$T143233 = 40
$T143251 = 40
?Queue3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z PROC NEAR ; UD3DRenderDevice::Queue3DLine, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 3760 : 		if(!RenderLines) 

	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	sub	esp, 20					; 00000014H
	test	eax, eax
	push	esi
	mov	esi, ecx
	je	$L143331

; 3761 : 			return;
; 3762 : 		
; 3763 : 		VALIDATE;
; 3764 : 		// Ensure that we don't overflow the line vertex buffer:
; 3765 : 		if((Queued3DLineVertices.Num()+12)>=LINE_VERTEXBUFFER_SIZE)

	mov	eax, DWORD PTR [esi+675252]
	add	eax, 12					; 0000000cH
	cmp	eax, 16384				; 00004000H
	jl	SHORT $L124463

; 3766 : 			Queued3DLinesFlush(Frame);

	mov	eax, DWORD PTR [esi]
	call	DWORD PTR [eax+160]
$L124463:
	push	ebx
	push	edi

; 3767 : 
; 3768 : 
; 3769 : 		FD3DVertex &v=Queued3DLineVertices(Queued3DLineVertices.Add());

	push	0
	add	esi, 675248				; 000a4db0H
	push	1
	mov	ecx, esi
	call	?Add@?$TArray@UFD3DVertex@@@@QAEHHH@Z	; TArray<FD3DVertex>::Add

; 3770 : 
; 3771 : 		v.Position=OrigP;
; 3772 : 		v.Diffuse = FColor(Color).TrueColor() | 0xff000000;

	fld	DWORD PTR _Color$[esp+28]
	mov	edx, DWORD PTR [esi]
	fmul	DWORD PTR __real@43800000
	shl	eax, 4
	add	eax, edx
	mov	edx, DWORD PTR _OrigP$[esp+28]
	fst	DWORD PTR -12+[esp+32]
	mov	edi, eax
	fstp	DWORD PTR $T143121[esp+28]
	mov	eax, DWORD PTR _OrigP$[esp+32]
	mov	ecx, edi
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _OrigP$[esp+36]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	fld	DWORD PTR $T143121[esp+28]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143171[esp+32]
	mov	eax, DWORD PTR _I$143171[esp+32]
	test	eax, eax
	jge	SHORT $L143176
	mov	BYTE PTR $T143105[esp+28], 0
	jmp	SHORT $L143175
$L143176:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T143105[esp+28], al
	jl	SHORT $L143175
	mov	BYTE PTR $T143105[esp+28], 255		; 000000ffH
$L143175:
	fld	DWORD PTR _Color$[esp+32]
	fmul	DWORD PTR __real@43800000
	fst	DWORD PTR -8+[esp+32]
	fstp	DWORD PTR $T143139[esp+32]
	fld	DWORD PTR $T143139[esp+32]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143181[esp+32]
	mov	eax, DWORD PTR _I$143181[esp+32]
	test	eax, eax
	jge	SHORT $L143186
	mov	BYTE PTR $T143105[esp+29], 0
	jmp	SHORT $L143185
$L143186:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T143105[esp+29], al
	jl	SHORT $L143185
	mov	BYTE PTR $T143105[esp+29], 255		; 000000ffH
$L143185:
	fld	DWORD PTR _Color$[esp+36]
	fmul	DWORD PTR __real@43800000
	fst	DWORD PTR -4+[esp+32]
	fstp	DWORD PTR $T143157[esp+32]
	fld	DWORD PTR $T143157[esp+32]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143190[esp+32]
	mov	eax, DWORD PTR _I$143190[esp+32]
	push	255					; 000000ffH
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp
	fld	DWORD PTR _Color$[esp+52]
	fmul	DWORD PTR __real@43800000
	mov	bl, al
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T143105[esp+30], bl
	fst	DWORD PTR -20+[esp+32]
	fstp	DWORD PTR $T143164[esp+28]
	fld	DWORD PTR $T143164[esp+28]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143194[esp+32]
	mov	ecx, DWORD PTR _I$143194[esp+32]
	push	255					; 000000ffH
	push	0
	push	ecx
	call	?Clamp@@YAHHHH@Z			; Clamp
	xor	edx, edx
	mov	dl, bl
	mov	BYTE PTR $T143105[esp+43], al
	mov	eax, DWORD PTR $T143105[esp+40]
	add	esp, 12					; 0000000cH
	shl	eax, 16					; 00000010H

; 3773 : 
; 3774 : 		FD3DVertex &v1=Queued3DLineVertices(Queued3DLineVertices.Add());

	push	0
	push	1
	mov	dh, BYTE PTR $T143105[esp+37]
	mov	ecx, esi
	add	edx, eax
	or	edx, -16777216				; ff000000H
	mov	DWORD PTR [edi+12], edx
	call	?Add@?$TArray@UFD3DVertex@@@@QAEHHH@Z	; TArray<FD3DVertex>::Add
	mov	edi, DWORD PTR [esi]

; 3775 : 
; 3776 : 		v1.Position=OrigQ;

	mov	edx, DWORD PTR _OrigQ$[esp+28]
	shl	eax, 4
	add	eax, edi
	mov	ecx, eax
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _OrigQ$[esp+32]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _OrigQ$[esp+36]
	mov	DWORD PTR [ecx+8], edx

; 3777 : 		v1.Diffuse = FColor(Color).TrueColor() | 0xff000000;		

	mov	ecx, DWORD PTR -12+[esp+32]
	mov	DWORD PTR $T143215[esp+28], ecx
	fld	DWORD PTR $T143215[esp+28]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143302[esp+28]
	mov	ecx, DWORD PTR _I$143302[esp+28]
	test	ecx, ecx
	jge	SHORT $L143308
	mov	BYTE PTR $T143106[esp+28], 0
	jmp	SHORT $L143307
$L143308:
	cmp	ecx, 255				; 000000ffH
	mov	BYTE PTR $T143106[esp+28], cl
	jl	SHORT $L143307
	mov	BYTE PTR $T143106[esp+28], 255		; 000000ffH
$L143307:
	mov	edx, DWORD PTR -8+[esp+32]
	mov	DWORD PTR $T143233[esp+28], edx
	fld	DWORD PTR $T143233[esp+28]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143312[esp+28]
	mov	ecx, DWORD PTR _I$143312[esp+28]
	test	ecx, ecx
	jge	SHORT $L143318
	xor	bl, bl
	jmp	SHORT $L143333
$L143318:
	cmp	ecx, 255				; 000000ffH
	jge	SHORT $L143316
	mov	bl, cl
	jmp	SHORT $L143333
$L143316:
	or	bl, 255					; 000000ffH
$L143333:
	mov	ecx, DWORD PTR -4+[esp+32]
	mov	BYTE PTR $T143106[esp+29], bl
	mov	DWORD PTR $T143251[esp+28], ecx
	fld	DWORD PTR $T143251[esp+28]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143322[esp+28]
	mov	ecx, DWORD PTR _I$143322[esp+28]
	test	ecx, ecx
	jge	SHORT $L143282
	xor	cl, cl
	jmp	SHORT $L143334
$L143282:
	cmp	ecx, 255				; 000000ffH
	jl	SHORT $L143334
	or	cl, 255					; 000000ffH
$L143334:
	mov	edx, DWORD PTR -20+[esp+32]
	mov	BYTE PTR $T143106[esp+30], cl
	mov	DWORD PTR $T143269[esp+28], edx
	fld	DWORD PTR $T143269[esp+28]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143291[esp+28]
	mov	edx, DWORD PTR _I$143291[esp+28]
	test	edx, edx
	jge	SHORT $L143295
	mov	BYTE PTR $T143106[esp+31], 0
	jmp	SHORT $L143294
$L143295:
	cmp	edx, 255				; 000000ffH
	mov	BYTE PTR $T143106[esp+31], dl
	jl	SHORT $L143294
	mov	BYTE PTR $T143106[esp+31], 255		; 000000ffH
$L143294:
	xor	edx, edx
	mov	dl, cl
	mov	ecx, DWORD PTR $T143106[esp+28]
	shl	ecx, 16					; 00000010H
	pop	edi
	mov	dh, bl
	pop	ebx
	add	edx, ecx
	or	edx, -16777216				; ff000000H
	mov	DWORD PTR [eax+12], edx
$L143331:
	pop	esi

; 3778 : 	}

	add	esp, 20					; 00000014H
	ret	44					; 0000002cH
?Queue3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z ENDP ; UD3DRenderDevice::Queue3DLine
_TEXT	ENDS
PUBLIC	??_C@_0BN@NGCA@Count?$DMLINE_VERTEXBUFFER_SIZE?$AA@ ; `string'
;	COMDAT ??_C@_0BN@NGCA@Count?$DMLINE_VERTEXBUFFER_SIZE?$AA@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0BN@NGCA@Count?$DMLINE_VERTEXBUFFER_SIZE?$AA@ DB 'Count<LINE_VERTEX'
	DB	'BUFFER_SIZE', 00H				; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?Queued3DLinesFlush@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT
_VertexData$143371 = -4
_First$ = -4
?Queued3DLinesFlush@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::Queued3DLinesFlush, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 3781 : 	{

	push	ecx
	push	ebx
	push	ebp
	mov	ebx, ecx

; 3782 : 		VALIDATE;
; 3783 : 
; 3784 : 		int Count=Queued3DLineVertices.Num();

	mov	ebp, DWORD PTR [ebx+675252]
	push	edi

; 3785 : 
; 3786 : 		// Make sure we don't exceed our maximum size:
; 3787 : 
; 3788 : 		if(!Count) return;

	xor	edi, edi
	cmp	ebp, edi
	je	$L143430

; 3789 : 		SetBlending(PF_TwoSided,PFX_Clip|PFX_FlatShade);

	push	10					; 0000000aH
	mov	edx, 256				; 00000100H
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 3790 : 		SetZBias(0);

	fld	DWORD PTR [ebx+675164]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L143363
	cmp	DWORD PTR ?CacheBlending@@3HA, edi	; CacheBlending
	jne	SHORT $L143362
$L143363:
	mov	eax, DWORD PTR [ebx+19124]
	push	edi
	push	47					; 0000002fH
	mov	DWORD PTR [ebx+675164], edi
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+200]
$L143362:

; 3791 : 
; 3792 : 		//!!should optimize to avoid changing shade mode, color op, alpha op.
; 3793 : 		//Direct3DDevice8->SetRenderState( D3DRS_SHADEMODE, D3DSHADE_FLAT );
; 3794 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE  );

	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	esi
	push	1
	push	1
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 3795 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]

; 3796 : 
; 3797 : 		check(Count<LINE_VERTEXBUFFER_SIZE); // NJS: URGENT FIX.. iterate through line vertices. - should never happen because of the check in Queue3DLine, but still.

	cmp	ebp, 16384				; 00004000H
	mov	esi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jl	SHORT $L124472
	push	3797					; 00000ed5H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0BN@NGCA@Count?$DMLINE_VERTEXBUFFER_SIZE?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L124472:

; 3798 : 		FD3DVertex*	Vertices = (FD3DVertex*) LineVertices.Lock(Count);

	cmp	DWORD PTR [ebx+16724], edi
	jne	SHORT $L143368
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L143368:
	cmp	DWORD PTR [ebx+16728], edi
	jne	SHORT $L143369
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L143369:
	cmp	ebp, DWORD PTR [ebx+16728]
	jl	SHORT $L143372
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L143372:
	mov	eax, DWORD PTR [ebx+16736]
	mov	ecx, DWORD PTR [ebx+16728]
	mov	esi, ebp
	lea	edx, DWORD PTR [eax+ebp]
	shl	esi, 4
	cmp	edx, ecx
	jge	SHORT $L143386
	mov	ecx, DWORD PTR [ebx+16724]
	mov	edx, DWORD PTR [ecx]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$143371[esp+24]
	push	edi
	push	esi
	shl	eax, 4
	push	eax
	push	ecx
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L143381
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L143381:
	mov	eax, DWORD PTR [ebx+16736]
	mov	DWORD PTR [ebx+16732], eax
	add	eax, ebp
	mov	DWORD PTR [ebx+16736], eax
	jmp	SHORT $L143385
$L143386:
	mov	eax, DWORD PTR [ebx+16724]
	mov	edx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	ecx, DWORD PTR _VertexData$143371[esp+24]
	push	ecx
	push	esi
	push	edi
	push	eax
	call	DWORD PTR [edx+44]
	cmp	eax, edi
	jge	SHORT $L143387
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L143387:
	mov	DWORD PTR [ebx+16732], edi
	mov	DWORD PTR [ebx+16736], ebp
$L143385:

; 3799 : 		memcpy(Vertices,Queued3DLineVertices.GetData(),Count*sizeof(FD3DVertex));

	mov	edi, DWORD PTR _VertexData$143371[esp+20]
	mov	ecx, esi
	mov	esi, DWORD PTR [ebx+675248]
	mov	edx, ecx
	shr	ecx, 2
	rep movsd
	mov	ecx, edx
	and	ecx, 3
	rep movsb

; 3800 : 		INT	First = LineVertices.Unlock();

	mov	eax, DWORD PTR [ebx+16724]
	test	eax, eax
	jne	SHORT $L143401
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L143401:
	mov	eax, DWORD PTR [ebx+16724]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L143441
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	edi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	edi
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	esi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	esi
	add	esp, 20					; 00000014H
	jmp	SHORT $L143402
$L143441:
	mov	esi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	edi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
$L143402:

; 3801 : 		LineVertices.Set();

	mov	eax, DWORD PTR [ebx+16720]
	test	eax, eax
	mov	ecx, DWORD PTR [ebx+16732]
	mov	DWORD PTR _First$[esp+20], ecx
	jne	SHORT $L143410
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L143410:
	mov	eax, DWORD PTR [ebx+16724]
	test	eax, eax
	jne	SHORT $L143412
	push	319					; 0000013fH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH

; 3811 : 	}

	npad	6

; 3801 : 		LineVertices.Set();

$L143412:
	mov	eax, DWORD PTR [ebx+16720]
	mov	edx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [edx+200]
	test	eax, eax
	jge	SHORT $L143413
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	edi
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	esi
	add	esp, 20					; 00000014H
$L143413:
	mov	eax, DWORD PTR [ebx+16720]
	mov	edx, DWORD PTR [eax]
	push	66					; 00000042H
	push	eax
	call	DWORD PTR [edx+304]
	test	eax, eax
	jge	SHORT $L143418
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	edi
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	esi
	add	esp, 20					; 00000014H
$L143418:
	mov	ecx, DWORD PTR [ebx+16724]
	mov	eax, DWORD PTR [ebx+16720]
	mov	edx, DWORD PTR [eax]
	push	16					; 00000010H
	push	ecx
	push	0
	push	eax
	call	DWORD PTR [edx+332]
	test	eax, eax
	jge	SHORT $L143423
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	324					; 00000144H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	edi
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	esi
	add	esp, 20					; 00000014H
$L143423:

; 3802 : 
; 3803 : 		Direct3DDevice8->DrawPrimitive( D3DPT_LINELIST, First, Count/2 );

	mov	ecx, DWORD PTR [ebx+19124]
	mov	esi, DWORD PTR [ecx]
	mov	eax, ebp
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR _First$[esp+20]
	sar	eax, 1
	push	eax
	push	edx
	push	2
	push	ecx
	call	DWORD PTR [esi+280]

; 3804 : 		// Line code:
; 3805 : 
; 3806 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 3807 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3808 : 		//Direct3DDevice8->SetRenderState( D3DRS_SHADEMODE, D3DSHADE_GOURAUD );
; 3809 : 
; 3810 : 		Queued3DLineVertices.Clear();

	mov	DWORD PTR [ebx+675252], 0
	pop	esi
$L143430:
	pop	edi
	pop	ebp
	pop	ebx

; 3811 : 	}

	pop	ecx
	ret	0
?Queued3DLinesFlush@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z ENDP ; UD3DRenderDevice::Queued3DLinesFlush
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Draw3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
_TEXT	SEGMENT
$T143445 = 28
$T143446 = 28
_VertexData$143477 = -24
$T143506 = 28
$T143513 = -20
$T143520 = -16
$T143527 = 8
_I$143533 = -20
_I$143537 = -16
_I$143541 = -20
_I$143545 = -16
$T143562 = 28
$T143569 = 40
$T143576 = 40
$T143583 = 40
_I$143589 = 40
_I$143593 = 8
_I$143597 = 8
_I$143601 = 8
_Color$ = 8
_OrigP$ = 28
_OrigQ$ = 40
?Draw3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z PROC NEAR ; UD3DRenderDevice::Draw3DLine, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 3815 : 		VALIDATE;
; 3816 : 		if(!RenderLines) return;

	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	sub	esp, 24					; 00000018H
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	push	edi
	mov	edi, ecx
	je	$L124479

; 3817 : 
; 3818 : 		SetBlending(0,PFX_Clip);

	push	2
	xor	edx, edx
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 3819 : 		SetZBias(0);

	fld	DWORD PTR [edi+675164]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L143469
	cmp	DWORD PTR ?CacheBlending@@3HA, ebx	; CacheBlending
	jne	SHORT $L143468
$L143469:
	mov	eax, DWORD PTR [edi+19124]
	push	ebx
	push	47					; 0000002fH
	mov	DWORD PTR [edi+675164], ebx
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+200]
$L143468:

; 3820 : 
; 3821 : 		FD3DVertex*	Vertices = (FD3DVertex*) LineVertices.Lock(2);

	mov	eax, DWORD PTR [edi+16724]
	cmp	eax, ebx
	push	ebp
	lea	ebp, DWORD PTR [edi+16720]
	push	esi
	mov	esi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L143474
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L143474:
	cmp	DWORD PTR [ebp+8], ebx
	jne	SHORT $L143475
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L143475:
	cmp	DWORD PTR [ebp+8], 2
	jg	SHORT $L143478
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L143478:
	mov	eax, DWORD PTR [ebp+16]
	mov	ecx, DWORD PTR [ebp+8]
	lea	edx, DWORD PTR [eax+2]
	cmp	edx, ecx
	jge	SHORT $L143492
	mov	ecx, DWORD PTR [ebp+4]
	mov	edx, DWORD PTR [ecx]
	push	4096					; 00001000H
	lea	esi, DWORD PTR _VertexData$143477[esp+44]
	push	esi
	push	32					; 00000020H
	shl	eax, 4
	push	eax
	push	ecx
	call	DWORD PTR [edx+44]
	cmp	eax, ebx
	jge	SHORT $L143487
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L143487:
	mov	eax, DWORD PTR [ebp+16]
	mov	DWORD PTR [ebp+12], eax
	add	eax, 2
	mov	DWORD PTR [ebp+16], eax
	jmp	SHORT $L143491

; 3845 : 	}

	npad	6

; 3820 : 
; 3821 : 		FD3DVertex*	Vertices = (FD3DVertex*) LineVertices.Lock(2);

$L143492:
	mov	eax, DWORD PTR [ebp+4]
	mov	edx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	ecx, DWORD PTR _VertexData$143477[esp+44]
	push	ecx
	push	32					; 00000020H
	push	ebx
	push	eax
	call	DWORD PTR [edx+44]
	cmp	eax, ebx
	jge	SHORT $L143493
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L143493:
	mov	DWORD PTR [ebp+12], ebx
	mov	DWORD PTR [ebp+16], 2
$L143491:

; 3822 : 
; 3823 : 		//!!should optimize to avoid changing shade mode, color op, alpha op.
; 3824 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE  );

	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	mov	esi, DWORD PTR _VertexData$143477[esp+40]
	push	1
	push	1
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 3825 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3826 : 
; 3827 : 		Vertices[0].Position.X = OrigP.X;
; 3828 : 		Vertices[0].Position.Y = OrigP.Y;
; 3829 : 		Vertices[0].Position.Z = OrigP.Z;
; 3830 : 		Vertices[0].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	fld	DWORD PTR _Color$[esp+36]
	fmul	DWORD PTR __real@43800000
	mov	eax, DWORD PTR _OrigP$[esp+36]
	mov	ecx, DWORD PTR _OrigP$[esp+40]
	mov	edx, DWORD PTR _OrigP$[esp+44]
	fst	DWORD PTR -12+[esp+40]
	mov	DWORD PTR [esi], eax
	fstp	DWORD PTR $T143506[esp+36]
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [esi+8], edx
	fld	DWORD PTR $T143506[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143533[esp+40]
	mov	eax, DWORD PTR _I$143533[esp+40]
	push	255					; 000000ffH
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp
	fld	DWORD PTR _Color$[esp+52]
	fmul	DWORD PTR __real@43800000
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T143445[esp+36], al
	fst	DWORD PTR -8+[esp+40]
	fstp	DWORD PTR $T143513[esp+40]
	fld	DWORD PTR $T143513[esp+40]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143537[esp+40]
	mov	ecx, DWORD PTR _I$143537[esp+40]
	push	255					; 000000ffH
	push	0
	push	ecx
	call	?Clamp@@YAHHHH@Z			; Clamp
	fld	DWORD PTR _Color$[esp+56]
	fmul	DWORD PTR __real@43800000
	mov	bl, al
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T143445[esp+37], bl
	fst	DWORD PTR -4+[esp+40]
	fstp	DWORD PTR $T143520[esp+40]
	fld	DWORD PTR $T143520[esp+40]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143541[esp+40]
	mov	edx, DWORD PTR _I$143541[esp+40]
	push	255					; 000000ffH
	push	0
	push	edx
	call	?Clamp@@YAHHHH@Z			; Clamp
	fld	DWORD PTR _Color$[esp+60]
	fmul	DWORD PTR __real@43800000
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T143445[esp+38], al
	fst	DWORD PTR -20+[esp+40]
	fstp	DWORD PTR $T143527[esp+36]
	fld	DWORD PTR $T143527[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143545[esp+40]
	mov	eax, DWORD PTR _I$143545[esp+40]
	push	255					; 000000ffH
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp
	xor	ecx, ecx
	mov	cl, BYTE PTR $T143445[esp+50]
	mov	BYTE PTR $T143445[esp+51], al
	mov	edx, DWORD PTR $T143445[esp+48]

; 3831 : 
; 3832 : 		Vertices[1].Position.X = OrigQ.X;

	mov	eax, DWORD PTR _OrigQ$[esp+48]
	shl	edx, 16					; 00000010H
	add	esp, 12					; 0000000cH
	mov	ch, bl
	add	ecx, edx
	or	ecx, -16777216				; ff000000H
	mov	DWORD PTR [esi+12], ecx

; 3833 : 		Vertices[1].Position.Y = OrigQ.Y;

	mov	ecx, DWORD PTR _OrigQ$[esp+40]
	mov	DWORD PTR [esi+16], eax

; 3834 : 		Vertices[1].Position.Z = OrigQ.Z;

	mov	edx, DWORD PTR _OrigQ$[esp+44]

; 3835 : 		Vertices[1].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	mov	eax, DWORD PTR -12+[esp+40]
	mov	DWORD PTR [esi+20], ecx
	mov	DWORD PTR [esi+24], edx
	mov	DWORD PTR $T143562[esp+36], eax
	fld	DWORD PTR $T143562[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143589[esp+36]
	mov	ecx, DWORD PTR _I$143589[esp+36]
	push	255					; 000000ffH
	push	0
	push	ecx
	call	?Clamp@@YAHHHH@Z			; Clamp
	mov	edx, DWORD PTR -8+[esp+52]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T143446[esp+36], al
	mov	DWORD PTR $T143569[esp+36], edx
	fld	DWORD PTR $T143569[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143593[esp+36]
	mov	eax, DWORD PTR _I$143593[esp+36]
	push	255					; 000000ffH
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp
	mov	ecx, DWORD PTR -4+[esp+52]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T143446[esp+37], al
	mov	DWORD PTR $T143576[esp+36], ecx
	fld	DWORD PTR $T143576[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143597[esp+36]
	mov	edx, DWORD PTR _I$143597[esp+36]
	push	255					; 000000ffH
	push	0
	push	edx
	call	?Clamp@@YAHHHH@Z			; Clamp
	mov	bl, al
	mov	eax, DWORD PTR -20+[esp+52]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T143446[esp+38], bl
	mov	DWORD PTR $T143583[esp+36], eax
	fld	DWORD PTR $T143583[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143601[esp+36]
	mov	ecx, DWORD PTR _I$143601[esp+36]
	push	255					; 000000ffH
	push	0
	push	ecx
	call	?Clamp@@YAHHHH@Z			; Clamp

; 3836 : 
; 3837 : 		INT	First = LineVertices.Unlock();
; 3838 : 
; 3839 : 		LineVertices.Set();
; 3840 : 
; 3841 : 		Direct3DDevice8->DrawPrimitive( D3DPT_LINELIST, First, 1 );
; 3842 : 
; 3843 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );
; 3844 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	xor	edx, edx
	mov	dl, bl
	mov	BYTE PTR $T143446[esp+51], al
	mov	eax, DWORD PTR $T143446[esp+48]
	mov	ecx, eax
	shl	ecx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	esp, 12					; 0000000cH
	add	edx, ecx
	add	edx, eax
	or	edx, -16777216				; ff000000H
	mov	ecx, ebp
	mov	DWORD PTR [esi+28], edx
	call	?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DVertex>::Unlock
	mov	ecx, ebp
	mov	esi, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DVertex>::Set
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	esi
	push	2
	push	eax
	call	DWORD PTR [edx+280]
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	edi, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [edi]
	push	4
	push	4
	push	0
	push	edi
	call	DWORD PTR [edx+252]
	pop	esi
	pop	ebp
$L124479:
	pop	edi
	pop	ebx

; 3845 : 	}

	add	esp, 24					; 00000018H
	ret	44					; 0000002cH
?Draw3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z ENDP ; UD3DRenderDevice::Draw3DLine
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Draw2DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
_TEXT	SEGMENT
$T143619 = 28
$T143620 = 28
_VertexData$143627 = -24
$T143656 = 28
$T143674 = -20
$T143681 = -16
$T143688 = 8
_I$143694 = -24
_I$143704 = -16
_I$143708 = -20
_I$143712 = -16
$T143733 = 28
$T143740 = 40
$T143747 = 40
$T143754 = 40
_I$143760 = 40
_I$143764 = 8
_I$143768 = 8
_I$143772 = 8
_Color$ = 8
_P1$ = 28
_P2$ = 40
?Draw2DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z PROC NEAR ; UD3DRenderDevice::Draw2DLine, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 3849 : 		VALIDATE;
; 3850 : 		//appErrorf(_T("******** Draw2DLine called, please report to Nick"));
; 3851 : 		///*	
; 3852 : 		if(!RenderLines) return;

	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	sub	esp, 24					; 00000018H
	test	eax, eax
	push	edi
	mov	edi, ecx
	je	$L124487
	push	ebp
	push	esi

; 3853 : 		SetBlending();

	push	0
	xor	edx, edx
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 3854 : 		FD3DTLVertex*	Vertices = (FD3DTLVertex*) ActorVertices.Lock(2);

	mov	eax, DWORD PTR [edi+16704]
	test	eax, eax
	mov	esi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	lea	ebp, DWORD PTR [edi+16700]
	jne	SHORT $L143624
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L143624:
	mov	eax, DWORD PTR [ebp+8]
	test	eax, eax
	jne	SHORT $L143625
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L143625:
	mov	eax, DWORD PTR [ebp+8]
	push	ebx
	mov	ebx, 2
	cmp	eax, ebx
	jg	SHORT $L143628
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L143628:
	mov	ecx, DWORD PTR [ebp+16]
	mov	edx, DWORD PTR [ebp+8]
	lea	eax, DWORD PTR [ecx+2]
	cmp	eax, edx
	mov	eax, DWORD PTR [ebp+4]
	jge	SHORT $L143642
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	esi, DWORD PTR _VertexData$143627[esp+44]
	push	esi
	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	80					; 00000050H
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L143637
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L143637:
	mov	eax, DWORD PTR [ebp+16]
	mov	DWORD PTR [ebp+12], eax
	add	eax, 2
	mov	DWORD PTR [ebp+16], eax
	jmp	SHORT $L143641
$L143642:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$143627[esp+44]
	push	edx
	push	80					; 00000050H
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	SHORT $L143643
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L143643:
	mov	DWORD PTR [ebp+12], 0
	mov	DWORD PTR [ebp+16], ebx
$L143641:

; 3855 : 
; 3856 : 		//!!should optimize to avoid changing shade mode, color op, alpha op.
; 3857 : 		Direct3DDevice8->SetRenderState( D3DRS_SHADEMODE, D3DSHADE_FLAT );

	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR _VertexData$143627[esp+40]
	push	1
	push	9
	push	eax
	call	DWORD PTR [edx+200]

; 3858 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE  );

	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 3859 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3860 : 
; 3861 : 		Vertices[0].Position.X = P1.X - 0.5f;

	fld	DWORD PTR _P1$[esp+36]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esi]

; 3862 : 		Vertices[0].Position.Y = P1.Y - 0.5f;

	fld	DWORD PTR _P1$[esp+40]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esi+4]

; 3863 : 		Vertices[0].Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43;

	fld	DWORD PTR [edi+19492]
	fadd	DWORD PTR [edi+19508]

; 3864 : 		Vertices[0].Position.W = 1.f;

	mov	DWORD PTR [esi+12], 1065353216		; 3f800000H
	fstp	DWORD PTR [esi+8]

; 3865 : 		Vertices[0].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	fld	DWORD PTR _Color$[esp+36]
	fmul	DWORD PTR __real@43800000
	fst	DWORD PTR -12+[esp+40]
	fstp	DWORD PTR $T143656[esp+36]
	fld	DWORD PTR $T143656[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143694[esp+40]
	mov	eax, DWORD PTR _I$143694[esp+40]
	test	eax, eax
	jge	SHORT $L143699
	mov	BYTE PTR $T143619[esp+36], 0
	jmp	SHORT $L143698
$L143699:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T143619[esp+36], al
	jl	SHORT $L143698
	mov	BYTE PTR $T143619[esp+36], 255		; 000000ffH
$L143698:
	fld	DWORD PTR _Color$[esp+40]
	fmul	DWORD PTR __real@43800000
	fst	DWORD PTR -8+[esp+40]
	fstp	DWORD PTR $T143674[esp+40]
	fld	DWORD PTR $T143674[esp+40]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143704[esp+40]
	mov	eax, DWORD PTR _I$143704[esp+40]
	push	255					; 000000ffH
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp
	fld	DWORD PTR _Color$[esp+56]
	fmul	DWORD PTR __real@43800000
	mov	bl, al
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T143619[esp+37], bl
	fst	DWORD PTR -4+[esp+40]
	fstp	DWORD PTR $T143681[esp+40]
	fld	DWORD PTR $T143681[esp+40]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143708[esp+40]
	mov	ecx, DWORD PTR _I$143708[esp+40]
	push	255					; 000000ffH
	push	0
	push	ecx
	call	?Clamp@@YAHHHH@Z			; Clamp
	fld	DWORD PTR _Color$[esp+60]
	fmul	DWORD PTR __real@43800000
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T143619[esp+38], al
	fst	DWORD PTR -20+[esp+40]
	fstp	DWORD PTR $T143688[esp+36]
	fld	DWORD PTR $T143688[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143712[esp+40]
	mov	edx, DWORD PTR _I$143712[esp+40]
	push	255					; 000000ffH
	push	0
	push	edx
	call	?Clamp@@YAHHHH@Z			; Clamp

; 3866 : 		Vertices[0].Specular = 0;
; 3867 : 
; 3868 : 		Vertices[1].Position.X = P2.X - 0.5f;

	fld	DWORD PTR _P2$[esp+48]
	fsub	DWORD PTR __real@3f000000
	mov	BYTE PTR $T143619[esp+51], al
	mov	ecx, DWORD PTR $T143619[esp+48]
	xor	eax, eax
	mov	al, BYTE PTR $T143619[esp+50]

; 3869 : 		Vertices[1].Position.Y = P2.Y - 0.5f;
; 3870 : 		Vertices[1].Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43;
; 3871 : 		Vertices[1].Position.W = 1.f;
; 3872 : 		Vertices[1].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	mov	edx, DWORD PTR -12+[esp+52]
	shl	ecx, 16					; 00000010H
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T143733[esp+36], edx
	mov	ah, bl
	add	eax, ecx
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi+20], 0
	fstp	DWORD PTR [esi+40]
	fld	DWORD PTR _P2$[esp+40]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esi+44]
	fld	DWORD PTR [edi+19492]
	fadd	DWORD PTR [edi+19508]
	mov	DWORD PTR [esi+52], 1065353216		; 3f800000H
	fstp	DWORD PTR [esi+48]
	fld	DWORD PTR $T143733[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143760[esp+36]
	mov	eax, DWORD PTR _I$143760[esp+36]
	push	255					; 000000ffH
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp
	mov	ecx, DWORD PTR -8+[esp+52]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T143620[esp+36], al
	mov	DWORD PTR $T143740[esp+36], ecx
	fld	DWORD PTR $T143740[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143764[esp+36]
	mov	edx, DWORD PTR _I$143764[esp+36]
	push	255					; 000000ffH
	push	0
	push	edx
	call	?Clamp@@YAHHHH@Z			; Clamp
	mov	BYTE PTR $T143620[esp+49], al
	mov	eax, DWORD PTR -4+[esp+52]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T143747[esp+36], eax
	fld	DWORD PTR $T143747[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143768[esp+36]
	push	255					; 000000ffH
	push	0
	mov	ecx, DWORD PTR _I$143768[esp+44]
	push	ecx
	call	?Clamp@@YAHHHH@Z			; Clamp
	mov	edx, DWORD PTR -20+[esp+52]
	mov	bl, al
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T143620[esp+38], bl
	mov	DWORD PTR $T143754[esp+36], edx
	fld	DWORD PTR $T143754[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$143772[esp+36]
	mov	eax, DWORD PTR _I$143772[esp+36]
	push	255					; 000000ffH
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp

; 3873 : 		Vertices[1].Specular = 0;
; 3874 : 
; 3875 : 		INT	First = ActorVertices.Unlock();
; 3876 : 
; 3877 : 		ActorVertices.Set();
; 3878 : 
; 3879 : 		Direct3DDevice8->DrawPrimitive( D3DPT_LINELIST, First, 1 );
; 3880 : 
; 3881 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );
; 3882 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );
; 3883 : 		Direct3DDevice8->SetRenderState( D3DRS_SHADEMODE, D3DSHADE_GOURAUD );

	xor	ecx, ecx
	mov	cl, bl
	mov	BYTE PTR $T143620[esp+51], al
	mov	eax, DWORD PTR $T143620[esp+48]
	mov	edx, eax
	shl	edx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	esp, 12					; 0000000cH
	add	ecx, edx
	add	ecx, eax
	or	ecx, -16777216				; ff000000H
	mov	DWORD PTR [esi+56], ecx
	mov	DWORD PTR [esi+60], 0
	mov	eax, DWORD PTR [ebp+4]
	test	eax, eax
	pop	ebx
	jne	SHORT $L143791
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH

; 3884 : 	}

	npad	3

; 3873 : 		Vertices[1].Specular = 0;
; 3874 : 
; 3875 : 		INT	First = ActorVertices.Unlock();
; 3876 : 
; 3877 : 		ActorVertices.Set();
; 3878 : 
; 3879 : 		Direct3DDevice8->DrawPrimitive( D3DPT_LINELIST, First, 1 );
; 3880 : 
; 3881 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );
; 3882 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );
; 3883 : 		Direct3DDevice8->SetRenderState( D3DRS_SHADEMODE, D3DSHADE_GOURAUD );

$L143791:
	mov	eax, DWORD PTR [ebp+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L143792
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L143792:
	mov	esi, DWORD PTR [ebp+12]
	mov	ecx, ebp
	call	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DTLVertex>::Set
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	esi
	push	2
	push	eax
	call	DWORD PTR [ecx+280]
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	edi, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [edi]
	push	2
	push	9
	push	edi
	call	DWORD PTR [edx+200]
	pop	esi
	pop	ebp
$L124487:
	pop	edi

; 3884 : 	}

	add	esp, 24					; 00000018H
	ret	44					; 0000002cH
?Draw2DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z ENDP ; UD3DRenderDevice::Draw2DLine
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Draw2DPoint@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KMMMMM@Z
_TEXT	SEGMENT
_PositionZ$ = -8
$T143806 = -4
$T143807 = -4
$T143808 = 36
$T143809 = 36
$T143810 = 28
_Xor$143819 = -8
_Color$ = 8
_X1$ = 28
_Y1$ = 32
_X2$ = 36
_Y2$ = 40
?Draw2DPoint@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KMMMMM@Z PROC NEAR ; UD3DRenderDevice::Draw2DPoint, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 3888 : 		VALIDATE;
; 3889 : 		if(!RenderPoints) 

	mov	eax, DWORD PTR ?RenderPoints@@3HA	; RenderPoints
	sub	esp, 8
	test	eax, eax
	push	edi
	mov	edi, ecx
	je	$L124495

; 3890 : 			return;
; 3891 : 
; 3892 : 		PreRender(Frame);

	mov	eax, DWORD PTR [edi]
	push	ebx
	push	ebp
	push	esi
	call	DWORD PTR [eax+140]

; 3893 : 		SetBlending(0,PFX_FlatShade);

	mov	eax, DWORD PTR [edi+19616]
	mov	ebx, DWORD PTR [edi+19620]
	xor	eax, -2147483648			; 80000000H
	xor	ebx, 8
	test	ah, 1
	mov	DWORD PTR _Xor$143819[esp+24], eax
	je	SHORT $L143821
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$143819[esp+24]
$L143821:
	test	bl, 2
	je	SHORT $L143822
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$143819[esp+24]
$L143822:
	test	bl, 8
	je	SHORT $L143823
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$143819[esp+24]
$L143823:
	test	eax, -754972601				; d3000847H
	jne	SHORT $L143825
	test	bl, 113					; 00000071H
	je	$L143861
$L143825:
	test	eax, 268435525				; 10000045H
	jne	SHORT $L143827
	test	bl, 113					; 00000071H
	je	SHORT $L143845
$L143827:
	test	bl, 1
	je	SHORT $L143828
	mov	eax, DWORD PTR [edi+19128]
	test	eax, eax
	mov	eax, DWORD PTR [edi+19124]
	je	SHORT $L143829
	mov	edx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L143830
$L143829:
	mov	ecx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L143830:
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L143828:
	xor	edx, edx
	mov	ecx, edi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	eax, DWORD PTR _Xor$143819[esp+24]
$L143845:
	test	al, 1
	je	SHORT $L143848
	xor	edx, edx
	mov	ecx, edi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, edi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, edi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR _Xor$143819[esp+24]
$L143848:
	test	eax, eax
	jns	SHORT $L143850
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$143819[esp+24]
$L143850:
	test	al, 2
	je	SHORT $L143853
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$143819[esp+24]
$L143853:
	test	ah, 8
	je	SHORT $L143854
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR _Xor$143819[esp+24]
$L143854:
	test	eax, 1073741824				; 40000000H
	je	SHORT $L143855
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$143819[esp+24]
$L143855:
	test	eax, 50331648				; 03000000H
	je	SHORT $L143861
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L143861:

; 3894 : 
; 3895 : 		FD3DTLVertex*	Vertices = (FD3DTLVertex*) ActorVertices.Lock(5);

	push	-1
	lea	ebx, DWORD PTR [edi+16700]
	push	5
	mov	ecx, ebx
	mov	DWORD PTR [edi+19616], -2147483648	; 80000000H
	mov	DWORD PTR [edi+19620], 8
	call	?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z ; FD3DVertexBuffer<FD3DTLVertex>::Lock

; 3896 : 
; 3897 : 		//!!should optimize to avoid changing shade mode, color op, alpha op.
; 3898 : 		//Direct3DDevice8->SetRenderState( D3DRS_SHADEMODE, D3DSHADE_FLAT );
; 3899 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE );

	push	1
	push	1
	mov	esi, eax
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 3900 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3901 : 
; 3902 : 		float PositionZ=ProjectionMatrix._33 + ProjectionMatrix._43;

	fld	DWORD PTR [edi+19508]
	fadd	DWORD PTR [edi+19492]

; 3903 : 		Vertices[0].Position.X = X1;
; 3904 : 		Vertices[0].Position.Y = Y1;

	mov	ecx, DWORD PTR _Y1$[esp+20]
	mov	eax, DWORD PTR _X1$[esp+20]

; 3905 : 		Vertices[0].Position.Z = PositionZ;
; 3906 : 		Vertices[0].Position.W = 1.f;
; 3907 : 		Vertices[0].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	lea	edx, DWORD PTR _Color$[esp+20]
	mov	DWORD PTR [esi+4], ecx
	fst	DWORD PTR _PositionZ$[esp+24]
	mov	ebp, 1065353216				; 3f800000H
	fstp	DWORD PTR [esi+8]
	push	edx
	lea	ecx, DWORD PTR $T143806[esp+28]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+12], ebp
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ

; 3908 : 		Vertices[0].Specular = 0;
; 3909 : 
; 3910 : 		Vertices[1].Position.X = X2;
; 3911 : 		Vertices[1].Position.Y = Y1;

	mov	ecx, DWORD PTR _Y1$[esp+20]

; 3912 : 		Vertices[1].Position.Z = PositionZ;

	mov	edx, DWORD PTR _PositionZ$[esp+24]
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR _X2$[esp+20]
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+40], eax

; 3913 : 		Vertices[1].Position.W = 1.f;
; 3914 : 		Vertices[1].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	lea	eax, DWORD PTR _Color$[esp+20]
	mov	DWORD PTR [esi+44], ecx
	push	eax
	lea	ecx, DWORD PTR $T143807[esp+28]
	mov	DWORD PTR [esi+48], edx
	mov	DWORD PTR [esi+52], ebp
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ

; 3915 : 		Vertices[1].Specular = 0;
; 3916 : 		
; 3917 : 		Vertices[2].Position.X = X2;

	mov	ecx, DWORD PTR _X2$[esp+20]

; 3918 : 		Vertices[2].Position.Y = Y2;

	mov	edx, DWORD PTR _Y2$[esp+20]
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR [esi+56], eax

; 3919 : 		Vertices[2].Position.Z = PositionZ;

	mov	eax, DWORD PTR _PositionZ$[esp+24]
	mov	DWORD PTR [esi+60], 0
	mov	DWORD PTR [esi+80], ecx

; 3920 : 		Vertices[2].Position.W = 1.f; 
; 3921 : 		Vertices[2].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	lea	ecx, DWORD PTR _Color$[esp+20]
	push	ecx
	lea	ecx, DWORD PTR $T143808[esp+24]
	mov	DWORD PTR [esi+84], edx
	mov	DWORD PTR [esi+88], eax
	mov	DWORD PTR [esi+92], ebp
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ

; 3922 : 		Vertices[2].Specular = 0;
; 3923 : 
; 3924 : 		Vertices[3].Position.X = X1;

	mov	edx, DWORD PTR _X1$[esp+20]

; 3925 : 		Vertices[3].Position.Y = Y2;
; 3926 : 		Vertices[3].Position.Z = PositionZ;

	mov	ecx, DWORD PTR _PositionZ$[esp+24]
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR [esi+96], eax
	mov	eax, DWORD PTR _Y2$[esp+20]
	mov	DWORD PTR [esi+100], 0
	mov	DWORD PTR [esi+120], edx
	mov	DWORD PTR [esi+124], eax
	mov	DWORD PTR [esi+128], ecx

; 3927 : 		Vertices[3].Position.W = 1.f;

	mov	DWORD PTR [esi+132], ebp

; 3928 : 		Vertices[3].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	lea	edx, DWORD PTR _Color$[esp+20]
	push	edx
	lea	ecx, DWORD PTR $T143809[esp+24]
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ

; 3929 : 		Vertices[3].Specular = 0;
; 3930 : 
; 3931 : 		Vertices[4].Position.X = X1;
; 3932 : 		Vertices[4].Position.Y = Y1;

	mov	ecx, DWORD PTR _Y1$[esp+20]

; 3933 : 		Vertices[4].Position.Z = PositionZ;

	mov	edx, DWORD PTR _PositionZ$[esp+24]
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR [esi+136], eax
	mov	eax, DWORD PTR _X1$[esp+20]
	mov	DWORD PTR [esi+140], 0
	mov	DWORD PTR [esi+160], eax

; 3934 : 		Vertices[4].Position.W = 1.f;
; 3935 : 		Vertices[4].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	lea	eax, DWORD PTR _Color$[esp+20]
	mov	DWORD PTR [esi+164], ecx
	push	eax
	lea	ecx, DWORD PTR $T143810[esp+24]
	mov	DWORD PTR [esi+168], edx
	mov	DWORD PTR [esi+172], ebp
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR [esi+176], eax

; 3936 : 		Vertices[4].Specular = 0;
; 3937 : 
; 3938 : 		INT	First = ActorVertices.Unlock();

	mov	ecx, ebx
	mov	DWORD PTR [esi+180], 0
	call	?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DTLVertex>::Unlock

; 3939 : 
; 3940 : 		ActorVertices.Set();

	mov	ecx, ebx
	mov	esi, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DTLVertex>::Set

; 3941 : 
; 3942 : 		Direct3DDevice8->DrawPrimitive( D3DPT_LINESTRIP, First, 4 );

	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	esi
	push	3
	push	eax
	call	DWORD PTR [ecx+280]

; 3943 : 
; 3944 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3945 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	edi, DWORD PTR [edi+19124]
	mov	eax, DWORD PTR [edi]
	push	4
	push	4
	push	0
	push	edi
	call	DWORD PTR [eax+252]
	pop	esi
	pop	ebp
	pop	ebx
$L124495:
	pop	edi

; 3946 : 	}

	add	esp, 8
	ret	40					; 00000028H
?Draw2DPoint@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KMMMMM@Z ENDP ; UD3DRenderDevice::Draw2DPoint
_TEXT	ENDS
PUBLIC	??_C@_0BK@KHEC@Viewport?9?$DOHitYL?$DM?$DNHIT_SIZE?$AA@ ; `string'
PUBLIC	??_C@_0BK@MKKI@Viewport?9?$DOHitXL?$DM?$DNHIT_SIZE?$AA@ ; `string'
PUBLIC	??_C@_1FA@HABJ@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAG?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe@ ; `string'
PUBLIC	??_C@_1EC@KMJO@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAR?$AAe?$AAc?$AAt@ ; `string'
_BSS	SEGMENT
_HitPixels DD	040H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BK@KHEC@Viewport?9?$DOHitYL?$DM?$DNHIT_SIZE?$AA@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0BK@KHEC@Viewport?9?$DOHitYL?$DM?$DNHIT_SIZE?$AA@ DB 'Viewport->Hit'
	DB	'YL<=HIT_SIZE', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@MKKI@Viewport?9?$DOHitXL?$DM?$DNHIT_SIZE?$AA@
_DATA	SEGMENT
??_C@_0BK@MKKI@Viewport?9?$DOHitXL?$DM?$DNHIT_SIZE?$AA@ DB 'Viewport->Hit'
	DB	'XL<=HIT_SIZE', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1FA@HABJ@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAG?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe@
_DATA	SEGMENT
??_C@_1FA@HABJ@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAG?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'G', 00H, 'e'
	DB	00H, 't', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't'
	DB	00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EC@KMJO@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAR?$AAe?$AAc?$AAt@
_DATA	SEGMENT
??_C@_1EC@KMJO@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAR?$AAe?$AAc?$AAt@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'L', 00H, 'o'
	DB	00H, 'c', 00H, 'k', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?PushHit@UD3DRenderDevice@@UAIXPBEH@Z
_TEXT	SEGMENT
_RenderTarget$ = -20
_LockedRect$ = -8
$T143955 = -16
_Data$ = -12
_Count$ = 8
?PushHit@UD3DRenderDevice@@UAIXPBEH@Z PROC NEAR		; UD3DRenderDevice::PushHit, COMDAT
; _this$ = ecx
; _Data$ = edx

; 3953 : 	{

	sub	esp, 20					; 00000014H
	push	ebp
	mov	ebp, ecx

; 3954 : 
; 3955 : 		VALIDATE;
; 3956 : 
; 3957 : 		check(Viewport->HitYL<=HIT_SIZE);

	mov	eax, DWORD PTR [ebp+48]
	mov	ecx, DWORD PTR [eax+200]
	push	esi
	mov	esi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	edi
	mov	edi, 8
	cmp	ecx, edi
	mov	DWORD PTR _Data$[esp+32], edx
	jle	SHORT $L124508
	push	3957					; 00000f75H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0BK@KHEC@Viewport?9?$DOHitYL?$DM?$DNHIT_SIZE?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L124508:

; 3958 : 		check(Viewport->HitXL<=HIT_SIZE);

	mov	ecx, DWORD PTR [ebp+48]
	cmp	DWORD PTR [ecx+196], edi
	jle	SHORT $L124510
	push	3958					; 00000f76H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0BK@MKKI@Viewport?9?$DOHitXL?$DM?$DNHIT_SIZE?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L124510:

; 3959 : 
; 3960 : 		// Get the current render target surface.
; 3961 : 		IDirect3DSurface8*	RenderTarget;
; 3962 : 
; 3963 : 		if(FAILED(h=Direct3DDevice8->GetRenderTarget(&RenderTarget)))

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _RenderTarget$[esp+32]
	push	ecx
	push	eax
	call	DWORD PTR [edx+128]
	test	eax, eax
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	SHORT $L124514

; 3964 : 		{
; 3965 : 			debugf(TEXT("D3D Driver: GetRenderTarget failed (%s)"),DXGetErrorString8(h));

	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1FA@HABJ@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAG?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp

; 4036 : 	};

	add	esp, 20					; 00000014H
	ret	4
$L124514:

; 3966 : 			return;
; 3967 : 		}
; 3968 : 
; 3969 : 		// Lock the render target.
; 3970 : 
; 3971 : 		D3DLOCKED_RECT	LockedRect;
; 3972 : 
; 3973 : 		if(FAILED(h=RenderTarget->LockRect(&LockedRect,NULL,0)))

	mov	eax, DWORD PTR _RenderTarget$[esp+32]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	0
	lea	edx, DWORD PTR _LockedRect$[esp+40]
	push	edx
	push	eax
	call	DWORD PTR [ecx+36]
	test	eax, eax
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	SHORT $L124518

; 3974 : 		{
; 3975 : 			debugf(TEXT("D3D Driver: LockRect failed (%s)"),DXGetErrorString8(h));

	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1EC@KMJO@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAR?$AAe?$AAc?$AAt@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp

; 4036 : 	};

	add	esp, 20					; 00000014H
	ret	4
$L124518:

; 3976 : 			return;
; 3977 : 		}
; 3978 : 
; 3979 : 		// Save the passed info on the working stack.
; 3980 : 
; 3981 : 		INT	Index = HitStack.Add(Count);

	mov	edi, DWORD PTR [ebp+675116]
	mov	edx, DWORD PTR _Count$[esp+28]
	mov	eax, DWORD PTR [ebp+675120]
	lea	esi, DWORD PTR [ebp+675112]
	lea	ecx, DWORD PTR [edi+edx]
	cmp	ecx, eax
	mov	DWORD PTR [esi+4], ecx
	jle	SHORT $L143936
	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax+ecx+32]
	push	1
	mov	ecx, esi
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L143936:

; 3982 : 
; 3983 : 		appMemcpy(&HitStack(Index),Data,Count);

	mov	ecx, DWORD PTR [esi]
	add	ecx, edi
	push	ebx
	mov	DWORD PTR $T143955[esp+36], ecx
	mov	ecx, DWORD PTR _Count$[esp+32]
	mov	esi, DWORD PTR _Data$[esp+36]
	mov	edi, DWORD PTR $T143955[esp+36]
	mov	ebx, ecx
	shr	ecx, 2
	and	ebx, 3
	rep	 movsd
	mov	ecx, ebx
	rep	 movsb

; 3984 : 
; 3985 : 		// Cleanup under cursor.
; 3986 : 		switch( ViewportColorBits )
; 3987 : 		{

	mov	eax, DWORD PTR [ebp+16772]
	cmp	eax, 16					; 00000010H
	je	$L124525
	cmp	eax, 24					; 00000018H
	je	$L124540
	cmp	eax, 32					; 00000020H
	jne	$L124535

; 4015 : 			}
; 4016 : 			case 32:
; 4017 : 			{
; 4018 : 				DWORD* src = (DWORD*) LockedRect.pBits;
; 4019 : 				src = (DWORD*)((BYTE*)src + Viewport->HitX * 4 + Viewport->HitY * LockedRect.Pitch);

	mov	eax, DWORD PTR [ebp+48]
	mov	edx, DWORD PTR [eax+192]
	imul	edx, DWORD PTR _LockedRect$[esp+36]

; 4035 : 		SafeRelease(RenderTarget);

	mov	esi, DWORD PTR _LockedRect$[esp+40]
	mov	ecx, DWORD PTR [eax+188]
	add	esi, edx
	mov	edx, DWORD PTR [eax+200]
	xor	edi, edi
	test	edx, edx
	lea	ecx, DWORD PTR [esi+ecx*4]
	jle	$L124535
	mov	esi, DWORD PTR [eax+196]
	mov	ebx, OFFSET FLAT:_HitPixels
$L124561:
	xor	eax, eax
	test	esi, esi
	jle	SHORT $L124562

; 4021 : 				{
; 4022 : 					for( INT X=0; X<Viewport->HitXL; X++ )

	mov	edx, ebx

; 4036 : 	};

	npad	2
$L124565:

; 4023 : 					{
; 4024 : 						HitPixels[X][Y] = src[X];

	mov	esi, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], esi

; 4025 : 						src[X] = IGNOREPIX;

	mov	DWORD PTR [ecx+eax*4], 65037		; 0000fe0dH
	mov	esi, DWORD PTR [ebp+48]
	mov	esi, DWORD PTR [esi+196]
	inc	eax
	add	edx, 32					; 00000020H
	cmp	eax, esi
	jl	SHORT $L124565
$L124562:

; 4020 : 				for( INT Y=0; Y<Viewport->HitYL; Y++, src=(DWORD*)((BYTE*)src + LockedRect.Pitch) )

	add	ecx, DWORD PTR _LockedRect$[esp+36]
	mov	edx, DWORD PTR [ebp+48]
	mov	eax, DWORD PTR [edx+200]
	inc	edi
	add	ebx, 4
	cmp	edi, eax
	jl	SHORT $L124561

; 4026 : 					}
; 4027 : 				}
; 4028 : 				break;

	jmp	$L124535
$L124540:

; 3998 : 					}
; 3999 : 				}
; 4000 : 				break;
; 4001 : 			}
; 4002 : 			case 24:
; 4003 : 			{
; 4004 : 				BYTE* src = (BYTE*) LockedRect.pBits;
; 4005 : 				src = src + Viewport->HitX*3  + Viewport->HitY * LockedRect.Pitch;

	mov	eax, DWORD PTR [ebp+48]
	mov	edx, DWORD PTR [eax+192]
	imul	edx, DWORD PTR _LockedRect$[esp+36]
	mov	ecx, DWORD PTR [eax+188]
	lea	edi, DWORD PTR [ecx+ecx*2]

; 4035 : 		SafeRelease(RenderTarget);

	mov	ecx, DWORD PTR _LockedRect$[esp+40]
	add	ecx, edx
	add	edi, ecx
	mov	ecx, DWORD PTR [eax+200]
	xor	ebx, ebx
	test	ecx, ecx
	jle	$L124535
	mov	esi, DWORD PTR [eax+196]
	mov	ecx, OFFSET FLAT:_HitPixels
	mov	DWORD PTR 8+[esp+32], ecx
$L124544:
	xor	edx, edx
	test	esi, esi
	jle	SHORT $L124545

; 4007 : 				{
; 4008 : 					for( INT X=0; X<Viewport->HitXL; X++ )

	mov	eax, edi

; 4036 : 	};

	npad	3
$L124548:

; 4009 : 					{
; 4010 : 						HitPixels[X][Y] = *((DWORD*)&src[X*3]);

	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi

; 4011 : 						*((DWORD*)&src[X*3]) = IGNOREPIX;

	mov	DWORD PTR [eax], 65037			; 0000fe0dH
	mov	esi, DWORD PTR [ebp+48]
	mov	esi, DWORD PTR [esi+196]
	inc	edx
	add	ecx, 32					; 00000020H
	add	eax, 3
	cmp	edx, esi
	jl	SHORT $L124548
$L124545:

; 4006 : 				for( INT Y=0; Y<Viewport->HitYL; Y++, src+=LockedRect.Pitch )

	mov	edx, DWORD PTR _LockedRect$[esp+36]
	mov	ecx, DWORD PTR 8+[esp+32]
	add	edi, edx
	mov	edx, DWORD PTR [ebp+48]
	mov	eax, DWORD PTR [edx+200]
	inc	ebx
	add	ecx, 4
	cmp	ebx, eax
	mov	DWORD PTR 8+[esp+32], ecx
	jl	SHORT $L124544

; 4012 : 					}
; 4013 : 				}			
; 4014 : 				break;

	jmp	SHORT $L124535
$L124525:

; 3988 : 			case 16:
; 3989 : 			{
; 3990 : 				_WORD* src = (_WORD*) LockedRect.pBits;
; 3991 : 				src = (_WORD*) ((BYTE*)src + Viewport->HitX * 2 + Viewport->HitY * LockedRect.Pitch);

	mov	eax, DWORD PTR [ebp+48]
	mov	ecx, DWORD PTR [eax+192]
	imul	ecx, DWORD PTR _LockedRect$[esp+36]

; 4035 : 		SafeRelease(RenderTarget);

	mov	esi, DWORD PTR _LockedRect$[esp+40]
	mov	edx, DWORD PTR [eax+188]
	add	esi, ecx
	lea	ecx, DWORD PTR [esi+edx*2]
	mov	edx, DWORD PTR [eax+200]
	xor	edi, edi
	test	edx, edx
	jle	SHORT $L124535
	mov	esi, DWORD PTR [eax+196]
	mov	ebx, OFFSET FLAT:_HitPixels
$L124533:
	xor	eax, eax
	test	esi, esi
	jle	SHORT $L124534

; 3993 : 				{
; 3994 : 					for( INT X=0; X<Viewport->HitXL; X++ )

	mov	edx, ebx

; 4036 : 	};

	npad	5
$L124537:

; 3995 : 					{
; 3996 : 						HitPixels[X][Y] = src[X];

	movzx	esi, WORD PTR [ecx+eax*2]
	mov	DWORD PTR [edx], esi

; 3997 : 						src[X] = IGNOREPIX;

	mov	WORD PTR [ecx+eax*2], 65037		; 0000fe0dH
	mov	esi, DWORD PTR [ebp+48]
	mov	esi, DWORD PTR [esi+196]
	inc	eax
	add	edx, 32					; 00000020H
	cmp	eax, esi
	jl	SHORT $L124537
$L124534:

; 3992 : 				for( INT Y=0; Y<Viewport->HitYL; Y++, src=(_WORD*)((BYTE*)src + LockedRect.Pitch) )

	add	ecx, DWORD PTR _LockedRect$[esp+36]
	mov	eax, DWORD PTR [ebp+48]
	mov	edx, DWORD PTR [eax+200]
	inc	edi
	add	ebx, 4
	cmp	edi, edx
	jl	SHORT $L124533
$L124535:

; 4029 : 			}
; 4030 : 		}
; 4031 : 
; 4032 : 		// Unlock the render target, and release our reference to it.
; 4033 : 
; 4034 : 		RenderTarget->UnlockRect();

	mov	eax, DWORD PTR _RenderTarget$[esp+36]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+40]

; 4035 : 		SafeRelease(RenderTarget);

	mov	eax, DWORD PTR _RenderTarget$[esp+36]
	test	eax, eax
	pop	ebx
	je	SHORT $L143959
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
$L143959:
	pop	edi
	pop	esi
	pop	ebp

; 4036 : 	};

	add	esp, 20					; 00000014H
	ret	4
?PushHit@UD3DRenderDevice@@UAIXPBEH@Z ENDP		; UD3DRenderDevice::PushHit
_TEXT	ENDS
PUBLIC	??_C@_0BI@MCHO@Count?5?$DM?$DN?5HitStack?4Num?$CI?$CJ?$AA@ ; `string'
PUBLIC	??_C@_08GCAE@Index?$DO?$DN0?$AA@		; `string'
;	COMDAT ??_C@_0BI@MCHO@Count?5?$DM?$DN?5HitStack?4Num?$CI?$CJ?$AA@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0BI@MCHO@Count?5?$DM?$DN?5HitStack?4Num?$CI?$CJ?$AA@ DB 'Count <= H'
	DB	'itStack.Num()', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_08GCAE@Index?$DO?$DN0?$AA@
_DATA	SEGMENT
??_C@_08GCAE@Index?$DO?$DN0?$AA@ DB 'Index>=0', 00H	; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?PopHit@UD3DRenderDevice@@UAIXHH@Z
_TEXT	SEGMENT
_Hit$ = -20
_RenderTarget$ = -24
_LockedRect$ = -8
$T144003 = 8
$T144004 = -16
$T144005 = -20
_Count$ = -12
_bForce$ = 8
?PopHit@UD3DRenderDevice@@UAIXHH@Z PROC NEAR		; UD3DRenderDevice::PopHit, COMDAT
; _this$ = ecx
; _Count$ = edx

; 4040 : 	{

	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	mov	ebp, ecx

; 4041 : 		VALIDATE;
; 4042 : 
; 4043 : 		//debugf(TEXT("POPHIT stacknum   %i  Count %i "),HitStack.Num(),Count);
; 4044 : 		check(Count <= HitStack.Num());

	cmp	edx, DWORD PTR [ebp+675116]
	mov	DWORD PTR _Count$[esp+32], edx
	jle	SHORT $L124573
	push	4044					; 00000fccH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0BI@MCHO@Count?5?$DM?$DN?5HitStack?4Num?$CI?$CJ?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L124573:

; 4045 : 		UBOOL Hit=0;
; 4046 : 
; 4047 : 		// Get the current render target surface.
; 4048 : 		IDirect3DSurface8*	RenderTarget;
; 4049 : 
; 4050 : 		if(FAILED(h=Direct3DDevice8->GetRenderTarget(&RenderTarget)))

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _RenderTarget$[esp+32]
	push	edx
	xor	ebx, ebx
	push	eax
	mov	DWORD PTR _Hit$[esp+40], ebx
	call	DWORD PTR [ecx+128]
	cmp	eax, ebx
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	SHORT $L124578

; 4051 : 		{
; 4052 : 			debugf(TEXT("D3D Driver: GetRenderTarget failed (%s)"),DXGetErrorString8(h));

	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1FA@HABJ@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAG?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 12					; 0000000cH
	pop	ebp
	pop	ebx

; 4133 : 	}

	add	esp, 24					; 00000018H
	ret	4
$L124578:

; 4053 : 			return;
; 4054 : 		}
; 4055 : 
; 4056 : 		// Lock the render target.
; 4057 : 		D3DLOCKED_RECT	LockedRect;
; 4058 : 
; 4059 : 		if(FAILED(h=RenderTarget->LockRect(&LockedRect,NULL,0)))

	mov	eax, DWORD PTR _RenderTarget$[esp+32]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	ebx
	lea	ecx, DWORD PTR _LockedRect$[esp+40]
	push	ecx
	push	eax
	call	DWORD PTR [edx+36]
	cmp	eax, ebx
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	SHORT $L124581

; 4060 : 		{
; 4061 : 			debugf(TEXT("D3D Driver: LockRect failed (%s)"),DXGetErrorString8(h));

	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1EC@KMJO@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAR?$AAe?$AAc?$AAt@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 12					; 0000000cH
	pop	ebp
	pop	ebx

; 4133 : 	}

	add	esp, 24					; 00000018H
	ret	4
$L124581:

; 4062 : 			return;
; 4063 : 		}
; 4064 : 
; 4065 : 		// Check under cursor and restore.
; 4066 : 		switch( ViewportColorBits )
; 4067 : 		{

	mov	eax, DWORD PTR [ebp+16772]
	cmp	eax, 16					; 00000010H
	push	esi
	push	edi
	je	$L124586
	cmp	eax, 24					; 00000018H
	je	$L124603
	cmp	eax, 32					; 00000020H
	jne	$L124596

; 4098 : 			}
; 4099 : 			case 32:
; 4100 : 			{
; 4101 : 				DWORD* src = (DWORD*) LockedRect.pBits;
; 4102 : 				src = (DWORD*)((BYTE*)src + Viewport->HitX * 4 + Viewport->HitY * LockedRect.Pitch);

	mov	eax, DWORD PTR [ebp+48]
	mov	ecx, DWORD PTR [eax+192]
	imul	ecx, DWORD PTR _LockedRect$[esp+40]

; 4130 : 		}
; 4131 : 		// Remove the passed info from the working stack.
; 4132 : 		HitStack.Remove( HitStack.Num()-Count, Count );

	mov	esi, DWORD PTR _LockedRect$[esp+44]
	mov	edx, DWORD PTR [eax+188]
	add	esi, ecx
	mov	ecx, DWORD PTR [eax+200]
	xor	edi, edi
	cmp	ecx, ebx
	lea	esi, DWORD PTR [esi+edx*4]
	jle	$L124596
	mov	ecx, DWORD PTR [eax+196]
	mov	ebx, OFFSET FLAT:_HitPixels

; 4133 : 	}

	npad	2

; 4130 : 		}
; 4131 : 		// Remove the passed info from the working stack.
; 4132 : 		HitStack.Remove( HitStack.Num()-Count, Count );

$L124625:
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L124626

; 4104 : 				{
; 4105 : 					for( INT X=0; X<Viewport->HitXL; X++ )

	mov	edx, ebx
$L124629:

; 4106 : 					{						
; 4107 : 						if ( src[X] != IGNOREPIX ) 

	cmp	DWORD PTR [esi+eax*4], 65037		; 0000fe0dH
	je	SHORT $L124632

; 4108 : 							Hit=1;

	mov	DWORD PTR _Hit$[esp+40], 1
$L124632:

; 4109 : 						src[X] = HitPixels[X][Y];						

	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [esi+eax*4], ecx
	mov	ecx, DWORD PTR [ebp+48]
	mov	ecx, DWORD PTR [ecx+196]
	inc	eax
	add	edx, 32					; 00000020H
	cmp	eax, ecx
	jl	SHORT $L124629
$L124626:

; 4103 : 				for( INT Y=0; Y<Viewport->HitYL; Y++, src=(DWORD*)((BYTE*)src + LockedRect.Pitch) )

	add	esi, DWORD PTR _LockedRect$[esp+40]
	mov	edx, DWORD PTR [ebp+48]
	mov	eax, DWORD PTR [edx+200]
	inc	edi
	add	ebx, 4
	cmp	edi, eax
	jl	SHORT $L124625

; 4110 : 					}
; 4111 : 				}
; 4112 : 				break;

	jmp	$L124596
$L124603:

; 4079 : 					
; 4080 : 					}
; 4081 : 				}
; 4082 : 				break;
; 4083 : 			}
; 4084 : 			case 24:
; 4085 : 			{
; 4086 : 				BYTE* src = (BYTE*) LockedRect.pBits;
; 4087 : 				src = src + Viewport->HitX*3  + Viewport->HitY * LockedRect.Pitch;

	mov	eax, DWORD PTR [ebp+48]
	mov	edx, DWORD PTR [eax+192]
	imul	edx, DWORD PTR _LockedRect$[esp+40]
	mov	ecx, DWORD PTR [eax+188]
	lea	edi, DWORD PTR [ecx+ecx*2]

; 4130 : 		}
; 4131 : 		// Remove the passed info from the working stack.
; 4132 : 		HitStack.Remove( HitStack.Num()-Count, Count );

	mov	ecx, DWORD PTR _LockedRect$[esp+44]
	add	ecx, edx
	add	edi, ecx
	mov	ecx, DWORD PTR [eax+200]
	test	ecx, ecx
	jle	$L124596
	mov	edx, DWORD PTR [eax+196]
	mov	ecx, OFFSET FLAT:_HitPixels
	mov	DWORD PTR -16+[esp+40], ecx
$L124607:
	xor	esi, esi
	test	edx, edx
	jle	SHORT $L124608

; 4089 : 				{
; 4090 : 					for( INT X=0; X<Viewport->HitXL; X++ )

	mov	eax, edi

; 4133 : 	}

	npad	3
$L124611:

; 4091 : 					{
; 4092 : 						if( *((DWORD*)&src[X*3]) != IGNOREPIX )

	cmp	DWORD PTR [eax], 65037			; 0000fe0dH
	je	SHORT $L124615

; 4093 : 							Hit=1;

	mov	DWORD PTR _Hit$[esp+40], 1
$L124615:

; 4094 : 						*((DWORD*)&src[X*3]) = HitPixels[X][Y];						

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ebp+48]
	mov	edx, DWORD PTR [edx+196]
	inc	esi
	add	ecx, 32					; 00000020H
	add	eax, 3
	cmp	esi, edx
	jl	SHORT $L124611
$L124608:

; 4088 : 				for( INT Y=0; Y<Viewport->HitYL; Y++, src+=LockedRect.Pitch )

	mov	eax, DWORD PTR _LockedRect$[esp+40]
	mov	ecx, DWORD PTR -16+[esp+40]
	add	edi, eax
	mov	eax, DWORD PTR [ebp+48]
	mov	esi, DWORD PTR [eax+200]
	inc	ebx
	add	ecx, 4
	cmp	ebx, esi
	mov	DWORD PTR -16+[esp+40], ecx
	jl	SHORT $L124607

; 4095 : 					}
; 4096 : 				}			
; 4097 : 				break;

	jmp	SHORT $L124596
$L124586:

; 4068 : 			case 16:
; 4069 : 			{
; 4070 : 				_WORD* src = (_WORD*) LockedRect.pBits;
; 4071 : 				src = (_WORD*) ((BYTE*)src + Viewport->HitX * 2 + Viewport->HitY * LockedRect.Pitch);

	mov	eax, DWORD PTR [ebp+48]
	mov	ecx, DWORD PTR [eax+192]
	imul	ecx, DWORD PTR _LockedRect$[esp+40]

; 4130 : 		}
; 4131 : 		// Remove the passed info from the working stack.
; 4132 : 		HitStack.Remove( HitStack.Num()-Count, Count );

	mov	esi, DWORD PTR _LockedRect$[esp+44]
	mov	edx, DWORD PTR [eax+188]
	add	esi, ecx
	mov	ecx, DWORD PTR [eax+200]
	xor	edi, edi
	cmp	ecx, ebx
	lea	esi, DWORD PTR [esi+edx*2]
	jle	SHORT $L124596
	mov	ecx, DWORD PTR [eax+196]
	mov	ebx, OFFSET FLAT:_HitPixels

; 4133 : 	}

	npad	3

; 4130 : 		}
; 4131 : 		// Remove the passed info from the working stack.
; 4132 : 		HitStack.Remove( HitStack.Num()-Count, Count );

$L124594:
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L124595

; 4073 : 				{
; 4074 : 					for( INT X=0; X<Viewport->HitXL; X++ )

	mov	edx, ebx
$L124598:

; 4075 : 					{
; 4076 : 						if( src[X] != IGNOREPIX )

	cmp	WORD PTR [esi+eax*2], 65037		; 0000fe0dH
	je	SHORT $L124601

; 4077 : 							Hit=1;

	mov	DWORD PTR _Hit$[esp+40], 1
$L124601:

; 4078 : 						src[X] = (_WORD)HitPixels[X][Y];	

	mov	cx, WORD PTR [edx]
	mov	WORD PTR [esi+eax*2], cx
	mov	ecx, DWORD PTR [ebp+48]
	mov	ecx, DWORD PTR [ecx+196]
	inc	eax
	add	edx, 32					; 00000020H
	cmp	eax, ecx
	jl	SHORT $L124598
$L124595:

; 4072 : 				for( INT Y=0; Y<Viewport->HitYL; Y++, src=(_WORD*)((BYTE*)src + LockedRect.Pitch) )

	add	esi, DWORD PTR _LockedRect$[esp+40]
	mov	edx, DWORD PTR [ebp+48]
	mov	eax, DWORD PTR [edx+200]
	inc	edi
	add	ebx, 4
	cmp	edi, eax
	jl	SHORT $L124594
$L124596:

; 4113 : 			}		
; 4114 : 		}
; 4115 : 
; 4116 : 		// Unlock the render target, and release our reference to it.
; 4117 : 
; 4118 : 		RenderTarget->UnlockRect();

	mov	eax, DWORD PTR _RenderTarget$[esp+40]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+40]

; 4119 : 		SafeRelease(RenderTarget);

	mov	eax, DWORD PTR _RenderTarget$[esp+40]
	xor	esi, esi
	cmp	eax, esi
	je	SHORT $L143987
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR _RenderTarget$[esp+40], esi
$L143987:

; 4120 : 
; 4121 : 		// Handle hit.
; 4122 : 		if( Hit || bForce )

	cmp	DWORD PTR _Hit$[esp+40], esi
	jne	SHORT $L124637
	cmp	DWORD PTR _bForce$[esp+36], esi
	je	SHORT $L124639
$L124637:

; 4123 : 		{
; 4124 : 			if( HitStack.Num() <= *HitSize )

	mov	ecx, DWORD PTR [ebp+675128]
	mov	eax, DWORD PTR [ebp+675116]
	cmp	eax, DWORD PTR [ecx]
	jg	SHORT $L124638

; 4125 : 			{
; 4126 : 				HitCount = HitStack.Num();
; 4127 : 				appMemcpy( HitData, &HitStack(0), HitCount );

	mov	edx, DWORD PTR [ebp+675112]
	mov	DWORD PTR [ebp+675132], eax
	mov	DWORD PTR $T144005[esp+40], eax
	mov	eax, DWORD PTR [ebp+675124]
	mov	DWORD PTR $T144004[esp+40], edx
	mov	DWORD PTR $T144003[esp+36], eax
	mov	ecx, DWORD PTR $T144005[esp+40]
	mov	esi, DWORD PTR $T144004[esp+40]
	mov	edi, DWORD PTR $T144003[esp+36]
	mov	ebx, ecx
	shr	ecx, 2
	and	ebx, 3
	rep	 movsd
	mov	ecx, ebx
	rep	 movsb

; 4128 : 			}
; 4129 : 			else HitCount = 0;

	jmp	SHORT $L124639
$L124638:
	mov	DWORD PTR [ebp+675132], esi
$L124639:

; 4130 : 		}
; 4131 : 		// Remove the passed info from the working stack.
; 4132 : 		HitStack.Remove( HitStack.Num()-Count, Count );

	mov	esi, DWORD PTR [ebp+675116]
	mov	edi, DWORD PTR _Count$[esp+40]
	sub	esi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	lea	ebp, DWORD PTR [ebp+675112]
	jns	SHORT $L144015
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L144015:
	cmp	esi, DWORD PTR [ebp+4]
	jle	SHORT $L144016
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L144016:
	mov	eax, DWORD PTR [ebp+4]
	lea	ecx, DWORD PTR [esi+edi]
	cmp	ecx, eax
	jle	SHORT $L144017
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L144017:
	push	1
	push	edi
	push	esi
	mov	ecx, ebp
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 4133 : 	}

	add	esp, 24					; 00000018H
	ret	4
?PopHit@UD3DRenderDevice@@UAIXHH@Z ENDP			; UD3DRenderDevice::PopHit
_TEXT	ENDS
PUBLIC	??_C@_1CAK@KINP@?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?3?$AA?$CF?$AA?4?$AA1?$AAf?$AAm?$AAs?$AA?5?$AA?$CI?$AAs?$AAu?$AAr?$AAf?$AA?$DN?$AA?$CF@ ; `string'
PUBLIC	??_C@_1KI@FDIG@?$AA?5?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?1?$AAB@ ; `string'
PUBLIC	__real@408f400000000000
EXTRN	__imp_?appSprintf@@YAHPAGPBGZZ:NEAR
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT ??_C@_1CAK@KINP@?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?3?$AA?$CF?$AA?4?$AA1?$AAf?$AAm?$AAs?$AA?5?$AA?$CI?$AAs?$AAu?$AAr?$AAf?$AA?$DN?$AA?$CF@
_DATA	SEGMENT
??_C@_1CAK@KINP@?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?3?$AA?$CF?$AA?4?$AA1?$AAf?$AAm?$AAs?$AA?5?$AA?$CI?$AAs?$AAu?$AAr?$AAf?$AA?$DN?$AA?$CF@ DB 't'
	DB	00H, 'o', 00H, 't', 00H, 'a', 00H, 'l', 00H, ':', 00H, '%', 00H
	DB	'.', 00H, '1', 00H, 'f', 00H, 'm', 00H, 's', 00H, ' ', 00H, '('
	DB	00H, 's', 00H, 'u', 00H, 'r', 00H, 'f', 00H, '=', 00H, '%', 00H
	DB	'0', 00H, '4', 00H, 'i', 00H, ',', 00H, ' ', 00H, '%', 00H, '0'
	DB	00H, '3', 00H, '.', 00H, '1', 00H, 'f', 00H, 'm', 00H, 's', 00H
	DB	')', 00H, ' ', 00H, '(', 00H, 'p', 00H, 'o', 00H, 'l', 00H, 'y'
	DB	00H, '=', 00H, '%', 00H, '0', 00H, '5', 00H, 'i', 00H, ',', 00H
	DB	' ', 00H, '%', 00H, '.', 00H, '1', 00H, 'f', 00H, 'm', 00H, 's'
	DB	00H, ' ', 00H, '(', 00H, 'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H
	DB	'e', 00H, ':', 00H, '%', 00H, '1', 00H, '.', 00H, 'f', 00H, 'm'
	DB	00H, 's', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, '%', 00H, '.', 00H, '1'
	DB	00H, 'f', 00H, 'm', 00H, 's', 00H, ',', 00H, ' ', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'S', 00H, 'e'
	DB	00H, 't', 00H, 'u', 00H, 'p', 00H, ':', 00H, '%', 00H, '1', 00H
	DB	'.', 00H, 'f', 00H, 'm', 00H, 's', 00H, ' ', 00H, '(', 00H, 'L'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, ':', 00H, '%', 00H, 'i', 00H
	DB	' ', 00H, '%', 00H, '1', 00H, '.', 00H, 'f', 00H, 'm', 00H, 's'
	DB	00H, ')', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w', 00H
	DB	'P', 00H, 'r', 00H, 'i', 00H, 'm', 00H, ':', 00H, '%', 00H, '.'
	DB	00H, '1', 00H, 'f', 00H, 'm', 00H, 's', 00H, ')', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'i', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 's'
	DB	00H, 'k', 00H, 'e', 00H, 'd', 00H, ')', 00H, ')', 00H, ' ', 00H
	DB	'(', 00H, 't', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '=', 00H, '%'
	DB	00H, 'i', 00H, ',', 00H, ' ', 00H, '%', 00H, '.', 00H, '1', 00H
	DB	'f', 00H, 'm', 00H, 's', 00H, ')', 00H, ' ', 00H, '(', 00H, 'p'
	DB	00H, 'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'l', 00H
	DB	'e', 00H, 's', 00H, '=', 00H, '%', 00H, 'i', 00H, ',', 00H, ' '
	DB	00H, '%', 00H, '.', 00H, '1', 00H, 'f', 00H, 'm', 00H, 's', 00H
	DB	' ', 00H, '(', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'h', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, 's', 00H, ':', 00H, '%', 00H, 'i'
	DB	00H, ',', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'c', 00H, 'c', 00H
	DB	' ', 00H, 'm', 00H, 'i', 00H, 's', 00H, 's', 00H, 'e', 00H, 's'
	DB	00H, ':', 00H, '%', 00H, 'i', 00H, ')', 00H, ')', 00H, ' ', 00H
	DB	'(', 00H, 'b', 00H, 'e', 00H, 'a', 00H, 'm', 00H, 's', 00H, '='
	DB	00H, '%', 00H, 'i', 00H, ',', 00H, ' ', 00H, '%', 00H, '.', 00H
	DB	'1', 00H, 'f', 00H, 'm', 00H, 's', 00H, ')', 00H, ' ', 00H, 't'
	DB	00H, 'e', 00H, 'x', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, 's', 00H, '=', 00H, '%', 00H, 'i', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1KI@FDIG@?$AA?5?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?1?$AAB@
_DATA	SEGMENT
??_C@_1KI@FDIG@?$AA?5?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?1?$AAB@ DB ' '
	DB	00H, 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	':', 00H, '%', 00H, 's', 00H, ' ', 00H, '(', 00H, 'A', 00H, 'c'
	DB	00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '/', 00H, 'B', 00H
	DB	'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'R'
	DB	00H, 'a', 00H, 'm', 00H, ':', 00H, '%', 00H, 'i', 00H, 'K', 00H
	DB	'/', 00H, '%', 00H, 'i', 00H, 'K', 00H, ',', 00H, ' ', 00H, 't'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, ':', 00H, '%', 00H, 'i', 00H, '/', 00H, '%', 00H, 'i'
	DB	00H, ')', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 's', 00H
	DB	':', 00H, '%', 00H, 'i', 00H, ' ', 00H, '(', 00H, 'u', 00H, 'p'
	DB	00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, ':', 00H
	DB	'%', 00H, 'i', 00H, ',', 00H, ' ', 00H, '%', 00H, '.', 00H, '1'
	DB	00H, 'f', 00H, 'm', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?GetStats@UD3DRenderDevice@@UAIXPAG@Z
_TEXT	SEGMENT
?GetStats@UD3DRenderDevice@@UAIXPAG@Z PROC NEAR		; UD3DRenderDevice::GetStats, COMDAT
; _this$ = ecx
; _Result$ = edx

; 4140 : 	{

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, edx

; 4141 : 		VALIDATE;
; 4142 : 
; 4143 : 		*Result=0;

	mov	WORD PTR [edi], 0

; 4144 : 		appSprintf
; 4145 : 		(
; 4146 : 			Result,
; 4147 : 			TEXT("total:%.1fms (surf=%04i, %03.1fms) (poly=%05i, %.1fms (Queue:%1.fms Render: %.1fms, VertexSetup:%1.fms (Lock:%i %1.fms) DrawPrim:%.1fms) (%i masked)) (tile=%i, %.1fms) (particles=%i, %.1fms (texture changes:%i, succ misses:%i)) (beams=%i, %.1fms) texuploads=%i"),
; 4148 : 			GSecondsPerCycle * 1000 *(Stats.SurfTime+Stats.PolyTime+Stats.TileTime+Stats.ParticleTime+Stats.BeamTime),
; 4149 : 			Stats.Surfs,
; 4150 : 			GSecondsPerCycle * 1000 * Stats.SurfTime,
; 4151 : 			Stats.Polys,
; 4152 : 			GSecondsPerCycle * 1000 * Stats.PolyTime,
; 4153 : 			GSecondsPerCycle * 1000 * Stats.QueueTime,
; 4154 : 			GSecondsPerCycle * 1000 * Stats.D3DVertexRender,
; 4155 : 			GSecondsPerCycle * 1000 * Stats.D3DVertexSetup,
; 4156 : 			Stats.VBLocks,
; 4157 : 			GSecondsPerCycle * 1000 * Stats.D3DVertexLock,
; 4158 : 			GSecondsPerCycle * 1000 * Stats.D3DPolyTime,
; 4159 : 			Stats.MaskedPolys,
; 4160 : 			Stats.Tiles,
; 4161 : 			GSecondsPerCycle * 1000 * Stats.TileTime,
; 4162 : 			Stats.Particles,
; 4163 : 			GSecondsPerCycle * 1000 * Stats.ParticleTime,			
; 4164 : 			Stats.ParticleTextureChanges,
; 4165 : 			Stats.SuccessorMisses,
; 4166 : 			Stats.Beams,
; 4167 : 			GSecondsPerCycle * 1000 * Stats.BeamTime,			
; 4168 : 			Stats.TexUploads
; 4169 : 		);

	mov	eax, DWORD PTR [esi+19632]
	mov	ecx, DWORD PTR [esi+19640]
	mov	edx, DWORD PTR [esi+19636]
	mov	ebp, DWORD PTR [esi+19692]
	mov	DWORD PTR -16+[esp+40], eax
	mov	eax, DWORD PTR [esi+19624]
	mov	DWORD PTR -20+[esp+40], eax
	mov	eax, DWORD PTR [esi+19704]
	push	eax
	mov	eax, DWORD PTR __imp_?GSecondsPerCycle@@3NA
	sub	esp, 8
	mov	DWORD PTR -12+[esp+52], ecx
	fild	DWORD PTR -12+[esp+52]
	mov	DWORD PTR -8+[esp+52], edx
	mov	ebx, DWORD PTR [esi+19628]
	mov	DWORD PTR -4+[esp+52], ebx
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	ebp
	fild	DWORD PTR -8+[esp+56]
	mov	ebp, DWORD PTR [esi+19696]
	push	ebp
	mov	ebp, DWORD PTR [esi+19688]
	fmul	QWORD PTR [eax]
	push	ebp
	mov	ebp, DWORD PTR [esi+19684]
	sub	esp, 8
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	ebp
	fild	DWORD PTR -16+[esp+76]
	mov	ebp, DWORD PTR [esi+19676]
	sub	esp, 8
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	ebp
	fild	DWORD PTR [esi+19648]
	mov	ebp, DWORD PTR [esi+19672]
	push	ebp
	mov	ebp, DWORD PTR [esi+19708]
	fmul	QWORD PTR [eax]
	sub	esp, 16					; 00000010H
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp+8]
	fild	DWORD PTR [esi+19660]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	ebp
	fild	DWORD PTR [esi+19656]
	sub	esp, 32					; 00000020H
	mov	ebp, DWORD PTR [esi+19668]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp+24]
	fild	DWORD PTR [esi+19652]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp+16]
	fild	DWORD PTR [esi+19644]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp+8]
	fild	DWORD PTR -4+[esp+144]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	ebp
	fild	DWORD PTR -20+[esp+148]
	sub	esp, 8
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	mov	ebp, DWORD PTR [esi+19664]
	fstp	QWORD PTR [esp]
	push	ebp
	mov	ebp, DWORD PTR -20+[esp+160]
	add	ebp, ebx
	add	ebp, DWORD PTR -16+[esp+160]
	mov	ebx, DWORD PTR __imp_?appSprintf@@YAHPAGPBGZZ
	add	ebp, edx
	add	ebp, ecx
	mov	DWORD PTR -4+[esp+160], ebp
	fild	DWORD PTR -4+[esp+160]
	sub	esp, 8
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	OFFSET FLAT:??_C@_1CAK@KINP@?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?3?$AA?$CF?$AA?4?$AA1?$AAf?$AAm?$AAs?$AA?5?$AA?$CI?$AAs?$AAu?$AAr?$AAf?$AA?$DN?$AA?$CF@ ; `string'
	push	edi
	call	ebx

; 4170 : 
; 4171 : 		for( FPixFormat* Fmt=FirstPixelFormat; Fmt; Fmt=Fmt->Next )

	mov	esi, DWORD PTR [esi+16988]
	add	esp, 136				; 00000088H
	test	esi, esi
	je	SHORT $L124646
	mov	ebp, DWORD PTR __imp_?appStrlen@@YAHPBG@Z
$L124644:

; 4172 : 			appSprintf
; 4173 : 			(
; 4174 : 				Result + appStrlen(Result),
; 4175 : 				TEXT(" Format:%s (Active/Binned Ram:%iK/%iK, textures:%i/%i) sets:%i (uploads:%i, %.1fms)"),
; 4176 : 				Fmt->Desc,
; 4177 : 				Fmt->ActiveRAM/1024,
; 4178 : 				Fmt->BinnedRAM/1024,
; 4179 : 				Fmt->Active,
; 4180 : 				Fmt->Binned,
; 4181 : 				Fmt->Sets,
; 4182 : 				Fmt->Uploads,
; 4183 : 				Fmt->UploadCycles * GSecondsPerCycle * 1000.f
; 4184 : 			);

	fild	DWORD PTR [esi+48]
	mov	ecx, DWORD PTR __imp_?GSecondsPerCycle@@3NA
	mov	edx, DWORD PTR [esi+44]
	mov	eax, DWORD PTR [esi+40]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [esi+20]
	sub	esp, 8
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	edx
	mov	edx, DWORD PTR [esi+32]
	push	eax
	mov	eax, DWORD PTR [esi+24]
	push	ecx
	push	edx
	cdq
	and	edx, 1023				; 000003ffH
	add	eax, edx
	sar	eax, 10					; 0000000aH
	push	eax
	mov	eax, DWORD PTR [esi+36]
	cdq
	and	edx, 1023				; 000003ffH
	add	eax, edx
	sar	eax, 10					; 0000000aH
	push	eax
	mov	eax, DWORD PTR [esi+12]
	push	eax
	push	OFFSET FLAT:??_C@_1KI@FDIG@?$AA?5?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?1?$AAB@ ; `string'
	push	edi
	call	ebp
	lea	ecx, DWORD PTR [edi+eax*2]
	add	esp, 4
	push	ecx
	call	ebx
	mov	esi, DWORD PTR [esi+8]
	add	esp, 44					; 0000002cH
	test	esi, esi
	jne	SHORT $L124644
$L124646:

; 4185 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetStats@UD3DRenderDevice@@UAIXPAG@Z ENDP		; UD3DRenderDevice::GetStats
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?ClearZ@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT
?ClearZ@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::ClearZ, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 4188 : 		VALIDATE;
; 4189 : 
; 4190 : 		// Clear only the Z-buffer.
; 4191 : 		Direct3DDevice8->Clear( 0, NULL, D3DCLEAR_ZBUFFER|D3DCLEAR_STENCIL, 0, 1.0, 0 );

	mov	eax, DWORD PTR [ecx+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	1065353216				; 3f800000H
	push	0
	push	6
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+144]

; 4192 : 
; 4193 : 	}

	ret	0
?ClearZ@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z ENDP	; UD3DRenderDevice::ClearZ
_TEXT	ENDS
PUBLIC	??_C@_1PM@KNH@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1KE@NMAC@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1NI@LHNJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1LE@BAFJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
;	COMDAT ??_C@_1PM@KNH@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1PM@KNH@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'(', 00H, 'h', 00H, '=', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, '3', 00H, 'D', 00H, 'D', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '8', 00H, '-', 00H, '>'
	DB	00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 'S', 00H, 'u'
	DB	00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H, '(', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 'e', 00H, 'w', 00H, 'p', 00H, 'o'
	DB	00H, 'r', 00H, 't', 00H, 'X', 00H, ',', 00H, ' ', 00H, 'V', 00H
	DB	'i', 00H, 'e', 00H, 'w', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't'
	DB	00H, 'Y', 00H, ',', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H
	DB	'F', 00H, 'M', 00H, 'T', 00H, '_', 00H, 'A', 00H, '8', 00H, 'R'
	DB	00H, '8', 00H, 'G', 00H, '8', 00H, 'B', 00H, '8', 00H, ',', 00H
	DB	' ', 00H, '&', 00H, 'T', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 'S'
	DB	00H, 'c', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '%', 00H
	DB	's', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1KE@NMAC@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1KE@NMAC@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'(', 00H, 'h', 00H, '=', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, '3', 00H, 'D', 00H, 'D', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '8', 00H, '-', 00H, '>'
	DB	00H, 'G', 00H, 'e', 00H, 't', 00H, 'F', 00H, 'r', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, '(', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'm', 00H
	DB	'p', 00H, 'S', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'n'
	DB	00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, ')', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1NI@LHNJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1NI@LHNJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'(', 00H, 'h', 00H, '=', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, '3', 00H, 'D', 00H, 'D', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '8', 00H, '-', 00H, '>'
	DB	00H, 'G', 00H, 'e', 00H, 't', 00H, 'B', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, '(', 00H, '0', 00H, ',', 00H, ' ', 00H, 'D', 00H, '3', 00H
	DB	'D', 00H, 'B', 00H, 'A', 00H, 'C', 00H, 'K', 00H, 'B', 00H, 'U'
	DB	00H, 'F', 00H, 'F', 00H, 'E', 00H, 'R', 00H, '_', 00H, 'T', 00H
	DB	'Y', 00H, 'P', 00H, 'E', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'N'
	DB	00H, 'O', 00H, ',', 00H, ' ', 00H, '&', 00H, 'T', 00H, 'e', 00H
	DB	'm', 00H, 'p', 00H, 'S', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'e'
	DB	00H, 'n', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'r', 00H, ')', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1LE@BAFJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1LE@BAFJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'(', 00H, 'T', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 'S', 00H, 'c'
	DB	00H, 'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, 'B', 00H, 'u', 00H
	DB	'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'L'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, 'R', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '(', 00H, '&', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k'
	DB	00H, 'e', 00H, 'd', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	',', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ',', 00H, 'D'
	DB	00H, '3', 00H, 'D', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'D', 00H, 'O', 00H, 'N'
	DB	00H, 'L', 00H, 'Y', 00H, ')', 00H, ')', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?ReadPixels@UD3DRenderDevice@@UAIXPAVFColor@@H@Z
_TEXT	SEGMENT
_TempScreenBuffer$ = -332
_LockedRect$ = -320
_GammaCorrect$ = -256
_Index$ = -328
_X$ = -344
_Y$ = -348
_Desc$124705 = -288
_rl$124706 = -312
_rr$124707 = -300
_gl$124708 = -304
_gr$124709 = -308
_bl$124710 = -328
_br$124711 = -324
_GBitMask$124714 = -336
_BBitMask$124715 = -340
_BitCount$124716 = -348
_Src$124751 = -352
_Pixels$ = -324
_BackBuffer$ = 8
_Src$124763 = -352
_Extra$124765 = -296
_Src$124777 = -352
?ReadPixels@UD3DRenderDevice@@UAIXPAVFColor@@H@Z PROC NEAR ; UD3DRenderDevice::ReadPixels, COMDAT
; _this$ = ecx
; _Pixels$ = edx

; 4195 : 	{

	sub	esp, 352				; 00000160H

; 4196 : 		VALIDATE;
; 4197 : 
; 4198 : 		IDirect3DSurface8*	TempScreenBuffer;
; 4199 : 	
; 4200 : 		if (!BackBuffer)

	mov	eax, DWORD PTR _BackBuffer$[esp+348]
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
	test	eax, eax

; 4201 : 		{
; 4202 : 			// Create the temp surface to hold the front buffer
; 4203 : 			D3D_CHECK((h=Direct3DDevice8->CreateImageSurface( ViewportX, ViewportY, D3DFMT_A8R8G8B8, &TempScreenBuffer )));

	mov	eax, DWORD PTR [edi+19124]
	mov	DWORD PTR _Pixels$[esp+368], edx
	jne	$L124653
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _TempScreenBuffer$[esp+368]
	push	edx
	mov	edx, DWORD PTR [edi+16764]
	push	21					; 00000015H
	push	edx
	mov	edx, DWORD PTR [edi+16760]
	push	edx
	push	eax
	call	DWORD PTR [ecx+108]
	test	eax, eax
	mov	ebx, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	esi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	SHORT $L124655
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	4203					; 0000106bH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	esi
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PM@KNH@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	ebx
	add	esp, 20					; 00000014H
$L124655:

; 4204 : 
; 4205 : 			// Fill the temporary surface with the contents of the front buffer.
; 4206 : 			D3D_CHECK((h=Direct3DDevice8->GetFrontBuffer( TempScreenBuffer )));

	mov	ecx, DWORD PTR _TempScreenBuffer$[esp+368]
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	eax
	call	DWORD PTR [edx+120]
	test	eax, eax
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	$L124671
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	4206					; 0000106eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	esi
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1KE@NMAC@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'

; 4207 : 		}
; 4208 : 		else

	jmp	SHORT $L144133
$L124653:

; 4209 : 		{
; 4210 : 			EndScene();

	dec	DWORD PTR [edi+675184]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]

; 4211 : 
; 4212 : 			// Get a pointer to the back buffer
; 4213 : 			D3D_CHECK((h=Direct3DDevice8->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &TempScreenBuffer)));

	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _TempScreenBuffer$[esp+368]
	push	ecx
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+64]
	test	eax, eax
	mov	ebx, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	esi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	SHORT $L124671
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	4213					; 00001075H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	esi
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1NI@LHNJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
$L144133:
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	eax, DWORD PTR [edx]
	push	eax
	call	ebx
	add	esp, 20					; 00000014H
$L124671:

; 4214 : 		}
; 4215 : 
; 4216 : 		// Lock the temporary surface.
; 4217 : 		D3DLOCKED_RECT	LockedRect;
; 4218 : 		memset(&LockedRect,0,sizeof(LockedRect));
; 4219 : 
; 4220 : 		D3D_CHECK((TempScreenBuffer->LockRect(&LockedRect,NULL,D3DLOCK_READONLY)));

	mov	eax, DWORD PTR _TempScreenBuffer$[esp+368]
	xor	ecx, ecx
	mov	DWORD PTR _LockedRect$[esp+368], ecx
	mov	ebp, 16					; 00000010H
	push	ebp
	push	ecx
	mov	DWORD PTR _LockedRect$[esp+380], ecx
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _LockedRect$[esp+376]
	push	ecx
	push	eax
	call	DWORD PTR [edx+36]
	test	eax, eax
	jge	SHORT $L124678
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	4220					; 0000107cH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	esi
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1LE@BAFJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	ebx
	add	esp, 20					; 00000014H
$L124678:

; 4221 : 
; 4222 : 		// Compute gamma correction.
; 4223 : 		BYTE	GammaCorrect[256];
; 4224 : 		INT		Index;
; 4225 : 
; 4226 : 		if(DeviceCaps8.Caps2 & D3DCAPS2_FULLSCREENGAMMA)

	test	DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+12, 131072 ; 00020000H
	je	SHORT $L124686

; 4227 : 		{
; 4228 : 			//FLOAT Gamma = Viewport->GetOuterUClient()->Gamma;
; 4229 : 			FLOAT Brightness = Viewport->GetOuterUClient()->Brightness;

	mov	ecx, DWORD PTR [edi+48]
	mov	edx, DWORD PTR [ecx+24]
	fld	DWORD PTR [edx+112]

; 4230 : 			//FLOAT Contrast = Viewport->GetOuterUClient()->Contrast;
; 4231 : 
; 4232 : 			if(!Brightness) Brightness=0.01;

	fcom	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L124688
	fstp	ST(0)
	fld	DWORD PTR __real@3c23d70a
$L124688:
	fdivr	QWORD PTR __real@3ff0000000000000

; 4233 : 			for(Index = 0;Index < 256;Index++)

	xor	esi, esi
	mov	DWORD PTR _Index$[esp+368], esi
	fstp	QWORD PTR -296+[esp+368]
$L124689:

; 4234 : 				GammaCorrect[Index] = Clamp<INT>(appPow(Index/255.0,1.0/Brightness)*65535.0,0,65535);

	fild	DWORD PTR _Index$[esp+368]
	fmul	QWORD PTR __real@3f70101010101010
	fld	QWORD PTR -296+[esp+368]
	call	__CIpow
	fmul	QWORD PTR __real@40efffe000000000
	call	__ftol
	test	eax, eax
	jge	SHORT $L144081
	xor	eax, eax
	jmp	SHORT $L144080
$L144081:
	cmp	eax, 65535				; 0000ffffH
	jl	SHORT $L144080
	mov	eax, 65535				; 0000ffffH
$L144080:
	mov	BYTE PTR _GammaCorrect$[esp+esi+368], al
	inc	esi
	cmp	esi, 256				; 00000100H
	mov	DWORD PTR _Index$[esp+368], esi
	jl	SHORT $L124689

; 4235 : 
; 4236 : 				//GammaCorrect[Index] = Clamp<INT>( appRound( (Contrast+0.5f)*appPow(Index/255.f,1.0f/Gamma)*65535.f + (Brightness-0.5f)*32768.f - Contrast*32768.f + 16384.f ) / 256, 0, 255 );
; 4237 : 		}
; 4238 : 		else

	jmp	SHORT $L124700
$L124686:

; 4239 : 		{
; 4240 : 			for(Index = 0;Index < 256;Index++)

	xor	eax, eax

; 4396 : 
; 4397 : 	}

	npad	4
$L124698:

; 4241 : 				GammaCorrect[Index] = Index;

	mov	BYTE PTR _GammaCorrect$[esp+eax+368], al
	inc	eax
	cmp	eax, 256				; 00000100H
	jl	SHORT $L124698
$L124700:

; 4242 : 		}
; 4243 : 		
; 4244 : 
; 4245 : 		// Copy the contents of the temporary surface to the destination.
; 4246 : 		FColor*	Dest = Pixels;
; 4247 : 		INT		X, Y;
; 4248 : 
; 4249 : 		if (BackBuffer)

	mov	eax, DWORD PTR _BackBuffer$[esp+364]
	mov	esi, DWORD PTR _Pixels$[esp+368]

; 4250 : 		{
; 4251 : 			D3DSURFACE_DESC	Desc;
; 4252 : 			DWORD			rl, rr, gl, gr, bl, br, mask;
; 4253 : 			DWORD			RBitMask = 0, GBitMask = 0, BBitMask = 0, BitCount = 0;

	xor	ebx, ebx
	test	eax, eax
	je	$L124704

; 4254 : 			DWORD			R, G, B;
; 4255 : 
; 4256 : 			TempScreenBuffer->GetDesc(&Desc);

	mov	eax, DWORD PTR _TempScreenBuffer$[esp+368]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _Desc$124705[esp+368]
	push	edx
	push	eax
	mov	DWORD PTR _GBitMask$124714[esp+376], ebx
	mov	DWORD PTR _BBitMask$124715[esp+376], ebx
	mov	DWORD PTR _BitCount$124716[esp+376], ebx
	call	DWORD PTR [ecx+32]

; 4257 : 
; 4258 : 			switch (Desc.Format)
; 4259 : 			{

	mov	eax, DWORD PTR _Desc$124705[esp+368]
	add	eax, -20				; ffffffecH
	cmp	eax, 5
	ja	SHORT $L124721
	jmp	DWORD PTR $L144135[eax*4]
$L124724:

; 4260 : 				case D3DFMT_R8G8B8:
; 4261 : 				{
; 4262 : 					RBitMask = 0xff0000;

	mov	ebx, 16711680				; 00ff0000H

; 4263 : 					GBitMask = 0x00ff00;

	mov	DWORD PTR _GBitMask$124714[esp+368], 65280 ; 0000ff00H

; 4264 : 					BBitMask = 0x0000ff;

	mov	DWORD PTR _BBitMask$124715[esp+368], 255 ; 000000ffH

; 4265 : 					BitCount = 24;

	mov	DWORD PTR _BitCount$124716[esp+368], 24	; 00000018H

; 4266 : 					break;

	jmp	SHORT $L124721
$L124725:

; 4267 : 				}
; 4268 : 				case D3DFMT_A8R8G8B8:
; 4269 : 				case D3DFMT_X8R8G8B8:
; 4270 : 				{
; 4271 : 					RBitMask = 0xff0000;

	mov	ebx, 16711680				; 00ff0000H

; 4272 : 					GBitMask = 0x00ff00;

	mov	DWORD PTR _GBitMask$124714[esp+368], 65280 ; 0000ff00H

; 4273 : 					BBitMask = 0x0000ff;

	mov	DWORD PTR _BBitMask$124715[esp+368], 255 ; 000000ffH

; 4274 : 					BitCount = 32;

	mov	DWORD PTR _BitCount$124716[esp+368], 32	; 00000020H

; 4275 : 					break;

	jmp	SHORT $L124721
$L124726:

; 4276 : 				}
; 4277 : 				case D3DFMT_R5G6B5:
; 4278 : 				{
; 4279 : 					RBitMask = (31<<11);

	mov	ebx, 63488				; 0000f800H

; 4280 : 					GBitMask = (63<<5 );

	mov	DWORD PTR _GBitMask$124714[esp+368], 2016 ; 000007e0H

; 4281 : 					BBitMask = (31<<0 );
; 4282 : 					BitCount = 16;
; 4283 : 					break;

	jmp	SHORT $L144134
$L124727:

; 4284 : 				}
; 4285 : 				case D3DFMT_X1R5G5B5:
; 4286 : 				case D3DFMT_A1R5G5B5:
; 4287 : 				{
; 4288 : 					RBitMask = (31<<10);

	mov	ebx, 31744				; 00007c00H

; 4289 : 					GBitMask = (31<<5 );

	mov	DWORD PTR _GBitMask$124714[esp+368], 992 ; 000003e0H
$L144134:

; 4290 : 					BBitMask = (31<<0 );

	mov	DWORD PTR _BBitMask$124715[esp+368], 31	; 0000001fH

; 4291 : 					BitCount = 16;

	mov	DWORD PTR _BitCount$124716[esp+368], ebp
$L124721:

; 4292 : 					break;
; 4293 : 				}
; 4294 : 			}
; 4295 : 
; 4296 : 			// Compute needed bit shifts.
; 4297 : 			for( rr=0, mask=RBitMask; !(mask&1); mask>>=1, ++rr );

	xor	ecx, ecx
	test	bl, 1
	mov	DWORD PTR _rr$124707[esp+368], ecx
	mov	eax, ebx
	jne	SHORT $L124730
$L124728:
	shr	eax, 1
	inc	ecx
	test	al, 1
	je	SHORT $L124728
	mov	DWORD PTR _rr$124707[esp+368], ecx
$L124730:

; 4298 : 			for( rl=8; mask&1; mask>>=1, --rl );

	test	al, 1
	mov	ecx, 8
	mov	DWORD PTR _rl$124706[esp+368], ecx
	je	SHORT $L124733

; 4396 : 
; 4397 : 	}

	npad	6
$L124731:

; 4298 : 			for( rl=8; mask&1; mask>>=1, --rl );

	shr	eax, 1
	dec	ecx
	test	al, 1
	jne	SHORT $L124731
	mov	DWORD PTR _rl$124706[esp+368], ecx
$L124733:

; 4299 : 			for( gr=0, mask=GBitMask; !(mask&1); mask>>=1, ++gr );

	mov	eax, DWORD PTR _GBitMask$124714[esp+368]
	xor	ebp, ebp
	test	al, 1
	mov	DWORD PTR _gr$124709[esp+368], ebp
	jne	SHORT $L124736

; 4396 : 
; 4397 : 	}

	npad	7
$L124734:

; 4299 : 			for( gr=0, mask=GBitMask; !(mask&1); mask>>=1, ++gr );

	shr	eax, 1
	inc	ebp
	test	al, 1
	je	SHORT $L124734
	mov	DWORD PTR _gr$124709[esp+368], ebp
$L124736:

; 4300 : 			for( gl=8; mask&1; mask>>=1, --gl );

	test	al, 1
	mov	ecx, 8
	mov	DWORD PTR _gl$124708[esp+368], ecx
	je	SHORT $L124739
$L124737:
	shr	eax, 1
	dec	ecx
	test	al, 1
	jne	SHORT $L124737
	mov	DWORD PTR _gl$124708[esp+368], ecx
$L124739:

; 4301 : 			for( br=0, mask=BBitMask; !(mask&1); mask>>=1, ++br );

	mov	eax, DWORD PTR _BBitMask$124715[esp+368]
	xor	ebp, ebp
	xor	edx, edx
	test	al, 1
	mov	DWORD PTR _br$124711[esp+368], ebp
	jne	SHORT $L124742
$L124740:
	shr	eax, 1
	inc	ebp
	test	al, 1
	je	SHORT $L124740
	mov	DWORD PTR _br$124711[esp+368], ebp
$L124742:

; 4302 : 			for( bl=8; mask&1; mask>>=1, --bl );

	test	al, 1
	mov	ecx, 8
	mov	DWORD PTR _bl$124710[esp+368], ecx
	je	SHORT $L124745

; 4396 : 
; 4397 : 	}

	npad	5
$L124743:

; 4302 : 			for( bl=8; mask&1; mask>>=1, --bl );

	shr	eax, 1
	dec	ecx
	test	al, 1
	jne	SHORT $L124743
	mov	DWORD PTR _bl$124710[esp+368], ecx
$L124745:

; 4303 : 
; 4304 : 			switch (BitCount)
; 4305 : 			{

	mov	eax, DWORD PTR _BitCount$124716[esp+368]
	cmp	eax, 16					; 00000010H
	je	$L124750
	cmp	eax, 24					; 00000018H
	je	$L124762
	cmp	eax, 32					; 00000020H
	jne	$L124793

; 4347 : 				}
; 4348 : 
; 4349 : 				case 32:
; 4350 : 				{
; 4351 : 					DWORD	*Src = (DWORD*) LockedRect.pBits;

	mov	ecx, DWORD PTR _LockedRect$[esp+372]

; 4352 : 					INT		Extra = (LockedRect.Pitch/sizeof(DWORD)) - ViewportX;

	mov	eax, DWORD PTR [edi+16760]

; 4353 : 				
; 4354 : 					for(Y = 0;Y < ViewportY;Y++)

	mov	edx, DWORD PTR [edi+16764]
	mov	DWORD PTR _Src$124777[esp+368], ecx
	mov	ecx, DWORD PTR _LockedRect$[esp+368]
	shr	ecx, 2
	sub	ecx, eax
	test	edx, edx
	mov	DWORD PTR _Y$[esp+368], 0
	jle	$L124793
	lea	edx, DWORD PTR [ecx*4]
	mov	DWORD PTR -296+[esp+368], edx
$L124781:

; 4355 : 					{
; 4356 : 						for(X = 0;X < ViewportX;X++)

	test	eax, eax
	mov	DWORD PTR _X$[esp+368], 0
	jle	SHORT $L124786

; 4396 : 
; 4397 : 	}

	npad	2
$L124784:

; 4357 : 						{		
; 4358 : 							R = (((*Src) & RBitMask) >> rr) << rl;

	mov	eax, DWORD PTR _Src$124777[esp+368]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _rr$124707[esp+368]
	mov	edx, eax
	and	edx, ebx
	shr	edx, cl
	mov	ecx, DWORD PTR _rl$124706[esp+368]

; 4359 : 							G = (((*Src) & GBitMask) >> gr) << gl;

	mov	ebp, eax

; 4360 : 							B = (((*Src) & BBitMask) >> br) << bl;
; 4361 : 
; 4362 : 							GET_COLOR_DWORD(*Dest++) = (R<<16)|(G<<8)|B;

	add	esi, 4
	shl	edx, cl
	and	ebp, DWORD PTR _GBitMask$124714[esp+368]
	mov	ecx, DWORD PTR _gr$124709[esp+368]
	shr	ebp, cl
	mov	ecx, DWORD PTR _gl$124708[esp+368]
	shl	edx, 8
	shl	ebp, cl
	and	eax, DWORD PTR _BBitMask$124715[esp+368]
	mov	ecx, DWORD PTR _br$124711[esp+368]
	shr	eax, cl
	mov	ecx, DWORD PTR _bl$124710[esp+368]
	or	edx, ebp
	shl	edx, 8
	shl	eax, cl
	mov	ecx, DWORD PTR _X$[esp+368]
	or	edx, eax

; 4363 : 							Src++;

	mov	eax, DWORD PTR _Src$124777[esp+368]
	add	eax, 4
	mov	DWORD PTR [esi-4], edx
	mov	DWORD PTR _Src$124777[esp+368], eax
	mov	eax, DWORD PTR [edi+16760]
	inc	ecx
	cmp	ecx, eax
	mov	DWORD PTR _X$[esp+368], ecx
	jl	SHORT $L124784
$L124786:

; 4364 : 						}
; 4365 : 			
; 4366 : 						Src += Extra;

	mov	ecx, DWORD PTR -296+[esp+368]
	mov	edx, DWORD PTR _Src$124777[esp+368]
	add	edx, ecx
	mov	ecx, DWORD PTR _Y$[esp+368]
	mov	DWORD PTR _Src$124777[esp+368], edx
	mov	edx, DWORD PTR [edi+16764]
	inc	ecx
	cmp	ecx, edx
	mov	DWORD PTR _Y$[esp+368], ecx
	jl	$L124781

; 4367 : 					}
; 4368 : 					break;

	jmp	$L124793
$L124762:

; 4324 : 					}
; 4325 : 					break;
; 4326 : 				}
; 4327 : 				case 24:
; 4328 : 				{
; 4329 : 					char	*Src = (char*) LockedRect.pBits;

	mov	eax, DWORD PTR _LockedRect$[esp+372]
	mov	DWORD PTR _Src$124763[esp+368], eax

; 4330 : 					INT		Extra = (LockedRect.Pitch - ViewportX*3);

	mov	eax, DWORD PTR [edi+16760]
	lea	ecx, DWORD PTR [eax+eax*2]
	mov	ebp, ecx
	mov	ecx, DWORD PTR _LockedRect$[esp+368]
	sub	ecx, ebp

; 4331 : 				
; 4332 : 					for(Y = 0;Y < ViewportY;Y++)

	cmp	DWORD PTR [edi+16764], edx
	mov	DWORD PTR _Extra$124765[esp+368], ecx
	mov	DWORD PTR _Y$[esp+368], edx
	jle	$L124793

; 4396 : 
; 4397 : 	}

	npad	3
$L124766:

; 4333 : 					{
; 4334 : 						for(X = 0;X < ViewportX;X++)

	test	eax, eax
	mov	DWORD PTR _X$[esp+368], 0
	jle	SHORT $L124771

; 4396 : 
; 4397 : 	}

	npad	4
$L124769:

; 4335 : 						{		
; 4336 : 							R = (((*((DWORD*)Src)) & RBitMask) >> rr) << rl;

	mov	edx, DWORD PTR _Src$124763[esp+368]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _rr$124707[esp+368]
	mov	edx, eax
	and	edx, ebx
	shr	edx, cl
	mov	ecx, DWORD PTR _rl$124706[esp+368]

; 4337 : 							G = (((*((DWORD*)Src)) & GBitMask) >> gr) << gl;

	mov	ebp, eax

; 4338 : 							B = (((*((DWORD*)Src)) & BBitMask) >> br) << bl;
; 4339 : 
; 4340 : 							GET_COLOR_DWORD(*Dest++) = (R<<16)|(G<<8)|B;

	add	esi, 4
	shl	edx, cl
	and	ebp, DWORD PTR _GBitMask$124714[esp+368]
	mov	ecx, DWORD PTR _gr$124709[esp+368]
	shr	ebp, cl
	mov	ecx, DWORD PTR _gl$124708[esp+368]
	shl	edx, 8
	shl	ebp, cl
	and	eax, DWORD PTR _BBitMask$124715[esp+368]
	mov	ecx, DWORD PTR _br$124711[esp+368]
	shr	eax, cl
	mov	ecx, DWORD PTR _bl$124710[esp+368]
	or	edx, ebp
	shl	edx, 8
	shl	eax, cl
	mov	ecx, DWORD PTR _X$[esp+368]
	or	edx, eax

; 4341 : 							Src+=3;

	mov	eax, DWORD PTR _Src$124763[esp+368]
	add	eax, 3
	mov	DWORD PTR [esi-4], edx
	mov	DWORD PTR _Src$124763[esp+368], eax
	mov	eax, DWORD PTR [edi+16760]
	inc	ecx
	cmp	ecx, eax
	mov	DWORD PTR _X$[esp+368], ecx
	jl	SHORT $L124769

; 4333 : 					{
; 4334 : 						for(X = 0;X < ViewportX;X++)

	mov	ecx, DWORD PTR _Extra$124765[esp+368]
$L124771:

; 4342 : 						}
; 4343 : 			
; 4344 : 						Src += Extra;

	mov	edx, DWORD PTR _Src$124763[esp+368]
	mov	ebp, DWORD PTR [edi+16764]
	add	edx, ecx
	mov	DWORD PTR _Src$124763[esp+368], edx
	mov	edx, DWORD PTR _Y$[esp+368]
	inc	edx
	cmp	edx, ebp
	mov	DWORD PTR _Y$[esp+368], edx
	jl	$L124766

; 4345 : 					}
; 4346 : 					break;

	jmp	$L124793
$L124750:

; 4306 : 				case 16:
; 4307 : 				{
; 4308 : 					WORD	*Src = (WORD*) LockedRect.pBits;

	mov	eax, DWORD PTR _LockedRect$[esp+372]

; 4309 : 					INT		Extra = (LockedRect.Pitch/sizeof(WORD)) - ViewportX;

	mov	ecx, DWORD PTR _LockedRect$[esp+368]

; 4310 : 				
; 4311 : 					for(Y = 0;Y < ViewportY;Y++)

	mov	ebp, DWORD PTR [edi+16764]
	mov	DWORD PTR _Src$124751[esp+368], eax
	mov	eax, DWORD PTR [edi+16760]
	shr	ecx, 1
	sub	ecx, eax
	cmp	ebp, edx
	mov	DWORD PTR _Y$[esp+368], edx
	jle	$L124793
	add	ecx, ecx
	mov	DWORD PTR -296+[esp+368], ecx

; 4396 : 
; 4397 : 	}

	npad	2

; 4310 : 				
; 4311 : 					for(Y = 0;Y < ViewportY;Y++)

$L124755:

; 4312 : 					{
; 4313 : 						for(X = 0;X < ViewportX;X++)

	test	eax, eax
	mov	DWORD PTR _X$[esp+368], 0
	jle	SHORT $L124760

; 4396 : 
; 4397 : 	}

	npad	4
$L124758:

; 4395 : 			BeginScene();

	mov	edx, DWORD PTR _Src$124751[esp+368]
	movzx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _rr$124707[esp+368]
	mov	edx, eax
	and	edx, ebx
	shr	edx, cl
	mov	ecx, DWORD PTR _rl$124706[esp+368]
	mov	ebp, eax
	add	esi, 4
	shl	edx, cl
	and	ebp, DWORD PTR _GBitMask$124714[esp+368]
	mov	ecx, DWORD PTR _gr$124709[esp+368]
	shr	ebp, cl
	mov	ecx, DWORD PTR _gl$124708[esp+368]
	shl	edx, 8
	shl	ebp, cl
	and	eax, DWORD PTR _BBitMask$124715[esp+368]
	mov	ecx, DWORD PTR _br$124711[esp+368]
	shr	eax, cl
	mov	ecx, DWORD PTR _bl$124710[esp+368]
	or	edx, ebp
	shl	edx, 8
	shl	eax, cl
	mov	ecx, DWORD PTR _X$[esp+368]
	or	edx, eax
	mov	eax, DWORD PTR _Src$124751[esp+368]
	add	eax, 2
	mov	DWORD PTR [esi-4], edx
	mov	DWORD PTR _Src$124751[esp+368], eax
	mov	eax, DWORD PTR [edi+16760]
	inc	ecx
	cmp	ecx, eax
	mov	DWORD PTR _X$[esp+368], ecx
	jl	SHORT $L124758
$L124760:

; 4314 : 						{		
; 4315 : 							R = (((*Src) & RBitMask) >> rr) << rl;
; 4316 : 							G = (((*Src) & GBitMask) >> gr) << gl;
; 4317 : 							B = (((*Src) & BBitMask) >> br) << bl;
; 4318 : 
; 4319 : 							GET_COLOR_DWORD(*Dest++) = (R<<16)|(G<<8)|B;
; 4320 : 							Src++;
; 4321 : 						}
; 4322 : 			
; 4323 : 						Src += Extra;

	mov	ecx, DWORD PTR -296+[esp+368]
	mov	edx, DWORD PTR _Src$124751[esp+368]
	add	edx, ecx
	mov	ecx, DWORD PTR _Y$[esp+368]
	mov	DWORD PTR _Src$124751[esp+368], edx
	mov	edx, DWORD PTR [edi+16764]
	inc	ecx
	cmp	ecx, edx
	mov	DWORD PTR _Y$[esp+368], ecx
	jl	$L124755

; 4369 : 				}
; 4370 : 			}
; 4371 : 		}
; 4372 : 		else

	jmp	SHORT $L124793
$L124704:

; 4373 : 		{
; 4374 : 			char*	Src = (char*) LockedRect.pBits;
; 4375 : 
; 4376 : 			for(Y = 0;Y < ViewportY;Y++)

	mov	ecx, DWORD PTR [edi+16764]
	test	ecx, ecx
	mov	eax, DWORD PTR _LockedRect$[esp+372]
	jle	SHORT $L124793
	mov	edx, DWORD PTR [edi+16760]
$L124791:

; 4377 : 			{
; 4378 : 				for(X = 0;X < ViewportX;X++)

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $L124796
$L124794:

; 4379 : 				{
; 4380 : 					GET_COLOR_DWORD(*Dest++) = *((DWORD*) Src);

	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [esi], edx
	mov	edx, DWORD PTR [edi+16760]
	add	esi, 4

; 4381 : 					Src += sizeof(DWORD);

	add	eax, 4
	inc	ecx
	cmp	ecx, edx
	jl	SHORT $L124794
$L124796:

; 4382 : 				}
; 4383 : 			
; 4384 : 				Src += (LockedRect.Pitch - (ViewportX * sizeof(DWORD)));

	mov	edx, DWORD PTR [edi+16760]
	mov	ebp, DWORD PTR _LockedRect$[esp+368]
	lea	ecx, DWORD PTR [edx*4]
	sub	ebp, ecx
	mov	ecx, DWORD PTR [edi+16764]
	add	eax, ebp
	inc	ebx
	cmp	ebx, ecx
	jl	SHORT $L124791
$L124793:

; 4385 : 			}
; 4386 : 		}
; 4387 : 		// Unlock the temporary surface.
; 4388 : 
; 4389 : 		TempScreenBuffer->UnlockRect();

	mov	eax, DWORD PTR _TempScreenBuffer$[esp+368]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+40]

; 4390 : 
; 4391 : 		// Release the temporary surface.
; 4392 : 		SafeRelease(TempScreenBuffer);

	mov	eax, DWORD PTR _TempScreenBuffer$[esp+368]
	test	eax, eax
	je	SHORT $L144087
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR _TempScreenBuffer$[esp+368], 0
$L144087:

; 4393 : 
; 4394 : 		if (BackBuffer)

	mov	eax, DWORD PTR _BackBuffer$[esp+364]
	test	eax, eax
	je	SHORT $L144091

; 4395 : 			BeginScene();

	inc	DWORD PTR [edi+675184]
	mov	edi, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [edi]
	push	edi
	call	DWORD PTR [edx+136]
$L144091:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 4396 : 
; 4397 : 	}

	add	esp, 352				; 00000160H
	ret	4
	npad	2
$L144135:
	DD	$L124724
	DD	$L124725
	DD	$L124725
	DD	$L124726
	DD	$L124727
	DD	$L124727
?ReadPixels@UD3DRenderDevice@@UAIXPAVFColor@@H@Z ENDP	; UD3DRenderDevice::ReadPixels
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?EndFlash@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT
_I$144278 = -172
_I$144288 = -172
_D3DColor$124813 = -176
_Vertices$124822 = -144
$T144143 = -160
$T144191 = -164
$T144198 = -176
$T144216 = -172
$T144234 = -168
$T144252 = -168
_I$144258 = -172
_I$144268 = -168
?EndFlash@UD3DRenderDevice@@UAIXXZ PROC NEAR		; UD3DRenderDevice::EndFlash, COMDAT
; _this$ = ecx

; 4399 : 	{

	sub	esp, 176				; 000000b0H
	push	esi
	mov	esi, ecx

; 4400 : 		VALIDATE;
; 4401 : 
; 4402 : 		if( FlashScale!=FVector(.5f,.5f,.5f) || FlashFog!=FVector(0,0,0) )

	mov	ecx, DWORD PTR [esi+19580]
	mov	eax, 1056964608				; 3f000000H
	cmp	ecx, eax
	jne	SHORT $L144169
	cmp	DWORD PTR [esi+19584], eax
	jne	SHORT $L144169
	cmp	DWORD PTR [esi+19588], eax
	jne	SHORT $L144169
	fld	DWORD PTR [esi+19592]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L144169
	fld	DWORD PTR [esi+19596]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L144169
	fld	DWORD PTR [esi+19600]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L144169
	fld	DWORD PTR [esi+19604]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L144169
	fld	DWORD PTR [esi+19608]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L124811
$L144169:

; 4403 : 		{
; 4404 : 			// Set up color.
; 4405 : 			FColor	 D3DColor = FColor(FPlane(FlashFog.X,FlashFog.Y,FlashFog.Z,Min(FlashScale.X*2.f,1.f)));					

	fld	DWORD PTR [esi+19580]
	fadd	ST(0), ST(0)
	fcom	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L144177
	fstp	DWORD PTR $T144191[esp+180]
	jmp	SHORT $L144178
$L144177:
	fstp	ST(0)
	mov	DWORD PTR $T144191[esp+180], 1065353216	; 3f800000H
$L144178:
	fld	DWORD PTR [esi+19596]
	fld	DWORD PTR [esi+19600]
	fstp	DWORD PTR $T144143[esp+184]
	fld	DWORD PTR [esi+19604]
	fstp	DWORD PTR $T144143[esp+188]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T144198[esp+180]
	fld	DWORD PTR $T144198[esp+180]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$144258[esp+180]
	mov	eax, DWORD PTR _I$144258[esp+180]
	test	eax, eax
	mov	ecx, 255				; 000000ffH
	jge	SHORT $L144264
	mov	BYTE PTR _D3DColor$124813[esp+180], 0
	jmp	SHORT $L144263
$L144264:
	cmp	eax, ecx
	mov	BYTE PTR _D3DColor$124813[esp+180], al
	jl	SHORT $L144263
	mov	BYTE PTR _D3DColor$124813[esp+180], cl
$L144263:
	fld	DWORD PTR $T144143[esp+184]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T144216[esp+180]
	fld	DWORD PTR $T144216[esp+180]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$144268[esp+180]
	mov	eax, DWORD PTR _I$144268[esp+180]
	test	eax, eax
	jge	SHORT $L144274
	mov	BYTE PTR _D3DColor$124813[esp+181], 0
	jmp	SHORT $L144273
$L144274:
	cmp	eax, ecx
	mov	BYTE PTR _D3DColor$124813[esp+181], al
	jl	SHORT $L144273
	mov	BYTE PTR _D3DColor$124813[esp+181], cl
$L144273:
	fld	DWORD PTR $T144143[esp+188]
	push	ebx
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T144234[esp+184]
	fld	DWORD PTR $T144234[esp+184]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$144278[esp+184]
	mov	ebx, DWORD PTR _I$144278[esp+184]
	test	ebx, ebx
	jge	SHORT $L144284
	xor	bl, bl
	jmp	SHORT $L144283
$L144284:
	cmp	ebx, ecx
	jl	SHORT $L144283
	mov	bl, cl
$L144283:
	fld	DWORD PTR $T144191[esp+184]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T144252[esp+184]
	fld	DWORD PTR $T144252[esp+184]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$144288[esp+184]
	mov	eax, DWORD PTR _I$144288[esp+184]
	push	ecx
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp

; 4406 : 			D3DCOLOR Color    = D3DCOLOR_RGBA(D3DColor.R, D3DColor.G, D3DColor.B, D3DColor.A);
; 4407 : 
; 4408 : 			// Initialize vertex array
; 4409 : 			FD3DScreenVertex Vertices[4];
; 4410 : 
; 4411 : 			Vertices[0].Position.X = 0;
; 4412 : 			Vertices[0].Position.Y = 0;
; 4413 : 			Vertices[0].Position.W = 0.5f;
; 4414 : 			Vertices[0].Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43 * 0.5f;

	fld	DWORD PTR [esi+19508]
	movzx	ecx, BYTE PTR _D3DColor$124813[esp+196]
	fmul	DWORD PTR __real@3f000000
	movzx	edx, BYTE PTR _D3DColor$124813[esp+197]
	fadd	DWORD PTR [esi+19492]
	movzx	eax, al
	fst	DWORD PTR _Vertices$124822[esp+204]
	shl	eax, 8
	or	eax, ecx
	xor	ecx, ecx
	mov	cl, bl
	shl	eax, 8
	or	eax, edx
	shl	eax, 8
	mov	DWORD PTR _Vertices$124822[esp+196], 0
	mov	DWORD PTR _Vertices$124822[esp+200], 0
	mov	DWORD PTR _Vertices$124822[esp+208], 1056964608 ; 3f000000H
	or	eax, ecx

; 4415 : 			GET_COLOR_DWORD(Vertices[0].Color) = Color;
; 4416 : 
; 4417 : 			Vertices[1].Position.X = 0;
; 4418 : 			Vertices[1].Position.Y = Viewport->SizeY;

	mov	ecx, DWORD PTR [esi+48]
	mov	DWORD PTR _Vertices$124822[esp+212], eax
	mov	DWORD PTR _Vertices$124822[esp+232], 0
	add	esp, 12					; 0000000cH
	fild	DWORD PTR [ecx+116]

; 4419 : 			Vertices[1].Position.W = 0.5f;

	mov	DWORD PTR _Vertices$124822[esp+232], 1056964608 ; 3f000000H

; 4420 : 			Vertices[1].Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43 * 0.5f;
; 4421 : 			GET_COLOR_DWORD(Vertices[1].Color) = Color;

	mov	DWORD PTR _Vertices$124822[esp+236], eax

; 4422 : 
; 4423 : 			Vertices[2].Position.X = Viewport->SizeX;
; 4424 : 			Vertices[2].Position.Y = Viewport->SizeY;
; 4425 : 			Vertices[2].Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43 * 0.5f;
; 4426 : 			Vertices[2].Position.W = 0.5f;
; 4427 : 			GET_COLOR_DWORD(Vertices[2].Color) = Color;
; 4428 : 
; 4429 : 			Vertices[3].Position.X = Viewport->SizeX;
; 4430 : 			Vertices[3].Position.Y = 0;
; 4431 : 			Vertices[3].Position.W = 0.5f;
; 4432 : 			Vertices[3].Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43 * 0.5f;
; 4433 : 			GET_COLOR_DWORD(Vertices[3].Color) = Color;			
; 4434 : 
; 4435 : 			
; 4436 : 			// Draw it.
; 4437 : 			SetBlending( PF_Translucent| PF_NoOcclude | PF_TwoSided, PFX_Clip );

	mov	ebx, 2
	fstp	DWORD PTR _Vertices$124822[esp+224]
	push	ebx
	mov	edx, 327				; 00000147H
	fst	DWORD PTR _Vertices$124822[esp+232]
	fild	DWORD PTR [ecx+112]
	fstp	DWORD PTR _Vertices$124822[esp+260]
	fild	DWORD PTR [ecx+116]
	mov	DWORD PTR _Vertices$124822[esp+272], 1056964608 ; 3f000000H
	mov	DWORD PTR _Vertices$124822[esp+276], eax
	fstp	DWORD PTR _Vertices$124822[esp+264]
	fst	DWORD PTR _Vertices$124822[esp+268]
	fild	DWORD PTR [ecx+112]
	mov	ecx, esi
	mov	DWORD PTR _Vertices$124822[esp+300], 0
	mov	DWORD PTR _Vertices$124822[esp+308], 1056964608 ; 3f000000H
	fstp	DWORD PTR _Vertices$124822[esp+296]
	mov	DWORD PTR _Vertices$124822[esp+312], eax
	fstp	DWORD PTR _Vertices$124822[esp+304]
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 4438 : 			//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4439 : 			//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );			
; 4440 : 			//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_SRCALPHA );
; 4441 : 			SetAlphaBlendEnable(TRUE);

	mov	eax, DWORD PTR [esi+675176]
	cmp	eax, 1
	jne	SHORT $L144332
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144331
$L144332:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675176], 1
$L144331:

; 4442 : 			SetSrcBlend(D3DBLEND_ONE);

	cmp	DWORD PTR [esi+675168], ebx
	jne	SHORT $L144340
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144338
$L144340:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675168], ebx
$L144338:

; 4443 : 			SetDstBlend(D3DBLEND_SRCALPHA);

	cmp	DWORD PTR [esi+675172], 5
	jne	SHORT $L144349
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144347
$L144349:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675172], 5
$L144347:

; 4444 : 
; 4445 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE ); // v 0.4

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 4446 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG2 );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 4447 : 			Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_ALWAYS );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]

; 4448 : 
; 4449 : 			Direct3DDevice8->SetVertexShader( FD3DScreenVertex::FVF );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	580					; 00000244H
	push	eax
	call	DWORD PTR [edx+304]

; 4450 : 			Direct3DDevice8->DrawPrimitiveUP( D3DPT_TRIANGLEFAN, 2, Vertices, sizeof(FD3DScreenVertex) );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	36					; 00000024H
	lea	edx, DWORD PTR _Vertices$124822[esp+188]
	push	edx
	push	ebx
	push	6
	push	eax
	call	DWORD PTR [ecx+288]

; 4451 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 4452 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 4453 : 			Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_LESSEQUAL );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]

; 4454 : 			SetBlending();

	push	0
	xor	edx, edx
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	pop	ebx
$L124811:
	pop	esi

; 4455 : 		}
; 4456 : 	}

	add	esp, 176				; 000000b0H
	ret	0
?EndFlash@UD3DRenderDevice@@UAIXXZ ENDP			; UD3DRenderDevice::EndFlash
_TEXT	ENDS
PUBLIC	__real@41800000
;	COMDAT __real@41800000
; File ..\..\Core\Inc\UnTemplate.h
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?SetZBias@UD3DRenderDevice@@QAIMM@Z
_TEXT	SEGMENT
_NewZBias$ = 8
_FormerZBias$ = -4
?SetZBias@UD3DRenderDevice@@QAIMM@Z PROC NEAR		; UD3DRenderDevice::SetZBias, COMDAT
; _this$ = ecx

; 4462 : 	{

	push	ecx

; 4463 : 		VALIDATE;
; 4464 : 
; 4465 : 		float FormerZBias=ZBias;
; 4466 : 
; 4467 : 		NewZBias=Clamp(NewZBias,0.f,16.f);

	fld	DWORD PTR _NewZBias$[esp]
	mov	eax, DWORD PTR [ecx+675164]
	fcomp	DWORD PTR __real@00000000
	mov	DWORD PTR _FormerZBias$[esp+4], eax
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L144368
	mov	DWORD PTR _NewZBias$[esp], 0
	jmp	SHORT $L144367
$L144368:
	fld	DWORD PTR _NewZBias$[esp]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L144367
	mov	DWORD PTR _NewZBias$[esp], 1098907648	; 41800000H
$L144367:

; 4468 : 		if(ZBias!=NewZBias || !CacheBlending)

	fld	DWORD PTR [ecx+675164]
	fcomp	DWORD PTR _NewZBias$[esp]
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L124838
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144373
$L124838:

; 4469 : 		{
; 4470 : 			ZBias=NewZBias;

	mov	edx, DWORD PTR _NewZBias$[esp]

; 4471 : 			Direct3DDevice8->SetRenderState(D3DRS_ZBIAS,ZBias);

	fld	DWORD PTR _NewZBias$[esp]
	push	esi
	mov	esi, DWORD PTR [ecx+19124]
	mov	DWORD PTR [ecx+675164], edx
	push	edi
	mov	edi, DWORD PTR [esi]
	call	__ftol
	push	eax
	push	47					; 0000002fH
	push	esi
	call	DWORD PTR [edi+200]
	pop	edi
	pop	esi
$L144373:

; 4472 : 		}
; 4473 : 
; 4474 : 		return FormerZBias;

	fld	DWORD PTR _FormerZBias$[esp+4]

; 4475 : 	}

	pop	ecx
	ret	4
?SetZBias@UD3DRenderDevice@@QAIMM@Z ENDP		; UD3DRenderDevice::SetZBias
_TEXT	ENDS
PUBLIC	??_C@_0DJ@JEFN@?$CINewSrcBlend?$DO0?$CJ?$CG?$CG?$CINewSrcBlend?$DM?$DND@ ; `string'
;	COMDAT ??_C@_0DJ@JEFN@?$CINewSrcBlend?$DO0?$CJ?$CG?$CG?$CINewSrcBlend?$DM?$DND@
_DATA	SEGMENT
??_C@_0DJ@JEFN@?$CINewSrcBlend?$DO0?$CJ?$CG?$CG?$CINewSrcBlend?$DM?$DND@ DB '('
	DB	'NewSrcBlend>0)&&(NewSrcBlend<=D3DBLEND_BOTHINVSRCALPHA)', 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z
_TEXT	SEGMENT
?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z PROC NEAR ; UD3DRenderDevice::SetSrcBlend, COMDAT
; _this$ = ecx
; _NewSrcBlend$ = edx

; 4478 : 	{

	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 4479 : 		D3DBLEND FormerSrcBlend=SrcBlend;

	mov	ebx, DWORD PTR [edi+675168]
	mov	esi, edx

; 4480 : 
; 4481 : 		if(NewSrcBlend!=FormerSrcBlend || !CacheBlending)

	cmp	esi, ebx
	jne	SHORT $L124843
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144377
$L124843:

; 4482 : 		{
; 4483 : 			check((NewSrcBlend>0)&&(NewSrcBlend<=D3DBLEND_BOTHINVSRCALPHA));

	test	esi, esi
	jle	SHORT $L124845
	cmp	esi, 13					; 0000000dH
	jle	SHORT $L124844
$L124845:
	push	4483					; 00001183H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0DJ@JEFN@?$CINewSrcBlend?$DO0?$CJ?$CG?$CG?$CINewSrcBlend?$DM?$DND@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L124844:

; 4484 : 			Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND,  NewSrcBlend );

	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [ecx+200]

; 4485 : 			SrcBlend=NewSrcBlend;

	mov	DWORD PTR [edi+675168], esi
$L144377:
	pop	edi
	pop	esi

; 4486 : 		}
; 4487 : 
; 4488 : 		return FormerSrcBlend;

	mov	eax, ebx
	pop	ebx

; 4489 : 	}

	ret	0
?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ENDP ; UD3DRenderDevice::SetSrcBlend
_TEXT	ENDS
PUBLIC	??_C@_0DJ@CJG@?$CINewDstBlend?$DO0?$CJ?$CG?$CG?$CINewDstBlend?$DM?$DND@ ; `string'
;	COMDAT ??_C@_0DJ@CJG@?$CINewDstBlend?$DO0?$CJ?$CG?$CG?$CINewDstBlend?$DM?$DND@
_DATA	SEGMENT
??_C@_0DJ@CJG@?$CINewDstBlend?$DO0?$CJ?$CG?$CG?$CINewDstBlend?$DM?$DND@ DB '('
	DB	'NewDstBlend>0)&&(NewDstBlend<=D3DBLEND_BOTHINVSRCALPHA)', 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z
_TEXT	SEGMENT
?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z PROC NEAR ; UD3DRenderDevice::SetDstBlend, COMDAT
; _this$ = ecx
; _NewDstBlend$ = edx

; 4492 : 	{

	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 4493 : 		D3DBLEND FormerDstBlend=DstBlend;

	mov	ebx, DWORD PTR [edi+675172]
	mov	esi, edx

; 4494 : 
; 4495 : 		if(NewDstBlend!=FormerDstBlend || !CacheBlending)

	cmp	esi, ebx
	jne	SHORT $L124851
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144381
$L124851:

; 4496 : 		{
; 4497 : 			check((NewDstBlend>0)&&(NewDstBlend<=D3DBLEND_BOTHINVSRCALPHA));

	test	esi, esi
	jle	SHORT $L124853
	cmp	esi, 13					; 0000000dH
	jle	SHORT $L124852
$L124853:
	push	4497					; 00001191H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0DJ@CJG@?$CINewDstBlend?$DO0?$CJ?$CG?$CG?$CINewDstBlend?$DM?$DND@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L124852:

; 4498 : 			Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND,  NewDstBlend );

	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [ecx+200]

; 4499 : 			DstBlend=NewDstBlend;

	mov	DWORD PTR [edi+675172], esi
$L144381:
	pop	edi
	pop	esi

; 4500 : 		}
; 4501 : 
; 4502 : 		return FormerDstBlend;

	mov	eax, ebx
	pop	ebx

; 4503 : 	}

	ret	0
?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ENDP ; UD3DRenderDevice::SetDstBlend
_TEXT	ENDS
PUBLIC	??_C@_0DK@OOPG@?$CINewAlphaBlendEnable?$DN?$DNTRUE?$CJ?$HM?$HM?$CINe@ ; `string'
;	COMDAT ??_C@_0DK@OOPG@?$CINewAlphaBlendEnable?$DN?$DNTRUE?$CJ?$HM?$HM?$CINe@
_DATA	SEGMENT
??_C@_0DK@OOPG@?$CINewAlphaBlendEnable?$DN?$DNTRUE?$CJ?$HM?$HM?$CINe@ DB '('
	DB	'NewAlphaBlendEnable==TRUE)||(NewAlphaBlendEnable==FALSE)', 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z
_TEXT	SEGMENT
?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z PROC NEAR ; UD3DRenderDevice::SetAlphaBlendEnable, COMDAT
; _this$ = ecx
; _NewAlphaBlendEnable$ = edx

; 4506 : 	{

	push	ebx
	push	esi
	push	edi
	mov	esi, edx

; 4507 : 		INT FormerAlphaBlendEnable=AlphaBlendEnable;
; 4508 : 		check((NewAlphaBlendEnable==TRUE)||(NewAlphaBlendEnable==FALSE));

	cmp	esi, 1
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi+675176]
	je	SHORT $L124858
	test	esi, esi
	je	SHORT $L124858
	push	4508					; 0000119cH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0DK@OOPG@?$CINewAlphaBlendEnable?$DN?$DNTRUE?$CJ?$HM?$HM?$CINe@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L124858:

; 4509 : 		if(NewAlphaBlendEnable!=FormerAlphaBlendEnable || !CacheBlending )

	cmp	esi, ebx
	jne	SHORT $L124861
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144385
$L124861:

; 4510 : 		{
; 4511 : 			Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, NewAlphaBlendEnable );

	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]

; 4512 : 			AlphaBlendEnable=NewAlphaBlendEnable;

	mov	DWORD PTR [edi+675176], esi
$L144385:
	pop	edi
	pop	esi

; 4513 : 		}
; 4514 : 
; 4515 : 		return FormerAlphaBlendEnable;

	mov	eax, ebx
	pop	ebx

; 4516 : 	}

	ret	0
?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ENDP	; UD3DRenderDevice::SetAlphaBlendEnable
_TEXT	ENDS
PUBLIC	?BeginScene@UD3DRenderDevice@@QAIJXZ		; UD3DRenderDevice::BeginScene
; Function compile flags: /Ogty
;	COMDAT ?BeginScene@UD3DRenderDevice@@QAIJXZ
_TEXT	SEGMENT
?BeginScene@UD3DRenderDevice@@QAIJXZ PROC NEAR		; UD3DRenderDevice::BeginScene, COMDAT
; _this$ = ecx

; 4520 : 		BeginSceneCount++;

	inc	DWORD PTR [ecx+675184]

; 4521 : 		//check(BeginSceneCount==1);
; 4522 : 
; 4523 : 		return Direct3DDevice8->BeginScene();

	mov	ecx, DWORD PTR [ecx+19124]
	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+136]

; 4524 : 	}

	ret	0
?BeginScene@UD3DRenderDevice@@QAIJXZ ENDP		; UD3DRenderDevice::BeginScene
_TEXT	ENDS
PUBLIC	?EndScene@UD3DRenderDevice@@QAIJXZ		; UD3DRenderDevice::EndScene
; Function compile flags: /Ogty
;	COMDAT ?EndScene@UD3DRenderDevice@@QAIJXZ
_TEXT	SEGMENT
?EndScene@UD3DRenderDevice@@QAIJXZ PROC NEAR		; UD3DRenderDevice::EndScene, COMDAT
; _this$ = ecx

; 4528 : 		BeginSceneCount--;

	dec	DWORD PTR [ecx+675184]

; 4529 : 		//check(BeginSceneCount==0);
; 4530 : 
; 4531 : 		return Direct3DDevice8->EndScene();

	mov	ecx, DWORD PTR [ecx+19124]
	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+140]

; 4532 : 	}

	ret	0
?EndScene@UD3DRenderDevice@@QAIJXZ ENDP			; UD3DRenderDevice::EndScene
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?SetBlending@UD3DRenderDevice@@QAIXKK@Z
_TEXT	SEGMENT
_PolyFlags$ = -8
_PolyFlagsEx$ = 8
_Xor$ = -4
?SetBlending@UD3DRenderDevice@@QAIXKK@Z PROC NEAR	; UD3DRenderDevice::SetBlending, COMDAT
; _this$ = ecx
; _PolyFlags$ = edx

; 4539 : 	{

	sub	esp, 8
	push	ebx
	push	ebp

; 4540 : 		VALIDATE;
; 4541 : 
; 4542 : 		//if(!GIsEditor) PolyFlags&=~PF_Selected;
; 4543 : 		// Adjust PolyFlags according to Unreal's precedence rules.
; 4544 : 		// Allows gouraud-polygonal fog only if specular is supported (1-pass fogging).
; 4545 : 		if( (PolyFlags & (PF_RenderFog|PF_Translucent|PF_Modulated))!=PF_RenderFog || !UseVertexSpecular )

	mov	eax, edx
	push	esi
	and	eax, 1073741892				; 40000044H
	cmp	eax, 1073741824				; 40000000H
	push	edi
	mov	DWORD PTR _PolyFlags$[esp+24], edx
	mov	esi, ecx
	jne	SHORT $L124869
	mov	eax, DWORD PTR [esi+19148]
	test	eax, eax
	jne	SHORT $L124868
$L124869:

; 4546 : 			PolyFlags &= ~PF_RenderFog;

	and	edx, -1073741825			; bfffffffH
	mov	DWORD PTR _PolyFlags$[esp+24], edx
$L124868:

; 4547 : 
; 4548 : 		if( (!(PolyFlags & (PF_Translucent|PF_Modulated))&&(!(PolyFlagsEx & (PFX_AlphaMap|PFX_LightenModulate|PFX_DarkenModulate|PFX_Translucent2)))) )

	test	dl, 68					; 00000044H
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+20]
	jne	SHORT $L124870
	test	al, 113					; 00000071H
	jne	SHORT $L124870

; 4549 : 			PolyFlags |= PF_Occlude;

	or	edx, -2147483648			; 80000000H

; 4550 : 		else if( PolyFlags & PF_Translucent )

	jmp	SHORT $L144623
$L124870:
	test	dl, 4
	je	SHORT $L124872

; 4551 : 			PolyFlags &= ~PF_Masked;

	and	edx, -3					; fffffffdH
$L144623:
	mov	DWORD PTR _PolyFlags$[esp+24], edx
$L124872:

; 4552 : 
; 4553 : 		// Detect changes in the blending modes.
; 4554 : 		DWORD Xor   = CurrentPolyFlags   ^ PolyFlags;

	mov	ecx, DWORD PTR [esi+19616]

; 4555 : 		DWORD XorEx = CurrentPolyFlagsEx ^ PolyFlagsEx;

	mov	ebx, DWORD PTR [esi+19620]
	xor	ecx, edx
	xor	ebx, eax

; 4556 : 		// Adjust Cull Mode based on 'two sided flag*
; 4557 : 		if(Xor&PF_TwoSided)

	test	ch, 1
	mov	DWORD PTR _Xor$[esp+24], ecx
	je	SHORT $L124875

; 4558 : 		{
; 4559 : 			Direct3DDevice8->SetRenderState( D3DRS_CULLMODE,(PolyFlags&PF_TwoSided)?D3DCULL_NONE:D3DCULL_CCW);

	mov	edx, DWORD PTR _PolyFlags$[esp+24]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	not	edx
	and	edx, 256				; 00000100H
	or	edx, 128				; 00000080H
	shr	edx, 7
	push	edx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	edx, DWORD PTR _PolyFlags$[esp+24]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+20]
$L124875:

; 4560 : 		}
; 4561 : 
; 4562 : 		if(XorEx&PFX_Clip)

	test	bl, 2
	mov	edi, 1
	je	SHORT $L124876

; 4563 : 		{
; 4564 : 			Direct3DDevice8->SetRenderState( D3DRS_CLIPPING, (bool)(PolyFlagsEx&PFX_Clip));

	mov	edx, DWORD PTR _PolyFlagsEx$[esp+20]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, edi
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	edx, DWORD PTR _PolyFlags$[esp+24]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+20]
$L124876:

; 4565 : 		}
; 4566 : 
; 4567 : 		if(XorEx&PFX_FlatShade)

	test	bl, 8
	mov	ebp, 9
	je	SHORT $L124878

; 4568 : 		{
; 4569 : 			Direct3DDevice8->SetRenderState( D3DRS_SHADEMODE, (PolyFlagsEx&PFX_FlatShade)?D3DSHADE_FLAT:D3DSHADE_GOURAUD );

	mov	edx, DWORD PTR _PolyFlagsEx$[esp+20]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	ebp
	push	eax
	call	DWORD PTR [ecx+200]
	mov	edx, DWORD PTR _PolyFlags$[esp+24]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+20]
$L124878:

; 4570 : 		}
; 4571 : 
; 4572 : 		if( (Xor  & (PF_Translucent|PF_Modulated|PF_Invisible|PF_Occlude|PF_Masked|PF_Highlighted|PF_NoSmooth|PF_RenderFog|PF_Memorized|PF_Selected)) 
; 4573 : 		  ||(XorEx& (PFX_AlphaMap|PFX_LightenModulate|PFX_DarkenModulate|PFX_Translucent2)))

	test	DWORD PTR _Xor$[esp+24], -754972601	; d3000847H
	jne	SHORT $L124880
	test	bl, 113					; 00000071H
	je	$L124916
	mov	edx, DWORD PTR _PolyFlags$[esp+24]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+20]
$L124880:

; 4574 : 		{
; 4575 : 			if( Xor&(PF_Invisible|PF_Translucent|PF_Modulated|PF_Highlighted) || (XorEx&(PFX_AlphaMap|PFX_LightenModulate|PFX_DarkenModulate|PFX_Translucent2)))

	test	DWORD PTR _Xor$[esp+24], 268435525	; 10000045H
	jne	SHORT $L124882
	test	bl, 113					; 00000071H
	je	$L124902
$L124882:

; 4576 : 			{
; 4577 : 				if ((XorEx & PFX_AlphaMap) && (!(PolyFlagsEx & PFX_AlphaMap)))

	test	bl, 1
	je	SHORT $L124883
	test	al, 1
	jne	SHORT $L124883

; 4578 : 				{
; 4579 : 					if (UseTrilinear)

	mov	eax, DWORD PTR [esi+19128]
	test	eax, eax

; 4580 : 						Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MIPFILTER , D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L124884
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 4581 : 					else

	jmp	SHORT $L124885
$L124884:

; 4582 : 						Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MIPFILTER , D3DTEXF_POINT  );

	mov	edx, DWORD PTR [eax]
	push	edi
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L124885:

; 4583 : 					
; 4584 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHAREF, 127);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]

; 4585 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHATESTENABLE, FALSE );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	edx, DWORD PTR _PolyFlags$[esp+24]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+20]
$L124883:

; 4586 : 				}
; 4587 : 
; 4588 : 				if( !(PolyFlags & (PF_Invisible|PF_Translucent|PF_Modulated|PF_Highlighted)) && !(PolyFlagsEx & (PFX_AlphaMap|PFX_LightenModulate|PFX_DarkenModulate|PFX_Translucent2)))

	test	edx, 268435525				; 10000045H
	jne	SHORT $L124886
	test	al, 113					; 00000071H
	jne	SHORT $L124886

; 4589 : 				{
; 4590 : 					SetAlphaBlendEnable(FALSE);

	mov	eax, DWORD PTR [esi+675176]
	test	eax, eax
	jne	SHORT $L144401
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L124902
$L144401:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675176], 0

; 4591 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, FALSE );
; 4592 : 				}
; 4593 : 				else if( PolyFlagsEx & PFX_Translucent2)

	jmp	$L124902
$L124886:
	test	al, 64					; 00000040H
	je	$L124888

; 4594 : 				{
; 4595 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4596 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, Src);
; 4597 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, Dst );
; 4598 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L144409
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144408
$L144409:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675176], edi
$L144408:

; 4599 : 					SetSrcBlend(D3DBLEND_SRCALPHA);

	cmp	DWORD PTR [esi+675168], 5
	jne	SHORT $L144417
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144415
$L144417:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675168], 5
$L144415:

; 4600 : 					SetDstBlend(D3DBLEND_INVSRCCOLOR);

	cmp	DWORD PTR [esi+675172], 4
	jne	SHORT $L144426
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L124902
$L144426:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675172], 4

; 4601 : 				}
; 4602 : 				else if( PolyFlags & PF_Invisible )

	jmp	$L124902
$L124888:
	test	dl, 1
	je	$L124890

; 4603 : 				{
; 4604 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4605 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ZERO );
; 4606 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );
; 4607 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L144435
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144434
$L144435:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675176], edi
$L144434:

; 4608 : 					SetSrcBlend(D3DBLEND_ZERO);

	cmp	DWORD PTR [esi+675168], edi
	jne	SHORT $L144443
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144441
$L144443:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675168], edi
$L144441:

; 4609 : 					SetDstBlend(D3DBLEND_ONE);

	cmp	DWORD PTR [esi+675172], 2
	jne	SHORT $L144452
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L124902
$L144452:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675172], 2

; 4610 : 				}
; 4611 : 				else if(PolyFlagsEx &PFX_DarkenModulate )

	jmp	$L124902
$L124890:
	test	al, 32					; 00000020H
	je	$L124892

; 4612 : 				{
; 4613 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4614 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, 1  );
; 4615 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, 3  );
; 4616 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L144461
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144460
$L144461:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675176], edi
$L144460:

; 4617 : 					SetSrcBlend(D3DBLEND_ZERO);

	cmp	DWORD PTR [esi+675168], edi
	jne	SHORT $L144469
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144467
$L144469:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675168], edi
$L144467:

; 4618 : 					SetDstBlend(D3DBLEND_SRCCOLOR);

	cmp	DWORD PTR [esi+675172], 3
	jne	SHORT $L144478
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L124902
$L144478:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675172], 3

; 4619 : 				}
; 4620 : 				else if( PolyFlagsEx & PFX_LightenModulate )

	jmp	$L124902
$L124892:
	test	al, 16					; 00000010H
	je	SHORT $L124894

; 4621 : 				{
; 4622 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4623 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, 2  );
; 4624 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, 2  );
; 4625 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L144487
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144486
$L144487:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675176], edi
$L144486:

; 4626 : 					SetSrcBlend(D3DBLEND_ONE);

	cmp	DWORD PTR [esi+675168], 2
	jne	SHORT $L144495
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L144441
$L144495:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675168], 2

; 4627 : 					SetDstBlend(D3DBLEND_ONE);
; 4628 : 				} 
; 4629 : 				else if( PolyFlags & PF_Translucent )

	jmp	$L144441
$L124894:
	test	dl, 4
	je	SHORT $L124896

; 4630 : 				{
; 4631 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4632 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );
; 4633 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_INVSRCCOLOR );
; 4634 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L144513
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144512
$L144513:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675176], edi
$L144512:

; 4635 : 					SetSrcBlend(D3DBLEND_ONE);

	cmp	DWORD PTR [esi+675168], 2
	jne	SHORT $L144521
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L144415
$L144521:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675168], 2

; 4636 : 					SetDstBlend(D3DBLEND_INVSRCCOLOR);
; 4637 : 				}
; 4638 : 				else if( PolyFlags & PF_Modulated )

	jmp	$L144415
$L124896:
	test	dl, 64					; 00000040H
	je	$L124898

; 4639 : 				{
; 4640 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4641 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_DESTCOLOR );
; 4642 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_SRCCOLOR );
; 4643 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L144539
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144538
$L144539:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675176], edi
$L144538:

; 4644 : 					SetSrcBlend(D3DBLEND_DESTCOLOR);

	cmp	DWORD PTR [esi+675168], ebp
	jne	SHORT $L144547
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144545
$L144547:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675168], ebp
$L144545:

; 4645 : 					SetDstBlend(D3DBLEND_SRCCOLOR);

	cmp	DWORD PTR [esi+675172], 3
	jne	SHORT $L144556
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L124902
$L144556:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675172], 3

; 4646 : 				}
; 4647 : 				else if( PolyFlags & PF_Highlighted )

	jmp	$L124902
$L124898:
	test	edx, 268435456				; 10000000H
	je	$L124900

; 4648 : 				{
; 4649 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4650 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );
; 4651 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA );
; 4652 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L144565
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144564
$L144565:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675176], edi
$L144564:

; 4653 : 					SetSrcBlend(D3DBLEND_ONE);

	cmp	DWORD PTR [esi+675168], 2
	jne	SHORT $L144573
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144571
$L144573:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675168], 2
$L144571:

; 4654 : 					SetDstBlend(D3DBLEND_INVSRCALPHA);

	cmp	DWORD PTR [esi+675172], 6
	jne	SHORT $L144582
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L124902
$L144582:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	6
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675172], 6

; 4655 : 				}
; 4656 : 				else if( PolyFlagsEx & PFX_AlphaMap )

	jmp	$L124902
$L124900:
	test	al, 1
	je	$L124902

; 4657 : 				{
; 4658 : 					//debugf(_T("**Turning alphamap on."));
; 4659 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE);
; 4660 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND,  D3DBLEND_SRCALPHA);
; 4661 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);
; 4662 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L144591
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144590
$L144591:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675176], edi
$L144590:

; 4663 : 					SetSrcBlend(D3DBLEND_SRCALPHA);

	cmp	DWORD PTR [esi+675168], 5
	jne	SHORT $L144599
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144597
$L144599:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675168], 5
$L144597:

; 4664 : 					SetDstBlend(D3DBLEND_INVSRCALPHA);

	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend

; 4665 : 
; 4666 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHAREF, 8);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]

; 4667 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHAFUNC, D3DCMP_GREATER );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]

; 4668 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHATESTENABLE, 1 );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]

; 4669 : 
; 4670 : 					Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP,   D3DTOP_SELECTARG1);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 4671 : 					Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	5
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 4672 : 					Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	6
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 4673 : 					
; 4674 : 					Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MIPFILTER , D3DTEXF_NONE );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L124902:

; 4675 : 				}
; 4676 : 			}
; 4677 : 			
; 4678 : 			if( Xor & PF_Invisible )

	test	BYTE PTR _Xor$[esp+24], 1
	je	SHORT $L124903

; 4679 : 			{
; 4680 : 				UBOOL Invisible = ((PolyFlags&PF_Invisible)!=0);

	mov	edx, DWORD PTR _PolyFlags$[esp+24]
	and	edx, edi

; 4681 : 				SetAlphaBlendEnable(Invisible);

	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable

; 4682 : 				//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, Invisible );
; 4683 : 				//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ZERO );
; 4684 : 				//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );
; 4685 : 				SetSrcBlend(D3DBLEND_ZERO);

	mov	edx, edi
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend

; 4686 : 				SetDstBlend(D3DBLEND_ONE);

	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L124903:

; 4687 : 
; 4688 : 			}
; 4689 : 			if( Xor & PF_Occlude )

	mov	eax, DWORD PTR _Xor$[esp+24]
	test	eax, eax
	jns	SHORT $L124905

; 4690 : 			{
; 4691 : 				Direct3DDevice8->SetRenderState( D3DRS_ZWRITEENABLE, (PolyFlags&PF_Occlude)!=0 );

	mov	ecx, DWORD PTR _PolyFlags$[esp+24]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	shr	ecx, 31					; 0000001fH
	push	ecx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
$L124905:

; 4692 : 			}
; 4693 : 			if( Xor & PF_Masked )

	test	BYTE PTR _Xor$[esp+24], 2
	je	SHORT $L124908

; 4694 : 			{
; 4695 : 				if( PolyFlags&PF_Masked )

	test	BYTE PTR _PolyFlags$[esp+24], 2

; 4696 : 				{
; 4697 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHAREF, 127 );

	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L124907
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]

; 4698 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHAFUNC, D3DCMP_GREATER );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]

; 4699 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHATESTENABLE, 1 );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]

; 4700 : 				}
; 4701 : 				else

	jmp	SHORT $L124908
$L124907:

; 4702 : 				{
; 4703 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHATESTENABLE, 0 );

	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L124908:

; 4704 : 				}
; 4705 : 			}
; 4706 : 			if( Xor & PF_NoSmooth )

	mov	ebp, DWORD PTR _Xor$[esp+24]
	test	ebp, 2048				; 00000800H

; 4707 : 			{
; 4708 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MAGFILTER, (PolyFlags & PF_NoSmooth) ? D3DTEXF_POINT : D3DTEXF_LINEAR );

	mov	ebx, DWORD PTR _PolyFlags$[esp+24]
	je	SHORT $L124909
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	mov	edi, ebx
	and	edi, 2048				; 00000800H
	neg	edi
	sbb	edi, edi
	add	edi, 2
	push	edi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 4709 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MINFILTER, (PolyFlags & PF_NoSmooth) ? D3DTEXF_POINT : D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	edi, 1
$L124909:

; 4710 : 			}
; 4711 : 			if( Xor & PF_RenderFog )

	test	ebp, 1073741824				; 40000000H
	je	SHORT $L124910

; 4712 : 			{
; 4713 : 				Direct3DDevice8->SetRenderState( D3DRS_SPECULARENABLE, (PolyFlags&PF_RenderFog)!=0 );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	mov	ecx, ebx
	shr	ecx, 30					; 0000001eH
	and	ecx, edi
	push	ecx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
$L124910:

; 4714 : 			}
; 4715 : 			if( (Xor & PF_Memorized) || (Xor & PF_Selected) )

	test	ebp, 50331648				; 03000000H
	je	SHORT $L124916

; 4716 : 			{
; 4717 : 				if( PolyFlags&PF_Memorized )

	test	ebx, 16777216				; 01000000H

; 4718 : 				{
; 4719 : 					// Lightmap
; 4720 : 					Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	je	SHORT $L124913
	push	4
	push	edi
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 4721 : 					Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAOP, D3DTOP_SELECTARG2 );

	push	3

; 4722 : 				}
; 4723 : 				else

	jmp	SHORT $L144626
$L124913:

; 4724 : 				if( PolyFlags&PF_Selected )

	test	ebx, 33554432				; 02000000H
	je	SHORT $L124915

; 4725 : 				{
; 4726 : 					// Alphamap
; 4727 : 					Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_SELECTARG2 );

	push	3
	push	edi
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 4728 : 					Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1 );

	push	2

; 4729 : 				}
; 4730 : 				else

	jmp	SHORT $L144626
$L124915:

; 4731 : 				{
; 4732 : 					Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_DISABLE );

	push	edi
	push	edi
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 4733 : 					Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

	push	edi
$L144626:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]
$L124916:

; 4734 : 				}
; 4735 : 			}
; 4736 : 		}
; 4737 : 
; 4738 : 		CurrentPolyFlags  =PolyFlags;

	mov	edx, DWORD PTR _PolyFlags$[esp+24]

; 4739 : 		CurrentPolyFlagsEx=PolyFlagsEx;

	mov	eax, DWORD PTR _PolyFlagsEx$[esp+20]
	pop	edi
	mov	DWORD PTR [esi+19616], edx
	mov	DWORD PTR [esi+19620], eax
	pop	esi
	pop	ebp
	pop	ebx

; 4740 : 	}

	add	esp, 8
	ret	4
?SetBlending@UD3DRenderDevice@@QAIXKK@Z ENDP		; UD3DRenderDevice::SetBlending
_TEXT	ENDS
PUBLIC	?ReleaseOldestTexture@UD3DRenderDevice@@QAEXXZ	; UD3DRenderDevice::ReleaseOldestTexture
EXTRN	__aullshr:NEAR
; Function compile flags: /Ogty
;	COMDAT ?ReleaseOldestTexture@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT
?ReleaseOldestTexture@UD3DRenderDevice@@QAEXXZ PROC NEAR ; UD3DRenderDevice::ReleaseOldestTexture, COMDAT
; _this$ = ecx

; 4744 : 	{

	push	ebx
	push	ebp
	mov	ebx, ecx

; 4745 : 		VALIDATE;
; 4746 : 
; 4747 : 		if(!CachedTextures) return;

	mov	eax, DWORD PTR [ebx+236]
	test	eax, eax
	push	esi
	push	edi
	je	$L144652

; 4748 : 
; 4749 : 		INT Threshold=CachedTextures->Filler->PixelFormat->ActiveRAMPeak+1024*1024*3;

	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+4]
	mov	ebp, DWORD PTR [edx+28]
	add	ebp, 3145728				; 00300000H

; 4750 : 		if(Threshold<7*1024*1024) Threshold=7*1024*1024;

	cmp	ebp, 7340032				; 00700000H
	jge	SHORT $L124923
	mov	ebp, 7340032				; 00700000H
$L124923:

; 4751 : 
; 4752 : 		while(CachedTextures && (CachedTextures->Filler->PixelFormat->BinnedRAM>Threshold))

	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+24], ebp
	jle	$L144652

; 4753 : 		{
; 4754 : 			FTexInfo *LowestFrameCount=NULL;

	xor	esi, esi

; 4755 : 			FTexInfo *LowestFrameCountPrevious=NULL;

	xor	edx, edx

; 4756 : 			FTexInfo *Previous=NULL;

	xor	ecx, ecx

; 4757 : 			for(FTexInfo *Iterator=CachedTextures;Iterator;Previous=Iterator,Iterator=Iterator->NextTexture)

	test	eax, eax
	je	$L144652

; 4807 : 
; 4808 : 		}
; 4809 : 	}

	npad	3
$L124929:

; 4758 : 			{
; 4759 : 				if(!LowestFrameCount||(Iterator->FrameCounter<=LowestFrameCount->FrameCounter))

	test	esi, esi
	je	SHORT $L124933
	mov	edi, DWORD PTR [eax+44]
	cmp	edi, DWORD PTR [esi+44]
	jg	SHORT $L124930
$L124933:

; 4760 : 				{
; 4761 : 					// Don't kick out anything that isn't over 60 frames old.
; 4762 : 					if((FrameCounter-Iterator->FrameCounter)>60)

	mov	edi, DWORD PTR [ebx+675104]
	sub	edi, DWORD PTR [eax+44]
	cmp	edi, 60					; 0000003cH
	jle	SHORT $L124930

; 4763 : 					{
; 4764 : 						LowestFrameCount=Iterator;

	mov	esi, eax

; 4765 : 						LowestFrameCountPrevious=Previous;

	mov	edx, ecx
$L124930:
	mov	ecx, eax
	mov	eax, DWORD PTR [eax+52]
	test	eax, eax
	jne	SHORT $L124929

; 4766 : 					}
; 4767 : 				}
; 4768 : 			}
; 4769 : 
; 4770 : 			if(!LowestFrameCount) return;

	test	esi, esi
	je	$L144652

; 4771 : 
; 4772 : 			LowestFrameCount->Filler->PixelFormat->BinnedRAM -= LowestFrameCount->SizeBytes;

	mov	eax, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR [esi+4]
	sub	edi, ecx
	mov	DWORD PTR [eax+24], edi

; 4773 : 			LowestFrameCount->Filler->PixelFormat->Binned--;

	mov	eax, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+20]
	dec	ecx

; 4774 : 
; 4775 : 			// Detach myself from the normal list:
; 4776 : 			if(!LowestFrameCountPrevious)

	test	edx, edx
	mov	DWORD PTR [eax+20], ecx
	jne	SHORT $L124936

; 4777 : 			{
; 4778 : 				CachedTextures=CachedTextures->NextTexture;

	mov	ecx, DWORD PTR [ebx+236]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [ebx+236], edx

; 4779 : 			} else

	jmp	SHORT $L124937
$L124936:

; 4780 : 			{
; 4781 : 				LowestFrameCountPrevious->NextTexture=LowestFrameCount->NextTexture;

	mov	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edx+52], eax
$L124937:

; 4782 : 			}
; 4783 : 
; 4784 : 			INT	HashIndex = ((7*(DWORD)LowestFrameCount->CacheId+(DWORD)(LowestFrameCount->CacheId>>32))) & (ARRAY_COUNT(TextureHash)-1);

	mov	eax, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [esi+12]
	mov	ecx, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR [esi+8]
	imul	ecx, 7
	add	eax, ecx
	and	eax, 4095				; 00000fffH

; 4785 : 
; 4786 : 			Previous=NULL;
; 4787 : 			for(Iterator = TextureHash[HashIndex];

	mov	edi, DWORD PTR [ebx+eax*4+240]
	mov	ecx, edi
	xor	edx, edx

; 4788 : 				Iterator && Iterator!=LowestFrameCount;
; 4789 : 				Previous=Iterator,Iterator = Iterator->HashNext)

	test	ecx, ecx
	je	SHORT $L124943
$L124941:
	cmp	ecx, esi
	je	SHORT $L144655
	mov	edx, ecx
	mov	ecx, DWORD PTR [ecx+48]
	test	ecx, ecx
	jne	SHORT $L124941
$L124943:

; 4790 : 				;
; 4791 : 
; 4792 : 			if(Iterator==LowestFrameCount)

	cmp	ecx, esi
	jne	SHORT $L124946
$L144655:

; 4793 : 			{
; 4794 : 				if(!Previous)

	test	edx, edx
	jne	SHORT $L124945

; 4795 : 				{
; 4796 : 					TextureHash[HashIndex]=TextureHash[HashIndex]->HashNext;

	mov	edx, DWORD PTR [edi+48]
	mov	DWORD PTR [ebx+eax*4+240], edx

; 4797 : 				} else

	jmp	SHORT $L124946
$L124945:

; 4798 : 				{
; 4799 : 					Previous->HashNext=LowestFrameCount->HashNext;

	mov	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edx+48], eax
$L124946:

; 4800 : 				}
; 4801 : 			}
; 4802 : 
; 4803 : 			if(LowestFrameCount->Texture8)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $L144635

; 4804 : 				SafeRelease(LowestFrameCount->Texture8);

	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi], 0
$L144635:

; 4805 : 			
; 4806 : 			SafeDelete(LowestFrameCount);

	mov	edx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	push	esi
	call	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ebx+236]
	test	eax, eax
	jne	$L124923
$L144652:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 4807 : 
; 4808 : 		}
; 4809 : 	}

	ret	0
?ReleaseOldestTexture@UD3DRenderDevice@@QAEXXZ ENDP	; UD3DRenderDevice::ReleaseOldestTexture
_TEXT	ENDS
PUBLIC	?SetTextureNULL@UD3DRenderDevice@@QAIXK@Z	; UD3DRenderDevice::SetTextureNULL
; Function compile flags: /Ogty
;	COMDAT ?SetTextureNULL@UD3DRenderDevice@@QAIXK@Z
_TEXT	SEGMENT
?SetTextureNULL@UD3DRenderDevice@@QAIXK@Z PROC NEAR	; UD3DRenderDevice::SetTextureNULL, COMDAT
; _this$ = ecx
; _dwStage$ = edx

; 4812 : 	{

	push	esi
	push	edi
	mov	edi, edx

; 4813 : 		check((dwStage>=0)&&(dwStage<ARRAY_COUNT(Stages)));

	cmp	edi, 8
	mov	esi, ecx
	jb	SHORT $L124956
	push	4813					; 000012cdH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0CM@ILAF@?$CIdwStage?$DO?$DN0?$CJ?$CG?$CG?$CIdwStage?$DMARRAY_COU@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L124956:

; 4814 : 
; 4815 : 		Direct3DDevice8->SetTexture( dwStage, NULL );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	edi
	push	eax
	call	DWORD PTR [ecx+244]

; 4816 : 		Stages[dwStage] = &NoTexture;

	lea	edx, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+edi*4+19712], edx
	pop	edi
	pop	esi

; 4817 : 	}

	ret	0
?SetTextureNULL@UD3DRenderDevice@@QAIXK@Z ENDP		; UD3DRenderDevice::SetTextureNULL
_TEXT	ENDS
PUBLIC	??_C@_1DG@GDLM@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5@ ; `string'
PUBLIC	??_C@_1II@DOLE@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAn?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe@ ; `string'
PUBLIC	??_C@_1BFI@PKNA@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
EXTRN	__imp_?Load@FTextureInfo@@QAEXXZ:NEAR
EXTRN	__imp_?Unload@FTextureInfo@@QAEXXZ:NEAR
EXTRN	__imp_?CacheMaxColor@FTextureInfo@@QAEXXZ:NEAR
EXTRN	__imp_??0FRainbowPtr@@QAE@PAX@Z:NEAR
EXTRN	__imp_?PrivateStaticClass@UProceduralTexture@@0VUClass@@A:BYTE
;	COMDAT ??_C@_1DG@GDLM@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5@
; File ..\..\Core\Inc\UnVcWin32.h
_DATA	SEGMENT
??_C@_1DG@GDLM@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5@ DB 'U'
	DB	00H, 'n', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H
	DB	'r', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'T', 00H, 'e'
	DB	00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H
	DB	'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1II@DOLE@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAn?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe@
_DATA	SEGMENT
??_C@_1II@DOLE@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAn?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'E', 00H, 'n'
	DB	00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'o', 00H, 'v', 00H, 'e'
	DB	00H, 'r', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, ' ', 00H, 'w', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'f', 00H, 'f'
	DB	00H, 'i', 00H, 'c', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	' ', 00H, 'm', 00H, 'i', 00H, 'p', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, 's', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BFI@PKNA@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1BFI@PKNA@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'(', 00H, 'h', 00H, '=', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, '3', 00H, 'D', 00H, 'D', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '8', 00H, '-', 00H, '>'
	DB	00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, '(', 00H, 'U', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	',', 00H, 'V', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ','
	DB	00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '.', 00H, 'N', 00H
	DB	'u', 00H, 'm', 00H, 'M', 00H, 'i', 00H, 'p', 00H, 's', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'r', 00H, 's', 00H
	DB	't', 00H, 'M', 00H, 'i', 00H, 'p', 00H, ',', 00H, '0', 00H, ','
	DB	00H, 'F', 00H, 'i', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'r', 00H
	DB	'-', 00H, '>', 00H, 'P', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l'
	DB	00H, 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'-', 00H, '>', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, '3', 00H, 'D', 00H, 'F', 00H, 'o', 00H, 'r', 00H
	DB	'm', 00H, 'a', 00H, 't', 00H, ',', 00H, ' ', 00H, 'D', 00H, '3'
	DB	00H, 'D', 00H, 'P', 00H, 'O', 00H, 'O', 00H, 'L', 00H, '_', 00H
	DB	'M', 00H, 'A', 00H, 'N', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 'D'
	DB	00H, ',', 00H, '&', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 'I', 00H
	DB	'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H, 'T', 00H, 'e'
	DB	00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, '8', 00H
	DB	')', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '%'
	DB	00H, 's', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z
_TEXT	SEGMENT
_Filler$124979 = 8
_VSize$125006 = -72
_Cycles$125017 = -48
_Count$125021 = -52
_MipIndex$125022 = 8
_ListIndex$125023 = 20
_LockedRect$125027 = -40
_SurfaceDesc$125028 = -32
_BPP$125029 = -60
_u$125035 = -72
$T144683 = 8
$T144685 = -56
$T144686 = -44
_Threshold$144721 = -76
_L$144760 = 8
_H$144761 = -48
_L$144782 = 12
_H$144783 = 24
_dwStage$ = -64
_Info$ = 8
_PolyFlags$ = 12
_Precache$ = 16
_PolyFlagsEx$ = 20
_IsLightmap$ = 24
_this$ = -68
_Masking$ = -72
_HashIndex$ = 8
?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z PROC NEAR ; UD3DRenderDevice::SetTexture, COMDAT
; _this$ = ecx
; _dwStage$ = edx

; 4820 : 	{

	sub	esp, 76					; 0000004cH
	push	ebx
	push	ebp
	push	esi
	mov	esi, edx

; 4821 : 		check((dwStage>=0)&&(dwStage<ARRAY_COUNT(Stages)));

	cmp	esi, 8
	mov	ebx, ecx
	push	edi
	mov	DWORD PTR _dwStage$[esp+92], esi
	mov	DWORD PTR _this$[esp+92], ebx
	jb	SHORT $L124961
	push	4821					; 000012d5H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0CM@ILAF@?$CIdwStage?$DO?$DN0?$CJ?$CG?$CG?$CIdwStage?$DMARRAY_COU@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L124961:

; 4822 : 
; 4823 : 		UBOOL Masking=(PolyFlags&PF_Masked)?TRUE:FALSE;

	mov	ecx, DWORD PTR _PolyFlags$[esp+88]

; 4824 : 		if(Stages[dwStage] && Stages[dwStage]->CacheId == Info.CacheID && Stages[dwStage]->Masking==Masking)

	mov	eax, DWORD PTR [ebx+esi*4+19712]
	mov	ebp, DWORD PTR _Info$[esp+88]
	shr	ecx, 1
	and	ecx, 1
	test	eax, eax
	mov	DWORD PTR _Masking$[esp+92], ecx
	je	SHORT $L124964
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ebp+4]
	jne	SHORT $L124964
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ebp+8]
	jne	SHORT $L124964
	cmp	DWORD PTR [eax+16], ecx
	je	$L124960
$L124964:

; 4825 : 			return;
; 4826 : 
; 4827 : 		INT	HashIndex = (7 * (DWORD) Info.CacheID + (DWORD) (Info.CacheID >> 32)) & (ARRAY_COUNT(TextureHash) - 1);

	mov	ecx, DWORD PTR [ebp+4]
	mov	eax, DWORD PTR [ebp+8]
	mov	edx, ecx
	imul	edx, 7
	mov	edi, eax
	add	edi, edx
	and	edi, 4095				; 00000fffH

; 4828 : 
; 4829 : 
; 4830 : 		for(FTexInfo* TexInfo = TextureHash[HashIndex];

	mov	esi, DWORD PTR [ebx+edi*4+240]

; 4831 : 			TexInfo && !(TexInfo->CacheId == Info.CacheID && TexInfo->Masking==Masking);
; 4832 : 			TexInfo = TexInfo->HashNext)

	test	esi, esi
	mov	DWORD PTR _HashIndex$[esp+88], edi
	je	SHORT $L144806

; 4977 : 		VALIDATE;
; 4978 : 
; 4979 : 	}

	npad	7
$L124969:

; 4831 : 			TexInfo && !(TexInfo->CacheId == Info.CacheID && TexInfo->Masking==Masking);
; 4832 : 			TexInfo = TexInfo->HashNext)

	mov	edx, DWORD PTR [esi+8]
	cmp	edx, ecx
	jne	SHORT $L124970
	mov	edx, DWORD PTR [esi+12]
	cmp	edx, eax
	jne	SHORT $L124970
	mov	edx, DWORD PTR _Masking$[esp+92]
	cmp	DWORD PTR [esi+16], edx
	je	$L124973
$L124970:
	mov	esi, DWORD PTR [esi+48]
	test	esi, esi
	jne	SHORT $L124969
$L144806:

; 4833 : 			;
; 4834 : 
; 4835 : 		if(!TexInfo)
; 4836 : 		{
; 4837 : 			if(Use2ndTierTextureCache) 

	mov	eax, DWORD PTR [ebx+19156]
	test	eax, eax
	je	$L144796

; 4838 : 				ReleaseOldestTexture();

	mov	eax, DWORD PTR [ebx+236]
	test	eax, eax
	je	$L144796
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+28]
	add	ecx, 3145728				; 00300000H
	cmp	ecx, 7340032				; 00700000H
	mov	DWORD PTR _Threshold$144721[esp+92], ecx
	jge	SHORT $L144723
	mov	ecx, 7340032				; 00700000H
	mov	DWORD PTR _Threshold$144721[esp+92], ecx
	jmp	SHORT $L144723
$L144834:
	mov	ecx, DWORD PTR _Threshold$144721[esp+92]
$L144723:
	mov	edx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [edx+4]
	cmp	DWORD PTR [edx+24], ecx
	jle	$L144796
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	test	eax, eax
	je	$L144796
$L144729:
	test	esi, esi
	je	SHORT $L144733
	mov	edi, DWORD PTR [eax+44]
	cmp	edi, DWORD PTR [esi+44]
	jg	SHORT $L144730
$L144733:
	mov	edi, DWORD PTR [ebx+675104]
	sub	edi, DWORD PTR [eax+44]
	cmp	edi, 60					; 0000003cH
	jle	SHORT $L144730
	mov	esi, eax
	mov	edx, ecx
$L144730:
	mov	ecx, eax
	mov	eax, DWORD PTR [eax+52]
	test	eax, eax
	jne	SHORT $L144729
	test	esi, esi
	je	$L144838
	mov	eax, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR [esi+4]
	sub	edi, ecx
	mov	DWORD PTR [eax+24], edi
	mov	eax, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+20]
	dec	ecx
	test	edx, edx
	mov	DWORD PTR [eax+20], ecx
	jne	SHORT $L144736
	mov	ecx, DWORD PTR [ebx+236]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [ebx+236], edx
	jmp	SHORT $L144737
$L144736:
	mov	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edx+52], eax
$L144737:
	mov	eax, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [esi+12]
	mov	ecx, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR [esi+8]
	imul	ecx, 7
	add	eax, ecx
	and	eax, 4095				; 00000fffH
	mov	edi, DWORD PTR [ebx+eax*4+240]
	mov	ecx, edi
	xor	edx, edx
	test	ecx, ecx
	je	SHORT $L144741

; 4977 : 		VALIDATE;
; 4978 : 
; 4979 : 	}

	npad	7

; 4838 : 				ReleaseOldestTexture();

$L144739:
	cmp	ecx, esi
	je	SHORT $L144805
	mov	edx, ecx
	mov	ecx, DWORD PTR [ecx+48]
	test	ecx, ecx
	jne	SHORT $L144739
$L144741:
	cmp	ecx, esi
	jne	SHORT $L144744
$L144805:
	test	edx, edx
	jne	SHORT $L144743
	mov	edx, DWORD PTR [edi+48]
	mov	DWORD PTR [ebx+eax*4+240], edx
	jmp	SHORT $L144744
$L144743:
	mov	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edx+48], eax
$L144744:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $L144711
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi], 0
$L144711:
	mov	edx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	push	esi
	call	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ebx+236]
	test	eax, eax
	mov	edi, DWORD PTR _HashIndex$[esp+88]
	jne	$L144834
	jmp	SHORT $L144796
$L144838:
	mov	edi, DWORD PTR _HashIndex$[esp+88]
$L144796:

; 4839 : 
; 4840 : 			// Create a new Direct3D texture.
; 4841 : 			TexInfo = new FTexInfo;

	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_17JBDG@?$AAn?$AAe?$AAw?$AA?$AA@ ; `string'
	push	56					; 00000038H
	call	DWORD PTR [edx]

; 4842 : 			TexInfo->CacheId = Info.CacheID;
; 4843 : 			TexInfo->Masking=Masking;

	mov	edx, DWORD PTR _Masking$[esp+92]
	mov	esi, eax
	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR [esi+8], eax
	mov	ecx, DWORD PTR [ebp+8]
	mov	DWORD PTR [esi+12], ecx
	mov	DWORD PTR [esi+16], edx

; 4844 : 
; 4845 : 			TexInfo->NextTexture = CachedTextures;

	mov	eax, DWORD PTR [ebx+236]
	mov	DWORD PTR [esi+52], eax

; 4846 : 			CachedTextures = TexInfo;

	mov	DWORD PTR [ebx+236], esi

; 4847 : 
; 4848 : 			TexInfo->HashNext = TextureHash[HashIndex];

	mov	ecx, DWORD PTR [ebx+edi*4+240]
	mov	DWORD PTR [esi+48], ecx

; 4849 : 			TextureHash[HashIndex] = TexInfo;

	mov	DWORD PTR [ebx+edi*4+240], esi

; 4850 : 
; 4851 : 			// Get filler object.
; 4852 : 
; 4853 : 			FTexFiller*	Filler = NULL;
; 4854 : 
; 4855 : 			switch(Info.Format)
; 4856 : 			{

	mov	eax, DWORD PTR [ebp+36]
	xor	edi, edi
	cmp	eax, 5
	mov	DWORD PTR _Filler$124979[esp+88], edi
	ja	SHORT $L124992
	jmp	DWORD PTR $L144841[eax*4]
$L124984:

; 4857 : 				case TEXF_P8:    Filler = ( !Format1555.Supported || Use32BitTextures )? (FTexFiller*) &Filler8888_P8 : (FTexFiller*) &Filler1555_P8; break;

	mov	al, BYTE PTR [ebx+16936]
	test	al, al
	je	SHORT $L144677
	mov	eax, DWORD PTR [ebx+19160]
	test	eax, eax
	jne	SHORT $L144677
	lea	edi, DWORD PTR [ebx+18056]
	mov	DWORD PTR _Filler$124979[esp+88], edi
	jmp	SHORT $L124981
$L144677:
	lea	edi, DWORD PTR [ebx+17016]
	mov	DWORD PTR _Filler$124979[esp+88], edi
	jmp	SHORT $L124981
$L124987:

; 4858 : 				case TEXF_DXT1:  Filler = &FillerDXT1; break;

	lea	edi, DWORD PTR [ebx+16992]
	mov	DWORD PTR _Filler$124979[esp+88], edi
	jmp	SHORT $L124981
$L124988:

; 4859 : 				case TEXF_RGBA7: Filler = (!Format1555.Supported || Use32BitTextures ) ? (FTexFiller*) &Filler8888_RGBA7 : (FTexFiller*) &Filler1555_RGBA7; break;

	mov	al, BYTE PTR [ebx+16936]
	test	al, al
	je	SHORT $L144679
	mov	eax, DWORD PTR [ebx+19160]
	test	eax, eax
	jne	SHORT $L144679
	lea	edi, DWORD PTR [ebx+18048]
	mov	DWORD PTR _Filler$124979[esp+88], edi
	jmp	SHORT $L124981
$L144679:
	lea	edi, DWORD PTR [ebx+17008]
	mov	DWORD PTR _Filler$124979[esp+88], edi
	jmp	SHORT $L124981
$L124991:

; 4860 : 				case TEXF_RGBA8: Filler = &Filler8888_RGBA8; break;

	lea	edi, DWORD PTR [ebx+17000]
	mov	DWORD PTR _Filler$124979[esp+88], edi
	jmp	SHORT $L124981
$L124992:

; 4861 : 				default:
; 4862 : 					appErrorf(TEXT("Unsupported Texture Format"));

	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1DG@GDLM@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L124981:

; 4863 : 			}
; 4864 : 			
; 4865 : 			TexInfo->Filler=Filler;

	mov	DWORD PTR [esi+40], edi

; 4866 : 			if(Info.bParametric) 

	test	BYTE PTR [ebp+76], 8
	je	SHORT $L124994

; 4867 : 			{
; 4868 : 				TexInfo->UseMips=false;

	mov	DWORD PTR [esi+36], 0

; 4869 : 				Info.NumMips=1;

	mov	DWORD PTR [ebp+64], 1
$L124994:

; 4870 : 			}
; 4871 : 
; 4872 : 			// Calculate the mipmap to use.
; 4873 : 			DWORD	FirstMip = 0;

	xor	edi, edi
	lea	ecx, DWORD PTR [ebp+80]

; 4977 : 		VALIDATE;
; 4978 : 
; 4979 : 	}

	npad	1

; 4870 : 			}
; 4871 : 
; 4872 : 			// Calculate the mipmap to use.
; 4873 : 			DWORD	FirstMip = 0;

$L124997:

; 4874 : 
; 4875 : 			while(Info.Mips[FirstMip]->USize > (INT) DeviceCaps8.MaxTextureWidth || Info.Mips[FirstMip]->VSize > (INT) DeviceCaps8.MaxTextureHeight)

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+88
	jg	SHORT $L125001
	mov	eax, DWORD PTR [eax+8]
	cmp	eax, DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+92
	jle	SHORT $L124998
$L125001:

; 4876 : 				if(++FirstMip >= (DWORD) Info.NumMips)

	mov	eax, DWORD PTR [ebp+64]
	inc	edi
	add	ecx, 4
	cmp	edi, eax
	mov	DWORD PTR -72+[esp+92], ecx
	jb	SHORT $L124997

; 4877 : 					appErrorf(TEXT("D3D Driver: Encountered oversize texture without sufficient mipmaps"));

	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1II@DOLE@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAn?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 4878 : 
; 4879 : 			DWORD	USize = Info.Mips[FirstMip]->USize,

	mov	ecx, DWORD PTR -72+[esp+100]
	add	esp, 8
	jmp	SHORT $L124997
$L124998:
	mov	eax, DWORD PTR [ebp+edi*4+80]
	mov	edx, DWORD PTR [eax+4]

; 4880 : 					VSize = Info.Mips[FirstMip]->VSize;

	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _VSize$125006[esp+92], eax

; 4881 : 
; 4882 : 			// Setup the texture info.
; 4883 : 			TexInfo->FirstMip = FirstMip;
; 4884 : 			TexInfo->UScale	= 1.f / (USize * (1 << FirstMip) * Info.UScale);

	mov	ecx, edi
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR [esi+20], edi
	mov	DWORD PTR -40+[esp+96], 0

; 4885 : 			TexInfo->VScale	= 1.f / (VSize * (1 << FirstMip) * Info.VScale);
; 4886 : 			TexInfo->UseMips = (FirstMip < (DWORD) Info.NumMips - 1);
; 4887 : 
; 4888 : 			// Create the Direct3D texture.
; 4889 : 			D3D_CHECK((h=Direct3DDevice8->CreateTexture(USize,VSize,Info.NumMips - FirstMip,0,Filler->PixelFormat->Direct3DFormat,

	push	esi
	mov	ecx, eax
	imul	eax, DWORD PTR _VSize$125006[esp+96]
	imul	ecx, edx
	mov	DWORD PTR -40+[esp+96], ecx
	push	1
	fild	QWORD PTR -40+[esp+100]
	mov	DWORD PTR -40+[esp+100], eax
	mov	DWORD PTR -40+[esp+104], 0
	fmul	DWORD PTR [ebp+40]
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR [esi+24]
	fild	QWORD PTR -40+[esp+100]
	fmul	DWORD PTR [ebp+44]
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR [esi+28]
	mov	eax, DWORD PTR [ebp+64]
	dec	eax
	cmp	edi, eax
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR [esi+36], ecx
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _Filler$124979[esp+96]
	mov	eax, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+4]
	push	eax
	mov	eax, DWORD PTR [ebp+64]
	push	0
	sub	eax, edi
	push	eax
	mov	eax, DWORD PTR _VSize$125006[esp+112]
	push	eax
	mov	eax, DWORD PTR [ebx+19124]
	push	edx
	push	eax
	call	DWORD PTR [ecx+80]
	test	eax, eax
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	SHORT $L125009
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	4890					; 0000131aH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1BFI@PKNA@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L125009:

; 4890 : 				D3DPOOL_MANAGED,&TexInfo->Texture8)));
; 4891 : 
; 4892 : 			TexInfo->SizeBytes = Info.USize * Info.VSize * TexInfo->Filler->PixelFormat->BitsPerPixel / 8;

	mov	edi, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [eax+16]
	imul	eax, DWORD PTR [ebp+52]
	imul	eax, DWORD PTR [ebp+48]
	cdq
	and	edx, 7
	add	eax, edx
	mov	ecx, eax
	sar	ecx, 3
	mov	DWORD PTR [esi+4], ecx

; 4893 : 			if(!Info.NumMips) TexInfo->SizeBytes+=TexInfo->SizeBytes/3;		

	mov	eax, DWORD PTR [ebp+64]
	test	eax, eax
	jne	SHORT $L125015
	mov	eax, -1431655765			; aaaaaaabH
	mul	ecx
	shr	edx, 1
	add	edx, ecx
	mov	DWORD PTR [esi+4], edx
$L125015:

; 4894 : 
; 4895 : 			TexInfo->Filler->PixelFormat->Binned++;

	mov	eax, DWORD PTR [edi+4]
	inc	DWORD PTR [eax+20]

; 4896 : 			TexInfo->Filler->PixelFormat->BinnedRAM += TexInfo->SizeBytes;

	mov	ecx, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [esi+4]
	add	ecx, edx
	mov	DWORD PTR [eax+24], ecx

; 4897 : 
; 4898 : 			Info.bRealtimeChanged = 1;

	or	DWORD PTR [ebp+76], 16			; 00000010H
$L124973:

; 4899 : 		}
; 4900 : 
; 4901 : 		// Transfer texture data.
; 4902 : 		if( Info.bRealtimeChanged /*&& Info.bParametric || (Info.Format==TEXF_RGBA7 && GET_COLOR_DWORD(*Info.MaxColor)==0xFFFFFFFF)*/ )

	test	BYTE PTR [ebp+76], 16			; 00000010H
	je	$L125016

; 4903 : 		{
; 4904 : 			DWORD Cycles=0;
; 4905 : 			clock(Cycles);

	mov	ecx, DWORD PTR __imp__GTimestamp
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	test	edx, edx
	mov	DWORD PTR _L$144760[esp+88], eax
	je	SHORT $L144762
	rdtsc
	mov	DWORD PTR _L$144760[esp+88], eax
	mov	DWORD PTR _H$144761[esp+92], edx
	mov	eax, DWORD PTR _L$144760[esp+88]
$L144762:
	neg	eax
	mov	DWORD PTR _Cycles$125017[esp+92], eax

; 4906 : 
; 4907 : 			// Get ready for blt.		
; 4908 : 			if(!IsLightmap&&!Use2ndTierTextureCache) Info.Load();	// Dynamically load the texture if it hasn't already been done. (auto checks for parametric)

	mov	eax, DWORD PTR _IsLightmap$[esp+88]
	test	eax, eax
	jne	SHORT $L125018
	mov	eax, DWORD PTR [ebx+19156]
	test	eax, eax
	jne	SHORT $L125018
	mov	ecx, ebp
	call	DWORD PTR __imp_?Load@FTextureInfo@@QAEXXZ
$L125018:

; 4909 : 
; 4910 : 			//debugf(_T("Uploading texture:%s"),Info.Texture->GetFullName());
; 4911 : 			Info.CacheMaxColor();

	mov	ecx, ebp
	call	DWORD PTR __imp_?CacheMaxColor@FTextureInfo@@QAEXXZ

; 4912 : 			TexInfo->MaxColor = (Format8888.Supported && Use32BitTextures) ? FColor(255,255,255,1) : *Info.MaxColor;

	mov	al, BYTE PTR [ebx+16884]
	test	al, al
	je	SHORT $L144682
	mov	eax, DWORD PTR [ebx+19160]
	test	eax, eax
	je	SHORT $L144682
	mov	al, 255					; 000000ffH
	mov	BYTE PTR $T144683[esp+88], al
	mov	BYTE PTR $T144683[esp+89], al
	mov	BYTE PTR $T144683[esp+90], al
	mov	BYTE PTR $T144683[esp+91], 1
	lea	eax, DWORD PTR $T144683[esp+88]
	jmp	SHORT $L144684
$L144682:
	mov	eax, DWORD PTR [ebp+32]
$L144684:
	mov	edx, DWORD PTR [eax]

; 4913 : 
; 4914 : 			// Update texture data.
; 4915 : 			TexInfo->Filler->PixelFormat->Uploads++;

	mov	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [esi+32], edx
	mov	eax, DWORD PTR [eax+4]
	inc	DWORD PTR [eax+44]

; 4916 : 			TexInfo->Filler->BeginUpload( TexInfo, Info, PolyFlags, PolyFlagsEx );

	mov	eax, DWORD PTR _PolyFlagsEx$[esp+88]
	mov	ecx, DWORD PTR [esi+40]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR _PolyFlags$[esp+92]
	push	eax
	push	ebp
	push	esi
	call	DWORD PTR [edx]

; 4917 : 			INT	Count = Info.NumMips - TexInfo->FirstMip;

	mov	ecx, DWORD PTR [esi+20]
	mov	eax, DWORD PTR [ebp+64]
	sub	eax, ecx

; 4918 : 			for( INT MipIndex=TexInfo->FirstMip, ListIndex=0; ListIndex<Count; ListIndex++,MipIndex++ )

	test	eax, eax
	mov	DWORD PTR _Count$125021[esp+92], eax
	mov	DWORD PTR _MipIndex$125022[esp+88], ecx
	mov	DWORD PTR _ListIndex$125023[esp+88], 0
	jle	$L125026
	lea	ebx, DWORD PTR [ebp+ecx*4+80]
	mov	DWORD PTR -76+[esp+92], ebx
$L125024:

; 4919 : 			{
; 4920 : 				// Lock the mip-level.
; 4921 : 				D3DLOCKED_RECT	LockedRect;
; 4922 : 				D3DSURFACE_DESC	SurfaceDesc;
; 4923 : 				int				BPP=GetFormatBPP(TexInfo->Filler->PixelFormat->Direct3DFormat);

	mov	edx, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP

; 4924 : 
; 4925 : 				TexInfo->Texture8->GetLevelDesc(ListIndex,&SurfaceDesc);

	mov	edi, DWORD PTR _ListIndex$125023[esp+92]
	add	esp, 4
	lea	ecx, DWORD PTR _SurfaceDesc$125028[esp+92]
	push	ecx
	mov	DWORD PTR _BPP$125029[esp+96], eax
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	eax
	call	DWORD PTR [edx+56]

; 4926 : 				TexInfo->Texture8->LockRect(ListIndex,&LockedRect,NULL,0);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	lea	ecx, DWORD PTR _LockedRect$125027[esp+100]
	push	ecx
	push	edi
	push	eax
	call	DWORD PTR [edx+64]

; 4927 : 				
; 4928 : 				if(Info.Mips[MipIndex]->DataPtr)

	mov	edx, DWORD PTR [ebx]
	cmp	DWORD PTR [edx], 0
	je	$L125038

; 4929 : 				{
; 4930 : 					if(Info.Format==TEXF_RGBA7)

	cmp	DWORD PTR [ebp+36], 1
	jne	SHORT $L125031

; 4931 : 					{
; 4932 : 						TexInfo->Filler->UploadMipmap(TexInfo,(BYTE*) LockedRect.pBits,LockedRect.Pitch,Info,MipIndex,PolyFlags);

	mov	ecx, DWORD PTR _PolyFlags$[esp+88]
	mov	eax, DWORD PTR [esi+40]
	mov	edx, DWORD PTR _MipIndex$125022[esp+88]
	mov	edi, DWORD PTR [eax]
	mov	eax, DWORD PTR _LockedRect$125027[esp+92]
	push	ecx
	push	edx
	mov	edx, DWORD PTR _LockedRect$125027[esp+104]
	push	ebp
	push	eax
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T144685[esp+112], esp
	push	edx
	call	DWORD PTR __imp_??0FRainbowPtr@@QAE@PAX@Z
	mov	ecx, DWORD PTR [esi+40]
	push	esi
	call	DWORD PTR [edi+4]

; 4933 : 					} else

	jmp	$L125038
$L125031:

; 4934 : 					{
; 4935 : 						for(DWORD u = 0;u < SurfaceDesc.Width;u += Info.Mips[MipIndex]->USize)

	mov	eax, DWORD PTR _SurfaceDesc$125028[esp+116]
	xor	ecx, ecx
	test	eax, eax
	mov	DWORD PTR _u$125035[esp+92], ecx
	jbe	SHORT $L125038
	mov	eax, DWORD PTR _SurfaceDesc$125028[esp+120]
$L125036:

; 4936 : 							for(DWORD v = 0;v < SurfaceDesc.Height;v += Info.Mips[MipIndex]->VSize)

	xor	edi, edi
	test	eax, eax
	jbe	SHORT $L125037
	imul	ecx, DWORD PTR _BPP$125029[esp+92]
	shr	ecx, 3
	mov	DWORD PTR -56+[esp+92], ecx
	jmp	SHORT $L125040
$L144832:

; 4934 : 					{
; 4935 : 						for(DWORD u = 0;u < SurfaceDesc.Width;u += Info.Mips[MipIndex]->USize)

	mov	ecx, DWORD PTR -56+[esp+92]
$L125040:

; 4937 : 								TexInfo->Filler->UploadMipmap(TexInfo,(BYTE*) LockedRect.pBits + u * BPP / 8 + v * LockedRect.Pitch,LockedRect.Pitch,Info,MipIndex,PolyFlags);

	mov	eax, DWORD PTR [esi+40]
	mov	ebx, DWORD PTR [eax]
	mov	edx, DWORD PTR _PolyFlags$[esp+88]
	mov	eax, DWORD PTR _MipIndex$125022[esp+88]
	push	edx
	push	eax
	mov	eax, DWORD PTR _LockedRect$125027[esp+100]
	mov	edx, edi
	imul	edx, eax
	push	ebp
	push	eax
	mov	eax, DWORD PTR _LockedRect$125027[esp+112]
	add	edx, ecx
	push	ecx
	add	edx, eax
	mov	ecx, esp
	mov	DWORD PTR $T144686[esp+112], esp
	push	edx
	call	DWORD PTR __imp_??0FRainbowPtr@@QAE@PAX@Z
	mov	ecx, DWORD PTR [esi+40]
	push	esi
	call	DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR -76+[esp+92]
	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _SurfaceDesc$125028[esp+120]
	add	edi, edx
	cmp	edi, eax
	jb	SHORT $L144832

; 4936 : 							for(DWORD v = 0;v < SurfaceDesc.Height;v += Info.Mips[MipIndex]->VSize)

	mov	ecx, DWORD PTR _u$125035[esp+92]
$L125037:

; 4934 : 					{
; 4935 : 						for(DWORD u = 0;u < SurfaceDesc.Width;u += Info.Mips[MipIndex]->USize)

	mov	edx, DWORD PTR [ebx]
	mov	edi, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _SurfaceDesc$125028[esp+116]
	add	ecx, edi
	cmp	ecx, edx
	mov	DWORD PTR _u$125035[esp+92], ecx
	jb	SHORT $L125036
$L125038:

; 4938 : 					}
; 4939 : 				}
; 4940 : 
; 4941 : 				// Unlock the mip-level.
; 4942 : 				TexInfo->Texture8->UnlockRect(ListIndex);

	mov	eax, DWORD PTR [esi]
	mov	edi, DWORD PTR _ListIndex$125023[esp+88]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	eax
	call	DWORD PTR [ecx+68]
	mov	edx, DWORD PTR _MipIndex$125022[esp+88]
	mov	eax, DWORD PTR _Count$125021[esp+92]
	inc	edi
	inc	edx
	add	ebx, 4
	cmp	edi, eax
	mov	DWORD PTR _ListIndex$125023[esp+88], edi
	mov	DWORD PTR _MipIndex$125022[esp+88], edx
	mov	DWORD PTR -76+[esp+92], ebx
	jl	$L125024
$L125026:

; 4943 : 			}
; 4944 : 			Stats.TexUploads++;

	mov	eax, DWORD PTR _this$[esp+92]
	inc	DWORD PTR [eax+19704]

; 4945 : 
; 4946 : 			// Unload texture.
; 4947 : 			Info.bRealtimeChanged = 0;

	mov	edx, DWORD PTR [ebp+76]
	and	edx, -17				; ffffffefH

; 4948 : 			
; 4949 : 			if(!Info.bRealtime&&!Info.bParametric&&!IsLightmap&&!Use2ndTierTextureCache&&(Info.Texture&&!Info.Texture->IsA(UProceduralTexture::StaticClass()))) Info.Unload();	

	mov	cl, dl
	test	cl, 12					; 0000000cH
	mov	DWORD PTR [ebp+76], edx
	jne	SHORT $L125045
	mov	ecx, DWORD PTR _IsLightmap$[esp+88]
	test	ecx, ecx
	jne	SHORT $L125045
	mov	ecx, DWORD PTR [eax+19156]
	test	ecx, ecx
	jne	SHORT $L125045
	mov	eax, DWORD PTR [ebp]
	test	eax, eax
	je	SHORT $L125045
	mov	eax, DWORD PTR [eax+36]
	test	eax, eax
	mov	ecx, DWORD PTR __imp_?PrivateStaticClass@UProceduralTexture@@0VUClass@@A
	je	SHORT $L144775
$L144773:
	cmp	eax, ecx
	je	SHORT $L125045
	mov	eax, DWORD PTR [eax+40]
	test	eax, eax
	jne	SHORT $L144773
$L144775:
	xor	eax, eax
	test	ecx, ecx
	sete	al
	test	eax, eax
	jne	SHORT $L125045
	mov	ecx, ebp
	call	DWORD PTR __imp_?Unload@FTextureInfo@@QAEXXZ
$L125045:

; 4950 : 			unclock(Cycles);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], 0
	mov	DWORD PTR _L$144782[esp+88], 0
	je	SHORT $L144784
	rdtsc
	mov	DWORD PTR _L$144782[esp+88], eax
	mov	DWORD PTR _H$144783[esp+88], edx
$L144784:

; 4951 : 			TexInfo->Filler->PixelFormat->UploadCycles += Cycles;

	mov	eax, DWORD PTR [esi+40]
	mov	edx, DWORD PTR _L$144782[esp+88]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Cycles$125017[esp+92]
	mov	ebx, DWORD PTR _this$[esp+92]
	lea	ecx, DWORD PTR [edx+ecx-34]
	add	DWORD PTR [eax+48], ecx
$L125016:

; 4952 : 		}
; 4953 : 		
; 4954 : 		if( Precache )

	mov	eax, DWORD PTR _Precache$[esp+88]
	test	eax, eax
	je	SHORT $L125046

; 4955 : 		{
; 4956 : 			Stages[dwStage] = TexInfo;

	mov	edx, DWORD PTR _dwStage$[esp+92]
	mov	DWORD PTR [ebx+edx*4+19712], esi

; 4977 : 		VALIDATE;
; 4978 : 
; 4979 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 76					; 0000004cH
	ret	20					; 00000014H
$L125046:

; 4957 : 			return;
; 4958 : 		}
; 4959 : 		// Update texture info.
; 4960 : 
; 4961 : 		if(TexInfo->FrameCounter != FrameCounter)

	mov	eax, DWORD PTR [esi+44]
	cmp	eax, DWORD PTR [ebx+675104]
	je	SHORT $L125047

; 4962 : 		{
; 4963 : 			TexInfo->Filler->PixelFormat->Active++;

	mov	ecx, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [ecx+4]
	inc	DWORD PTR [eax+32]

; 4964 : 			TexInfo->Filler->PixelFormat->ActiveRAM += TexInfo->SizeBytes;

	mov	edx, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [esi+4]
	add	DWORD PTR [eax+36], ecx
$L125047:

; 4965 : 		}
; 4966 : 
; 4967 : 		TexInfo->FrameCounter = FrameCounter;

	mov	edx, DWORD PTR [ebx+675104]

; 4968 : 		TexInfo->Filler->PixelFormat->Sets++;

	mov	eax, DWORD PTR [esi+40]

; 4969 : 
; 4970 : 		// Set Direct3D state.
; 4971 : 		Direct3DDevice8->SetTexture(dwStage,TexInfo->Texture8);

	mov	edi, DWORD PTR _dwStage$[esp+92]
	mov	DWORD PTR [esi+44], edx
	mov	eax, DWORD PTR [eax+4]
	inc	DWORD PTR [eax+40]
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	edi
	push	eax
	call	DWORD PTR [ecx+244]

; 4972 : 
; 4973 : 		if(!Stages[dwStage] || TexInfo->UseMips != Stages[dwStage]->UseMips)

	mov	eax, DWORD PTR [ebx+edi*4+19712]
	test	eax, eax
	je	SHORT $L125049
	mov	ecx, DWORD PTR [esi+36]
	cmp	ecx, DWORD PTR [eax+36]
	je	SHORT $L125048
$L125049:

; 4974 : 			Direct3DDevice8->SetTextureStageState(dwStage,D3DTSS_MIPFILTER,TexInfo->UseMips == 0 ? D3DTEXF_NONE : UseTrilinear ? D3DTEXF_LINEAR : D3DTEXF_POINT);

	mov	eax, DWORD PTR [esi+36]
	xor	ecx, ecx
	test	eax, eax
	je	SHORT $L144688
	mov	edx, DWORD PTR [ebx+19128]
	test	edx, edx
	setne	cl
	inc	ecx
$L144688:
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	18					; 00000012H
	push	edi
	push	eax
	call	DWORD PTR [edx+252]
$L125048:

; 4975 : 		
; 4976 : 		Stages[dwStage] = TexInfo;

	mov	DWORD PTR [ebx+edi*4+19712], esi
$L124960:

; 4977 : 		VALIDATE;
; 4978 : 
; 4979 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 76					; 0000004cH
	ret	20					; 00000014H
	npad	3
$L144841:
	DD	$L124984
	DD	$L124988
	DD	$L124992
	DD	$L124987
	DD	$L124992
	DD	$L124991
?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ENDP ; UD3DRenderDevice::SetTexture
_TEXT	ENDS
PUBLIC	?CleanupRenderTargetResources@UD3DRenderDevice@@QAEXXZ ; UD3DRenderDevice::CleanupRenderTargetResources
; Function compile flags: /Ogty
;	COMDAT ?CleanupRenderTargetResources@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT
_i$ = -4
?CleanupRenderTargetResources@UD3DRenderDevice@@QAEXXZ PROC NEAR ; UD3DRenderDevice::CleanupRenderTargetResources, COMDAT
; _this$ = ecx

; 4983 : 	{

	push	ecx
	push	ebx
	push	edi
	mov	edi, ecx

; 4984 : 		for (INT i = 0; i < RenderTargetArray.Num(); i++)

	mov	eax, DWORD PTR [edi+216]
	xor	ebx, ebx
	cmp	eax, ebx
	mov	DWORD PTR _i$[esp+12], ebx
	jle	SHORT $L125055
	push	ebp
	push	esi
	xor	ebp, ebp

; 4988 : 	}

	npad	7

; 4984 : 		for (INT i = 0; i < RenderTargetArray.Num(); i++)

$L125053:

; 4985 : 			ShutdownRenderTargetRes(&RenderTargetArray(i));

	mov	esi, DWORD PTR [edi+212]
	mov	eax, DWORD PTR [esi+ebp]
	add	esi, ebp
	cmp	eax, ebx
	mov	eax, DWORD PTR [esi+8]
	jne	SHORT $L144866
	cmp	eax, ebx
	jne	SHORT $L144868
	cmp	DWORD PTR [esi+4], ebx
	je	SHORT $L125054
$L144868:
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	jmp	SHORT $L125054
$L144866:
	cmp	eax, ebx
	je	SHORT $L144872
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], ebx
$L144872:
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, ebx
	je	SHORT $L144876
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+4], ebx
$L144876:
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+4], ebx
$L125054:
	mov	eax, DWORD PTR _i$[esp+20]
	mov	ecx, DWORD PTR [edi+216]
	inc	eax
	add	ebp, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$[esp+20], eax
	jl	SHORT $L125053
	pop	esi
	pop	ebp
$L125055:

; 4986 : 
; 4987 : 		SafeRelease(ClipperTexture);

	mov	eax, DWORD PTR [edi+19112]
	cmp	eax, ebx
	je	SHORT $L144882
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [edi+19112], ebx
$L144882:
	pop	edi
	pop	ebx

; 4988 : 	}

	pop	ecx
	ret	0
?CleanupRenderTargetResources@UD3DRenderDevice@@QAEXXZ ENDP ; UD3DRenderDevice::CleanupRenderTargetResources
_TEXT	ENDS
PUBLIC	?RecognizePixelFormat@UD3DRenderDevice@@QAEXAAUFPixFormat@@W4_D3DFORMAT@@PBG@Z ; UD3DRenderDevice::RecognizePixelFormat
; Function compile flags: /Ogty
;	COMDAT ?RecognizePixelFormat@UD3DRenderDevice@@QAEXAAUFPixFormat@@W4_D3DFORMAT@@PBG@Z
_TEXT	SEGMENT
_Dest$ = 8
_Direct3DFormat$ = 12
_InDesc$ = 16
?RecognizePixelFormat@UD3DRenderDevice@@QAEXAAUFPixFormat@@W4_D3DFORMAT@@PBG@Z PROC NEAR ; UD3DRenderDevice::RecognizePixelFormat, COMDAT
; _this$ = ecx

; 4993 : 		VALIDATE;
; 4994 : 
; 4995 : 		Dest.Supported		 = true;
; 4996 : 		Dest.Direct3DFormat  = Direct3DFormat;

	mov	eax, DWORD PTR _Direct3DFormat$[esp-4]
	mov	edx, DWORD PTR _Dest$[esp-4]
	push	esi

; 4997 : 		Dest.Desc		     = InDesc;

	mov	esi, DWORD PTR _InDesc$[esp]

; 4998 : 		Dest.BitsPerPixel	 = GetFormatBPP(Direct3DFormat);

	push	eax
	mov	BYTE PTR [edx], 1
	mov	DWORD PTR [edx+4], eax
	mov	DWORD PTR [edx+12], esi
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	mov	DWORD PTR [edx+16], eax

; 4999 : 		Dest.Next            = FirstPixelFormat;

	mov	eax, DWORD PTR [ecx+16988]
	add	esp, 4
	mov	DWORD PTR [edx+8], eax

; 5000 : 		FirstPixelFormat     = &Dest;

	mov	DWORD PTR [ecx+16988], edx
	pop	esi

; 5001 : 	}

	ret	12					; 0000000cH
?RecognizePixelFormat@UD3DRenderDevice@@QAEXAAUFPixFormat@@W4_D3DFORMAT@@PBG@Z ENDP ; UD3DRenderDevice::RecognizePixelFormat
_TEXT	ENDS
PUBLIC	??_C@_1IG@GNH@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$CI?$AAN?$AAe?$AAw?$AAX?$AA?$DN?$AA?$CF?$AAi?$AA?0?$AAN?$AAe?$AAw?$AAY?$AA?$DN@ ; `string'
PUBLIC	??_C@_09FJBK@Direct3D8?$AA@			; `string'
PUBLIC	??_C@_0BB@JBFD@NewColorBytes?$DM?$DN4?$AA@	; `string'
PUBLIC	??_C@_1EM@JIDN@?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AAl?$AAy?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_1EE@PDPG@?$AAN?$AAo?$AA?5?$AAf?$AAu?$AAl?$AAl?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@ ; `string'
PUBLIC	??_C@_1EE@COBK@?$AAN?$AAo?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@ ; `string'
PUBLIC	??_C@_1FK@OJMD@?$AAB?$AAe?$AAs?$AAt?$AA?9?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_1CE@EFFL@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@HHEN@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAp?$AAt?$AAh?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl?$AAM?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1IA@JLIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1CE@BLNE@?$AAV?$AAi?$AAe?$AAw?$AAp?$AAo?$AAr?$AAt?$AAh?$AAW?$AAn?$AAd?$AA?3?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1LE@DHNM@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAh?$AAa?$AAr?$AAd?$AAw?$AAa@ ; `string'
PUBLIC	??_C@_1HA@ONNK@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CI?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@ ; `string'
PUBLIC	??_C@_1FI@IKFB@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_0DF@FMGL@?$CBFAILED?$CIDirect3DDevice8?9?$DOSetView@ ; `string'
PUBLIC	??_C@_0DF@HNEL@?$CBFAILED?$CIDirect3DDevice8?9?$DOGetView@ ; `string'
PUBLIC	??_C@_1BC@PNPN@?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@FEAG@?$AAA?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GM@CMDP@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAM?$AAi?$AAp?$AAm?$AAa?$AAp?$AAp?$AAi@ ; `string'
PUBLIC	??_C@_1DO@LJFH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ ; `string'
PUBLIC	??_C@_1EM@HNBH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ ; `string'
PUBLIC	??_C@_1EO@FHMI@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ ; `string'
PUBLIC	??_C@_0HG@OIHH@Viewport?9?$DOResizeViewport?$CI?$CIFullsc@ ; `string'
PUBLIC	??_C@_1BA@JDJI@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@MMOI@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@NLNL@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BM@CBJB@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAR?$AA5?$AAG?$AA6?$AAB?$AA5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@HCCA@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@PNOF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3@ ; `string'
PUBLIC	??_C@_1DA@KNFF@?$AAC?$AAl?$AAi?$AAp?$AAp?$AAe?$AAr?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAc?$AAr?$AAe?$AAa@ ; `string'
PUBLIC	??_C@_1EG@JNCJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa@ ; `string'
PUBLIC	??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FM@ONLA@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ ; `string'
PUBLIC	??_C@_1HG@MLIH@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ ; `string'
PUBLIC	??_C@_08DHAB@InDevice?$AA@			; `string'
PUBLIC	??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
EXTRN	__imp_?SaveConfig@UObject@@QAEXKPBG@Z:NEAR
EXTRN	__imp_??0FColor@@QAE@EEE@Z:NEAR
;	COMDAT ??_C@_1IG@GNH@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$CI?$AAN?$AAe?$AAw?$AAX?$AA?$DN?$AA?$CF?$AAi?$AA?0?$AAN?$AAe?$AAw?$AAY?$AA?$DN@
_DATA	SEGMENT
??_C@_1IG@GNH@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$CI?$AAN?$AAe?$AAw?$AAX?$AA?$DN?$AA?$CF?$AAi?$AA?0?$AAN?$AAe?$AAw?$AAY?$AA?$DN@ DB 'S'
	DB	00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 's', 00H, '(', 00H
	DB	'N', 00H, 'e', 00H, 'w', 00H, 'X', 00H, '=', 00H, '%', 00H, 'i'
	DB	00H, ',', 00H, 'N', 00H, 'e', 00H, 'w', 00H, 'Y', 00H, '=', 00H
	DB	'%', 00H, 'i', 00H, ',', 00H, 'N', 00H, 'e', 00H, 'w', 00H, 'C'
	DB	00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 'B', 00H, 'y', 00H
	DB	't', 00H, 'e', 00H, 's', 00H, '=', 00H, '%', 00H, 'i', 00H, ','
	DB	00H, 'F', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 's', 00H, 'c', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, '%', 00H, 'i', 00H, ')'
	DB	00H, ' ', 00H, '(', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H
	DB	':', 00H, '%', 00H, '0', 00H, '8', 00H, 'x', 00H, ')', 00H, ';'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_09FJBK@Direct3D8?$AA@
_DATA	SEGMENT
??_C@_09FJBK@Direct3D8?$AA@ DB 'Direct3D8', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@JBFD@NewColorBytes?$DM?$DN4?$AA@
_DATA	SEGMENT
??_C@_0BB@JBFD@NewColorBytes?$DM?$DN4?$AA@ DB 'NewColorBytes<=4', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EM@JIDN@?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AAl?$AAy?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5@
_DATA	SEGMENT
??_C@_1EM@JIDN@?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AAl?$AAy?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5@ DB 'S'
	DB	00H, 'u', 00H, 'c', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	'f', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'y', 00H, ' ', 00H, 't'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3'
	DB	00H, 'D', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@
_DATA	SEGMENT
??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ DB '%'
	DB	00H, 's', 00H, ' ', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H
	DB	00H, 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EE@PDPG@?$AAN?$AAo?$AA?5?$AAf?$AAu?$AAl?$AAl?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@
_DATA	SEGMENT
??_C@_1EE@PDPG@?$AAN?$AAo?$AA?5?$AAf?$AAu?$AAl?$AAl?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@ DB 'N'
	DB	00H, 'o', 00H, ' ', 00H, 'f', 00H, 'u', 00H, 'l', 00H, 'l', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, ' '
	DB	00H, 'd', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, ' ', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 's'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H
	DB	00H, 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EE@COBK@?$AAN?$AAo?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@
_DATA	SEGMENT
??_C@_1EE@COBK@?$AAN?$AAo?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@ DB 'N'
	DB	00H, 'o', 00H, ' ', 00H, 'a', 00H, 'c', 00H, 'c', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, 'd', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, ' ', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 's'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H
	DB	00H, 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_1FK@OJMD@?$AAB?$AAe?$AAs?$AAt?$AA?9?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAm@
_DATA	SEGMENT
??_C@_1FK@OJMD@?$AAB?$AAe?$AAs?$AAt?$AA?9?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAm@ DB 'B'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, '-', 00H, 'm', 00H, 'a', 00H
	DB	't', 00H, 'c', 00H, 'h', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 's'
	DB	00H, 'p', 00H, 'l', 00H, 'a', 00H, 'y', 00H, ' ', 00H, 'm', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H, 'i'
	DB	00H, 'x', 00H, '%', 00H, 'i', 00H, 'x', 00H, '%', 00H, 'i', 00H
	DB	' ', 00H, '(', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, '=', 00H, '%', 00H, 'i', 00H, ')', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CE@EFFL@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$AA@
_DATA	SEGMENT
??_C@_1CE@EFFL@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$AA@ DB 'C'
	DB	00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'D', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'F', 00H, 'o', 00H, 'r'
	DB	00H, 'm', 00H, 'a', 00H, 't', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1IA@JLIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1IA@JLIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3'
	DB	00H, 'D', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H
	DB	'e', 00H, '8', 00H, '-', 00H, '>', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, '(', 00H, '&', 00H, 'P', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'P', 00H, 'a'
	DB	00H, 'r', 00H, 'm', 00H, 's', 00H, ')', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CE@BLNE@?$AAV?$AAi?$AAe?$AAw?$AAp?$AAo?$AAr?$AAt?$AAh?$AAW?$AAn?$AAd?$AA?3?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AA@
_DATA	SEGMENT
??_C@_1CE@BLNE@?$AAV?$AAi?$AAe?$AAw?$AAp?$AAo?$AAr?$AAt?$AAh?$AAW?$AAn?$AAd?$AA?3?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AA@ DB 'V'
	DB	00H, 'i', 00H, 'e', 00H, 'w', 00H, 'p', 00H, 'o', 00H, 'r', 00H
	DB	't', 00H, 'h', 00H, 'W', 00H, 'n', 00H, 'd', 00H, ':', 00H, '%'
	DB	00H, '0', 00H, '8', 00H, 'x', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1LE@DHNM@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAh?$AAa?$AAr?$AAd?$AAw?$AAa@
_DATA	SEGMENT
??_C@_1LE@DHNM@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAh?$AAa?$AAr?$AAd?$AAw?$AAa@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, ' '
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'w', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't'
	DB	00H, 'e', 00H, 'x', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'o', 00H
	DB	'c', 00H, 'e', 00H, 's', 00H, 's', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, ':', 00H, ' ', 00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H
	DB	'a', 00H, 't', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 't'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 't', 00H, 'o', 00H
	DB	' ', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 's', 00H, 'o'
	DB	00H, 'f', 00H, 't', 00H, 'w', 00H, 'a', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x'
	DB	00H, 'p', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'e', 00H, 's', 00H
	DB	's', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1HA@ONNK@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CI?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@
_DATA	SEGMENT
??_C@_1HA@ONNK@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CI?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@ DB 'C'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, '('
	DB	00H, 'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w', 00H
	DB	'a', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'p', 00H, 'r', 00H
	DB	'o', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, ')', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1FI@IKFB@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAo?$AAf?$AAt@
_DATA	SEGMENT
??_C@_1FI@IKFB@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAo?$AAf?$AAt@ DB 'D'
	DB	00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'i', 00H, 's', 00H, ' ', 00H, 'u', 00H, 's', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	'w', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e'
	DB	00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'p', 00H
	DB	'r', 00H, 'o', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, '.', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DF@FMGL@?$CBFAILED?$CIDirect3DDevice8?9?$DOSetView@
_DATA	SEGMENT
??_C@_0DF@FMGL@?$CBFAILED?$CIDirect3DDevice8?9?$DOSetView@ DB '!FAILED(Di'
	DB	'rect3DDevice8->SetViewport(&ViewportInfo))', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DF@HNEL@?$CBFAILED?$CIDirect3DDevice8?9?$DOGetView@
_DATA	SEGMENT
??_C@_0DF@HNEL@?$CBFAILED?$CIDirect3DDevice8?9?$DOGetView@ DB '!FAILED(Di'
	DB	'rect3DDevice8->GetViewport(&ViewportInfo))', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BC@PNPN@?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@
_DATA	SEGMENT
??_C@_1BC@PNPN@?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ DB 'A', 00H
	DB	'8', 00H, 'R', 00H, '8', 00H, 'G', 00H, '8', 00H, 'B', 00H, '8'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BC@FEAG@?$AAA?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@
_DATA	SEGMENT
??_C@_1BC@FEAG@?$AAA?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@ DB 'A', 00H
	DB	'1', 00H, 'R', 00H, '5', 00H, 'G', 00H, '5', 00H, 'B', 00H, '5'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1GM@CMDP@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAM?$AAi?$AAp?$AAm?$AAa?$AAp?$AAp?$AAi@
_DATA	SEGMENT
??_C@_1GM@CMDP@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAM?$AAi?$AAp?$AAm?$AAa?$AAp?$AAp?$AAi@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'M', 00H, 'i'
	DB	00H, 'p', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' '
	DB	00H, 'a', 00H, 'v', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 't'
	DB	00H, 'h', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H
	DB	' ', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DO@LJFH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@
_DATA	SEGMENT
??_C@_1DO@LJFH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'S', 00H, 'u'
	DB	00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 's', 00H
	DB	' ', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 'n'
	DB	00H, 'e', 00H, 'a', 00H, 'r', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EM@HNBH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@
_DATA	SEGMENT
??_C@_1EM@HNBH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'S', 00H, 'u'
	DB	00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 'p', 00H, 'e', 00H, 'c', 00H, 'u', 00H, 'l'
	DB	00H, 'a', 00H, 'r', 00H, ' ', 00H, 'g', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'a', 00H, 'u', 00H, 'd', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EO@FHMI@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@
_DATA	SEGMENT
??_C@_1EO@FHMI@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'S', 00H, 'u'
	DB	00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 's', 00H
	DB	' ', 00H, 'B', 00H, 'L', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'D'
	DB	00H, 'I', 00H, 'F', 00H, 'F', 00H, 'U', 00H, 'S', 00H, 'E', 00H
	DB	'A', 00H, 'L', 00H, 'P', 00H, 'H', 00H, 'A', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0HG@OIHH@Viewport?9?$DOResizeViewport?$CI?$CIFullsc@
_DATA	SEGMENT
??_C@_0HG@OIHH@Viewport?9?$DOResizeViewport?$CI?$CIFullsc@ DB 'Viewport->'
	DB	'ResizeViewport((Fullscreen ? BLIT_Fullscreen : 0) | BLIT_Dire'
	DB	'ct3D, NewX, ViewportY, ViewportColorBits / 8 )', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_08DHAB@InDevice?$AA@
_DATA	SEGMENT
??_C@_08DHAB@InDevice?$AA@ DB 'InDevice', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '-'
	DB	00H, '>', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'V', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x'
	DB	00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H
	DB	'(', 00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h'
	DB	00H, '*', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H
	DB	'f', 00H, '(', 00H, 'T', 00H, ')', 00H, ',', 00H, ' ', 00H, 'T'
	DB	00H, ':', 00H, ':', 00H, 'U', 00H, 'S', 00H, 'A', 00H, 'G', 00H
	DB	'E', 00H, ',', 00H, ' ', 00H, 'T', 00H, ':', 00H, ':', 00H, 'F'
	DB	00H, 'V', 00H, 'F', 00H, ',', 00H, ' ', 00H, 'D', 00H, '3', 00H
	DB	'D', 00H, 'P', 00H, 'O', 00H, 'O', 00H, 'L', 00H, '_', 00H, 'D'
	DB	00H, 'E', 00H, 'F', 00H, 'A', 00H, 'U', 00H, 'L', 00H, 'T', 00H
	DB	',', 00H, ' ', 00H, '&', 00H, 'V', 00H, 'e', 00H, 'r', 00H, 't'
	DB	00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H
	DB	'e', 00H, 'r', 00H, '8', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BA@JDJI@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@
_DATA	SEGMENT
??_C@_1BA@JDJI@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@ DB 'U', 00H, 'n'
	DB	00H, 'k', 00H, 'n', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CA@MMOI@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@
_DATA	SEGMENT
??_C@_1CA@MMOI@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, 'F', 00H, 'M', 00H, 'T', 00H, '_', 00H
	DB	'A', 00H, '8', 00H, 'R', 00H, '8', 00H, 'G', 00H, '8', 00H, 'B'
	DB	00H, '8', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CA@NLNL@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@
_DATA	SEGMENT
??_C@_1CA@NLNL@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, 'F', 00H, 'M', 00H, 'T', 00H, '_', 00H
	DB	'X', 00H, '8', 00H, 'R', 00H, '8', 00H, 'G', 00H, '8', 00H, 'B'
	DB	00H, '8', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BM@CBJB@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAR?$AA5?$AAG?$AA6?$AAB?$AA5?$AA?$AA@
_DATA	SEGMENT
??_C@_1BM@CBJB@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAR?$AA5?$AAG?$AA6?$AAB?$AA5?$AA?$AA@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, 'F', 00H, 'M', 00H, 'T', 00H, '_', 00H
	DB	'R', 00H, '5', 00H, 'G', 00H, '6', 00H, 'B', 00H, '5', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CA@HCCA@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@
_DATA	SEGMENT
??_C@_1CA@HCCA@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, 'F', 00H, 'M', 00H, 'T', 00H, '_', 00H
	DB	'X', 00H, '1', 00H, 'R', 00H, '5', 00H, 'G', 00H, '5', 00H, 'B'
	DB	00H, '5', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DA@PNOF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3@
_DATA	SEGMENT
??_C@_1DA@PNOF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3@ DB 'R'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'f'
	DB	00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, ':', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DA@KNFF@?$AAC?$AAl?$AAi?$AAp?$AAp?$AAe?$AAr?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAc?$AAr?$AAe?$AAa@
_DATA	SEGMENT
??_C@_1DA@KNFF@?$AAC?$AAl?$AAi?$AAp?$AAp?$AAe?$AAr?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAc?$AAr?$AAe?$AAa@ DB 'C'
	DB	00H, 'l', 00H, 'i', 00H, 'p', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1FM@ONLA@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@
_DATA	SEGMENT
??_C@_1FM@ONLA@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ DB 'I'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'R', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g'
	DB	00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, '.', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1HG@MLIH@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@
_DATA	SEGMENT
??_C@_1HG@MLIH@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ DB 'I'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'R', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g'
	DB	00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, '(', 00H
	DB	'n', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'r', 00H, 'f'
	DB	00H, 'a', 00H, 'c', 00H, 'e', 00H, ')', 00H, '.', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EG@JNCJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa@
_DATA	SEGMENT
??_C@_1EG@JNCJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa@ DB 'S'
	DB	00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'R', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, ' ', 00H, 'F', 00H, 'A', 00H, 'I', 00H, 'L', 00H, 'E', 00H
	DB	'D', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CO@HHEN@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAp?$AAt?$AAh?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl?$AAM?$AAa?$AAt@
_DATA	SEGMENT
??_C@_1CO@HHEN@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAp?$AAt?$AAh?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl?$AAM?$AAa?$AAt@ DB 'C'
	DB	00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'D', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, 'h', 00H, 'S', 00H, 't', 00H, 'e', 00H, 'n'
	DB	00H, 'c', 00H, 'i', 00H, 'l', 00H, 'M', 00H, 'a', 00H, 't', 00H
	DB	'c', 00H, 'h', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?SetRes@UD3DRenderDevice@@UAIHHHHH@Z
_TEXT	SEGMENT
_DisplayMode$125074 = -168
_AdapterFormat$ = -220
_BestMode$125091 = -224
_BestError$125092 = -180
_Index$125093 = -220
_PresentParms$ = -152
_i$145452 = -224
_FogStart$125200 = -212
_FogEnd$125201 = -224
_Material8$125206 = -100
_DisplayMode$125218 = -168
_i$145558 = -188
_LockedRect$125240 = -188
_SurfaceDesc$125241 = -32
_Bits$125244 = -212
_i$125252 = -188
_i$145631 = -224
_i$145814 = -224
$T145842 = -212
$T144902 = -212
_NewX$ = -188
_NewY$ = 8
_NewColorBytes$ = 12
_Fullscreen$ = 16
?SetRes@UD3DRenderDevice@@UAIHHHHH@Z PROC NEAR		; UD3DRenderDevice::SetRes, COMDAT
; _this$ = ecx
; _NewX$ = edx

; 5004 : 	{

	sub	esp, 224				; 000000e0H

; 5005 : 		debugf(TEXT("SetRes(NewX=%i,NewY=%i,NewColorBytes=%i,Fullscreen%i) (this:%08x);"),NewX,NewY,NewColorBytes,Fullscreen,this);

	mov	eax, DWORD PTR _Fullscreen$[esp+220]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _NewColorBytes$[esp+232]
	push	edi
	mov	ebp, ecx
	mov	ecx, DWORD PTR _NewY$[esp+236]
	push	ebp
	push	eax
	push	esi
	push	ecx
	push	edx
	mov	DWORD PTR _NewX$[esp+260], edx
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1IG@GNH@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$CI?$AAN?$AAe?$AAw?$AAX?$AA?$DN?$AA?$CF?$AAi?$AA?0?$AAN?$AAe?$AAw?$AAY?$AA?$DN@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 5006 : 		// Verify my current state:
; 5007 : 		verify(this);

	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	xor	ebx, ebx
	add	esp, 28					; 0000001cH
	cmp	ebp, ebx
	jne	SHORT $L125064
	push	5007					; 0000138fH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_04BEIE@this?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L125064:

; 5008 : 		verify(Direct3D8);

	cmp	DWORD PTR _Direct3D8, ebx
	jne	SHORT $L125065
	push	5008					; 00001390H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_09FJBK@Direct3D8?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L125065:

; 5009 : 		verify(NewColorBytes<=4);

	cmp	esi, 4
	jle	SHORT $L125067
	push	5009					; 00001391H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0BB@JBFD@NewColorBytes?$DM?$DN4?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L125067:

; 5010 : 		//if(BeginSceneCount) EndScene();
; 5011 : 		//check(LockCount==0);
; 5012 : 		if(LockCount>0) 

	cmp	DWORD PTR [ebp+675188], ebx
	jle	SHORT $L125069

; 5013 : 			Unlock(0);

	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+96]
$L125069:

; 5014 : 
; 5015 : 		// If D3D already inited, uninit it now.:
; 5016 : 		UnSetRes(NULL,0);

	mov	eax, DWORD PTR [ebp+675184]
	cmp	eax, ebx
	je	SHORT $L144953
	dec	eax
	mov	DWORD PTR [ebp+675184], eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]
$L144953:
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+88]
	mov	eax, DWORD PTR [ebp+216]
	xor	esi, esi
	cmp	eax, ebx
	jle	SHORT $L144958
	xor	edi, edi
$L144956:
	mov	ecx, DWORD PTR [ebp+212]
	add	ecx, edi
	push	ecx
	mov	ecx, ebp
	call	?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ; UD3DRenderDevice::ShutdownRenderTargetRes
	mov	eax, DWORD PTR [ebp+216]
	inc	esi
	add	edi, 20					; 00000014H
	cmp	esi, eax
	jl	SHORT $L144956
$L144958:
	lea	eax, DWORD PTR [ebp+19112]
	push	eax
	mov	DWORD PTR -208+[esp+244], eax
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	lea	eax, DWORD PTR [ebp+16684]
	push	eax
	mov	DWORD PTR -200+[esp+248], eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	lea	eax, DWORD PTR [ebp+16704]
	push	eax
	mov	DWORD PTR -192+[esp+252], eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	lea	eax, DWORD PTR [ebp+16724]
	push	eax
	mov	DWORD PTR -204+[esp+256], eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	lea	eax, DWORD PTR [ebp+16744]
	push	eax
	mov	DWORD PTR -196+[esp+260], eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease

; 5017 : 
; 5018 : 		// Enumerate device display modes.
; 5019 : 		DisplayModes.Empty(Direct3D8->GetAdapterModeCount(BestAdapterIndex));

	mov	ecx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [eax]
	add	esp, 20					; 00000014H
	push	ecx
	push	eax
	call	DWORD PTR [edx+24]
	push	16					; 00000010H
	mov	ecx, OFFSET FLAT:?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	mov	DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A+4, ebx
	mov	DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A+8, eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z

; 5020 : 
; 5021 : 		for(DWORD Index=0;Index<Direct3D8->GetAdapterModeCount(BestAdapterIndex);Index++)

	mov	ecx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	eax
	xor	esi, esi
	call	DWORD PTR [edx+24]
	test	eax, eax
	jbe	SHORT $L125073
	mov	edi, 640				; 00000280H
$L125071:

; 5022 : 		{
; 5023 : 			D3DDISPLAYMODE	DisplayMode;
; 5024 : 			Direct3D8->EnumAdapterModes(BestAdapterIndex,Index,&DisplayMode);

	mov	eax, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _DisplayMode$125074[esp+240]
	push	ecx
	mov	ecx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR [edx+28]

; 5025 : 
; 5026 : 			if((DisplayMode.Width >=640)
; 5027 : 			 &&(DisplayMode.Height>=480))

	cmp	DWORD PTR _DisplayMode$125074[esp+240], edi
	jb	SHORT $L125072
	cmp	DWORD PTR _DisplayMode$125074[esp+244], 480 ; 000001e0H
	jb	SHORT $L125072

; 5028 : 				DisplayModes.AddItem(DisplayMode);

	push	16					; 00000010H
	push	1
	mov	ecx, OFFSET FLAT:?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	ecx, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	mov	edx, DWORD PTR _DisplayMode$125074[esp+240]
	shl	eax, 4
	add	eax, ecx
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _DisplayMode$125074[esp+244]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _DisplayMode$125074[esp+248]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _DisplayMode$125074[esp+252]
	mov	DWORD PTR [eax+12], ecx
$L125072:
	mov	ecx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	eax
	inc	esi
	call	DWORD PTR [edx+24]
	cmp	esi, eax
	jb	SHORT $L125071
$L125073:

; 5029 : 		}
; 5030 : 
; 5031 : 		// Exit if just testing.
; 5032 : 		if(!Viewport)

	mov	ecx, DWORD PTR [ebp+48]
	cmp	ecx, ebx
	jne	$L125076

; 5033 : 		{
; 5034 : 			SaveConfig();

	push	ebx
	push	16384					; 00004000H
	mov	ecx, ebp
	call	DWORD PTR __imp_?SaveConfig@UObject@@QAEXKPBG@Z

; 5035 : 			UnSetRes(TEXT("Successfully tested Direct3D presence"),0);

	mov	eax, DWORD PTR [ebp+675184]
	cmp	eax, ebx
	je	SHORT $L145087
	dec	eax
	mov	DWORD PTR [ebp+675184], eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+140]
$L145087:
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+88]
	mov	eax, DWORD PTR [ebp+216]
	xor	esi, esi
	cmp	eax, ebx
	jle	SHORT $L145092
	xor	edi, edi

; 5405 : 	}

	npad	3

; 5035 : 			UnSetRes(TEXT("Successfully tested Direct3D presence"),0);

$L145090:
	mov	ecx, DWORD PTR [ebp+212]
	add	ecx, edi
	push	ecx
	mov	ecx, ebp
	call	?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ; UD3DRenderDevice::ShutdownRenderTargetRes
	mov	eax, DWORD PTR [ebp+216]
	inc	esi
	add	edi, 20					; 00000014H
	cmp	esi, eax
	jl	SHORT $L145090
$L145092:
	mov	edx, DWORD PTR -208+[esp+240]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -200+[esp+244]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	ecx, DWORD PTR -192+[esp+248]
	push	ecx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	edx, DWORD PTR -204+[esp+252]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -196+[esp+256]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	add	esp, 20					; 00000014H
	push	ebx
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	OFFSET FLAT:??_C@_1EM@JIDN@?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AAl?$AAy?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5@ ; `string'
	push	OFFSET FLAT:??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
	push	762					; 000002faH
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 20					; 00000014H

; 5036 : 			return 1;

	mov	eax, 1

; 5405 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 224				; 000000e0H
	ret	12					; 0000000cH
$L125076:

; 5037 : 		}
; 5038 : 
; 5039 : 		// Remember parameters.
; 5040 : 		ViewporthWnd       = (HWND)Viewport->GetWindow();

	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+116]

; 5041 : 		ViewportX          = Min( NewX, MaxResWidth  );

	mov	ecx, DWORD PTR _NewX$[esp+240]
	mov	DWORD PTR [ebp+16768], eax
	mov	eax, DWORD PTR [ebp+19164]
	cmp	ecx, eax
	jle	SHORT $L146053
	mov	ecx, eax
$L146053:

; 5042 : 		ViewportY          = Min( NewY, MaxResHeight );

	mov	eax, DWORD PTR [ebp+19168]
	mov	esi, DWORD PTR _NewY$[esp+236]
	cmp	esi, eax
	mov	DWORD PTR -172+[esp+240], ecx
	mov	DWORD PTR [ebp+16760], ecx
	jle	SHORT $L146054
	mov	esi, eax
$L146054:

; 5043 : 		ViewportColorBits  = NewColorBytes * 8;

	mov	edx, DWORD PTR _NewColorBytes$[esp+236]
	lea	eax, DWORD PTR [edx*8]
	mov	DWORD PTR -212+[esp+240], eax
	mov	DWORD PTR [ebp+16772], eax

; 5044 : 		ViewportFullscreen = Fullscreen;

	mov	eax, DWORD PTR _Fullscreen$[esp+236]

; 5045 : 
; 5046 : 		D3DFORMAT AdapterFormat;
; 5047 : 
; 5048 : 		// See if the window is full screen.
; 5049 : 		if(Fullscreen)

	cmp	eax, ebx
	mov	DWORD PTR -216+[esp+240], esi
	mov	DWORD PTR [ebp+16764], esi
	mov	DWORD PTR [ebp+16776], eax
	je	$L125088

; 5050 : 		{
; 5051 : 			if(DisplayModes.Num()==0 )

	mov	eax, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A+4
	cmp	eax, ebx
	jne	$L125089

; 5052 : 				return UnSetRes(TEXT("No fullscreen display modes found"),0);

	mov	eax, DWORD PTR [ebp+675184]
	cmp	eax, ebx
	je	SHORT $L145178
	dec	eax
	mov	DWORD PTR [ebp+675184], eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]
$L145178:
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+88]
	mov	eax, DWORD PTR [ebp+216]
	xor	esi, esi
	cmp	eax, ebx
	jle	SHORT $L145183
	xor	edi, edi
$L145181:
	mov	ecx, DWORD PTR [ebp+212]
	add	ecx, edi
	push	ecx
	mov	ecx, ebp
	call	?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ; UD3DRenderDevice::ShutdownRenderTargetRes
	mov	eax, DWORD PTR [ebp+216]
	inc	esi
	add	edi, 20					; 00000014H
	cmp	esi, eax
	jl	SHORT $L145181
$L145183:
	mov	edx, DWORD PTR -208+[esp+240]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -200+[esp+244]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	ecx, DWORD PTR -192+[esp+248]
	push	ecx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	edx, DWORD PTR -204+[esp+252]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -196+[esp+256]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	add	esp, 20					; 00000014H
	push	ebx
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	OFFSET FLAT:??_C@_1EE@PDPG@?$AAN?$AAo?$AA?5?$AAf?$AAu?$AAl?$AAl?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@ ; `string'
	jmp	$L146067
$L125089:

; 5057 : 				BestError = MAXINT;
; 5058 : 
; 5059 : 			for(INT Index = 0;Index < DisplayModes.Num();Index++)

	cmp	eax, ebx
	mov	DWORD PTR _BestMode$125091[esp+240], ebx
	mov	DWORD PTR _BestError$125092[esp+240], 2147483647 ; 7fffffffH
	mov	DWORD PTR _Index$125093[esp+240], ebx
	jle	$L146030
	mov	eax, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	mov	ebx, DWORD PTR -212+[esp+240]
	lea	edx, DWORD PTR [eax+12]
	mov	DWORD PTR -176+[esp+240], edx
	jmp	SHORT $L125094
$L146043:

; 5053 : 
; 5054 : 			// Find matching display mode.
; 5055 : 
; 5056 : 			INT	BestMode = 0,

	mov	esi, DWORD PTR -216+[esp+240]
	mov	ecx, DWORD PTR -172+[esp+240]
$L125094:

; 5060 : 			{
; 5061 : 				INT ThisError
; 5062 : 				=	Abs((INT)DisplayModes(Index).Width -(INT)ViewportX)
; 5063 : 				+	Abs((INT)DisplayModes(Index).Height-(INT)ViewportY)
; 5064 : 				+	Abs((INT)GetFormatBPP(DisplayModes(Index).Format)-(INT)ViewportColorBits);

	mov	eax, DWORD PTR [edx-12]
	sub	eax, ecx
	jns	SHORT $L146056
	neg	eax
$L146056:
	mov	ecx, eax
	mov	eax, DWORD PTR [edx-8]
	sub	eax, esi
	jns	SHORT $L146057
	neg	eax
$L146057:
	mov	esi, DWORD PTR [edx]
	push	esi
	mov	edi, eax
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	mov	edx, eax
	add	esp, 4
	sub	edx, ebx
	jns	SHORT $L145234
	neg	edx
$L145234:
	add	edx, edi

; 5065 : 
; 5066 : 				if(ThisError < BestError && (GetFormatBPP(DisplayModes(Index).Format)==16 || GetFormatBPP(DisplayModes(Index).Format)==24 || GetFormatBPP(DisplayModes(Index).Format)==32) && (DisplayModes(Index).Format >= D3DFMT_R8G8B8 && DisplayModes(Index).Format <= D3DFMT_X4R4G4B4))

	mov	edi, DWORD PTR _BestError$125092[esp+240]
	add	edx, ecx
	cmp	edx, edi
	jge	SHORT $L125095
	cmp	eax, 16					; 00000010H
	je	SHORT $L125115
	cmp	eax, 24					; 00000018H
	je	SHORT $L125115
	cmp	eax, 32					; 00000020H
	jne	SHORT $L125095
$L125115:
	cmp	esi, 20					; 00000014H
	jl	SHORT $L125095
	cmp	esi, 30					; 0000001eH
	jg	SHORT $L125095

; 5067 : 				{
; 5068 : 					BestMode = Index;

	mov	ecx, DWORD PTR _Index$125093[esp+240]

; 5069 : 					BestError = ThisError;

	mov	edi, edx
	mov	DWORD PTR _BestMode$125091[esp+240], ecx
	mov	DWORD PTR _BestError$125092[esp+240], edi
$L125095:
	mov	eax, DWORD PTR _Index$125093[esp+240]
	mov	edx, DWORD PTR -176+[esp+240]
	mov	ecx, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A+4
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	mov	DWORD PTR _Index$125093[esp+240], eax
	mov	DWORD PTR -176+[esp+240], edx
	jl	$L146043

; 5070 : 				//	debugf(NAME_Init,TEXT("Next mode is best match so far:"));
; 5071 : 				}
; 5072 : 				
; 5073 : 				//debugf(NAME_Init,TEXT("Enum modes: %ix%ix%i "),(INT)DisplayModes(Index).Width,(INT)DisplayModes(Index).Height,GetFormatBPP(DisplayModes(Index).Format));
; 5074 : 			}
; 5075 : 
; 5076 : 			if(BestError == MAXINT)

	cmp	edi, 2147483647				; 7fffffffH
	jne	$L125116
	xor	ebx, ebx
$L146030:

; 5077 : 				return UnSetRes(TEXT("No acceptable display modes found"),0);

	mov	eax, DWORD PTR [ebp+675184]
	cmp	eax, ebx
	je	SHORT $L145320
	dec	eax
	mov	DWORD PTR [ebp+675184], eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+140]
$L145320:
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+88]
	mov	eax, DWORD PTR [ebp+216]
	xor	esi, esi
	cmp	eax, ebx
	jle	SHORT $L145326
	xor	edi, edi

; 5405 : 	}

	npad	5

; 5077 : 				return UnSetRes(TEXT("No acceptable display modes found"),0);

$L145324:
	mov	ecx, DWORD PTR [ebp+212]
	add	ecx, edi
	push	ecx
	mov	ecx, ebp
	call	?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ; UD3DRenderDevice::ShutdownRenderTargetRes
	mov	eax, DWORD PTR [ebp+216]
	inc	esi
	add	edi, 20					; 00000014H
	cmp	esi, eax
	jl	SHORT $L145324
$L145326:
	mov	esi, DWORD PTR -208+[esp+240]
	mov	eax, DWORD PTR [esi]
	cmp	eax, ebx
	je	SHORT $L145334
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi], ebx
$L145334:
	mov	eax, DWORD PTR -200+[esp+240]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	ecx, DWORD PTR -192+[esp+244]
	push	ecx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	edx, DWORD PTR -204+[esp+248]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -196+[esp+252]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	add	esp, 16					; 00000010H
	push	ebx
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	OFFSET FLAT:??_C@_1EE@COBK@?$AAN?$AAo?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@ ; `string'
$L146067:
	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
	push	762					; 000002faH
	push	edx
	jmp	$L146055
$L125116:

; 5078 : 
; 5079 : 			ViewportColorBits = GetFormatBPP(DisplayModes(BestMode).Format);

	mov	ecx, DWORD PTR _BestMode$125091[esp+240]
	mov	eax, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	shl	ecx, 4
	mov	edx, DWORD PTR [ecx+eax+12]
	push	edx
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	mov	DWORD PTR [ebp+16772], eax

; 5080 : 			ViewportX         = DisplayModes(BestMode).Width;

	mov	eax, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR [ebp+16760], edx

; 5081 : 			ViewportY         = DisplayModes(BestMode).Height;

	mov	eax, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	mov	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR [ebp+16764], edx

; 5082 : 
; 5083 : 			AdapterFormat = DisplayModes(BestMode).Format;

	mov	edx, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	mov	eax, DWORD PTR [ecx+edx+12]
	add	esp, 4

; 5084 : 
; 5085 : 			debugf(NAME_Init,TEXT("Best-match display mode: %ix%ix%i (Error=%i)"),DisplayModes(BestMode).Width,DisplayModes(BestMode).Height,GetFormatBPP(DisplayModes(BestMode).Format),BestError);

	push	edi
	push	eax
	mov	DWORD PTR _AdapterFormat$[esp+248], eax
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [ecx+edx+4]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	push	eax
	mov	eax, DWORD PTR [edx]
	push	ecx
	push	OFFSET FLAT:??_C@_1FK@OJMD@?$AAB?$AAe?$AAs?$AAt?$AA?9?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAm@ ; `string'
	push	762					; 000002faH
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 28					; 0000001cH

; 5086 : 
; 5087 : 		}
; 5088 : 		else

	xor	ebx, ebx
	jmp	SHORT $L146058
$L125088:

; 5089 : 		{
; 5090 : #if 0
; 5091 : 			D3DDISPLAYMODE	DisplayMode;
; 5092 : 
; 5093 : 			if(FAILED(h=Direct3D8->GetAdapterDisplayMode(BestAdapterIndex,&DisplayMode)))
; 5094 : 				return UnSetRes(TEXT("GetAdapterDisplayMode"),h);
; 5095 : 
; 5096 : 			AdapterFormat = DisplayMode.Format;
; 5097 : 			ViewportColorBits = GetFormatBPP(AdapterFormat);
; 5098 : #else
; 5099 : 			AdapterFormat = OriginalDisplayMode.Format;

	mov	eax, DWORD PTR ?OriginalDisplayMode@@3U_D3DDISPLAYMODE@@A+12

; 5100 : 			//ViewportX = OriginalDisplayMode.Width;
; 5101 : 			//ViewportY= OriginalDisplayMode.Height;
; 5102 : 			ViewportColorBits = GetFormatBPP(AdapterFormat);

	push	eax
	mov	DWORD PTR _AdapterFormat$[esp+244], eax
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	add	esp, 4
	mov	DWORD PTR [ebp+16772], eax
$L146058:
	mov	edx, DWORD PTR _Fullscreen$[esp+236]

; 5103 : #endif
; 5104 : 		}
; 5105 : 
; 5106 : 		// Setup the presentation parameters.
; 5107 : 		D3DPRESENT_PARAMETERS PresentParms;
; 5108 : 		appMemzero(&PresentParms,sizeof(PresentParms));

	xor	eax, eax
	mov	ecx, 13					; 0000000dH
	lea	edi, DWORD PTR _PresentParms$[esp+240]
	rep stosd

; 5109 : 
; 5110 : 		//Fullscreen=1;
; 5111 : 		//if(GIsEditor)
; 5112 : 		PresentParms.Flags = D3DPRESENTFLAG_LOCKABLE_BACKBUFFER;
; 5113 : 
; 5114 : 		PresentParms.Windowed = !Fullscreen;
; 5115 : 		PresentParms.hDeviceWindow = (HWND)ViewporthWnd;

	mov	eax, DWORD PTR [ebp+16768]
	xor	ecx, ecx
	cmp	edx, ebx
	sete	cl
	mov	esi, 1
	mov	DWORD PTR _PresentParms$[esp+264], eax

; 5116 : 		PresentParms.SwapEffect = Fullscreen ? D3DSWAPEFFECT_DISCARD : D3DSWAPEFFECT_COPY;
; 5117 : 		PresentParms.BackBufferWidth = Max(ViewportX,1);

	mov	eax, DWORD PTR [ebp+16760]
	mov	DWORD PTR _PresentParms$[esp+280], esi
	mov	DWORD PTR _PresentParms$[esp+240], eax
	mov	DWORD PTR _PresentParms$[esp+268], ecx
	xor	ecx, ecx
	cmp	edx, ebx
	sete	cl
	cmp	eax, esi
	lea	ecx, DWORD PTR [ecx+ecx+1]
	mov	DWORD PTR _PresentParms$[esp+260], ecx
	jge	SHORT $L145366
	mov	DWORD PTR _PresentParms$[esp+240], esi
$L145366:

; 5118 : 		PresentParms.BackBufferHeight = Max(ViewportY,1);

	mov	eax, DWORD PTR [ebp+16764]
	cmp	eax, esi
	mov	DWORD PTR _PresentParms$[esp+244], eax
	jge	SHORT $L145374
	mov	DWORD PTR _PresentParms$[esp+244], esi
$L145374:

; 5119 : 		PresentParms.BackBufferCount = (Fullscreen ? (UseTripleBuffering ? 3: 2) : 1);

	cmp	edx, ebx
	je	SHORT $L144893
	mov	edi, DWORD PTR [ebp+19140]
	xor	eax, eax
	cmp	edi, ebx
	setne	al
	add	eax, 2
	mov	DWORD PTR _PresentParms$[esp+252], eax
	jmp	SHORT $L144894
$L144893:
	mov	DWORD PTR _PresentParms$[esp+252], esi
$L144894:

; 5120 : 		PresentParms.EnableAutoDepthStencil = TRUE;
; 5121 : 		PresentParms.FullScreen_PresentationInterval = Fullscreen ? (UseVSync ? D3DPRESENT_INTERVAL_ONE : D3DPRESENT_INTERVAL_IMMEDIATE) : D3DPRESENT_INTERVAL_DEFAULT;

	cmp	edx, ebx
	mov	DWORD PTR _PresentParms$[esp+272], esi
	je	SHORT $L144895
	mov	ecx, DWORD PTR [ebp+19144]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, -2147483647			; 80000001H
	add	ecx, -2147483648			; 80000000H
	mov	DWORD PTR _PresentParms$[esp+288], ecx
	jmp	SHORT $L144896
$L144895:
	mov	DWORD PTR _PresentParms$[esp+288], ebx
$L144896:

; 5122 : 		PresentParms.FullScreen_RefreshRateInHz=D3DPRESENT_RATE_DEFAULT;
; 5123 : 
; 5124 : 		//PresentParms.FullScreen_PresentationInterval=D3DPRESENT_INTERVAL_DEFAULT/*D3DPRESENT_INTERVAL_ONE*/ /*D3DPRESENT_INTERVAL_IMMEDIATE*/;
; 5125 : 		//PresentParms.SwapEffect=D3DSWAPEFFECT_COPY;
; 5126 : 		
; 5127 : 		// Determine which back buffer format to use.
; 5128 : 		D3DFORMAT BackBufferFormat = (ViewportColorBits == 32 ? D3DFMT_A8R8G8B8 : ViewportColorBits == 16 ? D3DFMT_R5G6B5 : D3DFMT_X8R8G8B8);

	mov	eax, DWORD PTR [ebp+16772]
	cmp	eax, 32					; 00000020H
	mov	DWORD PTR _PresentParms$[esp+284], ebx
	jne	SHORT $L144897
	mov	esi, 21					; 00000015H
	jmp	SHORT $L144898
$L144897:
	xor	edx, edx
	cmp	eax, 16					; 00000010H
	sete	dl
	add	edx, 22					; 00000016H
	mov	esi, edx
$L144898:

; 5129 : 		while(Direct3D8->CheckDeviceFormat(BestAdapterIndex,D3DDEVTYPE_HAL,AdapterFormat,D3DUSAGE_RENDERTARGET,D3DRTYPE_SURFACE,BackBufferFormat) != D3D_OK)

	mov	edi, DWORD PTR _AdapterFormat$[esp+240]
	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	1
	push	1
	push	edi
	push	1
	push	edx
	push	eax
	call	DWORD PTR [ecx+40]
	test	eax, eax
	je	SHORT $L125133
$L125132:

; 5130 : 		{
; 5131 : 				 if(BackBufferFormat == D3DFMT_A8R8G8B8)	BackBufferFormat = D3DFMT_X8R8G8B8; 

	cmp	esi, 21					; 00000015H
	jne	SHORT $L125135
	mov	esi, 22					; 00000016H

; 5132 : 			else if(BackBufferFormat == D3DFMT_X8R8G8B8)	BackBufferFormat = D3DFMT_R5G6B5;

	jmp	SHORT $L125142
$L125135:
	cmp	esi, 22					; 00000016H
	jne	SHORT $L125137
	mov	esi, 23					; 00000017H

; 5133 : 			else if(BackBufferFormat == D3DFMT_R8G8B8)		BackBufferFormat = D3DFMT_X8R8G8B8;

	jmp	SHORT $L125142
$L125137:
	cmp	esi, 20					; 00000014H
	jne	SHORT $L125139
	mov	esi, 22					; 00000016H

; 5134 : 			else if(BackBufferFormat == D3DFMT_R5G6B5)		BackBufferFormat = D3DFMT_X1R5G5B5;

	jmp	SHORT $L125142
$L125139:
	cmp	esi, 23					; 00000017H
	jne	$L125141
	mov	esi, 24					; 00000018H
$L125142:

; 5136 : 
; 5137 : 			if(Fullscreen)

	cmp	DWORD PTR _Fullscreen$[esp+236], ebx
	je	SHORT $L125144

; 5138 : 				AdapterFormat = BackBufferFormat;

	mov	edi, esi
$L125144:

; 5129 : 		while(Direct3D8->CheckDeviceFormat(BestAdapterIndex,D3DDEVTYPE_HAL,AdapterFormat,D3DUSAGE_RENDERTARGET,D3DRTYPE_SURFACE,BackBufferFormat) != D3D_OK)

	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	1
	push	1
	push	edi
	push	1
	push	edx
	push	eax
	call	DWORD PTR [ecx+40]
	test	eax, eax
	jne	SHORT $L125132

; 5138 : 				AdapterFormat = BackBufferFormat;

	mov	DWORD PTR _AdapterFormat$[esp+240], edi
$L125133:

; 5139 : 		}
; 5140 : 
; 5141 : 		PresentParms.BackBufferFormat = BackBufferFormat;
; 5142 : 
; 5143 : 		// Determine which depth buffer format to use.
; 5144 : 		D3DFORMAT DepthFormat = (ViewportColorBits==32 ? D3DFMT_D32 : D3DFMT_D16);

	mov	eax, DWORD PTR [ebp+16772]
	xor	ecx, ecx
	cmp	eax, 32					; 00000020H
	setne	cl
	mov	DWORD PTR _PresentParms$[esp+248], esi
	dec	ecx
	and	ecx, -9					; fffffff7H
	add	ecx, 80					; 00000050H
	mov	edi, ecx

; 5405 : 	}

	npad	5

; 5139 : 		}
; 5140 : 
; 5141 : 		PresentParms.BackBufferFormat = BackBufferFormat;
; 5142 : 
; 5143 : 		// Determine which depth buffer format to use.
; 5144 : 		D3DFORMAT DepthFormat = (ViewportColorBits==32 ? D3DFMT_D32 : D3DFMT_D16);

$L125147:

; 5145 : 
; 5146 : 		while(Direct3D8->CheckDeviceFormat(BestAdapterIndex,D3DDEVTYPE_HAL,AdapterFormat,D3DUSAGE_DEPTHSTENCIL,D3DRTYPE_SURFACE,DepthFormat) != D3D_OK ||
; 5147 : 			  Direct3D8->CheckDepthStencilMatch(BestAdapterIndex,D3DDEVTYPE_HAL,AdapterFormat,BackBufferFormat,DepthFormat) != D3D_OK)

	mov	ecx, DWORD PTR _AdapterFormat$[esp+240]
	mov	eax, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [eax]
	push	edi
	push	1
	push	2
	push	ecx
	mov	ecx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	push	1
	push	ecx
	push	eax
	call	DWORD PTR [edx+40]
	test	eax, eax
	jne	SHORT $L125151
	mov	ecx, DWORD PTR _AdapterFormat$[esp+240]
	mov	eax, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [eax]
	push	edi
	push	esi
	push	ecx
	mov	ecx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	push	1
	push	ecx
	push	eax
	call	DWORD PTR [edx+48]
	test	eax, eax
	je	$L125148
$L125151:

; 5148 : 		{
; 5149 : 			     if(DepthFormat == D3DFMT_D32)    DepthFormat = D3DFMT_D24S8;

	cmp	edi, 71					; 00000047H
	jne	$L125152
	mov	edi, 75					; 0000004bH

; 5150 : 			else if(DepthFormat == D3DFMT_D24S8)  DepthFormat = D3DFMT_D16;

	jmp	SHORT $L125147
$L125141:

; 5135 : 			else return UnSetRes(TEXT("CheckDeviceFormat"),0);

	mov	eax, DWORD PTR [ebp+675184]
	cmp	eax, ebx

; 5138 : 				AdapterFormat = BackBufferFormat;

	mov	DWORD PTR _AdapterFormat$[esp+240], edi
	je	SHORT $L145450
	dec	eax
	mov	DWORD PTR [ebp+675184], eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]
$L145450:
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+88]
	cmp	DWORD PTR [ebp+216], ebx
	mov	DWORD PTR _i$145452[esp+240], ebx
	jle	SHORT $L145455

; 5135 : 			else return UnSetRes(TEXT("CheckDeviceFormat"),0);

	xor	ebx, ebx
$L145453:
	mov	esi, DWORD PTR [ebp+212]
	mov	eax, DWORD PTR [esi+ebx]
	add	esi, ebx
	test	eax, eax
	jne	SHORT $L145463
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L145465
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L145454
$L145465:
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	jmp	SHORT $L146059
$L145463:
	lea	edi, DWORD PTR [esi+8]
	push	edi
	call	?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z ; SafeRelease
	add	esi, 4
	push	esi
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	DWORD PTR [edi], 0
	mov	DWORD PTR [esi], 0
$L146059:
	add	esp, 8
$L145454:
	mov	eax, DWORD PTR _i$145452[esp+240]
	mov	ecx, DWORD PTR [ebp+216]
	inc	eax
	add	ebx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$145452[esp+240], eax
	jl	SHORT $L145453
$L145455:
	mov	eax, DWORD PTR -208+[esp+240]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	ecx, DWORD PTR -200+[esp+244]
	push	ecx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	edx, DWORD PTR -192+[esp+248]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -204+[esp+252]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	esi, DWORD PTR -196+[esp+256]
	mov	eax, DWORD PTR [esi]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $L145478
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi], 0
$L145478:
	push	0
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	OFFSET FLAT:??_C@_1CE@EFFL@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$AA@ ; `string'
	jmp	$L146060
$L125152:

; 5150 : 			else if(DepthFormat == D3DFMT_D24S8)  DepthFormat = D3DFMT_D16;

	cmp	edi, 75					; 0000004bH
	jne	SHORT $L125154
	mov	edi, 80					; 00000050H

; 5151 : 			else if(DepthFormat == D3DFMT_D16)

	jmp	$L125147
$L125154:
	cmp	edi, 80					; 00000050H
	jne	$L125147

; 5152 : 				return UnSetRes(TEXT("CheckDepthStencilMatch"),0);

	mov	eax, DWORD PTR [ebp+675184]
	cmp	eax, ebx
	je	SHORT $L145556
	dec	eax
	mov	DWORD PTR [ebp+675184], eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]
$L145556:
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+88]
	cmp	DWORD PTR [ebp+216], ebx
	mov	DWORD PTR _i$145558[esp+240], ebx
	jle	$L145561
	xor	ebx, ebx
$L145559:
	mov	esi, DWORD PTR [ebp+212]
	mov	eax, DWORD PTR [esi+ebx]
	add	esi, ebx
	test	eax, eax
	jne	$L145569
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L145571
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	$L145560
$L145571:
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	jmp	$L146066
$L125148:

; 5153 : 		}
; 5154 : 
; 5155 : 		//debugf(TEXT("Using depth-buffer format %u(%u-bit)"),DepthFormat,GetFormatBPP(DepthFormat));
; 5156 : 		PresentParms.AutoDepthStencilFormat = DepthFormat;
; 5157 : 
; 5158 : #ifdef LOG_PRESENT_PARMS
; 5159 : 		// Dump present parms, useful for debugging.
; 5160 : 		LogPresentParms(PresentParms);
; 5161 : #endif
; 5162 : 
; 5163 : 		if(Direct3DDevice8)

	mov	eax, DWORD PTR [ebp+19124]
	cmp	eax, ebx
	lea	esi, DWORD PTR [ebp+19124]
	mov	DWORD PTR _PresentParms$[esp+276], edi
	je	$L146062

; 5164 : 		{
; 5165 : 			CleanupRenderTargetResources();

	cmp	DWORD PTR [ebp+216], ebx
	mov	DWORD PTR _i$145631[esp+240], ebx
	jle	$L145634
	mov	DWORD PTR -216+[esp+240], ebx

; 5405 : 	}

	npad	4

; 5164 : 		{
; 5165 : 			CleanupRenderTargetResources();

$L145632:
	mov	edi, DWORD PTR [ebp+212]
	mov	ecx, DWORD PTR -216+[esp+240]
	mov	eax, DWORD PTR [edi+ecx]
	add	edi, ecx
	cmp	eax, ebx
	mov	eax, DWORD PTR [edi+8]
	jne	SHORT $L145650
	cmp	eax, ebx
	jne	SHORT $L145652
	cmp	DWORD PTR [edi+4], ebx
	je	SHORT $L145633
$L145652:
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	jmp	SHORT $L145633
$L145650:
	cmp	eax, ebx
	je	SHORT $L145644
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+8], ebx
$L145644:
	mov	eax, DWORD PTR [edi+4]
	cmp	eax, ebx
	je	SHORT $L145648
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [edi+4], ebx
$L145648:
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+4], ebx
$L145633:
	mov	eax, DWORD PTR _i$145631[esp+240]
	mov	edx, DWORD PTR -216+[esp+240]
	mov	ecx, DWORD PTR [ebp+216]
	inc	eax
	add	edx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$145631[esp+240], eax
	mov	DWORD PTR -216+[esp+240], edx
	jl	SHORT $L145632
$L145634:
	mov	edi, DWORD PTR -208+[esp+240]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	je	SHORT $L145656
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi], ebx
$L145656:

; 5166 : 			CleanupVertexBuffers();

	mov	edi, DWORD PTR -200+[esp+240]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	je	SHORT $L145716
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [edi], ebx
$L145716:
	mov	edi, DWORD PTR -192+[esp+240]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	je	SHORT $L145722
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi], ebx
$L145722:
	mov	edi, DWORD PTR -204+[esp+240]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	je	SHORT $L145727
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [edi], ebx
$L145727:
	mov	edi, DWORD PTR -196+[esp+240]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	je	SHORT $L125159
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi], ebx
$L125159:

; 5167 : 
; 5168 : 			//SafeRelease(Direct3DDevice8);
; 5169 : 
; 5170 : 			D3D_CHECK(Direct3DDevice8->Reset(&PresentParms));

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _PresentParms$[esp+240]
	push	ecx
	push	eax
	call	DWORD PTR [edx+56]
	cmp	eax, ebx
	jge	SHORT $L125161
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	5170					; 00001432H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1IA@JLIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L125161:

; 5171 : 		} 
; 5172 : 
; 5173 : 		if(!Direct3DDevice8)

	cmp	DWORD PTR [esi], ebx
	jne	$L125174
$L146062:

; 5174 : 		{ 
; 5175 : 			//PresentParms.SwapEffect=D3DSWAPEFFECT_DISCARD;
; 5176 : 			PresentParms.MultiSampleType=D3DMULTISAMPLE_NONE;
; 5177 : 			
; 5178 : 			// Create the Direct3D device.
; 5179 : 			if(FAILED(h=Direct3D8->CreateDevice(BestAdapterIndex,D3DDEVTYPE_HAL,ViewporthWnd,D3DCREATE_HARDWARE_VERTEXPROCESSING,&PresentParms,&Direct3DDevice8)))

	mov	eax, DWORD PTR _Direct3D8
	push	esi
	lea	edx, DWORD PTR _PresentParms$[esp+244]
	push	edx
	mov	edx, DWORD PTR [ebp+16768]
	push	64					; 00000040H
	push	edx
	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	push	1
	push	edx
	mov	DWORD PTR _PresentParms$[esp+280], ebx
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+60]
	cmp	eax, ebx
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	$L125174

; 5180 : 			{
; 5181 : 				debugf(TEXT("ViewporthWnd:%08x"),ViewporthWnd);

	mov	eax, DWORD PTR [ebp+16768]
	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	push	eax
	push	OFFSET FLAT:??_C@_1CE@BLNE@?$AAV?$AAi?$AAe?$AAw?$AAp?$AAo?$AAr?$AAt?$AAh?$AAW?$AAn?$AAd?$AA?3?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AA@ ; `string'
	push	edx
	call	edi

; 5182 : 				debugf(TEXT("Failed to set hardware vertex processing: %s, attempting to set software vertexprocessing"),DXGetErrorString8(h));

	mov	eax, DWORD PTR ?h@@3JA			; h
	add	esp, 12					; 0000000cH
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	OFFSET FLAT:??_C@_1LE@DHNM@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAh?$AAa?$AAr?$AAd?$AAw?$AAa@ ; `string'
	push	edx
	call	edi

; 5183 : 				// If hardware vertex processing failed, switch to software:
; 5184 : 				if(FAILED(h=Direct3D8->CreateDevice(BestAdapterIndex,D3DDEVTYPE_HAL,ViewporthWnd,D3DCREATE_SOFTWARE_VERTEXPROCESSING,&PresentParms,&Direct3DDevice8)))

	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	add	esp, 12					; 0000000cH
	push	esi
	lea	edx, DWORD PTR _PresentParms$[esp+244]
	push	edx
	mov	edx, DWORD PTR [ebp+16768]
	push	32					; 00000020H
	push	edx
	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	push	1
	push	edx
	push	eax
	call	DWORD PTR [ecx+60]
	cmp	eax, ebx
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	$L125172

; 5185 : 					return UnSetRes(TEXT("CreateDevice (Failed to set software vertex processing)"),h);

	mov	DWORD PTR $T145842[esp+240], eax
	mov	eax, DWORD PTR [ebp+675184]
	cmp	eax, ebx
	je	SHORT $L145812
	mov	esi, DWORD PTR [esi]
	dec	eax
	mov	DWORD PTR [ebp+675184], eax
	mov	eax, DWORD PTR [esi]
	push	esi
	call	DWORD PTR [eax+140]
$L145812:
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+88]
	cmp	DWORD PTR [ebp+216], ebx
	mov	DWORD PTR _i$145814[esp+240], ebx
	jle	SHORT $L145817
	xor	ebx, ebx

; 5405 : 	}

	npad	4

; 5185 : 					return UnSetRes(TEXT("CreateDevice (Failed to set software vertex processing)"),h);

$L145815:
	mov	esi, DWORD PTR [ebp+212]
	mov	eax, DWORD PTR [esi+ebx]
	add	esi, ebx
	test	eax, eax
	jne	SHORT $L145824
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L145826
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L145816
$L145826:
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	jmp	SHORT $L146063
$L145824:
	lea	edi, DWORD PTR [esi+8]
	push	edi
	call	?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z ; SafeRelease
	add	esi, 4
	push	esi
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	DWORD PTR [edi], 0
	mov	DWORD PTR [esi], 0
$L146063:
	add	esp, 8
$L145816:
	mov	eax, DWORD PTR _i$145814[esp+240]
	mov	ecx, DWORD PTR [ebp+216]
	inc	eax
	add	ebx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$145814[esp+240], eax
	jl	SHORT $L145815
$L145817:
	mov	eax, DWORD PTR -208+[esp+240]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	ecx, DWORD PTR -200+[esp+244]
	push	ecx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	edx, DWORD PTR -192+[esp+248]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -204+[esp+252]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	esi, DWORD PTR -196+[esp+256]
	mov	eax, DWORD PTR [esi]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $L145839
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi], 0
$L145839:
	mov	edx, DWORD PTR $T145842[esp+240]
	push	edx
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1HA@ONNK@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CI?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@ ; `string'
	push	OFFSET FLAT:??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
	push	762					; 000002faH
	push	ecx
	jmp	$L146055
$L125172:

; 5186 : 				else
; 5187 : 					debugf(_T("Device is using software vertex processing."));

	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1FI@IKFB@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAo?$AAf?$AAt@ ; `string'
	push	eax
	call	edi
	add	esp, 8
$L125174:

; 5188 : 			} 
; 5189 : 		}
; 5190 : 
; 5191 : 		// Set viewport.
; 5192 : 		ViewportInfo.X      = 0;
; 5193 : 		ViewportInfo.Y      = 0;
; 5194 : 		ViewportInfo.Width  = ViewportX;

	mov	ecx, DWORD PTR [ebp+16760]

; 5195 : 		ViewportInfo.Height = ViewportY;

	mov	edx, DWORD PTR [ebp+16764]

; 5196 : 		ViewportInfo.MaxZ   = 1.f;
; 5197 : 		ViewportInfo.MinZ   = 0.f;
; 5198 : 		verify(!FAILED(Direct3DDevice8->SetViewport(&ViewportInfo)));

	mov	eax, DWORD PTR [esi]
	lea	edi, DWORD PTR [ebp+19172]
	push	edi
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [ebp+19176], ebx
	mov	DWORD PTR [ebp+19180], ecx
	mov	DWORD PTR [ebp+19184], edx
	mov	DWORD PTR [ebp+19192], 1065353216	; 3f800000H
	mov	DWORD PTR [ebp+19188], ebx
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+160]
	test	eax, eax
	jge	SHORT $L125177
	push	5198					; 0000144eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0DF@FMGL@?$CBFAILED?$CIDirect3DDevice8?9?$DOSetView@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125177:

; 5199 : 		verify(!FAILED(Direct3DDevice8->GetViewport(&ViewportInfo)));

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	eax
	call	DWORD PTR [edx+164]
	test	eax, eax
	jge	SHORT $L125180
	push	5199					; 0000144fH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0DF@HNEL@?$CBFAILED?$CIDirect3DDevice8?9?$DOGetView@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125180:

; 5200 : 
; 5201 : 		// Handle the texture formats we need.
; 5202 : 		{
; 5203 : 			// Determine which texture formats the device supports by calling CheckDeviceFormat for each supported format.
; 5204 : 			FirstPixelFormat = NULL;
; 5205 : 
; 5206 : 			if(!FAILED(Direct3D8->CheckDeviceFormat(BestAdapterIndex,D3DDEVTYPE_HAL,AdapterFormat,0,D3DRTYPE_TEXTURE,D3DFMT_A8R8G8B8)))

	mov	edi, DWORD PTR _AdapterFormat$[esp+240]
	push	21					; 00000015H
	push	3
	push	ebx
	push	edi
	mov	DWORD PTR [ebp+16988], ebx
	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	1
	push	edx
	push	eax
	call	DWORD PTR [ecx+40]
	test	eax, eax
	jl	SHORT $L145844

; 5207 : 				RecognizePixelFormat(Format8888,D3DFMT_A8R8G8B8,TEXT("A8R8G8B8"));

	lea	ecx, DWORD PTR [ebp+16884]
	push	21					; 00000015H
	mov	BYTE PTR [ecx], 1
	mov	DWORD PTR [ecx+4], 21			; 00000015H
	mov	DWORD PTR [ecx+12], OFFSET FLAT:??_C@_1BC@PNPN@?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ ; `string'
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [ebp+16988]
	mov	DWORD PTR [ecx+8], eax
	add	esp, 4
	mov	DWORD PTR [ebp+16988], ecx
$L145844:

; 5208 : 						
; 5209 : 			if(!FAILED(Direct3D8->CheckDeviceFormat(BestAdapterIndex,D3DDEVTYPE_HAL,AdapterFormat,0,D3DRTYPE_TEXTURE,D3DFMT_A1R5G5B5)))

	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	25					; 00000019H
	push	3
	push	ebx
	push	edi
	push	1
	push	edx
	push	eax
	call	DWORD PTR [ecx+40]
	test	eax, eax
	jl	SHORT $L145848

; 5210 : 			   RecognizePixelFormat(Format1555,D3DFMT_A1R5G5B5,TEXT("A1R5G5B5"));

	lea	ecx, DWORD PTR [ebp+16936]
	push	25					; 00000019H
	mov	BYTE PTR [ecx], 1
	mov	DWORD PTR [ecx+4], 25			; 00000019H
	mov	DWORD PTR [ecx+12], OFFSET FLAT:??_C@_1BC@FEAG@?$AAA?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@ ; `string'
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [ebp+16988]
	mov	DWORD PTR [ecx+8], eax
	add	esp, 4
	mov	DWORD PTR [ebp+16988], ecx
$L145848:

; 5211 : 		}
; 5212 : 
; 5213 : 		// Verify mipmapping supported.
; 5214 : 		if(!(DeviceCaps8.TextureFilterCaps & D3DPTFILTERCAPS_MIPFPOINT)
; 5215 : 		 &&!(DeviceCaps8.TextureFilterCaps & D3DPTFILTERCAPS_MIPFLINEAR))

	mov	eax, DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+64
	test	eax, 196608				; 00030000H
	jne	SHORT $L125188

; 5216 : 		{
; 5217 : 			appErrorf(TEXT("D3D Driver: Mipmapping not available with this driver"));

	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1GM@CMDP@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAM?$AAi?$AAp?$AAm?$AAa?$AAp?$AAp?$AAi@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8

; 5218 : 		} else

	jmp	SHORT $L125193
$L125188:

; 5219 : 		{
; 5220 : 			if( DeviceCaps8.TextureFilterCaps & D3DPTFILTERCAPS_MIPFLINEAR )

	test	eax, 131072				; 00020000H
	je	SHORT $L125191

; 5221 : 				debugf( NAME_Init, TEXT("D3D Driver: Supports trilinear"));

	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1DO@LJFH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ ; `string'
	push	762					; 000002faH
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 12					; 0000000cH

; 5222 : 			else

	jmp	SHORT $L125193
$L125191:

; 5223 : 				UseTrilinear = 0;

	mov	DWORD PTR [ebp+19128], ebx
$L125193:

; 5224 : 		}
; 5225 : 
; 5226 : 		// Check caps.
; 5227 : 		if( DeviceCaps8.ShadeCaps & D3DPSHADECAPS_SPECULARGOURAUDRGB )

	mov	eax, DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+56
	test	ah, 2
	je	SHORT $L125194

; 5228 :  			debugf( NAME_Init, TEXT("D3D Driver: Supports specular gouraud") );

	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1EM@HNBH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ ; `string'
	push	762					; 000002faH
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 12					; 0000000cH

; 5229 : 		else

	jmp	SHORT $L125196
$L125194:

; 5230 : 			UseVertexSpecular = 0;

	mov	DWORD PTR [ebp+19148], ebx
$L125196:

; 5231 : 
; 5232 : 		if( DeviceCaps8.TextureOpCaps & D3DTEXOPCAPS_BLENDDIFFUSEALPHA )

	mov	eax, DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+144
	test	ah, 8
	je	SHORT $L125197

; 5233 : 			debugf( NAME_Init, TEXT("D3D Driver: Supports BLENDDIFFUSEALPHA") );

	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1EO@FHMI@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ ; `string'
	push	762					; 000002faH
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 12					; 0000000cH

; 5234 : 		else

	jmp	SHORT $L125199
$L125197:

; 5235 : 			DetailTextures = 0;

	mov	DWORD PTR [ebp+104], ebx
$L125199:

; 5236 : 
; 5237 : 
; 5238 : 		// Depth buffering.
; 5239 : 		Direct3DDevice8->SetRenderState( D3DRS_ZENABLE, D3DZB_TRUE  );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	7
	push	eax
	call	DWORD PTR [ecx+200]

; 5240 : #if 0
; 5241 : 		/* NJS: Potentially enable W-buffering if it exists. */
; 5242 : 		if(	DeviceCaps8.RasterCaps & D3DPRASTERCAPS_WBUFFER)
; 5243 : 		{
; 5244 : 			debugf( NAME_Init, TEXT("D3D Driver: Supports w-buffering.") );
; 5245 : 			if((ViewportColorBits==16) ) // NVidia w-buffering in 32-bit color is borked on Pentium III's.
; 5246 : 			{
; 5247 : 				Direct3DDevice8->SetRenderState( D3DRS_ZENABLE, D3DZB_USEW );
; 5248 : 				debugf( NAME_Init, TEXT("D3D Driver: w-buffering enabled.") );
; 5249 : 			} else
; 5250 : 				debugf(NAME_Init, TEXT("D3D Driver: w-buffering NOT enabled."));
; 5251 : 		}
; 5252 : #endif
; 5253 : 
; 5254 : 		// Init render states.
; 5255 : 		{
; 5256 : 			Direct3DDevice8->SetRenderState( D3DRS_SPECULARENABLE, FALSE );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]

; 5257 : 			Direct3DDevice8->SetRenderState( D3DRS_DITHERENABLE, TRUE );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	26					; 0000001aH
	push	eax
	call	DWORD PTR [ecx+200]

; 5258 : 			Direct3DDevice8->SetRenderState( D3DRS_ZFUNC,D3DCMP_LESSEQUAL);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	4
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [edx+200]

; 5259 : 			Direct3DDevice8->SetRenderState( D3DRS_FOGCOLOR, 0 );        

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	34					; 00000022H
	push	eax
	call	DWORD PTR [ecx+200]

; 5260 : 			Direct3DDevice8->SetRenderState( D3DRS_FOGTABLEMODE, D3DFOG_LINEAR );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	3
	push	35					; 00000023H
	push	eax
	call	DWORD PTR [edx+200]

; 5261 : 			FLOAT FogStart=0.f, FogEnd = 65535.f;
; 5262 : 			Direct3DDevice8->SetRenderState( D3DRS_FOGSTART, *(DWORD*)&FogStart );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _FogStart$125200[esp+240], 0
	mov	edx, DWORD PTR _FogStart$125200[esp+240]
	push	edx
	push	36					; 00000024H
	push	eax
	mov	DWORD PTR _FogEnd$125201[esp+252], 1199570688 ; 477fff00H
	call	DWORD PTR [ecx+200]

; 5263 : 			Direct3DDevice8->SetRenderState( D3DRS_FOGEND, *(DWORD*)&FogEnd );

	mov	edx, DWORD PTR _FogEnd$125201[esp+240]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	37					; 00000025H
	push	eax
	call	DWORD PTR [ecx+200]

; 5264 : 			Direct3DDevice8->SetRenderState( D3DRS_LIGHTING, FALSE );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	137					; 00000089H
	push	eax
	call	DWORD PTR [ecx+200]

; 5265 : 			ZBias=-1.f;	// Set ZBias to an invalid state to force it to be reset next time SetZBias is called
; 5266 : 			SrcBlend=(D3DBLEND)0;
; 5267 : 			DstBlend=(D3DBLEND)0;
; 5268 : 			AlphaBlendEnable=-1;

	or	eax, -1
	mov	DWORD PTR [ebp+675176], eax

; 5269 : 			BeginSceneCount=0;
; 5270 : 			LockCount=0;
; 5271 : 			TextureClampMode=-1;

	mov	DWORD PTR [ebp+675180], eax

; 5272 : 
; 5273 : 			D3DMATERIAL8 Material8;
; 5274 : 			memset(&Material8,0,sizeof(Material8));

	xor	eax, eax
	mov	ecx, 17					; 00000011H
	lea	edi, DWORD PTR _Material8$125206[esp+240]
	rep stosd

; 5275 : 
; 5276 : 			Material8.Ambient.r = 1.0f; Material8.Ambient.g = 1.0f; Material8.Ambient.b = 1.0f; Material8.Ambient.a = 1.0f;
; 5277 : 			Material8.Diffuse.r = 0.5f; Material8.Diffuse.g = 0.5f; Material8.Diffuse.b = 0.5f; Material8.Diffuse.a = 1.0f;
; 5278 : 			Material8.Power = 0.f;

	mov	DWORD PTR _Material8$125206[esp+304], eax

; 5279 : 
; 5280 : 			Direct3DDevice8->SetMaterial(&Material8);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebp+675164], -1082130432	; bf800000H
	mov	DWORD PTR [ebp+675168], ebx
	mov	DWORD PTR [ebp+675172], ebx
	mov	DWORD PTR [ebp+675184], ebx
	mov	DWORD PTR [ebp+675188], ebx
	mov	DWORD PTR _Material8$125206[esp+256], 1065353216 ; 3f800000H
	mov	DWORD PTR _Material8$125206[esp+260], 1065353216 ; 3f800000H
	mov	DWORD PTR _Material8$125206[esp+264], 1065353216 ; 3f800000H
	mov	DWORD PTR _Material8$125206[esp+268], 1065353216 ; 3f800000H
	mov	DWORD PTR _Material8$125206[esp+240], 1056964608 ; 3f000000H
	mov	DWORD PTR _Material8$125206[esp+244], 1056964608 ; 3f000000H
	mov	DWORD PTR _Material8$125206[esp+248], 1056964608 ; 3f000000H
	mov	DWORD PTR _Material8$125206[esp+252], 1065353216 ; 3f800000H
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _Material8$125206[esp+240]
	push	ecx
	push	eax
	call	DWORD PTR [edx+168]

; 5281 : 			Direct3DDevice8->SetRenderState(D3DRS_SHADEMODE,D3DSHADE_GOURAUD);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	2
	push	9
	push	eax
	call	DWORD PTR [edx+200]

; 5282 : 			Direct3DDevice8->SetRenderState(D3DRS_EMISSIVEMATERIALSOURCE,D3DMCS_COLOR1);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	148					; 00000094H
	push	eax
	call	DWORD PTR [ecx+200]

; 5283 : 			Direct3DDevice8->SetRenderState(D3DRS_DIFFUSEMATERIALSOURCE,D3DMCS_MATERIAL);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	145					; 00000091H
	push	eax
	call	DWORD PTR [edx+200]

; 5284 : 		}
; 5285 : 
; 5286 : 		// Init texture stage state.
; 5287 : 		{
; 5288 : 			// Set stage 0 state.
; 5289 : 			//FLOAT LodBias=-0.5f;
; 5290 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MIPMAPLODBIAS, *(DWORD*)&LodBias );

	mov	edx, DWORD PTR ?LodBias@@3MA
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	19					; 00000013H
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5291 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ADDRESSU,   D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	13					; 0000000dH
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5292 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ADDRESSV,   D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	push	14					; 0000000eH
	push	ebx
	push	eax
	call	DWORD PTR [edx+252]

; 5293 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	2
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5294 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLORARG2, D3DTA_DIFFUSE );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	3
	push	ebx
	push	eax
	call	DWORD PTR [edx+252]

; 5295 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP,   D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5296 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	2
	push	5
	push	ebx
	push	eax
	call	DWORD PTR [edx+252]

; 5297 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	6
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5298 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP,   D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	ebx
	push	eax
	call	DWORD PTR [edx+252]

; 5299 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5300 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	ebx
	push	eax
	call	DWORD PTR [edx+252]

; 5301 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MIPFILTER, (UseTrilinear ? D3DTEXF_LINEAR : D3DTEXF_POINT));

	mov	edi, DWORD PTR [ebp+19128]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	cmp	edi, ebx
	setne	dl
	inc	edx
	push	edx
	push	18					; 00000012H
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5302 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_TEXCOORDINDEX, 0 );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	11					; 0000000bH
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5303 : 
; 5304 : 			// Set stage 1 state.
; 5305 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MIPMAPLODBIAS, *(DWORD*)&LodBias );

	mov	ecx, DWORD PTR ?LodBias@@3MA
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	19					; 00000013H
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5306 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSU,   D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	push	13					; 0000000dH
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5307 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSV,   D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	14					; 0000000eH
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 5308 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	2
	push	2
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5309 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG2, D3DTA_CURRENT );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	3
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 5310 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP,   D3DTOP_DISABLE );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5311 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	5
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 5312 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAARG2, D3DTA_CURRENT );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	push	6
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5313 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAOP,   D3DTOP_DISABLE );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 5314 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5315 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MINFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 5316 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MIPFILTER, UseTrilinear ? D3DTEXF_LINEAR : D3DTEXF_POINT  );

	mov	edi, DWORD PTR [ebp+19128]
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	xor	ecx, ecx
	cmp	edi, ebx
	setne	cl
	inc	ecx
	push	ecx
	push	18					; 00000012H
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5317 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_TEXCOORDINDEX, 1 );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	push	11					; 0000000bH
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5318 : 		}
; 5319 : 
; 5320 : 		// Update the viewport.
; 5321 : 		verify(Viewport->ResizeViewport((Fullscreen ? BLIT_Fullscreen : 0) | BLIT_Direct3D, NewX, ViewportY, ViewportColorBits / 8 ));

	mov	edx, DWORD PTR [ebp+16772]
	mov	edi, DWORD PTR _Fullscreen$[esp+236]
	mov	ecx, DWORD PTR [ebp+48]
	mov	eax, DWORD PTR [ecx]
	shr	edx, 3
	push	edx
	mov	edx, DWORD PTR [ebp+16764]
	push	edx
	mov	edx, DWORD PTR _NewX$[esp+248]
	push	edx
	xor	edx, edx
	cmp	edi, ebx
	setne	dl
	or	edx, 16					; 00000010H
	push	edx
	call	DWORD PTR [eax+88]
	test	eax, eax
	jne	SHORT $L125209
	push	5321					; 000014c9H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0HG@OIHH@Viewport?9?$DOResizeViewport?$CI?$CIFullsc@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125209:

; 5322 : 		Lock( FColor(0,0,0), 0, 0, FPlane(0,0,0,0), FPlane(0,0,0,0), FPlane(0,0,0,0), LOCKR_ClearScreen, NULL, NULL );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR $T144902[esp+252]
	call	DWORD PTR __imp_??0FColor@@QAE@EEE@Z
	mov	ebx, DWORD PTR [ebp]
	push	0
	push	0
	push	1
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	push	0
	push	0
	push	0
	push	0
	mov	edi, eax
	call	DWORD PTR __imp_??0FPlane@@QAE@MMMM@Z
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	push	0
	push	0
	push	0
	push	0
	call	DWORD PTR __imp_??0FPlane@@QAE@MMMM@Z
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	push	0
	push	0
	push	0
	push	0
	call	DWORD PTR __imp_??0FPlane@@QAE@MMMM@Z
	mov	eax, DWORD PTR [edi]
	push	0
	push	eax
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [ebx+92]

; 5323 : 		Unlock(1);

	mov	eax, DWORD PTR [ebp]
	mov	edx, 1
	mov	ecx, ebp
	call	DWORD PTR [eax+96]

; 5324 : 
; 5325 : 		// Allocate dynamic vertex buffers.
; 5326 : 		WorldVertices.Init(Direct3DDevice8,WORLDSURFACE_VERTEXBUFFER_SIZE);

	mov	eax, DWORD PTR [ebp+16684]
	test	eax, eax
	mov	edi, DWORD PTR [esi]
	lea	ebx, DWORD PTR [ebp+16684]
	je	SHORT $L145878
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [ebx], 0
$L145878:
	test	edi, edi
	jne	SHORT $L145866
	push	256					; 00000100H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_08DHAB@InDevice?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L145866:
	push	ebx
	push	0
	push	580					; 00000244H
	push	520					; 00000208H
	push	147456					; 00024000H
	mov	DWORD PTR [ebp+16680], edi
	mov	DWORD PTR [ebp+16688], 4096		; 00001000H
	mov	edx, DWORD PTR [edi]
	push	edi
	call	DWORD PTR [edx+92]
	test	eax, eax
	jge	SHORT $L145869
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	264					; 00000108H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L145869:

; 5327 : 		ActorVertices.Init(Direct3DDevice8,ACTORPOLY_VERTEXBUFFER_SIZE);

	mov	eax, DWORD PTR [ebp+16704]
	test	eax, eax
	mov	edi, DWORD PTR [esi]
	lea	ebx, DWORD PTR [ebp+16704]
	je	SHORT $L145909
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [ebx], 0
$L145909:
	test	edi, edi
	jne	SHORT $L145897
	push	256					; 00000100H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_08DHAB@InDevice?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L145897:
	push	ebx
	push	0
	push	708					; 000002c4H
	push	520					; 00000208H
	push	655360					; 000a0000H
	mov	DWORD PTR [ebp+16700], edi
	mov	DWORD PTR [ebp+16708], 16384		; 00004000H
	mov	eax, DWORD PTR [edi]
	push	edi
	call	DWORD PTR [eax+92]
	test	eax, eax
	jge	SHORT $L145900
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	264					; 00000108H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L145900:

; 5328 : 		LineVertices.Init(Direct3DDevice8,LINE_VERTEXBUFFER_SIZE);

	mov	eax, DWORD PTR [ebp+16724]
	test	eax, eax
	mov	edi, DWORD PTR [esi]
	lea	ebx, DWORD PTR [ebp+16724]
	je	SHORT $L145940
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [ebx], 0
$L145940:
	test	edi, edi
	jne	SHORT $L145928
	push	256					; 00000100H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_08DHAB@InDevice?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L145928:
	push	ebx
	push	0
	push	66					; 00000042H
	push	520					; 00000208H
	push	262144					; 00040000H
	mov	DWORD PTR [ebp+16720], edi
	mov	DWORD PTR [ebp+16728], 16384		; 00004000H
	mov	edx, DWORD PTR [edi]
	push	edi
	call	DWORD PTR [edx+92]
	test	eax, eax
	jge	SHORT $L145931
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	264					; 00000108H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L145931:

; 5329 : 		ParticleVertices.Init(Direct3DDevice8,PARTICLE_VERTEXBUFFER_SIZE);

	mov	eax, DWORD PTR [ebp+16744]
	test	eax, eax
	mov	edi, DWORD PTR [esi]
	lea	ebx, DWORD PTR [ebp+16744]
	je	SHORT $L145962
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [ebx], 0
$L145962:
	test	edi, edi
	jne	SHORT $L145966
	push	256					; 00000100H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_08DHAB@InDevice?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L145966:
	push	ebx
	push	0
	push	322					; 00000142H
	push	520					; 00000208H
	push	393216					; 00060000H
	mov	DWORD PTR [ebp+16740], edi
	mov	DWORD PTR [ebp+16748], 16384		; 00004000H
	mov	eax, DWORD PTR [edi]
	push	edi
	call	DWORD PTR [eax+92]
	test	eax, eax
	jge	SHORT $L145969
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	264					; 00000108H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L145969:

; 5330 : 
; 5331 : 	#ifdef BATCH_PROJECTOR_POLYS
; 5332 : 		ProjectorVertices.Init(Direct3DDevice8, PROJECTOR_VERTEXBUFFER_SIZE);
; 5333 : 	#endif
; 5334 : 		Flush(!GIsEditor);	// Don't force a precache.

	mov	ecx, DWORD PTR __imp_?GIsEditor@@3HA
	mov	edi, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	test	edi, edi
	sete	dl
	mov	ecx, ebp
	call	DWORD PTR [eax+88]

; 5335 : 
; 5336 : 		// JEP...
; 5337 : 		// Determine which rendertarget format to use, and create clipper texture
; 5338 : 		{
; 5339 : 			D3DDISPLAYMODE		DisplayMode;
; 5340 : 
; 5341 : 			Direct3D8->GetAdapterDisplayMode(BestAdapterIndex,&DisplayMode);

	mov	eax, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _DisplayMode$125218[esp+240]
	push	ecx
	mov	ecx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	push	ecx
	push	eax
	call	DWORD PTR [edx+32]

; 5342 : 
; 5343 : 			AdapterFormat = DisplayMode.Format;
; 5344 : 
; 5345 : 			//RenderTargetFormat = D3DFMT_R5G6B5;
; 5346 : 			RenderTargetFormat = AdapterFormat;

	mov	eax, DWORD PTR _DisplayMode$125218[esp+252]

; 5347 : 
; 5348 : 			TCHAR *FmtStr = TEXT("Unknown");
; 5349 : 
; 5350 : 			if (Direct3D8->CheckDeviceFormat(BestAdapterIndex,D3DDEVTYPE_HAL,AdapterFormat,D3DUSAGE_RENDERTARGET,D3DRTYPE_SURFACE,RenderTargetFormat) != D3D_OK)

	push	eax
	push	1
	push	1
	push	eax
	mov	DWORD PTR [ebp+19100], eax
	mov	eax, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	ecx, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [ecx]
	push	1
	push	eax
	push	ecx
	mov	edi, OFFSET FLAT:??_C@_1BA@JDJI@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@ ; `string'
	call	DWORD PTR [edx+40]
	test	eax, eax
	je	SHORT $L125222

; 5351 : 				RenderTargetFormat = D3DFMT_UNKNOWN;

	mov	DWORD PTR [ebp+19100], 0
$L125222:

; 5352 : 
; 5353 : 			#define FMT2STR(x) case x: FmtStr = TEXT(#x); break;
; 5354 : 
; 5355 : 			switch (RenderTargetFormat)
; 5356 : 			{

	mov	eax, DWORD PTR [ebp+19100]
	add	eax, -21				; ffffffebH
	cmp	eax, 3
	ja	SHORT $L125224
	jmp	DWORD PTR $L146068[eax*4]
$L125227:

; 5357 : 				FMT2STR(D3DFMT_A8R8G8B8);

	mov	edi, OFFSET FLAT:??_C@_1CA@MMOI@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ ; `string'
	jmp	SHORT $L125224
$L125229:

; 5358 : 				FMT2STR(D3DFMT_X8R8G8B8);

	mov	edi, OFFSET FLAT:??_C@_1CA@NLNL@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ ; `string'
	jmp	SHORT $L125224
$L125231:

; 5359 : 				FMT2STR(D3DFMT_R5G6B5);

	mov	edi, OFFSET FLAT:??_C@_1BM@CBJB@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAR?$AA5?$AAG?$AA6?$AAB?$AA5?$AA?$AA@ ; `string'
	jmp	SHORT $L125224
$L125233:

; 5360 : 				FMT2STR(D3DFMT_X1R5G5B5);

	mov	edi, OFFSET FLAT:??_C@_1CA@HCCA@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@ ; `string'
$L125224:

; 5361 : 			}
; 5362 : 
; 5363 : 			debugf(NAME_Init,TEXT("Rendertarget format: %s"), FmtStr);

	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	mov	ebx, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	push	edi
	push	OFFSET FLAT:??_C@_1DA@PNOF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3@ ; `string'
	push	762					; 000002faH
	push	edx
	call	ebx

; 5364 : 		
; 5365 : 			if (RenderTargetFormat != D3DFMT_UNKNOWN)

	mov	eax, DWORD PTR [ebp+19100]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$L125243

; 5366 : 			{
; 5367 : 				// Create a 128x1 clipper texture (also used to fade projected textures out)
; 5368 : 				if (Direct3DDevice8->CreateTexture(128,1,1,0,D3DFMT_R5G6B5,D3DPOOL_MANAGED,&ClipperTexture) == D3D_OK)

	mov	edi, DWORD PTR -208+[esp+240]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	1
	push	23					; 00000017H
	push	0
	push	1
	push	1
	push	128					; 00000080H
	push	eax
	call	DWORD PTR [ecx+80]
	test	eax, eax
	jne	$L125243

; 5369 : 				{
; 5370 : 					debugf(NAME_Init,TEXT("Clipper texture created"));

	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1DA@KNFF@?$AAC?$AAl?$AAi?$AAp?$AAp?$AAe?$AAr?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAc?$AAr?$AAe?$AAa@ ; `string'
	push	762					; 000002faH
	push	eax
	call	ebx

; 5371 : 
; 5372 : 					D3DLOCKED_RECT	LockedRect;
; 5373 : 					D3DSURFACE_DESC	SurfaceDesc;
; 5374 : 
; 5375 : 					ClipperTexture->GetLevelDesc(0,&SurfaceDesc);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax]
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR _SurfaceDesc$125241[esp+240]
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+56]

; 5376 : 
; 5377 : 					if (ClipperTexture->LockRect(0,&LockedRect,NULL,0) == D3D_OK)

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	0
	lea	edx, DWORD PTR _LockedRect$125240[esp+248]
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+64]
	test	eax, eax
	jne	SHORT $L125243

; 5378 : 					{
; 5379 : 						WORD *Bits = (WORD*)LockedRect.pBits;

	mov	eax, DWORD PTR _LockedRect$125240[esp+244]
	mov	DWORD PTR _Bits$125244[esp+240], eax

; 5380 : 
; 5381 : 						// Create a grey scale ramp
; 5382 : 						for(DWORD u = 0;u < SurfaceDesc.Width; u++)

	mov	eax, DWORD PTR _SurfaceDesc$125241[esp+264]
	xor	ecx, ecx
	test	eax, eax
	jbe	SHORT $L125249

; 5405 : 	}

	npad	2
$L125247:

; 5383 : 						{
; 5384 : 							WORD	Val = (u<<1);
; 5385 : 				
; 5386 : 							if (u == 0)		// This is the pixel that will actually clip out pixels that are behind the near projector plane

	test	ecx, ecx
	lea	eax, DWORD PTR [ecx+ecx]
	jne	SHORT $L125251

; 5387 : 								Val = 255;

	mov	eax, 255				; 000000ffH
$L125251:

; 5388 : 
; 5389 : 							Bits[u] = ((Val>>3)<<11) | ((Val>>2)<<5) | (Val>>3);

	mov	edx, eax
	and	edx, 65528				; 0000fff8H
	mov	ebx, eax
	shr	ax, 3
	shl	edx, 5
	and	ebx, 65532				; 0000fffcH
	or	edx, ebx
	shl	edx, 3
	or	edx, eax
	mov	eax, DWORD PTR _Bits$125244[esp+240]
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _SurfaceDesc$125241[esp+264]
	inc	ecx
	cmp	ecx, eax
	jb	SHORT $L125247
$L125249:

; 5390 : 						}
; 5391 : 
; 5392 : 						ClipperTexture->UnlockRect(0);

	mov	edi, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi]
	push	0
	push	edi
	call	DWORD PTR [ecx+68]
$L125243:

; 5393 : 					}
; 5394 : 				}
; 5395 : 			}
; 5396 : 
; 5397 : 			// If we already have some render targets, re-create them with (potentially) new format
; 5398 : 			for (INT i = 0; i < RenderTargetArray.Num(); i++)

	mov	eax, DWORD PTR [ebp+216]
	test	eax, eax
	mov	DWORD PTR _i$125252[esp+240], 0
	jle	$L125255
	mov	DWORD PTR -216+[esp+240], 0
$L125253:

; 5399 : 				if (!InitRenderTargetRes(&RenderTargetArray(i)))

	mov	edi, DWORD PTR [ebp+212]
	mov	ecx, DWORD PTR -216+[esp+240]
	mov	eax, DWORD PTR [edi+ecx]
	add	edi, ecx
	test	eax, eax
	jne	SHORT $L145984
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jne	SHORT $L145986
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	je	SHORT $L125254
$L145986:
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1FM@ONLA@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ ; `string'
	push	eax
	jmp	SHORT $L146064
$L145984:
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	lea	ebx, DWORD PTR [edi+4]
	je	SHORT $L145987
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	jne	SHORT $L125254
	push	OFFSET FLAT:??_C@_1HG@MLIH@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ ; `string'
	jmp	SHORT $L146065
$L145987:
	mov	edx, DWORD PTR [ebp+19100]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	0
	push	edx
	mov	edx, DWORD PTR [edi+16]
	push	1
	push	1
	push	edx
	mov	edx, DWORD PTR [edi+12]
	push	edx
	push	eax
	call	DWORD PTR [ecx+80]
	test	eax, eax
	jne	SHORT $L146031
	mov	ebx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx]
	add	edi, 8
	push	edi
	push	0
	push	ebx
	call	DWORD PTR [eax+60]
	jmp	SHORT $L125254
$L146031:

; 5400 : 					appErrorf(TEXT("SetRes: InitRenderTargetRes FAILED"));

	push	OFFSET FLAT:??_C@_1EG@JNCJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa@ ; `string'
$L146065:
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	edx
$L146064:
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L125254:
	mov	eax, DWORD PTR _i$125252[esp+240]
	mov	edx, DWORD PTR -216+[esp+240]
	mov	ecx, DWORD PTR [ebp+216]
	inc	eax
	add	edx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$125252[esp+240], eax
	mov	DWORD PTR -216+[esp+240], edx
	jl	$L125253
$L125255:

; 5401 : 		}
; 5402 : 		// ...JEP
; 5403 : 
; 5404 : 		return 1;

	mov	eax, 1

; 5405 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 224				; 000000e0H
	ret	12					; 0000000cH

; 5152 : 				return UnSetRes(TEXT("CheckDepthStencilMatch"),0);

$L145569:
	lea	edi, DWORD PTR [esi+8]
	push	edi
	call	?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z ; SafeRelease
	add	esi, 4
	push	esi
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	DWORD PTR [edi], 0
	mov	DWORD PTR [esi], 0
$L146066:
	add	esp, 8
$L145560:
	mov	eax, DWORD PTR _i$145558[esp+240]
	mov	ecx, DWORD PTR [ebp+216]
	inc	eax
	add	ebx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$145558[esp+240], eax
	jl	$L145559
$L145561:
	mov	eax, DWORD PTR -208+[esp+240]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	ecx, DWORD PTR -200+[esp+244]
	push	ecx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	edx, DWORD PTR -192+[esp+248]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -204+[esp+252]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	esi, DWORD PTR -196+[esp+256]
	mov	eax, DWORD PTR [esi]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $L145584
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi], 0
$L145584:
	push	0
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	OFFSET FLAT:??_C@_1CO@HHEN@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAp?$AAt?$AAh?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl?$AAM?$AAa?$AAt@ ; `string'
$L146060:
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
	push	762					; 000002faH
	push	eax
$L146055:
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 20					; 00000014H

; 5405 : 	}

	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
	add	esp, 224				; 000000e0H
	ret	12					; 0000000cH
$L146068:
	DD	$L125227
	DD	$L125229
	DD	$L125231
	DD	$L125233
?SetRes@UD3DRenderDevice@@UAIHHHHH@Z ENDP		; UD3DRenderDevice::SetRes
_TEXT	ENDS
PUBLIC	?UnSetRes@UD3DRenderDevice@@QAIHPBGJ@Z		; UD3DRenderDevice::UnSetRes
; Function compile flags: /Ogty
;	COMDAT ?UnSetRes@UD3DRenderDevice@@QAIHPBGJ@Z
_TEXT	SEGMENT
_i$146117 = -8
_Msg$ = -4
_h$ = 8
?UnSetRes@UD3DRenderDevice@@QAIHPBGJ@Z PROC NEAR	; UD3DRenderDevice::UnSetRes, COMDAT
; _this$ = ecx
; _Msg$ = edx

; 5408 : 	{

	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 5409 : 		if(BeginSceneCount) EndScene();

	mov	eax, DWORD PTR [edi+675184]
	xor	ebx, ebx
	cmp	eax, ebx
	mov	esi, edx
	mov	DWORD PTR _Msg$[esp+20], esi
	je	SHORT $L146074
	dec	eax
	mov	DWORD PTR [edi+675184], eax
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]
$L146074:

; 5410 : 
; 5411 : 		Flush(0);

	mov	eax, DWORD PTR [edi]
	xor	edx, edx
	mov	ecx, edi
	call	DWORD PTR [eax+88]

; 5412 : 		CleanupRenderTargetResources();	// JEP: Free render targets

	cmp	DWORD PTR [edi+216], ebx
	mov	DWORD PTR _i$146117[esp+20], ebx
	jle	SHORT $L146120
	push	ebp
	xor	ebp, ebp
$L146118:
	mov	esi, DWORD PTR [edi+212]
	mov	eax, DWORD PTR [esi+ebp]
	add	esi, ebp
	cmp	eax, ebx
	mov	eax, DWORD PTR [esi+8]
	jne	SHORT $L146127
	cmp	eax, ebx
	jne	SHORT $L146129
	cmp	DWORD PTR [esi+4], ebx
	je	SHORT $L146119
$L146129:
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	jmp	SHORT $L146119
$L146127:
	cmp	eax, ebx
	je	SHORT $L146133
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+8], ebx
$L146133:
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, ebx
	je	SHORT $L146137
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+4], ebx
$L146137:
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+4], ebx
$L146119:
	mov	eax, DWORD PTR _i$146117[esp+24]
	mov	ecx, DWORD PTR [edi+216]
	inc	eax
	add	ebp, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$146117[esp+24], eax
	jl	SHORT $L146118
	mov	esi, DWORD PTR _Msg$[esp+24]
	pop	ebp
$L146120:
	mov	eax, DWORD PTR [edi+19112]
	cmp	eax, ebx
	je	SHORT $L146141
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+19112], ebx
$L146141:

; 5413 : 		CleanupVertexBuffers();

	mov	eax, DWORD PTR [edi+16684]
	cmp	eax, ebx
	je	SHORT $L146202
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [edi+16684], ebx
$L146202:
	mov	eax, DWORD PTR [edi+16704]
	cmp	eax, ebx
	je	SHORT $L146208
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+16704], ebx
$L146208:
	mov	eax, DWORD PTR [edi+16724]
	cmp	eax, ebx
	je	SHORT $L146214
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [edi+16724], ebx
$L146214:
	mov	eax, DWORD PTR [edi+16744]
	cmp	eax, ebx
	je	SHORT $L146220
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+16744], ebx
$L146220:

; 5414 : 
; 5415 : 		if( Msg ) debugf(NAME_Init,TEXT("%s (%s)"),Msg,DXGetErrorString8(h));

	cmp	esi, ebx
	je	SHORT $L146224
	mov	edx, DWORD PTR _h$[esp+16]
	push	edx
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	OFFSET FLAT:??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
	push	762					; 000002faH
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 20					; 00000014H
$L146224:
	pop	edi
	pop	esi

; 5416 : 		return 0;

	xor	eax, eax
	pop	ebx

; 5417 : 	}

	add	esp, 8
	ret	4
?UnSetRes@UD3DRenderDevice@@QAIHPBGJ@Z ENDP		; UD3DRenderDevice::UnSetRes
_TEXT	ENDS
PUBLIC	?UpdateModulation@UD3DRenderDevice@@QAEKAAHAAVFPlane@@ABV2@@Z ; UD3DRenderDevice::UpdateModulation
; Function compile flags: /Ogty
;	COMDAT ?UpdateModulation@UD3DRenderDevice@@QAEKAAHAAVFPlane@@ABV2@@Z
_TEXT	SEGMENT
_I$146316 = 16
_I$146326 = 8
_I$146336 = 8
_I$146346 = 8
_ModulateThings$ = 8
_FinalColor$ = 12
_MaxColor$ = 16
$T146229 = 12
$T146241 = 12
$T146259 = 16
$T146277 = 16
$T146295 = 16
?UpdateModulation@UD3DRenderDevice@@QAEKAAHAAVFPlane@@ABV2@@Z PROC NEAR ; UD3DRenderDevice::UpdateModulation, COMDAT
; _this$ = ecx

; 5421 : 		VALIDATE;
; 5422 : 
; 5423 : 		FinalColor *= MaxColor;

	mov	eax, DWORD PTR _FinalColor$[esp-4]
	mov	ecx, DWORD PTR _MaxColor$[esp-4]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR [eax+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+8]

; 5424 : 		return --ModulateThings ? 0xffffffff : (FColor(FinalColor).TrueColor() | 0xff000000);

	mov	ecx, DWORD PTR _ModulateThings$[esp-4]
	fmul	DWORD PTR [eax+8]
	fstp	DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	dec	edx
	mov	DWORD PTR [ecx], edx
	je	SHORT $L146230
	or	eax, -1

; 5425 : 	}

	ret	12					; 0000000cH
$L146230:

; 5424 : 		return --ModulateThings ? 0xffffffff : (FColor(FinalColor).TrueColor() | 0xff000000);

	fld	DWORD PTR [eax]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T146241[esp-4]
	fld	DWORD PTR $T146241[esp-4]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$146316[esp-4]
	mov	ecx, DWORD PTR _I$146316[esp-4]
	test	ecx, ecx
	jge	SHORT $L146322
	mov	BYTE PTR $T146229[esp-4], 0
	jmp	SHORT $L146321
$L146322:
	cmp	ecx, 255				; 000000ffH
	mov	BYTE PTR $T146229[esp-4], cl
	jl	SHORT $L146321
	mov	BYTE PTR $T146229[esp-4], 255		; 000000ffH
$L146321:
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T146259[esp-4]
	fld	DWORD PTR $T146259[esp-4]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$146326[esp-4]
	mov	ecx, DWORD PTR _I$146326[esp-4]
	test	ecx, ecx
	jge	SHORT $L146332
	xor	dl, dl
	jmp	SHORT $L146355
$L146332:
	cmp	ecx, 255				; 000000ffH
	jge	SHORT $L146330
	mov	dl, cl
	jmp	SHORT $L146355
$L146330:
	or	dl, 255					; 000000ffH
$L146355:
	fld	DWORD PTR [eax+8]
	mov	BYTE PTR $T146229[esp-3], dl
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T146277[esp-4]
	fld	DWORD PTR $T146277[esp-4]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$146336[esp-4]
	mov	ecx, DWORD PTR _I$146336[esp-4]
	test	ecx, ecx
	jge	SHORT $L146342
	xor	cl, cl
	jmp	SHORT $L146356
$L146342:
	cmp	ecx, 255				; 000000ffH
	jl	SHORT $L146356
	or	cl, 255					; 000000ffH
$L146356:
	fld	DWORD PTR [eax+12]
	mov	BYTE PTR $T146229[esp-2], cl
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T146295[esp-4]
	fld	DWORD PTR $T146295[esp-4]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; `appFloor'::`2'::Half
	fistp	DWORD PTR _I$146346[esp-4]
	mov	eax, DWORD PTR _I$146346[esp-4]
	test	eax, eax
	jge	SHORT $L146310
	mov	BYTE PTR $T146229[esp-1], 0
	jmp	SHORT $L146309
$L146310:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T146229[esp-1], al
	jl	SHORT $L146309
	mov	BYTE PTR $T146229[esp-1], 255		; 000000ffH
$L146309:
	xor	eax, eax
	mov	al, cl
	mov	ecx, DWORD PTR $T146229[esp-4]
	shl	ecx, 16					; 00000010H
	mov	ah, dl
	add	eax, ecx
	or	eax, -16777216				; ff000000H

; 5425 : 	}

	ret	12					; 0000000cH
?UpdateModulation@UD3DRenderDevice@@QAEKAAHAAVFPlane@@ABV2@@Z ENDP ; UD3DRenderDevice::UpdateModulation
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z
_TEXT	SEGMENT
_Enable$ = 8
?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z PROC NEAR	; UD3DRenderDevice::SetDistanceFog, COMDAT
; _this$ = ecx

; 5428 : 	{	

	push	esi
	mov	esi, ecx

; 5429 : 		VALIDATE;
; 5430 : 
; 5431 : 		if((!UseDistanceFog)||(Enable==DistanceFogEnabled)) return;

	mov	eax, DWORD PTR [esi+675196]
	test	eax, eax
	push	edi
	je	$L125270
	mov	edi, DWORD PTR _Enable$[esp+4]
	cmp	edi, DWORD PTR [esi+675192]
	je	$L125270

; 5432 : 
; 5433 : 		if(Enable)

	test	edi, edi

; 5434 : 		{		
; 5435 : 			// Enable fog.
; 5436 : 			Direct3DDevice8->SetRenderState(D3DRS_FOGENABLE, TRUE);

	mov	eax, DWORD PTR [esi+19124]
	je	$L125271
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	1
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]

; 5437 : 			Direct3DDevice8->SetRenderState(D3DRS_RANGEFOGENABLE, TRUE);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	48					; 00000030H
	push	eax
	call	DWORD PTR [edx+200]

; 5438 : 
; 5439 : 			// Set the fog color.
; 5440 : 			Direct3DDevice8->SetRenderState(D3DRS_FOGCOLOR, ((DWORD)(DistanceFogColor.R)<<16) | ((DWORD)(DistanceFogColor.G)<<8) | ((DWORD)(DistanceFogColor.B)));

	movzx	ebx, BYTE PTR [esi+675210]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	dh, BYTE PTR [esi+675208]
	mov	dl, BYTE PTR [esi+675209]
	shl	edx, 8
	or	edx, ebx
	push	edx
	push	34					; 00000022H
	push	eax
	call	DWORD PTR [ecx+200]

; 5441 : 
; 5442 : 			// Set fog parameters.
; 5443 : 			Direct3DDevice8->SetRenderState(D3DRS_FOGTABLEMODE, D3DFOG_LINEAR);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	35					; 00000023H
	push	eax
	call	DWORD PTR [ecx+200]

; 5444 : 			Direct3DDevice8->SetRenderState(D3DRS_FOGSTART, *(DWORD *)(&DistanceFogBegin));

	mov	ecx, DWORD PTR [esi+675200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	36					; 00000024H
	push	eax
	call	DWORD PTR [edx+200]

; 5445 : 			Direct3DDevice8->SetRenderState(D3DRS_FOGEND,   *(DWORD *)(&DistanceFogEnd));

	mov	ecx, DWORD PTR [esi+675204]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	37					; 00000025H
	push	eax
	call	DWORD PTR [edx+200]
	pop	ebx

; 5449 : 
; 5450 : 		DistanceFogEnabled=Enable;

	mov	DWORD PTR [esi+675192], edi
	pop	edi
	pop	esi

; 5451 : 	}

	ret	4
$L125271:

; 5446 : 		}
; 5447 : 		else
; 5448 : 			Direct3DDevice8->SetRenderState(D3DRS_FOGENABLE, FALSE);		

	mov	edx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]

; 5449 : 
; 5450 : 		DistanceFogEnabled=Enable;

	mov	DWORD PTR [esi+675192], edi
$L125270:
	pop	edi
	pop	esi

; 5451 : 	}

	ret	4
?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ENDP		; UD3DRenderDevice::SetDistanceFog
_TEXT	ENDS
PUBLIC	?InitRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ; UD3DRenderDevice::InitRenderTargetRes
; Function compile flags: /Ogty
;	COMDAT ?InitRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z
_TEXT	SEGMENT
_RT$ = 8
?InitRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z PROC NEAR ; UD3DRenderDevice::InitRenderTargetRes, COMDAT
; _this$ = ecx

; 5461 : 	{

	push	esi

; 5462 : 		if (!RT->Active)

	mov	esi, DWORD PTR _RT$[esp]
	cmp	DWORD PTR [esi], 0
	push	edi
	jne	SHORT $L125280

; 5463 : 		{
; 5464 : 			if (RT->pRenderTargetTex || RT->pRenderTargetSurf)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L125282
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	$L125281
$L125282:

; 5465 : 				appErrorf(TEXT("InitRenderTargetRes: RenderTarget is invalid."));

	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1FM@ONLA@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	pop	edi

; 5480 : 
; 5481 : 		return true;

	mov	eax, 1
	pop	esi

; 5482 : 	}

	ret	4
$L125280:

; 5466 : 			return true;
; 5467 : 		}
; 5468 : 
; 5469 : 		if (RT->pRenderTargetTex)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	lea	edi, DWORD PTR [esi+4]
	je	SHORT $L125284

; 5470 : 		{
; 5471 : 			if (!RT->pRenderTargetSurf)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L125281

; 5472 : 				appErrorf(TEXT("InitRenderTargetRes: RenderTarget is invalid (no surface)."));

	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HG@MLIH@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	pop	edi

; 5480 : 
; 5481 : 		return true;

	mov	eax, 1
	pop	esi

; 5482 : 	}

	ret	4
$L125284:

; 5473 : 			return true;
; 5474 : 		}
; 5475 : 
; 5476 : 		if (Direct3DDevice8->CreateTexture(RT->Width,RT->Height,1,D3DUSAGE_RENDERTARGET,RenderTargetFormat,D3DPOOL_DEFAULT,&RT->pRenderTargetTex) != D3D_OK)

	mov	eax, DWORD PTR [ecx+19124]
	mov	ecx, DWORD PTR [ecx+19100]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	0
	push	ecx
	mov	ecx, DWORD PTR [esi+16]
	push	1
	push	1
	push	ecx
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	push	eax
	call	DWORD PTR [edx+80]
	test	eax, eax
	je	SHORT $L125288
	pop	edi

; 5477 : 			return false;

	xor	eax, eax
	pop	esi

; 5482 : 	}

	ret	4
$L125288:

; 5478 : 
; 5479 : 		RT->pRenderTargetTex->GetSurfaceLevel(0, &RT->pRenderTargetSurf);

	mov	edi, DWORD PTR [edi]
	mov	edx, DWORD PTR [edi]
	add	esi, 8
	push	esi
	push	0
	push	edi
	call	DWORD PTR [edx+60]
$L125281:
	pop	edi

; 5480 : 
; 5481 : 		return true;

	mov	eax, 1
	pop	esi

; 5482 : 	}

	ret	4
?InitRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ENDP ; UD3DRenderDevice::InitRenderTargetRes
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z
_TEXT	SEGMENT
_RT$ = 8
?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z PROC NEAR ; UD3DRenderDevice::ShutdownRenderTargetRes, COMDAT
; _this$ = ecx

; 5488 : 	{

	push	esi

; 5489 : 		if (!RT->Active)

	mov	esi, DWORD PTR _RT$[esp]
	mov	eax, DWORD PTR [esi]
	push	edi
	xor	edi, edi
	cmp	eax, edi

; 5490 : 		{
; 5491 : 			if (RT->pRenderTargetSurf || RT->pRenderTargetTex)

	mov	eax, DWORD PTR [esi+8]
	jne	SHORT $L125291
	cmp	eax, edi
	jne	SHORT $L125293
	cmp	DWORD PTR [esi+4], edi
	je	SHORT $L125292
$L125293:

; 5492 : 				appErrorf(TEXT("ShutdownRenderTargetRes: RenderTarget is invalid."));

	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	pop	edi

; 5502 : 
; 5503 : 		return true;

	mov	eax, 1
	pop	esi

; 5504 : 	}

	ret	4
$L125291:

; 5493 : 			return true;
; 5494 : 		}
; 5495 : 
; 5496 : 		SafeRelease(RT->pRenderTargetSurf);

	cmp	eax, edi
	je	SHORT $L146370
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], edi
$L146370:

; 5497 : 
; 5498 : 		SafeRelease(RT->pRenderTargetTex);

	mov	eax, DWORD PTR [esi+4]
	cmp	eax, edi
	je	SHORT $L146376
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+4], edi
$L146376:

; 5499 : 
; 5500 : 		RT->pRenderTargetSurf = NULL;

	mov	DWORD PTR [esi+8], edi

; 5501 : 		RT->pRenderTargetTex = NULL;

	mov	DWORD PTR [esi+4], edi
$L125292:
	pop	edi

; 5502 : 
; 5503 : 		return true;

	mov	eax, 1
	pop	esi

; 5504 : 	}

	ret	4
?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ENDP ; UD3DRenderDevice::ShutdownRenderTargetRes
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?CreateRenderTarget@UD3DRenderDevice@@UAEPAXHH@Z
_TEXT	SEGMENT
_RenderTarget$ = -20
_W$ = 8
_H$ = 12
?CreateRenderTarget@UD3DRenderDevice@@UAEPAXHH@Z PROC NEAR ; UD3DRenderDevice::CreateRenderTarget, COMDAT
; _this$ = ecx

; 5510 : 	{

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	push	edi

; 5511 : 		if (RenderTargetFormat == D3DFMT_UNKNOWN)

	mov	edi, DWORD PTR [esi+19100]
	test	edi, edi
	jne	SHORT $L125303
$L146479:
	pop	edi
	pop	esi
	pop	ebp

; 5512 : 			return NULL;

	xor	eax, eax
	pop	ebx

; 5536 : 	}

	add	esp, 20					; 00000014H
	ret	8
$L125303:

; 5513 : 
; 5514 : 		RenderTargetInfo	RenderTarget;
; 5515 : 
; 5516 : 		memset(&RenderTarget, 0, sizeof(RenderTarget));
; 5517 : 
; 5518 : 		RenderTarget.Width = W;
; 5519 : 		RenderTarget.Height = H;

	mov	edx, DWORD PTR _H$[esp+32]
	xor	ecx, ecx
	mov	DWORD PTR _RenderTarget$[esp+36], ecx
	mov	eax, ecx

; 5520 : 
; 5521 : 		RenderTarget.Active = true;
; 5522 : 
; 5523 : 		if (!InitRenderTargetRes(&RenderTarget))

	test	eax, eax
	mov	ebx, ecx
	mov	DWORD PTR _RenderTarget$[esp+48], ecx
	mov	DWORD PTR _RenderTarget$[esp+52], ecx
	mov	ecx, DWORD PTR _W$[esp+32]
	mov	DWORD PTR _RenderTarget$[esp+40], eax
	mov	DWORD PTR _RenderTarget$[esp+44], ebx
	mov	DWORD PTR _RenderTarget$[esp+48], ecx
	mov	DWORD PTR _RenderTarget$[esp+52], edx
	mov	DWORD PTR _RenderTarget$[esp+36], 1
	je	SHORT $L146387
	test	ebx, ebx
	jne	SHORT $L125305
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HG@MLIH@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	jmp	SHORT $L125305
$L146387:
	mov	eax, DWORD PTR [esi+19124]
	mov	ebx, DWORD PTR [eax]
	lea	ebp, DWORD PTR _RenderTarget$[esp+40]
	push	ebp
	push	0
	push	edi
	push	1
	push	1
	push	edx
	push	ecx
	push	eax
	call	DWORD PTR [ebx+80]
	test	eax, eax
	jne	SHORT $L146479
	mov	eax, DWORD PTR _RenderTarget$[esp+40]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _RenderTarget$[esp+44]
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+60]
$L125305:

; 5524 : 			return NULL;
; 5525 : 
; 5526 : 		// Look on the free'd list first
; 5527 : 		if (FreeRenderTargets.Num())

	mov	eax, DWORD PTR [esi+228]
	test	eax, eax
	je	SHORT $L125306

; 5528 : 		{
; 5529 : 			INT FreeIndex = FreeRenderTargets(0);

	mov	eax, DWORD PTR [esi+224]
	mov	ebp, DWORD PTR [eax]

; 5530 : 			RenderTargetArray(FreeIndex) = RenderTarget;

	mov	edx, DWORD PTR [esi+212]
	lea	ebx, DWORD PTR [esi+224]
	lea	ecx, DWORD PTR [ebp+ebp*4]
	lea	edi, DWORD PTR [edx+ecx*4]
	mov	ecx, 5
	lea	esi, DWORD PTR _RenderTarget$[esp+36]
	rep movsd

; 5531 : 			FreeRenderTargets.Remove(0);

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	mov	esi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jge	SHORT $L146410
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L146410:
	cmp	DWORD PTR [ebx+4], 1
	jge	SHORT $L146411
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L146411:
	push	4
	push	1
	push	0
	mov	ecx, ebx
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi

; 5532 : 			return INDEX_TO_RENDER_TARGET(FreeIndex);

	lea	eax, DWORD PTR [ebp+1]
	pop	ebp
	pop	ebx

; 5536 : 	}

	add	esp, 20					; 00000014H
	ret	8
$L125306:

; 5533 : 		}
; 5534 : 
; 5535 : 		return INDEX_TO_RENDER_TARGET(RenderTargetArray.AddItem(RenderTarget));

	mov	edi, DWORD PTR [esi+216]
	mov	eax, DWORD PTR [esi+220]
	add	esi, 212				; 000000d4H
	lea	ebx, DWORD PTR [edi+1]
	cmp	ebx, eax
	mov	DWORD PTR [esi+4], ebx
	jle	SHORT $L146458
	lea	eax, DWORD PTR [ebx+ebx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax+ebx+32]
	push	20					; 00000014H
	mov	ecx, esi
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L146458:
	mov	edx, DWORD PTR [esi]
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	edi, DWORD PTR [edx+ecx*4]
	mov	ecx, 5
	lea	esi, DWORD PTR _RenderTarget$[esp+36]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx

; 5536 : 	}

	add	esp, 20					; 00000014H
	ret	8
?CreateRenderTarget@UD3DRenderDevice@@UAEPAXHH@Z ENDP	; UD3DRenderDevice::CreateRenderTarget
_TEXT	ENDS
PUBLIC	??_C@_1FE@MDFI@?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3@ ; `string'
;	COMDAT ??_C@_1FE@MDFI@?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_1FE@MDFI@?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3@ DB 'D'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'y', 00H
	DB	'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T'
	DB	00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, ':', 00H
	DB	' ', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i'
	DB	00H, 'd', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e'
	DB	00H, 't', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?DestroyRenderTarget@UD3DRenderDevice@@UAEXPAPAX@Z
_TEXT	SEGMENT
_pRenderTarget$ = 8
?DestroyRenderTarget@UD3DRenderDevice@@UAEXPAPAX@Z PROC NEAR ; UD3DRenderDevice::DestroyRenderTarget, COMDAT
; _this$ = ecx

; 5543 : 		INT	Index = RENDER_TARGET_TO_INDEX(*pRenderTarget);

	mov	eax, DWORD PTR _pRenderTarget$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR [eax]
	dec	ebx
	push	ebp
	push	esi
	push	edi
	mov	ebp, ecx

; 5544 : 
; 5545 : 		if (Index < 0 || Index >= RenderTargetArray.Num())

	js	SHORT $L125315
	cmp	ebx, DWORD PTR [ebp+216]
	jl	SHORT $L125314
$L125315:

; 5546 : 			appErrorf(TEXT("DestroyRenderTarget: Invalid RenderTarget"));

	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1FE@MDFI@?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L125314:

; 5547 : 		
; 5548 : 		ShutdownRenderTargetRes(&RenderTargetArray(Index));

	mov	esi, DWORD PTR [ebp+212]
	lea	edi, DWORD PTR [ebx+ebx*4]
	shl	edi, 2
	mov	eax, DWORD PTR [esi+edi]
	add	esi, edi
	test	eax, eax
	mov	eax, DWORD PTR [esi+8]
	jne	SHORT $L146513
	test	eax, eax
	jne	SHORT $L146515
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L146512
$L146515:
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	jmp	SHORT $L146512
$L146513:
	test	eax, eax
	je	SHORT $L146507
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], 0
$L146507:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L146511
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+4], 0
$L146511:
	xor	eax, eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+4], eax
$L146512:

; 5549 : 		
; 5550 : 		RenderTargetArray(Index).Active = false;

	mov	edx, DWORD PTR [ebp+212]

; 5551 : 
; 5552 : 		*pRenderTarget = NULL;

	mov	eax, DWORD PTR _pRenderTarget$[esp+12]
	mov	DWORD PTR [edi+edx], 0

; 5553 : 		
; 5554 : 		FreeRenderTargets.AddItem(Index);

	lea	esi, DWORD PTR [ebp+224]
	mov	DWORD PTR [eax], 0
	mov	edi, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [edi+1]
	cmp	ecx, eax
	mov	DWORD PTR [esi+4], ecx
	jle	SHORT $L146579
	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	ecx, DWORD PTR [eax+ecx+32]
	mov	DWORD PTR [esi+8], ecx
	push	4
	mov	ecx, esi
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [edx+edi*4], ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 5555 : 	}

	ret	4
$L146579:

; 5553 : 		
; 5554 : 		FreeRenderTargets.AddItem(Index);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax+edi*4], ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 5555 : 	}

	ret	4
?DestroyRenderTarget@UD3DRenderDevice@@UAEXPAPAX@Z ENDP	; UD3DRenderDevice::DestroyRenderTarget
_TEXT	ENDS
PUBLIC	??_C@_1EM@HNNJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv@ ; `string'
PUBLIC	??_C@_1EI@PKCN@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@ ; `string'
;	COMDAT ??_C@_1EM@HNNJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_1EM@HNNJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv@ DB 'S'
	DB	00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e'
	DB	00H, 't', 00H, ':', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'R', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EI@PKCN@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@
_DATA	SEGMENT
??_C@_1EI@PKCN@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@ DB 'A'
	DB	00H, 'd', 00H, 'd', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ':', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, 'R', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'a'
	DB	00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'S', 00H, 'u', 00H
	DB	'r', 00H, 'f', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?SetRenderTarget@UD3DRenderDevice@@UAEXPAX0@Z
_TEXT	SEGMENT
_pRenderTarget$ = 8
?SetRenderTarget@UD3DRenderDevice@@UAEXPAX0@Z PROC NEAR	; UD3DRenderDevice::SetRenderTarget, COMDAT
; _this$ = ecx

; 5561 : 	{

	push	ebp

; 5562 : 		INT Index = RENDER_TARGET_TO_INDEX(pRenderTarget);

	mov	ebp, DWORD PTR _pRenderTarget$[esp]
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1]

; 5563 : 
; 5564 : 		if (Index < 0 || Index >= RenderTargetArray.Num())

	test	edi, edi
	mov	esi, ecx
	jl	SHORT $L125322
	cmp	edi, DWORD PTR [esi+216]
	jl	SHORT $L125321
$L125322:

; 5565 : 			appErrorf(TEXT("SetRenderTarget: Invalid RenderTarget"));

	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1EM@HNNJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L125321:

; 5566 : 
; 5567 : 		if (!pOriginalZStencil)

	mov	eax, DWORD PTR [esi+19108]
	test	eax, eax
	push	ebx
	lea	ebx, DWORD PTR [esi+19108]
	jne	SHORT $L125324

; 5568 : 		{
; 5569 : 			// Remember the original render targets
; 5570 : 			Direct3DDevice8->GetRenderTarget(&pOriginalRenderTarget);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR [esi+19104]
	push	ecx
	push	eax
	call	DWORD PTR [edx+128]

; 5571 : 			Direct3DDevice8->GetDepthStencilSurface(&pOriginalZStencil);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	eax
	call	DWORD PTR [edx+132]
$L125324:

; 5572 : 		}
; 5573 : 
; 5574 : 		if (!RenderTargetArray(Index).pRenderTargetSurf)

	mov	eax, DWORD PTR [esi+212]
	lea	edi, DWORD PTR [edi+edi*4]
	shl	edi, 2
	mov	ecx, DWORD PTR [edi+eax+8]
	test	ecx, ecx
	pop	ebx
	jne	SHORT $L125325

; 5575 : 			appErrorf(TEXT("AddProjector: NULL RenderTargetSurf"));

	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1EI@PKCN@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L125325:

; 5576 : 
; 5577 : 		// Set the render target
; 5578 : 		Direct3DDevice8->SetRenderTarget(RenderTargetArray(Index).pRenderTargetSurf, NULL);

	mov	edx, DWORD PTR [esi+212]
	mov	edx, DWORD PTR [edi+edx+8]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	edx
	push	eax
	call	DWORD PTR [ecx+124]

; 5579 : 		
; 5580 : 		// Clear the render target
; 5581 : 		Direct3DDevice8->Clear(0, NULL, D3DCLEAR_TARGET, 0xffffffff, 1.f, 0 );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	1065353216				; 3f800000H
	push	-1
	push	1
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+144]
	pop	edi

; 5582 : 		/*
; 5583 : 		D3DRECT		Rect;
; 5584 : 
; 5585 : 		Rect.x1 = 1;
; 5586 : 		Rect.y1 = 1;
; 5587 : 		Rect.x2 = 127;
; 5588 : 		Rect.y2 = 127;
; 5589 : 
; 5590 : 		Direct3DDevice8->Clear(1, &Rect, D3DCLEAR_TARGET, 0, 1.f, 0 );
; 5591 : 		*/
; 5592 : 		
; 5593 : 		CurrentRenderTarget = pRenderTarget;

	mov	DWORD PTR [esi+19120], ebp
	pop	esi
	pop	ebp

; 5594 : 	}

	ret	8
?SetRenderTarget@UD3DRenderDevice@@UAEXPAX0@Z ENDP	; UD3DRenderDevice::SetRenderTarget
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?RestoreRenderTarget@UD3DRenderDevice@@UAEXXZ
_TEXT	SEGMENT
?RestoreRenderTarget@UD3DRenderDevice@@UAEXXZ PROC NEAR	; UD3DRenderDevice::RestoreRenderTarget, COMDAT
; _this$ = ecx

; 5600 : 	{

	push	esi
	mov	esi, ecx

; 5601 : 		if (!pOriginalZStencil)

	mov	ecx, DWORD PTR [esi+19108]
	push	edi
	xor	edi, edi
	cmp	ecx, edi
	je	SHORT $L125328

; 5602 : 			return;			// Already using original rendertarget
; 5603 : 		
; 5604 : 		// Set the rendertarget/zstencil back to the original
; 5605 : 		Direct3DDevice8->SetRenderTarget(pOriginalRenderTarget, pOriginalZStencil);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR [esi+19104]
	push	ecx
	push	eax
	call	DWORD PTR [edx+124]

; 5606 : 
; 5607 : 		// Release the copies we had
; 5608 : 		SafeRelease(pOriginalRenderTarget);

	mov	eax, DWORD PTR [esi+19104]
	cmp	eax, edi
	je	SHORT $L146600
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+19104], edi
$L146600:

; 5609 : 		SafeRelease(pOriginalZStencil);

	mov	eax, DWORD PTR [esi+19108]
	cmp	eax, edi
	je	SHORT $L146606
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+19108], edi
$L146606:

; 5610 : 
; 5611 : 		// Set them to NULL to we know next time around that we have been restored
; 5612 : 		pOriginalRenderTarget = NULL;

	mov	DWORD PTR [esi+19104], edi

; 5613 : 		pOriginalZStencil = NULL;

	mov	DWORD PTR [esi+19108], edi

; 5614 : 
; 5615 : 		CurrentRenderTarget = NULL;

	mov	DWORD PTR [esi+19120], edi
$L125328:
	pop	edi
	pop	esi

; 5616 : 	}

	ret	0
?RestoreRenderTarget@UD3DRenderDevice@@UAEXXZ ENDP	; UD3DRenderDevice::RestoreRenderTarget
_TEXT	ENDS
PUBLIC	?DrawTex@UD3DRenderDevice@@QAIXPAUFSceneNode@@MMMMMMMMPAUIDirect3DTexture8@@@Z ; UD3DRenderDevice::DrawTex
; Function compile flags: /Ogty
;	COMDAT ?DrawTex@UD3DRenderDevice@@QAIXPAUFSceneNode@@MMMMMMMMPAUIDirect3DTexture8@@@Z
_TEXT	SEGMENT
_VertexData$146629 = 40
_X$ = 8
_Y$ = 12
_XL$ = 16
_YL$ = 20
_U$ = 24
_V$ = 28
_UL$ = 32
_VL$ = 36
_Tex$ = 40
?DrawTex@UD3DRenderDevice@@QAIXPAUFSceneNode@@MMMMMMMMPAUIDirect3DTexture8@@@Z PROC NEAR ; UD3DRenderDevice::DrawTex, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 5627 : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 5628 : 		VALIDATE;
; 5629 : 		
; 5630 : 		SetDistanceFog(false);

	mov	eax, DWORD PTR [esi+675196]
	test	eax, eax
	push	edi
	je	SHORT $L146614
	mov	eax, DWORD PTR [esi+675192]
	test	eax, eax
	je	SHORT $L146614
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675192], 0
$L146614:

; 5631 : 	
; 5632 : 		//SetBlending(PFX_DarkenModulate);//PF_Modulated);
; 5633 : 		SetBlending();

	push	0
	xor	edx, edx
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 5634 : 		SetTextureNULL(0);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+244]

; 5635 : 		
; 5636 : 		Direct3DDevice8->SetTexture(0, Tex);

	mov	edx, DWORD PTR _Tex$[esp+8]
	lea	eax, DWORD PTR [esi+16624]
	push	edx
	mov	DWORD PTR [esi+19712], eax
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	eax
	call	DWORD PTR [ecx+244]

; 5637 : 
; 5638 : 		SetTextureClampMode(1);

	mov	eax, DWORD PTR [esi]
	mov	edx, 1
	mov	ecx, esi
	call	DWORD PTR [eax+212]

; 5639 : 
; 5640 : 		FD3DTLVertex	*Vertices = (FD3DTLVertex*) ActorVertices.Lock(4);

	mov	eax, DWORD PTR [esi+16704]
	test	eax, eax
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	lea	edi, DWORD PTR [esi+16700]
	jne	SHORT $L146626
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L146626:
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	jne	SHORT $L146627
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L146627:
	cmp	DWORD PTR [edi+8], 4
	jg	SHORT $L146630
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L146630:
	mov	ecx, DWORD PTR [edi+16]
	mov	eax, DWORD PTR [edi+8]
	lea	edx, DWORD PTR [ecx+4]
	cmp	edx, eax
	mov	eax, DWORD PTR [edi+4]
	jge	SHORT $L146644
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	ebx, DWORD PTR _VertexData$146629[esp+12]
	push	ebx
	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	160					; 000000a0H
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L146639
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L146639:
	mov	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [edi+12], eax
	add	eax, 4
	mov	DWORD PTR [edi+16], eax
	jmp	SHORT $L146643
$L146644:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$146629[esp+12]
	push	edx
	push	160					; 000000a0H
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	SHORT $L146645
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L146645:
	mov	DWORD PTR [edi+12], 0
	mov	DWORD PTR [edi+16], 4
$L146643:
	mov	eax, DWORD PTR _VertexData$146629[esp+8]
	lea	ecx, DWORD PTR [eax+8]
	mov	edx, 4
	mov	ebx, 1065353216				; 3f800000H

; 5664 : 	}

	npad	1

; 5639 : 
; 5640 : 		FD3DTLVertex	*Vertices = (FD3DTLVertex*) ActorVertices.Lock(4);

$L125342:

; 5641 : 
; 5642 : 		DWORD dwDiffuse = 0xffffffff;
; 5643 : 
; 5644 : 		for (INT i=0; i<4; i++)
; 5645 : 		{
; 5646 : 			Vertices[i].Diffuse    = dwDiffuse;

	mov	DWORD PTR [ecx+8], -1

; 5647 : 			Vertices[i].Position.Z = 1.0f;

	mov	DWORD PTR [ecx], ebx

; 5648 : 			Vertices[i].Position.W = 1.0f;

	mov	DWORD PTR [ecx+4], ebx
	add	ecx, 40					; 00000028H
	dec	edx
	jne	SHORT $L125342

; 5649 : 		}
; 5650 : 
; 5651 : 		Vertices[0].Position.X=X;    Vertices[0].Position.Y=Y;    Vertices[0].U[0]=U;		Vertices[0].U[1]=V   ;
; 5652 : 		Vertices[1].Position.X=X+XL; Vertices[1].Position.Y=Y;    Vertices[1].U[0]=U+UL; 	Vertices[1].U[1]=V   ;

	fld	DWORD PTR _X$[esp+8]
	mov	edx, DWORD PTR _X$[esp+8]
	fadd	DWORD PTR _XL$[esp+8]
	mov	ecx, DWORD PTR _Y$[esp+8]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _U$[esp+8]
	fst	DWORD PTR [eax+40]
	mov	DWORD PTR [eax+24], edx
	fld	DWORD PTR _U$[esp+8]
	mov	edx, DWORD PTR _Y$[esp+8]
	fadd	DWORD PTR _UL$[esp+8]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _V$[esp+8]
	mov	DWORD PTR [eax+44], edx

; 5653 : 		Vertices[2].Position.X=X+XL; Vertices[2].Position.Y=Y+YL; Vertices[2].U[0]=U+UL;    Vertices[2].U[1]=V+VL;
; 5654 : 		Vertices[3].Position.X=X;    Vertices[3].Position.Y=Y+YL; Vertices[3].U[0]=U;	    Vertices[3].U[1]=V+VL;

	mov	edx, DWORD PTR _X$[esp+8]
	fst	DWORD PTR [eax+64]
	fxch	ST(1)
	mov	DWORD PTR [eax+28], ecx
	fstp	DWORD PTR [eax+80]
	mov	DWORD PTR [eax+68], ecx
	fld	DWORD PTR _Y$[esp+8]
	mov	DWORD PTR [eax+120], edx
	fadd	DWORD PTR _YL$[esp+8]
	mov	edx, DWORD PTR _U$[esp+8]
	mov	DWORD PTR [eax+144], edx
	fst	DWORD PTR 12+[esp+8]
	mov	ecx, DWORD PTR 12+[esp+8]
	fstp	DWORD PTR [eax+84]
	mov	DWORD PTR [eax+124], ecx
	fstp	DWORD PTR [eax+104]
	fld	DWORD PTR _V$[esp+8]
	fadd	DWORD PTR _VL$[esp+8]
	fst	DWORD PTR [eax+108]
	fstp	DWORD PTR [eax+148]

; 5655 : 
; 5656 : 		INT	First=ActorVertices.Unlock();

	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jne	SHORT $L146660
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH

; 5664 : 	}

	npad	4

; 5655 : 
; 5656 : 		INT	First=ActorVertices.Unlock();

$L146660:
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L146661
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L146661:
	mov	ebx, DWORD PTR [edi+12]

; 5657 : 		
; 5658 : 		ActorVertices.Set();

	mov	ecx, edi
	call	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DTLVertex>::Set

; 5659 : 
; 5660 : 		Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, 2 );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	ebx
	push	6
	push	eax
	call	DWORD PTR [ecx+280]

; 5661 : 		Direct3DDevice8->SetTexture(0, NULL);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+244]

; 5662 : 		
; 5663 : 		SetTextureClampMode(0);

	mov	eax, DWORD PTR [esi]
	xor	edx, edx
	mov	ecx, esi
	call	DWORD PTR [eax+212]
	pop	edi
	pop	esi
	pop	ebx

; 5664 : 	}

	ret	36					; 00000024H
?DrawTex@UD3DRenderDevice@@QAIXPAUFSceneNode@@MMMMMMMMPAUIDirect3DTexture8@@@Z ENDP ; UD3DRenderDevice::DrawTex
_TEXT	ENDS
PUBLIC	??_C@_1EG@EKPK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@ ; `string'
PUBLIC	??_C@_1EI@BJID@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@ ; `string'
PUBLIC	??_C@_1EA@OCBK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@ ; `string'
PUBLIC	?Add@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::ProjectorInfo>::Add
EXTRN	__imp_?TransformVectorBy@FVector@@QBE?AV1@ABVFCoords@@@Z:NEAR
EXTRN	__imp_?Transpose@FCoords@@QBE?AV1@XZ:NEAR
;	COMDAT ??_C@_1EG@EKPK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_1EG@EKPK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@ DB 'A'
	DB	00H, 'd', 00H, 'd', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ':', 00H, ' '
	DB	00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H
	DB	't', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EI@BJID@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@
_DATA	SEGMENT
??_C@_1EI@BJID@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@ DB 'A'
	DB	00H, 'd', 00H, 'd', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ':', 00H, ' '
	DB	00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H
	DB	't', 00H, '2', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EA@OCBK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@
_DATA	SEGMENT
??_C@_1EA@OCBK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@ DB 'A'
	DB	00H, 'd', 00H, 'd', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ':', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, 'R', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'a'
	DB	00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?AddProjector@UD3DRenderDevice@@UAIXPAUFSceneNode@@PAXPAUFTextureInfo@@MMM@Z
_TEXT	SEGMENT
_Projector$ = -180
_RT2$125368 = -184
$T146729 = -48
$T146731 = -60
$T146732 = -72
$T146733 = -96
$T146734 = -84
_pRenderTarget$ = 8
_wNear$ = 16
_wFar$ = 20
_FadeScale$ = 24
?AddProjector@UD3DRenderDevice@@UAIXPAUFSceneNode@@PAXPAUFTextureInfo@@MMM@Z PROC NEAR ; UD3DRenderDevice::AddProjector, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 5670 : 	{

	sub	esp, 184				; 000000b8H
	push	ebx
	push	ebp
	push	esi
	mov	ebp, edx
	mov	ebx, ecx
	push	edi

; 5671 : 		ProjectorInfo	Projector;
; 5672 : 		
; 5673 : 		Projector.Frame = Frame;

	mov	DWORD PTR _Projector$[esp+200], ebp

; 5674 : 		
; 5675 : 		Projector.CameraToLight = Frame->Coords;

	lea	esi, DWORD PTR [ebp+52]
	mov	ecx, 12					; 0000000cH
	lea	edi, DWORD PTR _Projector$[esp+216]
	rep movsd

; 5676 : 		Projector.CameraToLight <<= Frame->Parent->Uncoords;

	mov	ecx, DWORD PTR [ebp+8]
	lea	eax, DWORD PTR $T146729[esp+200]
	add	ecx, 100				; 00000064H
	push	eax
	call	DWORD PTR __imp_?Transpose@FCoords@@QBE?AV1@XZ
	mov	esi, eax
	push	esi
	lea	ecx, DWORD PTR $T146731[esp+204]
	push	ecx
	lea	ecx, DWORD PTR _Projector$[esp+224]
	call	DWORD PTR __imp_?TransformPointBy@FVector@@QBE?AV1@ABVFCoords@@@Z
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _Projector$[esp+216], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Projector$[esp+220], ecx
	mov	edx, DWORD PTR [eax+8]
	push	esi
	lea	eax, DWORD PTR $T146732[esp+204]
	push	eax
	lea	ecx, DWORD PTR _Projector$[esp+236]
	mov	DWORD PTR _Projector$[esp+232], edx
	call	DWORD PTR __imp_?TransformVectorBy@FVector@@QBE?AV1@ABVFCoords@@@Z
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Projector$[esp+228], ecx
	mov	edx, DWORD PTR [eax+4]
	push	esi
	lea	ecx, DWORD PTR $T146733[esp+204]
	mov	DWORD PTR _Projector$[esp+236], edx
	mov	eax, DWORD PTR [eax+8]
	push	ecx
	lea	ecx, DWORD PTR _Projector$[esp+248]
	mov	DWORD PTR _Projector$[esp+244], eax
	call	DWORD PTR __imp_?TransformVectorBy@FVector@@QBE?AV1@ABVFCoords@@@Z
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _Projector$[esp+240], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Projector$[esp+244], ecx
	mov	edx, DWORD PTR [eax+8]
	push	esi
	lea	eax, DWORD PTR $T146734[esp+204]
	push	eax
	lea	ecx, DWORD PTR _Projector$[esp+260]
	mov	DWORD PTR _Projector$[esp+256], edx
	call	DWORD PTR __imp_?TransformVectorBy@FVector@@QBE?AV1@ABVFCoords@@@Z

; 5677 : 		
; 5678 : 		Projector.OneOverX = 1.0f/(float)Frame->X;

	fild	DWORD PTR [ebp+168]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Projector$[esp+252], ecx
	fdivr	DWORD PTR __real@3f800000
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _Projector$[esp+256], edx
	mov	eax, DWORD PTR [eax+8]

; 5679 : 		Projector.OneOverY = 1.0f/(float)Frame->Y;
; 5680 : 
; 5681 : 		Projector._33 = wFar / (wFar - wNear);
; 5682 : 		Projector._43 = -Projector._33 * wNear;
; 5683 : 		Projector.FadeScale = FadeScale;

	mov	ecx, DWORD PTR _FadeScale$[esp+196]
	mov	DWORD PTR _Projector$[esp+260], eax

; 5684 : 
; 5685 : 		if (Frame->Level && Frame->Level->Model)

	mov	eax, DWORD PTR [ebp+4]
	test	eax, eax
	mov	DWORD PTR _Projector$[esp+280], ecx
	fstp	DWORD PTR _Projector$[esp+264]
	fild	DWORD PTR [ebp+172]
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR _Projector$[esp+268]
	fld	DWORD PTR _wFar$[esp+196]
	fsub	DWORD PTR _wNear$[esp+196]
	fdivr	DWORD PTR _wFar$[esp+196]
	fst	DWORD PTR _Projector$[esp+272]
	fmul	DWORD PTR _wNear$[esp+196]
	fchs
	fstp	DWORD PTR _Projector$[esp+276]
	je	SHORT $L125351
	mov	eax, DWORD PTR [eax+152]
	test	eax, eax
	je	SHORT $L125351

; 5686 : 			Projector.GNodes = &Frame->Level->Model->Nodes(0);

	mov	edx, DWORD PTR [eax+88]
	mov	DWORD PTR _Projector$[esp+212], edx

; 5687 : 		else

	jmp	SHORT $L125352
$L125351:

; 5688 : 			Projector.GNodes = NULL;

	mov	DWORD PTR _Projector$[esp+212], 0
$L125352:

; 5689 : 
; 5690 : 		if (pRenderTarget)

	mov	esi, DWORD PTR _pRenderTarget$[esp+196]
	test	esi, esi
	je	$L125370

; 5691 : 		{
; 5692 : 			INT Index = RENDER_TARGET_TO_INDEX(pRenderTarget);

	dec	esi

; 5693 : 
; 5694 : 			if (Index < 0 || Index >= RenderTargetArray.Num())

	test	esi, esi
	jl	SHORT $L125357
	cmp	esi, DWORD PTR [ebx+216]
	jl	SHORT $L125356
$L125357:

; 5695 : 				appErrorf(TEXT("AddProjector: Invalid RenderTarget"));

	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1EG@EKPK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L125356:

; 5696 : 
; 5697 : 			RenderTargetInfo &RT = RenderTargetArray(Index);

	mov	eax, DWORD PTR [ebx+212]
	lea	edx, DWORD PTR [esi+esi*4]

; 5698 : 
; 5699 : 			// Assign the texture to this projector
; 5700 : 			Projector.pRenderTargetTex = RT.pRenderTargetTex;

	mov	ecx, DWORD PTR [eax+edx*4+4]
	lea	edi, DWORD PTR [eax+edx*4]

; 5701 : 
; 5702 : 	#if 1
; 5703 : 		// Render tex into itself, have convolution smooth texture out
; 5704 : 		#if 1
; 5705 : 			if (CurrentRenderTarget == pRenderTarget)

	mov	edx, DWORD PTR _pRenderTarget$[esp+196]
	cmp	DWORD PTR [ebx+19120], edx
	mov	DWORD PTR _Projector$[esp+204], ecx
	jne	$L125362

; 5706 : 			{
; 5707 : 				if (!TempRT)

	mov	eax, DWORD PTR [ebx+19116]
	test	eax, eax
	jne	SHORT $L125361

; 5708 : 					TempRT = CreateRenderTarget(128, 128);

	mov	eax, DWORD PTR [ebx]
	push	128					; 00000080H
	push	128					; 00000080H
	mov	ecx, ebx
	call	DWORD PTR [eax+220]
	mov	DWORD PTR [ebx+19116], eax
$L125361:

; 5709 : 
; 5710 : 				if (TempRT)

	mov	esi, DWORD PTR [ebx+19116]
	test	esi, esi
	je	$L125362

; 5711 : 				{
; 5712 : 					INT Index2 = RENDER_TARGET_TO_INDEX(TempRT);

	dec	esi

; 5713 : 
; 5714 : 					if (Index2 < 0 || Index2 >= RenderTargetArray.Num())

	test	esi, esi
	jl	SHORT $L125366
	cmp	esi, DWORD PTR [ebx+216]
	jl	SHORT $L125365
$L125366:

; 5715 : 						appErrorf(TEXT("AddProjector: Invalid RenderTarget2"));

	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1EI@BJID@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L125365:

; 5716 : 
; 5717 : 					RenderTargetInfo &RT2 = RenderTargetArray(Index2);

	mov	ecx, DWORD PTR [ebx+212]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	edx, DWORD PTR [ecx+eax*4]

; 5718 : 
; 5719 : 					SetRenderTarget(TempRT, NULL);

	mov	ecx, DWORD PTR [ebx+19116]
	mov	eax, DWORD PTR [ebx]
	push	0
	push	ecx
	mov	ecx, ebx
	mov	DWORD PTR _RT2$125368[esp+208], edx
	call	DWORD PTR [eax+228]

; 5720 : 
; 5721 : 					float Val = (1.0f/128.0f);
; 5722 : 
; 5723 : 					DrawTex(Frame, 0.0f, 0.0f, 127.0f, 127.0f,Val*0.5f,Val*0.5f, 1.0f, 1.0f, RT.pRenderTargetTex);

	mov	esi, DWORD PTR [edi+4]
	push	0
	mov	ecx, ebx
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog
	push	0
	xor	edx, edx
	mov	ecx, ebx
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+244]
	lea	eax, DWORD PTR [ebx+16624]
	push	esi
	mov	DWORD PTR [ebx+19712], eax
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	eax
	call	DWORD PTR [ecx+244]
	mov	eax, DWORD PTR [ebx]
	mov	edx, 1
	mov	ecx, ebx
	call	DWORD PTR [eax+212]
	or	edi, -1
	push	edi
	lea	esi, DWORD PTR [ebx+16700]
	push	4
	mov	ecx, esi
	call	?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z ; FD3DVertexBuffer<FD3DTLVertex>::Lock
	lea	ecx, DWORD PTR [eax+8]
	mov	edx, 4
$L146778:
	mov	DWORD PTR [ecx+8], edi
	mov	DWORD PTR [ecx], 1065353216		; 3f800000H
	mov	DWORD PTR [ecx+4], 1065353216		; 3f800000H
	add	ecx, 40					; 00000028H
	dec	edx
	jne	SHORT $L146778
	mov	edi, 998244352				; 3b800000H
	mov	ecx, 1123942400				; 42fe0000H
	mov	edx, 1065385984				; 3f808000H
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+24], edi
	mov	DWORD PTR [eax+28], edi
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+44], 0
	mov	DWORD PTR [eax+64], edx
	mov	DWORD PTR [eax+68], edi
	mov	DWORD PTR [eax+80], ecx
	mov	DWORD PTR [eax+84], ecx
	mov	DWORD PTR [eax+104], edx
	mov	DWORD PTR [eax+108], edx
	mov	DWORD PTR [eax+120], 0
	mov	DWORD PTR [eax+124], ecx
	mov	DWORD PTR [eax+144], edi
	mov	DWORD PTR [eax+148], edx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L146792
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH

; 5752 : 	}

	npad	4

; 5720 : 
; 5721 : 					float Val = (1.0f/128.0f);
; 5722 : 
; 5723 : 					DrawTex(Frame, 0.0f, 0.0f, 127.0f, 127.0f,Val*0.5f,Val*0.5f, 1.0f, 1.0f, RT.pRenderTargetTex);

$L146792:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L146793
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L146793:
	mov	edi, DWORD PTR [esi+12]
	mov	ecx, esi
	call	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DTLVertex>::Set
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	edi
	push	6
	push	eax
	call	DWORD PTR [ecx+280]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+244]
	mov	eax, DWORD PTR [ebx]
	xor	edx, edx
	mov	ecx, ebx
	call	DWORD PTR [eax+212]

; 5724 : 					SetRenderTarget(pRenderTarget, NULL);

	mov	eax, DWORD PTR _pRenderTarget$[esp+196]
	mov	edx, DWORD PTR [ebx]
	push	0
	push	eax
	mov	ecx, ebx
	call	DWORD PTR [edx+228]

; 5725 : 					DrawTex(Frame, 0.0f, 0.0f, 127.0f, 127.0f,-Val*0.5f,-Val*0.5f, 1.0f, 1.0f, RT2.pRenderTargetTex);

	mov	ecx, DWORD PTR _RT2$125368[esp+200]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	1065353216				; 3f800000H
	push	1065353216				; 3f800000H
	push	-1149239296				; bb800000H
	push	-1149239296				; bb800000H
	push	1123942400				; 42fe0000H
	push	1123942400				; 42fe0000H
	push	0
	push	0
	mov	edx, ebp
	mov	ecx, ebx
	call	?DrawTex@UD3DRenderDevice@@QAIXPAUFSceneNode@@MMMMMMMMPAUIDirect3DTexture8@@@Z ; UD3DRenderDevice::DrawTex
$L125362:

; 5726 : 				}
; 5727 : 			}
; 5728 : 		#else
; 5729 : 			if (CurrentRenderTarget == pRenderTarget)
; 5730 : 			{
; 5731 : 				float Val = (1.0f/128.0f);
; 5732 : 			
; 5733 : 				EndScene();
; 5734 : 				BeginScene();
; 5735 : 
; 5736 : 				DrawTex(Frame, 0.0f, 0.0f, 127.0f, 127.0f,Val*0.5f,Val*0.5f, 1.0f, 1.0f, RT.pRenderTargetTex);
; 5737 : 				DrawTex(Frame, 0.0f, 0.0f, 127.0f, 127.0f,-Val*0.5f,-Val*0.5f, 1.0f, 1.0f, RT.pRenderTargetTex);
; 5738 : 			}
; 5739 : 		#endif
; 5740 : 	#endif
; 5741 : 
; 5742 : 			if (!Projector.pRenderTargetTex)

	mov	eax, DWORD PTR _Projector$[esp+204]
	test	eax, eax
	jne	SHORT $L125370

; 5743 : 				appErrorf(TEXT("AddProjector: NULL RenderTarget"));

	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1EA@OCBK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L125370:

; 5744 : 		}
; 5745 : 		else
; 5746 : 		{
; 5747 : 			//Projector.pRenderTargetTex = NULL;
; 5748 : 			//Projector.Texture = Info->Texture;
; 5749 : 		}
; 5750 : 
; 5751 : 		ProjectorArray.AddItem(Projector);

	push	1
	add	ebx, 200				; 000000c8H
	push	1
	mov	ecx, ebx
	call	?Add@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::ProjectorInfo>::Add
	mov	edi, eax
	mov	eax, DWORD PTR [ebx]
	imul	edi, 84					; 00000054H
	add	edi, eax
	mov	ecx, 21					; 00000015H
	lea	esi, DWORD PTR _Projector$[esp+200]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 5752 : 	}

	add	esp, 184				; 000000b8H
	ret	20					; 00000014H
?AddProjector@UD3DRenderDevice@@UAIXPAUFSceneNode@@PAXPAUFTextureInfo@@MMM@Z ENDP ; UD3DRenderDevice::AddProjector
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?ResetProjectors@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT
?ResetProjectors@UD3DRenderDevice@@UAIXXZ PROC NEAR	; UD3DRenderDevice::ResetProjectors, COMDAT
; _this$ = ecx

; 5759 : 	#ifdef BATCH_PROJECTOR_POLYS
; 5760 : 		FlushProjectorPolys();
; 5761 : 	#endif
; 5762 : 
; 5763 : 		ProjectorArray.Clear();

	mov	DWORD PTR [ecx+204], 0

; 5764 : 	}

	ret	0
?ResetProjectors@UD3DRenderDevice@@UAIXXZ ENDP		; UD3DRenderDevice::ResetProjectors
_TEXT	ENDS
PUBLIC	??0?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@ABV0@@Z ; TArray<UD3DRenderDevice::QueuedPolygon>::TArray<UD3DRenderDevice::QueuedPolygon>
PUBLIC	??0?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@ABV0@@Z ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::TArray<UD3DRenderDevice::QueuedParticleByTexture>
PUBLIC	??0?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@ABV0@@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::TArray<UD3DRenderDevice::QueuedLineSegment>
PUBLIC	??0?$TArray@UFD3DVertex@@@@QAE@ABV0@@Z		; TArray<FD3DVertex>::TArray<FD3DVertex>
PUBLIC	??_7FTexFiller@UD3DRenderDevice@@6B@		; UD3DRenderDevice::FTexFiller::`vftable'
PUBLIC	??0UD3DRenderDevice@@QAE@ABV0@@Z		; UD3DRenderDevice::UD3DRenderDevice
EXTRN	__imp_??0FString@@QAE@ABV0@@Z:NEAR
EXTRN	__imp_??0UObject@@QAE@ABV0@@Z:NEAR
EXTRN	__imp_??_7FExec@@6B@:DWORD
EXTRN	__imp_??_7USubsystem@@6BUObject@@@:BYTE
EXTRN	__imp_??_7USubsystem@@6BFExec@@@:DWORD
EXTRN	__imp_??0FArray@@IAE@HH@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T147279 DD	0ffffffffH
	DD	FLAT:$L146838
	DD	0ffffffffH
	DD	FLAT:$L146824
	DD	01H
	DD	FLAT:$L146866
	DD	01H
	DD	FLAT:$L146825
	DD	03H
	DD	FLAT:$L146949
	DD	03H
	DD	FLAT:$L146826
	DD	05H
	DD	FLAT:$L147032
	DD	05H
	DD	FLAT:$L146827
	DD	07H
	DD	FLAT:$L146828
	DD	08H
	DD	FLAT:$L146829
	DD	09H
	DD	FLAT:$L146830
	DD	0aH
	DD	FLAT:$L146831
	DD	0bH
	DD	FLAT:$L147184
	DD	0bH
	DD	FLAT:$L146832
	DD	0dH
	DD	FLAT:$L146833
	DD	0eH
	DD	FLAT:$L146834
	DD	0fH
	DD	FLAT:$L146835
$T147258 DD	019930520H
	DD	011H
	DD	FLAT:$T147279
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7FTexFiller@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFiller@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller::`vftable'
	DD	FLAT:?UploadMipmap@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0UD3DRenderDevice@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -16
_i$146906 = -24
$T146942 = -20
_i$146989 = -24
$T147025 = -20
$T147094 = -136
$T147215 = -20
$T147216 = -24
$T147217 = -28
$T147254 = -228
__$EHRec$ = -12
??0UD3DRenderDevice@@QAE@ABV0@@Z PROC NEAR		; UD3DRenderDevice::UD3DRenderDevice, COMDAT
; _this$ = ecx
	push	-1
	push	$L147278
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 16					; 00000010H
	push	ebx
	mov	ebx, DWORD PTR ___that$[esp+28]
	push	ebp
	push	esi
	push	edi
	mov	ebp, ecx
	push	ebx
	mov	DWORD PTR _this$[esp+48], ebp
	call	DWORD PTR __imp_??0UObject@@QAE@ABV0@@Z
	mov	eax, DWORD PTR __imp_??_7FExec@@6B@
	mov	DWORD PTR [ebp+40], eax
	mov	ecx, DWORD PTR __imp_??_7USubsystem@@6BUObject@@@
	mov	DWORD PTR [ebp], ecx
	mov	edx, DWORD PTR __imp_??_7USubsystem@@6BFExec@@@
	mov	DWORD PTR [ebp+40], edx
	mov	al, BYTE PTR [ebx+44]
	mov	BYTE PTR [ebp+44], al
	mov	ecx, DWORD PTR [ebx+48]
	lea	edx, DWORD PTR [ebx+52]
	mov	DWORD PTR [ebp+48], ecx
	push	edx
	lea	ecx, DWORD PTR [ebp+52]
	mov	DWORD PTR __$EHRec$[esp+56], 0
	call	DWORD PTR __imp_??0FString@@QAE@ABV0@@Z
	mov	eax, DWORD PTR [ebx+64]
	mov	DWORD PTR [ebp+64], eax
	mov	ecx, DWORD PTR [ebx+68]
	mov	DWORD PTR [ebp+68], ecx
	mov	edx, DWORD PTR [ebx+72]
	mov	DWORD PTR [ebp+72], edx
	mov	eax, DWORD PTR [ebx+76]
	mov	DWORD PTR [ebp+76], eax
	mov	ecx, DWORD PTR [ebx+80]
	mov	DWORD PTR [ebp+80], ecx
	mov	edx, DWORD PTR [ebx+84]
	mov	DWORD PTR [ebp+84], edx
	mov	eax, DWORD PTR [ebx+88]
	mov	DWORD PTR [ebp+88], eax
	mov	ecx, DWORD PTR [ebx+92]
	mov	DWORD PTR [ebp+92], ecx
	mov	edx, DWORD PTR [ebx+96]
	mov	DWORD PTR [ebp+96], edx
	mov	eax, DWORD PTR [ebx+100]
	mov	DWORD PTR [ebp+100], eax
	mov	ecx, DWORD PTR [ebx+104]
	mov	DWORD PTR [ebp+104], ecx
	lea	esi, DWORD PTR [ebx+108]
	lea	edi, DWORD PTR [ebp+108]
	mov	ecx, 8
	rep movsd
	lea	esi, DWORD PTR [ebx+140]
	lea	edi, DWORD PTR [ebp+140]
	mov	ecx, 8
	rep movsd
	mov	edx, DWORD PTR [ebx+172]
	mov	DWORD PTR [ebp+172], edx
	lea	eax, DWORD PTR [ebx+176]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR [ebp+176]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	lea	ecx, DWORD PTR [ebx+188]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [ebp+188]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR __imp_??_7URenderDevice@@6BUObject@@@
	mov	DWORD PTR [ebp], edx
	mov	eax, DWORD PTR __imp_??_7URenderDevice@@6BFExec@@@
	mov	DWORD PTR [ebp+40], eax
	lea	esi, DWORD PTR [ebp+200]
	mov	DWORD PTR __$EHRec$[esp+52], 1
	mov	DWORD PTR $T146942[esp+44], esi
	mov	eax, DWORD PTR [ebx+204]
	xor	edi, edi
	push	84					; 00000054H
	mov	ecx, esi
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
	mov	DWORD PTR [esi+4], edi
	cmp	DWORD PTR [ebx+204], edi
	mov	BYTE PTR __$EHRec$[esp+52], 2
	mov	DWORD PTR _i$146906[esp+44], edi
	jle	SHORT $L146909
	mov	DWORD PTR -28+[esp+44], edi
$L146907:
	push	84					; 00000054H
	push	1
	mov	ecx, esi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	imul	eax, 84					; 00000054H
	add	eax, DWORD PTR [esi]
	je	SHORT $L146908
	mov	esi, DWORD PTR [ebx+200]
	add	esi, DWORD PTR -28+[esp+44]
	mov	ecx, 21					; 00000015H
	mov	edi, eax
	rep movsd
	mov	esi, DWORD PTR $T146942[esp+44]
	xor	edi, edi
$L146908:
	mov	eax, DWORD PTR _i$146906[esp+44]
	mov	edx, DWORD PTR -28+[esp+44]
	mov	ecx, DWORD PTR [ebx+204]
	inc	eax
	add	edx, 84					; 00000054H
	cmp	eax, ecx
	mov	DWORD PTR _i$146906[esp+44], eax
	mov	DWORD PTR -28+[esp+44], edx
	jl	SHORT $L146907
$L146909:
	mov	eax, DWORD PTR [ebx+216]
	lea	esi, DWORD PTR [ebp+212]
	push	20					; 00000014H
	mov	ecx, esi
	mov	BYTE PTR __$EHRec$[esp+56], 3
	mov	DWORD PTR $T147025[esp+48], esi
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
	mov	DWORD PTR [esi+4], edi
	cmp	DWORD PTR [ebx+216], edi
	mov	BYTE PTR __$EHRec$[esp+52], 4
	mov	DWORD PTR _i$146989[esp+44], edi
	jle	SHORT $L146992
	mov	DWORD PTR -28+[esp+44], edi
	npad	4
$L146990:
	push	20					; 00000014H
	push	1
	mov	ecx, esi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	edx, DWORD PTR [esi]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	edi, DWORD PTR [edx+ecx*4]
	test	edi, edi
	je	SHORT $L146991
	mov	esi, DWORD PTR [ebx+212]
	add	esi, DWORD PTR -28+[esp+44]
	mov	ecx, 5
	rep movsd
	mov	esi, DWORD PTR $T147025[esp+44]
$L146991:
	mov	eax, DWORD PTR _i$146989[esp+44]
	mov	edx, DWORD PTR -28+[esp+44]
	mov	ecx, DWORD PTR [ebx+216]
	inc	eax
	add	edx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$146989[esp+44], eax
	mov	DWORD PTR -28+[esp+44], edx
	jl	SHORT $L146990
	xor	edi, edi
$L146992:
	mov	eax, DWORD PTR [ebx+228]
	lea	esi, DWORD PTR [ebp+224]
	push	4
	mov	ecx, esi
	mov	BYTE PTR __$EHRec$[esp+56], 5
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
	mov	ecx, DWORD PTR [esi+4]
	xor	eax, eax
	cmp	ecx, edi
	jle	SHORT $L147081
	npad	7
$L147078:
	mov	ecx, DWORD PTR [ebx+224]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	ecx, DWORD PTR [esi+4]
	inc	eax
	cmp	eax, ecx
	jl	SHORT $L147078
$L147081:
	mov	edx, DWORD PTR [ebx+236]
	mov	DWORD PTR [ebp+236], edx
	mov	ecx, 4096				; 00001000H
	lea	esi, DWORD PTR [ebx+240]
	lea	edi, DWORD PTR [ebp+240]
	rep movsd
	lea	esi, DWORD PTR [ebx+16624]
	lea	edi, DWORD PTR [ebp+16624]
	mov	ecx, 14					; 0000000eH
	rep movsd
	lea	esi, DWORD PTR [ebx+16680]
	lea	edi, DWORD PTR [ebp+16680]
	mov	ecx, 5
	rep movsd
	lea	esi, DWORD PTR [ebx+16700]
	lea	edi, DWORD PTR [ebp+16700]
	mov	ecx, 5
	rep movsd
	lea	esi, DWORD PTR [ebx+16720]
	lea	edi, DWORD PTR [ebp+16720]
	mov	ecx, 5
	rep movsd
	lea	esi, DWORD PTR [ebx+16740]
	lea	edi, DWORD PTR [ebp+16740]
	mov	ecx, 5
	rep movsd
	mov	eax, DWORD PTR [ebx+16760]
	mov	DWORD PTR [ebp+16760], eax
	mov	ecx, DWORD PTR [ebx+16764]
	mov	DWORD PTR [ebp+16764], ecx
	mov	edx, DWORD PTR [ebx+16768]
	mov	DWORD PTR [ebp+16768], edx
	mov	eax, DWORD PTR [ebx+16772]
	mov	DWORD PTR [ebp+16772], eax
	mov	ecx, DWORD PTR [ebx+16776]
	mov	DWORD PTR [ebp+16776], ecx
	lea	esi, DWORD PTR [ebx+16780]
	lea	edi, DWORD PTR [ebp+16780]
	mov	ecx, 13					; 0000000dH
	rep movsd
	lea	esi, DWORD PTR [ebx+16832]
	lea	edi, DWORD PTR [ebp+16832]
	mov	ecx, 13					; 0000000dH
	rep movsd
	lea	esi, DWORD PTR [ebx+16884]
	lea	edi, DWORD PTR [ebp+16884]
	mov	ecx, 13					; 0000000dH
	rep movsd
	lea	esi, DWORD PTR [ebx+16936]
	lea	edi, DWORD PTR [ebp+16936]
	mov	ecx, 13					; 0000000dH
	rep movsd
	mov	edx, DWORD PTR [ebx+16988]
	mov	DWORD PTR [ebp+16988], edx
	mov	eax, DWORD PTR [ebx+16996]
	mov	DWORD PTR [ebp+16996], eax
	mov	DWORD PTR [ebp+16992], OFFSET FLAT:??_7FTexFillerDXT1@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFillerDXT1::`vftable'
	mov	ecx, DWORD PTR [ebx+17004]
	mov	DWORD PTR [ebp+17004], ecx
	mov	DWORD PTR [ebp+17000], OFFSET FLAT:??_7FTexFiller8888_RGBA8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller8888_RGBA8::`vftable'
	mov	edx, DWORD PTR [ebx+17012]
	mov	DWORD PTR [ebp+17012], edx
	mov	DWORD PTR [ebp+17008], OFFSET FLAT:??_7FTexFiller8888_RGBA7@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller8888_RGBA7::`vftable'
	mov	eax, DWORD PTR [ebx+17020]
	mov	DWORD PTR [ebp+17020], eax
	mov	eax, OFFSET FLAT:??_7FTexFiller@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller::`vftable'
	mov	DWORD PTR [ebp+17016], eax
	lea	esi, DWORD PTR [ebx+17024]
	lea	edi, DWORD PTR [ebp+17024]
	mov	ecx, 256				; 00000100H
	rep movsd
	mov	DWORD PTR [ebp+17016], OFFSET FLAT:??_7FTexFiller8888_P8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller8888_P8::`vftable'
	mov	ecx, DWORD PTR [ebx+18052]
	mov	BYTE PTR __$EHRec$[esp+52], 11		; 0000000bH
	mov	DWORD PTR [ebp+18052], ecx
	mov	DWORD PTR [ebp+18048], OFFSET FLAT:??_7FTexFiller1555_RGBA7@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller1555_RGBA7::`vftable'
	mov	edx, DWORD PTR [ebx+18060]
	mov	DWORD PTR [ebp+18056], eax
	mov	DWORD PTR [ebp+18060], edx
	lea	esi, DWORD PTR [ebx+18064]
	lea	edi, DWORD PTR [ebp+18064]
	mov	ecx, 256				; 00000100H
	rep movsd
	mov	DWORD PTR [ebp+18056], OFFSET FLAT:??_7FTexFiller1555_P8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller1555_P8::`vftable'
	mov	eax, DWORD PTR [ebx+19092]
	mov	DWORD PTR [ebp+19092], eax
	mov	DWORD PTR [ebp+19088], OFFSET FLAT:??_7FTexFillerP8_P8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFillerP8_P8::`vftable'
	mov	ecx, DWORD PTR [ebx+19096]
	mov	DWORD PTR [ebp+19096], ecx
	mov	edx, DWORD PTR [ebx+19100]
	mov	DWORD PTR [ebp+19100], edx
	mov	eax, DWORD PTR [ebx+19104]
	mov	DWORD PTR [ebp+19104], eax
	mov	ecx, DWORD PTR [ebx+19108]
	mov	DWORD PTR [ebp+19108], ecx
	mov	edx, DWORD PTR [ebx+19112]
	mov	DWORD PTR [ebp+19112], edx
	mov	eax, DWORD PTR [ebx+19116]
	mov	DWORD PTR [ebp+19116], eax
	mov	ecx, DWORD PTR [ebx+19120]
	mov	DWORD PTR [ebp+19120], ecx
	mov	edx, DWORD PTR [ebx+19124]
	mov	DWORD PTR [ebp+19124], edx
	mov	eax, DWORD PTR [ebx+19128]
	mov	DWORD PTR [ebp+19128], eax
	mov	ecx, DWORD PTR [ebx+19132]
	mov	DWORD PTR [ebp+19132], ecx
	mov	edx, DWORD PTR [ebx+19136]
	mov	DWORD PTR [ebp+19136], edx
	mov	eax, DWORD PTR [ebx+19140]
	mov	DWORD PTR [ebp+19140], eax
	mov	ecx, DWORD PTR [ebx+19144]
	mov	DWORD PTR [ebp+19144], ecx
	mov	edx, DWORD PTR [ebx+19148]
	mov	DWORD PTR [ebp+19148], edx
	mov	eax, DWORD PTR [ebx+19152]
	mov	DWORD PTR [ebp+19152], eax
	mov	ecx, DWORD PTR [ebx+19156]
	mov	DWORD PTR [ebp+19156], ecx
	mov	edx, DWORD PTR [ebx+19160]
	mov	DWORD PTR [ebp+19160], edx
	mov	eax, DWORD PTR [ebx+19164]
	mov	DWORD PTR [ebp+19164], eax
	mov	ecx, DWORD PTR [ebx+19168]
	mov	DWORD PTR [ebp+19168], ecx
	lea	esi, DWORD PTR [ebx+19172]
	lea	edi, DWORD PTR [ebp+19172]
	mov	ecx, 6
	rep movsd
	lea	esi, DWORD PTR [ebx+19196]
	lea	edi, DWORD PTR [ebp+19196]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebx+19260]
	lea	edi, DWORD PTR [ebp+19260]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebx+19324]
	lea	edi, DWORD PTR [ebp+19324]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebx+19388]
	lea	edi, DWORD PTR [ebp+19388]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebx+19452]
	lea	edi, DWORD PTR [ebp+19452]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebx+19516]
	lea	edi, DWORD PTR [ebp+19516]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	eax, DWORD PTR [ebx+19580]
	lea	ecx, DWORD PTR [ebp+19580]
	mov	edx, eax
	mov	esi, ecx
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], edi
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	lea	eax, DWORD PTR [ebx+19596]
	mov	edx, eax
	mov	edi, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ebp+19596]
	mov	esi, ecx
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], edi
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR [ebx+19612]
	mov	DWORD PTR [ebp+19612], ecx
	mov	edx, DWORD PTR [ebx+19616]
	mov	DWORD PTR [ebp+19616], edx
	mov	eax, DWORD PTR [ebx+19620]
	mov	DWORD PTR [ebp+19620], eax
	lea	esi, DWORD PTR [ebx+19624]
	lea	edi, DWORD PTR [ebp+19624]
	mov	ecx, 22					; 00000016H
	rep movsd
	lea	esi, DWORD PTR [ebx+19712]
	lea	edi, DWORD PTR [ebp+19712]
	mov	ecx, 8
	rep movsd
	lea	eax, DWORD PTR [ebp+19744]
	mov	ecx, eax
	sub	ecx, ebp
	mov	edi, ebp
	lea	esi, DWORD PTR [ecx+ebx+16]
	sub	edi, ebx
	mov	DWORD PTR -24+[esp+44], 16384		; 00004000H
$L125384:
	mov	dl, BYTE PTR [esi-16]
	mov	BYTE PTR [eax], dl
	mov	edx, DWORD PTR [esi-16]
	mov	ecx, eax
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [esi-12]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [esi-8]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR [esi-4]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [edi+esi], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+20], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [esi+20]
	mov	DWORD PTR [eax+36], ecx
	mov	ecx, DWORD PTR -24+[esp+44]
	add	eax, 40					; 00000028H
	add	esi, 40					; 00000028H
	dec	ecx
	mov	DWORD PTR -24+[esp+44], ecx
	jne	SHORT $L125384
	mov	edx, DWORD PTR [ebx+675104]
	mov	DWORD PTR [ebp+675104], edx
	mov	eax, DWORD PTR [ebx+675108]
	mov	DWORD PTR [ebp+675108], eax
	mov	ecx, DWORD PTR [ebx+675116]
	push	1
	lea	esi, DWORD PTR [ebp+675112]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_??0FArray@@IAE@HH@Z
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [ebx+675112]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR $T147217[esp+44], edx
	mov	DWORD PTR $T147216[esp+44], eax
	mov	DWORD PTR $T147215[esp+44], ecx
	mov	ecx, DWORD PTR $T147217[esp+44]
	mov	esi, DWORD PTR $T147216[esp+44]
	mov	edi, DWORD PTR $T147215[esp+44]
	mov	ebx, ecx
	shr	ecx, 2
	and	ebx, 3
	rep	 movsd
	mov	ecx, ebx
	rep	 movsb
	mov	esi, DWORD PTR ___that$[esp+40]
	mov	edx, DWORD PTR [esi+675124]
	mov	DWORD PTR [ebp+675124], edx
	mov	eax, DWORD PTR [esi+675128]
	mov	DWORD PTR [ebp+675128], eax
	mov	ecx, DWORD PTR [esi+675132]
	mov	DWORD PTR [ebp+675132], ecx
	mov	edx, DWORD PTR [esi+675136]
	mov	DWORD PTR [ebp+675136], edx
	mov	eax, DWORD PTR [esi+675140]
	mov	DWORD PTR [ebp+675140], eax
	mov	ecx, DWORD PTR [esi+675144]
	mov	DWORD PTR [ebp+675144], ecx
	mov	edx, DWORD PTR [esi+675148]
	mov	DWORD PTR [ebp+675148], edx
	mov	eax, DWORD PTR [esi+675152]
	mov	DWORD PTR [ebp+675152], eax
	mov	ecx, DWORD PTR [esi+675156]
	mov	DWORD PTR [ebp+675156], ecx
	mov	edx, DWORD PTR [esi+675160]
	mov	DWORD PTR [ebp+675160], edx
	mov	eax, DWORD PTR [esi+675164]
	mov	DWORD PTR [ebp+675164], eax
	mov	ecx, DWORD PTR [esi+675168]
	mov	DWORD PTR [ebp+675168], ecx
	mov	edx, DWORD PTR [esi+675172]
	mov	DWORD PTR [ebp+675172], edx
	mov	eax, DWORD PTR [esi+675176]
	mov	DWORD PTR [ebp+675176], eax
	mov	ecx, DWORD PTR [esi+675180]
	mov	DWORD PTR [ebp+675180], ecx
	mov	edx, DWORD PTR [esi+675184]
	mov	DWORD PTR [ebp+675184], edx
	mov	eax, DWORD PTR [esi+675188]
	mov	DWORD PTR [ebp+675188], eax
	mov	ecx, DWORD PTR [esi+675192]
	mov	DWORD PTR [ebp+675192], ecx
	mov	edx, DWORD PTR [esi+675196]
	mov	DWORD PTR [ebp+675196], edx
	mov	eax, DWORD PTR [esi+675200]
	mov	DWORD PTR [ebp+675200], eax
	mov	ecx, DWORD PTR [esi+675204]
	mov	DWORD PTR [ebp+675204], ecx
	mov	edx, DWORD PTR [esi+675208]
	lea	eax, DWORD PTR [esi+675212]
	push	eax
	lea	ecx, DWORD PTR [ebp+675212]
	mov	BYTE PTR __$EHRec$[esp+56], 13		; 0000000dH
	mov	DWORD PTR [ebp+675208], edx
	call	??0?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@ABV0@@Z ; TArray<UD3DRenderDevice::QueuedPolygon>::TArray<UD3DRenderDevice::QueuedPolygon>
	lea	ecx, DWORD PTR [esi+675224]
	push	ecx
	lea	ecx, DWORD PTR [ebp+675224]
	mov	BYTE PTR __$EHRec$[esp+56], 14		; 0000000eH
	call	??0?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@ABV0@@Z ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::TArray<UD3DRenderDevice::QueuedParticleByTexture>
	lea	edx, DWORD PTR [esi+675236]
	push	edx
	lea	ecx, DWORD PTR [ebp+675236]
	mov	BYTE PTR __$EHRec$[esp+56], 15		; 0000000fH
	call	??0?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@ABV0@@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::TArray<UD3DRenderDevice::QueuedLineSegment>
	add	esi, 675248				; 000a4db0H
	push	esi
	lea	ecx, DWORD PTR [ebp+675248]
	mov	BYTE PTR __$EHRec$[esp+56], 16		; 00000010H
	call	??0?$TArray@UFD3DVertex@@@@QAE@ABV0@@Z	; TArray<FD3DVertex>::TArray<FD3DVertex>
	mov	ecx, DWORD PTR __$EHRec$[esp+44]
	pop	edi
	pop	esi
	mov	DWORD PTR [ebp], OFFSET FLAT:??_7UD3DRenderDevice@@6BUObject@@@ ; UD3DRenderDevice::`vftable'
	mov	DWORD PTR [ebp+40], OFFSET FLAT:??_7UD3DRenderDevice@@6BFExec@@@ ; UD3DRenderDevice::`vftable'
	mov	eax, ebp
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 28					; 0000001cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L146838:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1USubsystem@@UAE@XZ
$L146824:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1URenderDevice@@UAE@XZ
$L146866:
	mov	ecx, DWORD PTR $T146942[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L146825:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	jmp	??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::ProjectorInfo>::~TArray<UD3DRenderDevice::ProjectorInfo>
$L146949:
	mov	ecx, DWORD PTR $T147025[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L146826:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	jmp	??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::RenderTargetInfo>::~TArray<UD3DRenderDevice::RenderTargetInfo>
$L147032:
	mov	ecx, DWORD PTR $T147094[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L146827:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	jmp	??1?$TArray@H@@QAE@XZ			; TArray<int>::~TArray<int>
$L146828:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16680				; 00004128H
	jmp	??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DScreenVertex>::~FD3DVertexBuffer<FD3DScreenVertex>
$L146829:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16700				; 0000413cH
	jmp	??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DTLVertex>::~FD3DVertexBuffer<FD3DTLVertex>
$L146830:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16720				; 00004150H
	jmp	??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DVertex>::~FD3DVertexBuffer<FD3DVertex>
$L146831:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16740				; 00004164H
	jmp	??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ ; FD3DVertexBuffer<FD3DParticle>::~FD3DVertexBuffer<FD3DParticle>
$L147184:
	mov	ecx, DWORD PTR $T147254[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L146832:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675112				; 000a4d28H
	jmp	??1?$TArray@E@@QAE@XZ			; TArray<unsigned char>::~TArray<unsigned char>
$L146833:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675212				; 000a4d8cH
	jmp	??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedPolygon>::~TArray<UD3DRenderDevice::QueuedPolygon>
$L146834:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675224				; 000a4d98H
	jmp	??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::~TArray<UD3DRenderDevice::QueuedParticleByTexture>
$L146835:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675236				; 000a4da4H
	jmp	??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedLineSegment>::~TArray<UD3DRenderDevice::QueuedLineSegment>
$L147278:
	mov	eax, OFFSET FLAT:$T147258
	jmp	___CxxFrameHandler
text$x	ENDS
??0UD3DRenderDevice@@QAE@ABV0@@Z ENDP			; UD3DRenderDevice::UD3DRenderDevice
PUBLIC	??2@YAPAXIAAV?$TArray@UFD3DVertex@@@@@Z		; operator new
PUBLIC	??0QueuedPolygon@UD3DRenderDevice@@QAE@ABU01@@Z	; UD3DRenderDevice::QueuedPolygon::QueuedPolygon
PUBLIC	?Empty@?$TArray@UFD3DVertex@@@@QAEXH@Z		; TArray<FD3DVertex>::Empty
PUBLIC	??4UD3DRenderDevice@@QAEAAV0@ABV0@@Z		; UD3DRenderDevice::operator=
EXTRN	__imp_??4FString@@QAEAAV0@ABV0@@Z:NEAR
EXTRN	__imp_??4UObject@@QAEAAV0@ABV0@@Z:NEAR
; Function compile flags: /Ogty
;	COMDAT ??4UD3DRenderDevice@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_i$147362 = -4
_i$147424 = -4
_i$147482 = 8
_i$147613 = 8
_i$147671 = -4
___that$ = 8
_i$147729 = -4
_i$147787 = -4
??4UD3DRenderDevice@@QAEAAV0@ABV0@@Z PROC NEAR		; UD3DRenderDevice::operator=, COMDAT
; _this$ = ecx
	sub	esp, 8
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___that$[esp+12]
	push	esi
	push	edi
	push	ebp
	mov	ebx, ecx
	call	DWORD PTR __imp_??4UObject@@QAEAAV0@ABV0@@Z
	mov	al, BYTE PTR [ebp+44]
	mov	BYTE PTR [ebx+44], al
	mov	ecx, DWORD PTR [ebp+48]
	lea	edx, DWORD PTR [ebp+52]
	mov	DWORD PTR [ebx+48], ecx
	push	edx
	lea	ecx, DWORD PTR [ebx+52]
	call	DWORD PTR __imp_??4FString@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR [ebp+64]
	mov	DWORD PTR [ebx+64], eax
	mov	ecx, DWORD PTR [ebp+68]
	mov	DWORD PTR [ebx+68], ecx
	mov	edx, DWORD PTR [ebp+72]
	mov	DWORD PTR [ebx+72], edx
	mov	eax, DWORD PTR [ebp+76]
	mov	DWORD PTR [ebx+76], eax
	mov	ecx, DWORD PTR [ebp+80]
	mov	DWORD PTR [ebx+80], ecx
	mov	edx, DWORD PTR [ebp+84]
	mov	DWORD PTR [ebx+84], edx
	mov	eax, DWORD PTR [ebp+88]
	mov	DWORD PTR [ebx+88], eax
	mov	ecx, DWORD PTR [ebp+92]
	mov	DWORD PTR [ebx+92], ecx
	mov	edx, DWORD PTR [ebp+96]
	mov	DWORD PTR [ebx+96], edx
	mov	eax, DWORD PTR [ebp+100]
	mov	DWORD PTR [ebx+100], eax
	mov	ecx, DWORD PTR [ebp+104]
	mov	DWORD PTR [ebx+104], ecx
	mov	ecx, ebp
	sub	ecx, ebx
	lea	eax, DWORD PTR [ebx+108]
	mov	DWORD PTR -8+[esp+24], ecx
	mov	edx, 8
	npad	1
$L147300:
	mov	esi, DWORD PTR [ecx+eax]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	dec	edx
	jne	SHORT $L147300
	lea	eax, DWORD PTR [ebx+140]
	mov	edx, 8
$L147304:
	mov	esi, DWORD PTR [eax+ecx]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	dec	edx
	jne	SHORT $L147304
	mov	edx, DWORD PTR [ebp+172]
	mov	DWORD PTR [ebx+172], edx
	lea	eax, DWORD PTR [ebp+176]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR [ebx+176]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	lea	ecx, DWORD PTR [ebp+188]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [ebx+188]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	lea	esi, DWORD PTR [ebp+200]
	lea	ecx, DWORD PTR [ebx+200]
	cmp	ecx, esi
	je	SHORT $L147861
	mov	eax, DWORD PTR [esi+4]
	push	eax
	push	84					; 00000054H
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	mov	eax, DWORD PTR [esi+4]
	xor	edi, edi
	cmp	eax, edi
	mov	DWORD PTR _i$147362[esp+24], edi
	jle	SHORT $L147365
	mov	DWORD PTR 8+[esp+20], edi
$L147363:
	push	84					; 00000054H
	lea	edi, DWORD PTR [ebx+200]
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	imul	eax, 84					; 00000054H
	add	eax, DWORD PTR [edi]
	je	SHORT $L147364
	mov	esi, DWORD PTR [esi]
	add	esi, DWORD PTR 8+[esp+20]
	mov	ecx, 21					; 00000015H
	mov	edi, eax
	rep movsd
$L147364:
	mov	eax, DWORD PTR _i$147362[esp+24]
	mov	edx, DWORD PTR 8+[esp+20]
	mov	ecx, DWORD PTR [ebp+204]
	lea	esi, DWORD PTR [ebp+200]
	inc	eax
	add	edx, 84					; 00000054H
	cmp	eax, ecx
	mov	DWORD PTR _i$147362[esp+24], eax
	mov	DWORD PTR 8+[esp+20], edx
	jl	SHORT $L147363
$L147861:
	xor	edi, edi
$L147365:
	lea	esi, DWORD PTR [ebp+212]
	lea	ecx, DWORD PTR [ebx+212]
	cmp	ecx, esi
	je	SHORT $L147427
	mov	eax, DWORD PTR [esi+4]
	push	eax
	push	20					; 00000014H
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	cmp	DWORD PTR [esi+4], edi
	mov	DWORD PTR _i$147424[esp+24], edi
	jle	SHORT $L147427
	mov	DWORD PTR 8+[esp+20], edi
	npad	7
$L147425:
	push	20					; 00000014H
	lea	edi, DWORD PTR [ebx+212]
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [edi]
	lea	edi, DWORD PTR [eax+edx*4]
	test	edi, edi
	je	SHORT $L147426
	mov	esi, DWORD PTR [esi]
	add	esi, DWORD PTR 8+[esp+20]
	mov	ecx, 5
	rep movsd
$L147426:
	mov	eax, DWORD PTR _i$147424[esp+24]
	mov	edx, DWORD PTR 8+[esp+20]
	mov	ecx, DWORD PTR [ebp+216]
	lea	esi, DWORD PTR [ebp+212]
	inc	eax
	add	edx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$147424[esp+24], eax
	mov	DWORD PTR 8+[esp+20], edx
	jl	SHORT $L147425
$L147427:
	lea	edi, DWORD PTR [ebp+224]
	lea	esi, DWORD PTR [ebx+224]
	cmp	esi, edi
	je	SHORT $L147485
	mov	ecx, DWORD PTR [edi+4]
	push	ecx
	push	4
	mov	ecx, esi
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	mov	DWORD PTR _i$147482[esp+20], 0
	jle	SHORT $L147485
	npad	4
$L147483:
	push	4
	push	1
	mov	ecx, esi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+eax*4]
	test	eax, eax
	je	SHORT $L147484
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR _i$147482[esp+20]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax], ecx
$L147484:
	mov	eax, DWORD PTR _i$147482[esp+20]
	mov	ecx, DWORD PTR [edi+4]
	inc	eax
	cmp	eax, ecx
	mov	DWORD PTR _i$147482[esp+20], eax
	jl	SHORT $L147483
$L147485:
	mov	edx, DWORD PTR [ebp+236]
	mov	DWORD PTR [ebx+236], edx
	lea	eax, DWORD PTR [ebx+240]
	mov	ecx, 4096				; 00001000H
$L125388:
	mov	edx, DWORD PTR -8+[esp+24]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax], edx
	add	eax, 4
	dec	ecx
	jne	SHORT $L125388
	lea	esi, DWORD PTR [ebp+16624]
	lea	edi, DWORD PTR [ebx+16624]
	mov	ecx, 14					; 0000000eH
	rep movsd
	lea	esi, DWORD PTR [ebp+16680]
	lea	edi, DWORD PTR [ebx+16680]
	mov	ecx, 5
	rep movsd
	lea	esi, DWORD PTR [ebp+16700]
	lea	edi, DWORD PTR [ebx+16700]
	mov	ecx, 5
	rep movsd
	lea	esi, DWORD PTR [ebp+16720]
	lea	edi, DWORD PTR [ebx+16720]
	mov	ecx, 5
	rep movsd
	lea	esi, DWORD PTR [ebp+16740]
	lea	edi, DWORD PTR [ebx+16740]
	mov	ecx, 5
	rep movsd
	mov	eax, DWORD PTR [ebp+16760]
	mov	DWORD PTR [ebx+16760], eax
	mov	ecx, DWORD PTR [ebp+16764]
	mov	DWORD PTR [ebx+16764], ecx
	mov	edx, DWORD PTR [ebp+16768]
	mov	DWORD PTR [ebx+16768], edx
	mov	eax, DWORD PTR [ebp+16772]
	mov	DWORD PTR [ebx+16772], eax
	mov	ecx, DWORD PTR [ebp+16776]
	mov	DWORD PTR [ebx+16776], ecx
	lea	esi, DWORD PTR [ebp+16780]
	lea	edi, DWORD PTR [ebx+16780]
	mov	ecx, 13					; 0000000dH
	rep movsd
	lea	esi, DWORD PTR [ebp+16832]
	lea	edi, DWORD PTR [ebx+16832]
	mov	ecx, 13					; 0000000dH
	rep movsd
	lea	esi, DWORD PTR [ebp+16884]
	lea	edi, DWORD PTR [ebx+16884]
	mov	ecx, 13					; 0000000dH
	rep movsd
	lea	esi, DWORD PTR [ebp+16936]
	lea	edi, DWORD PTR [ebx+16936]
	mov	ecx, 13					; 0000000dH
	rep movsd
	mov	edx, DWORD PTR [ebp+16988]
	mov	DWORD PTR [ebx+16988], edx
	mov	eax, DWORD PTR [ebp+16996]
	mov	DWORD PTR [ebx+16996], eax
	mov	ecx, DWORD PTR [ebp+17004]
	mov	DWORD PTR [ebx+17004], ecx
	mov	edx, DWORD PTR [ebp+17012]
	mov	DWORD PTR [ebx+17012], edx
	mov	ecx, DWORD PTR [ebp+17020]
	lea	edx, DWORD PTR [ebp+17016]
	lea	eax, DWORD PTR [ebx+17016]
	mov	DWORD PTR [eax+4], ecx
	lea	ecx, DWORD PTR [eax+8]
	sub	edx, eax
	mov	eax, 256				; 00000100H
	npad	4
$L147524:
	mov	esi, DWORD PTR [edx+ecx]
	mov	DWORD PTR [ecx], esi
	add	ecx, 4
	dec	eax
	jne	SHORT $L147524
	mov	edx, DWORD PTR [ebp+18052]
	mov	DWORD PTR [ebx+18052], edx
	mov	eax, DWORD PTR [ebp+18060]
	lea	edx, DWORD PTR [ebp+18056]
	lea	ecx, DWORD PTR [ebx+18056]
	mov	DWORD PTR [ecx+4], eax
	lea	eax, DWORD PTR [ecx+8]
	sub	edx, ecx
	mov	ecx, 256				; 00000100H
$L147547:
	mov	esi, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	dec	ecx
	jne	SHORT $L147547
	mov	ecx, DWORD PTR [ebp+19092]
	mov	DWORD PTR [ebx+19092], ecx
	mov	edx, DWORD PTR [ebp+19096]
	mov	DWORD PTR [ebx+19096], edx
	mov	eax, DWORD PTR [ebp+19100]
	mov	DWORD PTR [ebx+19100], eax
	mov	ecx, DWORD PTR [ebp+19104]
	mov	DWORD PTR [ebx+19104], ecx
	mov	edx, DWORD PTR [ebp+19108]
	mov	DWORD PTR [ebx+19108], edx
	mov	eax, DWORD PTR [ebp+19112]
	mov	DWORD PTR [ebx+19112], eax
	mov	ecx, DWORD PTR [ebp+19116]
	mov	DWORD PTR [ebx+19116], ecx
	mov	edx, DWORD PTR [ebp+19120]
	mov	DWORD PTR [ebx+19120], edx
	mov	eax, DWORD PTR [ebp+19124]
	mov	DWORD PTR [ebx+19124], eax
	mov	ecx, DWORD PTR [ebp+19128]
	mov	DWORD PTR [ebx+19128], ecx
	mov	edx, DWORD PTR [ebp+19132]
	mov	DWORD PTR [ebx+19132], edx
	mov	eax, DWORD PTR [ebp+19136]
	mov	DWORD PTR [ebx+19136], eax
	mov	ecx, DWORD PTR [ebp+19140]
	mov	DWORD PTR [ebx+19140], ecx
	mov	edx, DWORD PTR [ebp+19144]
	mov	DWORD PTR [ebx+19144], edx
	mov	eax, DWORD PTR [ebp+19148]
	mov	DWORD PTR [ebx+19148], eax
	mov	ecx, DWORD PTR [ebp+19152]
	mov	DWORD PTR [ebx+19152], ecx
	mov	edx, DWORD PTR [ebp+19156]
	mov	DWORD PTR [ebx+19156], edx
	mov	eax, DWORD PTR [ebp+19160]
	mov	DWORD PTR [ebx+19160], eax
	mov	ecx, DWORD PTR [ebp+19164]
	mov	DWORD PTR [ebx+19164], ecx
	mov	edx, DWORD PTR [ebp+19168]
	mov	DWORD PTR [ebx+19168], edx
	lea	esi, DWORD PTR [ebp+19172]
	lea	edi, DWORD PTR [ebx+19172]
	mov	ecx, 6
	rep movsd
	lea	esi, DWORD PTR [ebp+19196]
	lea	edi, DWORD PTR [ebx+19196]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebp+19260]
	lea	edi, DWORD PTR [ebx+19260]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebp+19324]
	lea	edi, DWORD PTR [ebx+19324]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebp+19388]
	lea	edi, DWORD PTR [ebx+19388]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebp+19452]
	lea	edi, DWORD PTR [ebx+19452]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebp+19516]
	lea	edi, DWORD PTR [ebx+19516]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	eax, DWORD PTR [ebp+19580]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR [ebx+19580]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR [ebp+19596]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [ebx+19596]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR [ebp+19612]
	mov	DWORD PTR [ebx+19612], edx
	mov	eax, DWORD PTR [ebp+19616]
	mov	DWORD PTR [ebx+19616], eax
	mov	ecx, DWORD PTR [ebp+19620]
	mov	DWORD PTR [ebx+19620], ecx
	lea	esi, DWORD PTR [ebp+19624]
	lea	edi, DWORD PTR [ebx+19624]
	mov	ecx, 22					; 00000016H
	rep movsd
	lea	eax, DWORD PTR [ebx+19712]
	mov	ecx, 8
	npad	4
$L125392:
	mov	edx, DWORD PTR -8+[esp+24]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax], edx
	add	eax, 4
	dec	ecx
	jne	SHORT $L125392
	lea	eax, DWORD PTR [ebx+19744]
	mov	edx, 16384				; 00004000H
	npad	6
$L125396:
	mov	ecx, DWORD PTR -8+[esp+24]
	lea	esi, DWORD PTR [ecx+eax]
	mov	edi, eax
	mov	ecx, 10					; 0000000aH
	add	eax, 40					; 00000028H
	dec	edx
	rep movsd
	jne	SHORT $L125396
	mov	edx, DWORD PTR [ebp+675104]
	mov	DWORD PTR [ebx+675104], edx
	mov	eax, DWORD PTR [ebp+675108]
	lea	esi, DWORD PTR [ebp+675112]
	lea	edi, DWORD PTR [ebx+675112]
	cmp	edi, esi
	mov	DWORD PTR [ebx+675108], eax
	je	SHORT $L147616
	mov	ecx, DWORD PTR [esi+4]
	push	ecx
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	mov	DWORD PTR _i$147613[esp+20], 0
	jle	SHORT $L147616
	npad	5
$L147614:
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	ecx, DWORD PTR [edi]
	add	ecx, eax
	je	SHORT $L147615
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR _i$147613[esp+20]
	mov	dl, BYTE PTR [eax+edx]
	mov	BYTE PTR [ecx], dl
$L147615:
	mov	eax, DWORD PTR _i$147613[esp+20]
	mov	ecx, DWORD PTR [esi+4]
	inc	eax
	cmp	eax, ecx
	mov	DWORD PTR _i$147613[esp+20], eax
	jl	SHORT $L147614
$L147616:
	mov	eax, DWORD PTR [ebp+675124]
	mov	DWORD PTR [ebx+675124], eax
	mov	ecx, DWORD PTR [ebp+675128]
	mov	DWORD PTR [ebx+675128], ecx
	mov	edx, DWORD PTR [ebp+675132]
	mov	DWORD PTR [ebx+675132], edx
	mov	eax, DWORD PTR [ebp+675136]
	mov	DWORD PTR [ebx+675136], eax
	mov	ecx, DWORD PTR [ebp+675140]
	mov	DWORD PTR [ebx+675140], ecx
	mov	edx, DWORD PTR [ebp+675144]
	mov	DWORD PTR [ebx+675144], edx
	mov	eax, DWORD PTR [ebp+675148]
	mov	DWORD PTR [ebx+675148], eax
	mov	ecx, DWORD PTR [ebp+675152]
	mov	DWORD PTR [ebx+675152], ecx
	mov	edx, DWORD PTR [ebp+675156]
	mov	DWORD PTR [ebx+675156], edx
	mov	eax, DWORD PTR [ebp+675160]
	mov	DWORD PTR [ebx+675160], eax
	mov	ecx, DWORD PTR [ebp+675164]
	mov	DWORD PTR [ebx+675164], ecx
	mov	edx, DWORD PTR [ebp+675168]
	mov	DWORD PTR [ebx+675168], edx
	mov	eax, DWORD PTR [ebp+675172]
	mov	DWORD PTR [ebx+675172], eax
	mov	ecx, DWORD PTR [ebp+675176]
	mov	DWORD PTR [ebx+675176], ecx
	mov	edx, DWORD PTR [ebp+675180]
	mov	DWORD PTR [ebx+675180], edx
	mov	eax, DWORD PTR [ebp+675184]
	mov	DWORD PTR [ebx+675184], eax
	mov	ecx, DWORD PTR [ebp+675188]
	mov	DWORD PTR [ebx+675188], ecx
	mov	edx, DWORD PTR [ebp+675192]
	mov	DWORD PTR [ebx+675192], edx
	mov	eax, DWORD PTR [ebp+675196]
	mov	DWORD PTR [ebx+675196], eax
	mov	ecx, DWORD PTR [ebp+675200]
	mov	DWORD PTR [ebx+675200], ecx
	mov	edx, DWORD PTR [ebp+675204]
	mov	DWORD PTR [ebx+675204], edx
	mov	eax, DWORD PTR [ebp+675208]
	lea	esi, DWORD PTR [ebp+675212]
	lea	edi, DWORD PTR [ebx+675212]
	cmp	edi, esi
	mov	DWORD PTR [ebx+675208], eax
	je	SHORT $L147674
	mov	eax, DWORD PTR [esi+4]
	push	eax
	push	280					; 00000118H
	mov	ecx, edi
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	mov	ecx, DWORD PTR [esi+4]
	xor	eax, eax
	cmp	ecx, eax
	mov	DWORD PTR _i$147671[esp+24], eax
	jle	SHORT $L147674
	mov	DWORD PTR 8+[esp+20], eax
$L147672:
	push	280					; 00000118H
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	imul	eax, 280				; 00000118H
	add	eax, DWORD PTR [edi]
	je	SHORT $L147673
	mov	ecx, DWORD PTR [esi]
	add	ecx, DWORD PTR 8+[esp+20]
	push	ecx
	mov	ecx, eax
	call	??0QueuedPolygon@UD3DRenderDevice@@QAE@ABU01@@Z ; UD3DRenderDevice::QueuedPolygon::QueuedPolygon
$L147673:
	mov	eax, DWORD PTR _i$147671[esp+24]
	mov	edx, DWORD PTR 8+[esp+20]
	mov	ecx, DWORD PTR [esi+4]
	inc	eax
	add	edx, 280				; 00000118H
	cmp	eax, ecx
	mov	DWORD PTR _i$147671[esp+24], eax
	mov	DWORD PTR 8+[esp+20], edx
	jl	SHORT $L147672
$L147674:
	lea	esi, DWORD PTR [ebp+675224]
	lea	edi, DWORD PTR [ebx+675224]
	cmp	edi, esi
	je	SHORT $L147732
	mov	eax, DWORD PTR [esi+4]
	push	eax
	push	16					; 00000010H
	mov	ecx, edi
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	mov	ecx, DWORD PTR [esi+4]
	xor	eax, eax
	cmp	ecx, eax
	mov	DWORD PTR _i$147729[esp+24], eax
	jle	SHORT $L147732
	mov	DWORD PTR 8+[esp+20], eax
	npad	5
$L147730:
	push	16					; 00000010H
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	ecx, DWORD PTR [edi]
	shl	eax, 4
	add	eax, ecx
	je	SHORT $L147731
	mov	edx, DWORD PTR [esi]
	add	edx, DWORD PTR 8+[esp+20]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
$L147731:
	mov	eax, DWORD PTR _i$147729[esp+24]
	mov	edx, DWORD PTR 8+[esp+20]
	mov	ecx, DWORD PTR [esi+4]
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	mov	DWORD PTR _i$147729[esp+24], eax
	mov	DWORD PTR 8+[esp+20], edx
	jl	SHORT $L147730
$L147732:
	lea	esi, DWORD PTR [ebp+675236]
	lea	ecx, DWORD PTR [ebx+675236]
	cmp	ecx, esi
	je	SHORT $L147790
	mov	eax, DWORD PTR [esi+4]
	push	eax
	push	36					; 00000024H
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	mov	DWORD PTR _i$147787[esp+24], 0
	jle	SHORT $L147790
	mov	DWORD PTR 8+[esp+20], 0
	npad	1
$L147788:
	push	36					; 00000024H
	lea	edi, DWORD PTR [ebx+675236]
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	ecx, DWORD PTR [edi]
	lea	eax, DWORD PTR [eax+eax*8]
	lea	edi, DWORD PTR [ecx+eax*4]
	test	edi, edi
	je	SHORT $L147789
	mov	esi, DWORD PTR [esi]
	add	esi, DWORD PTR 8+[esp+20]
	mov	ecx, 9
	rep movsd
$L147789:
	mov	eax, DWORD PTR _i$147787[esp+24]
	mov	edx, DWORD PTR 8+[esp+20]
	mov	ecx, DWORD PTR [ebp+675240]
	lea	esi, DWORD PTR [ebp+675236]
	inc	eax
	add	edx, 36					; 00000024H
	cmp	eax, ecx
	mov	DWORD PTR _i$147787[esp+24], eax
	mov	DWORD PTR 8+[esp+20], edx
	jl	SHORT $L147788
$L147790:
	add	ebp, 675248				; 000a4db0H
	lea	ecx, DWORD PTR [ebx+675248]
	cmp	ecx, ebp
	je	SHORT $L147859
	mov	edx, DWORD PTR [ebp+4]
	push	edx
	call	?Empty@?$TArray@UFD3DVertex@@@@QAEXH@Z	; TArray<FD3DVertex>::Empty
	mov	eax, DWORD PTR [ebp+4]
	xor	esi, esi
	test	eax, eax
	jle	SHORT $L147859
	xor	edi, edi
$L147803:
	lea	eax, DWORD PTR [ebx+675248]
	push	eax
	push	16					; 00000010H
	call	??2@YAPAXIAAV?$TArray@UFD3DVertex@@@@@Z	; operator new
	add	esp, 8
	test	eax, eax
	je	SHORT $L147804
	mov	ecx, DWORD PTR [ebp]
	add	ecx, edi
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
$L147804:
	mov	eax, DWORD PTR [ebp+4]
	inc	esi
	add	edi, 16					; 00000010H
	cmp	esi, eax
	jl	SHORT $L147803
$L147859:
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx
	add	esp, 8
	ret	4
??4UD3DRenderDevice@@QAEAAV0@ABV0@@Z ENDP		; UD3DRenderDevice::operator=
_TEXT	ENDS
PUBLIC	??_GUD3DRenderDevice@@UAEPAXI@Z			; UD3DRenderDevice::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GUD3DRenderDevice@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GUD3DRenderDevice@@UAEPAXI@Z PROC NEAR		; UD3DRenderDevice::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1UD3DRenderDevice@@UAE@XZ		; UD3DRenderDevice::~UD3DRenderDevice
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $L147880
	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	esi
	call	DWORD PTR [edx+8]
$L147880:
	mov	eax, esi
	pop	esi
	ret	4
??_GUD3DRenderDevice@@UAEPAXI@Z ENDP			; UD3DRenderDevice::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:NEAR			; `eh vector destructor iterator'
; Function compile flags: /Ogty
;	COMDAT ??_EUD3DRenderDevice@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EUD3DRenderDevice@@UAEPAXI@Z PROC NEAR		; UD3DRenderDevice::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	test	bl, 2
	push	esi
	mov	esi, ecx
	je	SHORT $L125404
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET FLAT:??1UD3DRenderDevice@@UAE@XZ	; UD3DRenderDevice::~UD3DRenderDevice
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	675260					; 000a4dbcH
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L147885
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	edi
	call	DWORD PTR [edx+8]
$L147885:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L125404:
	mov	ecx, esi
	call	??1UD3DRenderDevice@@UAE@XZ		; UD3DRenderDevice::~UD3DRenderDevice
	test	bl, 1
	je	SHORT $L147888
	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	esi
	call	DWORD PTR [edx+8]
$L147888:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EUD3DRenderDevice@@UAEPAXI@Z ENDP			; UD3DRenderDevice::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	_DllMain@12
; Function compile flags: /Ogty
;	COMDAT _DllMain@12
_TEXT	SEGMENT
_hInInstance$ = 8
_DllMain@12 PROC NEAR					; COMDAT

; 5933 : IMPLEMENT_PACKAGE(D3DDrv);

	mov	eax, DWORD PTR _hInInstance$[esp-4]
	mov	DWORD PTR _hInstance, eax
	mov	eax, 1
	ret	12					; 0000000cH
_DllMain@12 ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E317
_TEXT	SEGMENT
_$E317	PROC NEAR					; COMDAT
	call	_$E313
	jmp	_$E316
_$E317	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1O@KHFL@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@LEJP@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@ ; `string'
EXTRN	__imp_?PrivateStaticClass@URenderDevice@@0VUClass@@A:BYTE
EXTRN	__imp_?PrivateStaticClass@UObject@@0VUClass@@A:BYTE
EXTRN	__imp_??0UClass@@QAE@W4ENativeConstructor@@KKPAV0@1VFGuid@@PBG33KP6AXPAX@ZP8UObject@@AEXXZ@Z:NEAR
;	COMDAT ??_C@_1O@KHFL@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?$AA@
; File ..\..\Engine\Inc\UnRenDev.h
_DATA	SEGMENT
??_C@_1O@KHFL@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?$AA@ DB 'S', 00H, 'y', 00H
	DB	's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CC@LEJP@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@
_DATA	SEGMENT
??_C@_1CC@LEJP@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@ DB 'U'
	DB	00H, 'D', 00H, '3', 00H, 'D', 00H, 'R', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i'
	DB	00H, 'c', 00H, 'e', 00H, 00H, 00H		; `string'
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT _$E313
_TEXT	SEGMENT
$T147900 = -8
_$E313	PROC NEAR					; COMDAT

; 5934 : IMPLEMENT_CLASS(UD3DRenderDevice);

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	push	edi
	sub	esp, 16					; 00000010H
	mov	ebp, esp
	push	OFFSET FLAT:?InternalConstructor@UD3DRenderDevice@@SAXPAX@Z ; UD3DRenderDevice::InternalConstructor
	push	67649540				; 04084004H
	push	OFFSET FLAT:??_C@_1O@KHFL@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?$AA@ ; `string'
	push	OFFSET FLAT:_GPackage
	xor	ecx, ecx
	push	OFFSET FLAT:??_C@_1CC@LEJP@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@+2
	mov	eax, OFFSET FLAT:?StaticConstructor@UD3DRenderDevice@@QAEXXZ ; UD3DRenderDevice::StaticConstructor
	mov	DWORD PTR [ebp], eax
	mov	DWORD PTR [ebp+4], ecx
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	xor	edx, edx
	mov	DWORD PTR [ebp+8], edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UObject@@0VUClass@@A
	xor	esi, esi
	xor	edi, edi
	mov	DWORD PTR [ebp+12], esi
	mov	DWORD PTR [ecx], edi
	xor	ebx, ebx
	mov	DWORD PTR [ecx+4], ebx
	xor	eax, eax
	mov	DWORD PTR [ecx+8], eax
	push	edx
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR __imp_?PrivateStaticClass@URenderDevice@@0VUClass@@A
	push	eax
	push	4
	push	675260					; 000a4dbcH
	push	edi
	mov	ecx, OFFSET FLAT:?PrivateStaticClass@UD3DRenderDevice@@0VUClass@@A
	mov	DWORD PTR $T147900[esp+100], ebx
	call	DWORD PTR __imp_??0UClass@@QAE@W4ENativeConstructor@@KKPAV0@1VFGuid@@PBG33KP6AXPAX@ZP8UObject@@AEXXZ@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
_$E313	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E316
_TEXT	SEGMENT
_$E316	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E314
	call	_atexit
	pop	ecx
	ret	0
_$E316	ENDP
_TEXT	ENDS
EXTRN	__imp_??1UClass@@UAE@XZ:NEAR
_BSS	SEGMENT
_$S315	DB	01H DUP (?)
; Function compile flags: /Ogty
_BSS	ENDS
;	COMDAT _$E314
_TEXT	SEGMENT
_$E314	PROC NEAR					; COMDAT
	mov	cl, BYTE PTR _$S315
	mov	al, 1
	test	cl, al
	jne	SHORT $L125525
	or	cl, al
	mov	BYTE PTR _$S315, cl
	mov	ecx, OFFSET FLAT:?PrivateStaticClass@UD3DRenderDevice@@0VUClass@@A
	jmp	DWORD PTR __imp_??1UClass@@UAE@XZ
$L125525:
	ret	0
_$E314	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E320
_TEXT	SEGMENT
_$E320	PROC NEAR					; COMDAT
	jmp	_$E319
_$E320	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E319
_TEXT	SEGMENT
_$E319	PROC NEAR					; COMDAT

; 5934 : IMPLEMENT_CLASS(UD3DRenderDevice);

	mov	DWORD PTR _autoclassUD3DRenderDevice, OFFSET FLAT:?PrivateStaticClass@UD3DRenderDevice@@0VUClass@@A ; UD3DRenderDevice::PrivateStaticClass
	ret	0
_$E319	ENDP
_TEXT	ENDS
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	SEGMENT
$T147959 DD	0ffffffffH
	DD	FLAT:$L147932
$T147955 DD	019930520H
	DD	01H
	DD	FLAT:$T147959
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@E@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1?$TArray@E@@QAE@XZ PROC NEAR				; TArray<unsigned char>::~TArray<unsigned char>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L147958
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L147942
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L147942:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L147943
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L147943:
	push	1
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L147953
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L147953:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L147932:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L147958:
	mov	eax, OFFSET FLAT:$T147955
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@E@@QAE@XZ ENDP				; TArray<unsigned char>::~TArray<unsigned char>
; Function compile flags: /Ogty
;	COMDAT ?Remove@?$TArray@E@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@E@@QAEXHH@Z PROC NEAR			; TArray<unsigned char>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L125650
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L125650:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L125652
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L125652:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L125654
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L125654:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	1
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@E@@QAEXHH@Z ENDP			; TArray<unsigned char>::Remove
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T148001 DD	0ffffffffH
	DD	FLAT:$L147974
$T147997 DD	019930520H
	DD	01H
	DD	FLAT:$T148001
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@H@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1?$TArray@H@@QAE@XZ PROC NEAR				; TArray<int>::~TArray<int>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L148000
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L147984
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L147984:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L147985
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L147985:
	push	4
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L147995
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L147995:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L147974:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148000:
	mov	eax, OFFSET FLAT:$T147997
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@H@@QAE@XZ ENDP				; TArray<int>::~TArray<int>
; Function compile flags: /Ogty
;	COMDAT ?Remove@?$TArray@H@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@H@@QAEXHH@Z PROC NEAR			; TArray<int>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L125716
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L125716:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L125717
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L125717:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L125718
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L125718:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	4
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@H@@QAEXHH@Z ENDP			; TArray<int>::Remove
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T148043 DD	0ffffffffH
	DD	FLAT:$L148016
$T148039 DD	019930520H
	DD	01H
	DD	FLAT:$T148043
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@VFVector@@@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1?$TArray@VFVector@@@@QAE@XZ PROC NEAR		; TArray<FVector>::~TArray<FVector>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L148042
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L148023
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148023:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L148024
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148024:
	push	12					; 0000000cH
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L148037
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L148037:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148016:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148042:
	mov	eax, OFFSET FLAT:$T148039
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@VFVector@@@@QAE@XZ ENDP			; TArray<FVector>::~TArray<FVector>
; Function compile flags: /Ogty
;	COMDAT ??0?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ
_TEXT	SEGMENT
??0?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ PROC NEAR ; TArray<_D3DADAPTER_IDENTIFIER8>::TArray<_D3DADAPTER_IDENTIFIER8>, COMDAT
; _this$ = ecx

; 344  : 	{}

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ ENDP	; TArray<_D3DADAPTER_IDENTIFIER8>::TArray<_D3DADAPTER_IDENTIFIER8>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T148083 DD	0ffffffffH
	DD	FLAT:$L148056
$T148079 DD	019930520H
	DD	01H
	DD	FLAT:$T148083
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ PROC NEAR ; TArray<_D3DADAPTER_IDENTIFIER8>::~TArray<_D3DADAPTER_IDENTIFIER8>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L148082
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L148063
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148063:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L148064
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148064:
	push	1068					; 0000042cH
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L148077
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L148077:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148056:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148082:
	mov	eax, OFFSET FLAT:$T148079
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ ENDP	; TArray<_D3DADAPTER_IDENTIFIER8>::~TArray<_D3DADAPTER_IDENTIFIER8>
; Function compile flags: /Ogty
;	COMDAT ??0?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ
_TEXT	SEGMENT
??0?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ PROC NEAR	; TArray<_D3DDISPLAYMODE>::TArray<_D3DDISPLAYMODE>, COMDAT
; _this$ = ecx

; 344  : 	{}

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ ENDP		; TArray<_D3DDISPLAYMODE>::TArray<_D3DDISPLAYMODE>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T148123 DD	0ffffffffH
	DD	FLAT:$L148096
$T148119 DD	019930520H
	DD	01H
	DD	FLAT:$T148123
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ PROC NEAR	; TArray<_D3DDISPLAYMODE>::~TArray<_D3DDISPLAYMODE>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L148122
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L148103
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148103:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L148104
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148104:
	push	16					; 00000010H
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L148116
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L148116:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148096:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148122:
	mov	eax, OFFSET FLAT:$T148119
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ ENDP		; TArray<_D3DDISPLAYMODE>::~TArray<_D3DDISPLAYMODE>
;	COMDAT xdata$x
xdata$x	SEGMENT
$T148156 DD	0ffffffffH
	DD	FLAT:$L148129
$T148152 DD	019930520H
	DD	01H
	DD	FLAT:$T148156
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ PROC NEAR ; TArray<UD3DRenderDevice::ProjectorInfo>::~TArray<UD3DRenderDevice::ProjectorInfo>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L148155
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L148136
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148136:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L148137
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148137:
	push	84					; 00000054H
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L148149
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L148149:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148129:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148155:
	mov	eax, OFFSET FLAT:$T148152
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ ENDP ; TArray<UD3DRenderDevice::ProjectorInfo>::~TArray<UD3DRenderDevice::ProjectorInfo>
;	COMDAT xdata$x
xdata$x	SEGMENT
$T148189 DD	0ffffffffH
	DD	FLAT:$L148162
$T148185 DD	019930520H
	DD	01H
	DD	FLAT:$T148189
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ PROC NEAR ; TArray<UD3DRenderDevice::RenderTargetInfo>::~TArray<UD3DRenderDevice::RenderTargetInfo>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L148188
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L148169
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148169:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L148170
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148170:
	push	20					; 00000014H
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L148182
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L148182:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148162:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148188:
	mov	eax, OFFSET FLAT:$T148185
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ ENDP ; TArray<UD3DRenderDevice::RenderTargetInfo>::~TArray<UD3DRenderDevice::RenderTargetInfo>
; Function compile flags: /Ogty
; File D:\DEV\DNF2001\Stable\D3DDrv\Src\Direct3D8.cpp
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ
_TEXT	SEGMENT
??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ PROC NEAR ; FD3DVertexBuffer<FD3DScreenVertex>::~FD3DVertexBuffer<FD3DScreenVertex>, COMDAT
; _this$ = ecx

; 247  : 	{

	push	esi
	mov	esi, ecx

; 248  : 		Exit(); 

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L148206
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+4], 0
$L148206:
	pop	esi

; 249  : 	}

	ret	0
??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ ENDP	; FD3DVertexBuffer<FD3DScreenVertex>::~FD3DVertexBuffer<FD3DScreenVertex>
_TEXT	ENDS
PUBLIC	??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
;	COMDAT ??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'V', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '8', 00H
	DB	'-', 00H, '>', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H, ' ', 00H
	DB	'*', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o'
	DB	00H, 'f', 00H, '(', 00H, 'T', 00H, ')', 00H, ',', 00H, 'N', 00H
	DB	'u', 00H, 'm', 00H, ' ', 00H, '*', 00H, ' ', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 'T', 00H
	DB	')', 00H, ',', 00H, '(', 00H, 'B', 00H, 'Y', 00H, 'T', 00H, 'E'
	DB	00H, '*', 00H, '*', 00H, ')', 00H, ' ', 00H, '&', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'D', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, ',', 00H, 'D', 00H, '3', 00H, 'D', 00H
	DB	'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, '_', 00H, 'N', 00H, 'O'
	DB	00H, 'O', 00H, 'V', 00H, 'E', 00H, 'R', 00H, 'W', 00H, 'R', 00H
	DB	'I', 00H, 'T', 00H, 'E', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEPAUFD3DScreenVertex@@HH@Z
_TEXT	SEGMENT
_VertexData$ = -4
_Num$ = 8
_Start$ = 12
?Lock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEPAUFD3DScreenVertex@@HH@Z PROC NEAR ; FD3DVertexBuffer<FD3DScreenVertex>::Lock, COMDAT
; _this$ = ecx

; 276  : 	{

	push	ecx
	push	ebx

; 277  : 		check(VertexBuffer8);

	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	push	edi
	jne	SHORT $L126416
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L126416:

; 278  : 		check(Length);

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L126418
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L126418:

; 279  : 		check(Num<Length);

	mov	edi, DWORD PTR _Num$[esp+12]
	cmp	edi, DWORD PTR [esi+8]
	jl	SHORT $L126420
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L126420:

; 280  : 
; 281  :  		T*	VertexData;
; 282  : 
; 283  : 		// Lock the vertex buffer.
; 284  : 		if(Start!=-1)

	mov	eax, DWORD PTR _Start$[esp+12]
	cmp	eax, -1
	je	SHORT $L126423

; 285  : 		{
; 286  : 			D3D_CHECK(VertexBuffer8->Lock(Start * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	esi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	4096					; 00001000H
	lea	edx, DWORD PTR _VertexData$[esp+20]
	push	edx
	lea	edx, DWORD PTR [edi+edi*8]
	shl	edx, 2
	lea	eax, DWORD PTR [eax+eax*8]
	push	edx
	shl	eax, 2
	push	eax
	push	esi
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	$L148214
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	286					; 0000011eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 300  : 		}
; 301  : 
; 302  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+36]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 303  : 	}

	pop	ecx
	ret	8
$L126423:

; 287  : 		} 
; 288  : 		else if(Rover + Num < Length)

	mov	ecx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [esi+8]
	lea	eax, DWORD PTR [ecx+edi]
	cmp	eax, edx

; 289  : 		{
; 290  : 			D3D_CHECK(VertexBuffer8->Lock(Rover * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	eax, DWORD PTR [esi+4]
	jge	SHORT $L126447
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	ebx, DWORD PTR _VertexData$[esp+20]
	push	ebx
	lea	ebx, DWORD PTR [edi+edi*8]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	shl	ebx, 2
	push	ebx
	shl	ecx, 2
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L126437
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L126437:

; 291  : 			First =Rover;

	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [esi+12], eax

; 292  : 
; 293  : 			Rover+=Num;

	add	eax, edi
	pop	edi
	mov	DWORD PTR [esi+16], eax

; 300  : 		}
; 301  : 
; 302  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+12]
	pop	esi
	pop	ebx

; 303  : 	}

	pop	ecx
	ret	8
$L126447:

; 294  : 
; 295  : 		} else
; 296  : 		{
; 297  : 			D3D_CHECK(VertexBuffer8->Lock(0,Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_DISCARD));

	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$[esp+20]
	push	edx
	lea	edx, DWORD PTR [edi+edi*8]
	shl	edx, 2
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	SHORT $L126448
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L126448:

; 298  : 			First=0;

	mov	DWORD PTR [esi+12], 0

; 299  : 			Rover=Num;

	mov	DWORD PTR [esi+16], edi
$L148214:

; 300  : 		}
; 301  : 
; 302  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+16]
	pop	edi
	pop	esi
	pop	ebx

; 303  : 	}

	pop	ecx
	ret	8
?Lock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEPAUFD3DScreenVertex@@HH@Z ENDP ; FD3DVertexBuffer<FD3DScreenVertex>::Lock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ
_TEXT	SEGMENT
?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ PROC NEAR ; FD3DVertexBuffer<FD3DScreenVertex>::Unlock, COMDAT
; _this$ = ecx

; 307  : 	{

	push	esi
	mov	esi, ecx

; 308  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L126459
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L126459:

; 309  : 
; 310  : 		D3D_CHECK(VertexBuffer8->Unlock());

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L148219
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L148219:

; 311  : 
; 312  : 		return First;

	mov	eax, DWORD PTR [esi+12]
	pop	esi

; 313  : 	}

	ret	0
?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ ENDP ; FD3DVertexBuffer<FD3DScreenVertex>::Unlock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXXZ
_TEXT	SEGMENT
?Set@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXXZ PROC NEAR ; FD3DVertexBuffer<FD3DScreenVertex>::Set, COMDAT
; _this$ = ecx

; 317  : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 318  : 		check(Device);

	cmp	DWORD PTR [esi], 0
	push	edi
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L126468
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L126468:

; 319  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L126471
	push	319					; 0000013fH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH

; 325  : 	}

	npad	1

; 319  : 		check(VertexBuffer8);

$L126471:

; 320  : 
; 321  : 		// Set stream source 0 and the vertex shader.
; 322  : 		D3D_CHECK(Device->SetRenderState(D3DRS_SOFTWAREVERTEXPROCESSING,FALSE));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [ecx+200]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	jge	SHORT $L126472
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L126472:

; 323  : 		D3D_CHECK(Device->SetVertexShader(T::FVF));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	580					; 00000244H
	push	eax
	call	DWORD PTR [ecx+304]
	test	eax, eax
	jge	SHORT $L126479
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L126479:

; 324  : 		D3D_CHECK(Device->SetStreamSource(0,VertexBuffer8,sizeof(T)));

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	36					; 00000024H
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+332]
	test	eax, eax
	jge	SHORT $L126486
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	324					; 00000144H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L126486:
	pop	edi
	pop	esi
	pop	ebx

; 325  : 	}

	ret	0
?Set@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXXZ ENDP ; FD3DVertexBuffer<FD3DScreenVertex>::Set
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ
_TEXT	SEGMENT
??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ PROC NEAR	; FD3DVertexBuffer<FD3DTLVertex>::~FD3DVertexBuffer<FD3DTLVertex>, COMDAT
; _this$ = ecx

; 247  : 	{

	push	esi
	mov	esi, ecx

; 248  : 		Exit(); 

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L148240
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+4], 0
$L148240:
	pop	esi

; 249  : 	}

	ret	0
??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ ENDP	; FD3DVertexBuffer<FD3DTLVertex>::~FD3DVertexBuffer<FD3DTLVertex>
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z
_TEXT	SEGMENT
_Start$ = 12
_VertexData$ = -4
_Num$ = 8
?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z PROC NEAR ; FD3DVertexBuffer<FD3DTLVertex>::Lock, COMDAT
; _this$ = ecx

; 276  : 	{

	push	ecx
	push	ebx

; 277  : 		check(VertexBuffer8);

	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	push	edi
	jne	SHORT $L126515
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L126515:

; 278  : 		check(Length);

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L126516
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L126516:

; 279  : 		check(Num<Length);

	mov	edi, DWORD PTR _Num$[esp+12]
	cmp	edi, DWORD PTR [esi+8]
	jl	SHORT $L126517
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L126517:

; 280  : 
; 281  :  		T*	VertexData;
; 282  : 
; 283  : 		// Lock the vertex buffer.
; 284  : 		if(Start!=-1)

	mov	eax, DWORD PTR _Start$[esp+12]
	cmp	eax, -1
	je	SHORT $L126519

; 285  : 		{
; 286  : 			D3D_CHECK(VertexBuffer8->Lock(Start * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	esi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	4096					; 00001000H
	lea	edx, DWORD PTR _VertexData$[esp+20]
	push	edx
	lea	edx, DWORD PTR [edi+edi*4]
	shl	edx, 3
	lea	eax, DWORD PTR [eax+eax*4]
	push	edx
	shl	eax, 3
	push	eax
	push	esi
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	$L148248
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	286					; 0000011eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 300  : 		}
; 301  : 
; 302  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+36]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 303  : 	}

	pop	ecx
	ret	8
$L126519:

; 287  : 		} 
; 288  : 		else if(Rover + Num < Length)

	mov	ecx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [esi+8]
	lea	eax, DWORD PTR [ecx+edi]
	cmp	eax, edx

; 289  : 		{
; 290  : 			D3D_CHECK(VertexBuffer8->Lock(Rover * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	eax, DWORD PTR [esi+4]
	jge	SHORT $L126541
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	ebx, DWORD PTR _VertexData$[esp+20]
	push	ebx
	lea	ebx, DWORD PTR [edi+edi*4]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	shl	ebx, 3
	push	ebx
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L126532
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L126532:

; 291  : 			First =Rover;

	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [esi+12], eax

; 292  : 
; 293  : 			Rover+=Num;

	add	eax, edi
	pop	edi
	mov	DWORD PTR [esi+16], eax

; 300  : 		}
; 301  : 
; 302  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+12]
	pop	esi
	pop	ebx

; 303  : 	}

	pop	ecx
	ret	8
$L126541:

; 294  : 
; 295  : 		} else
; 296  : 		{
; 297  : 			D3D_CHECK(VertexBuffer8->Lock(0,Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_DISCARD));

	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$[esp+20]
	push	edx
	lea	edx, DWORD PTR [edi+edi*4]
	shl	edx, 3
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	SHORT $L126542
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L126542:

; 298  : 			First=0;

	mov	DWORD PTR [esi+12], 0

; 299  : 			Rover=Num;

	mov	DWORD PTR [esi+16], edi
$L148248:

; 300  : 		}
; 301  : 
; 302  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+16]
	pop	edi
	pop	esi
	pop	ebx

; 303  : 	}

	pop	ecx
	ret	8
?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z ENDP ; FD3DVertexBuffer<FD3DTLVertex>::Lock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ
_TEXT	SEGMENT
?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ PROC NEAR ; FD3DVertexBuffer<FD3DTLVertex>::Unlock, COMDAT
; _this$ = ecx

; 307  : 	{

	push	esi
	mov	esi, ecx

; 308  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L126552
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L126552:

; 309  : 
; 310  : 		D3D_CHECK(VertexBuffer8->Unlock());

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L148253
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L148253:

; 311  : 
; 312  : 		return First;

	mov	eax, DWORD PTR [esi+12]
	pop	esi

; 313  : 	}

	ret	0
?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ ENDP	; FD3DVertexBuffer<FD3DTLVertex>::Unlock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ
_TEXT	SEGMENT
?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ PROC NEAR ; FD3DVertexBuffer<FD3DTLVertex>::Set, COMDAT
; _this$ = ecx

; 317  : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 318  : 		check(Device);

	cmp	DWORD PTR [esi], 0
	push	edi
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L126560
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L126560:

; 319  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L126562
	push	319					; 0000013fH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH

; 325  : 	}

	npad	1

; 319  : 		check(VertexBuffer8);

$L126562:

; 320  : 
; 321  : 		// Set stream source 0 and the vertex shader.
; 322  : 		D3D_CHECK(Device->SetRenderState(D3DRS_SOFTWAREVERTEXPROCESSING,FALSE));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [ecx+200]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	jge	SHORT $L126563
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L126563:

; 323  : 		D3D_CHECK(Device->SetVertexShader(T::FVF));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	708					; 000002c4H
	push	eax
	call	DWORD PTR [ecx+304]
	test	eax, eax
	jge	SHORT $L126569
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L126569:

; 324  : 		D3D_CHECK(Device->SetStreamSource(0,VertexBuffer8,sizeof(T)));

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	40					; 00000028H
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+332]
	test	eax, eax
	jge	SHORT $L126575
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	324					; 00000144H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L126575:
	pop	edi
	pop	esi
	pop	ebx

; 325  : 	}

	ret	0
?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ENDP	; FD3DVertexBuffer<FD3DTLVertex>::Set
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ
_TEXT	SEGMENT
??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ PROC NEAR	; FD3DVertexBuffer<FD3DVertex>::~FD3DVertexBuffer<FD3DVertex>, COMDAT
; _this$ = ecx

; 247  : 	{

	push	esi
	mov	esi, ecx

; 248  : 		Exit(); 

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L148274
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+4], 0
$L148274:
	pop	esi

; 249  : 	}

	ret	0
??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ ENDP	; FD3DVertexBuffer<FD3DVertex>::~FD3DVertexBuffer<FD3DVertex>
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z
_TEXT	SEGMENT
_Num$ = 8
_Start$ = 12
_VertexData$ = -4
?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z PROC NEAR ; FD3DVertexBuffer<FD3DVertex>::Lock, COMDAT
; _this$ = ecx

; 276  : 	{

	push	ecx
	push	ebx

; 277  : 		check(VertexBuffer8);

	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	push	edi
	jne	SHORT $L126603
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L126603:

; 278  : 		check(Length);

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L126604
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L126604:

; 279  : 		check(Num<Length);

	mov	edi, DWORD PTR _Num$[esp+12]
	cmp	edi, DWORD PTR [esi+8]
	jl	SHORT $L126605
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L126605:

; 280  : 
; 281  :  		T*	VertexData;
; 282  : 
; 283  : 		// Lock the vertex buffer.
; 284  : 		if(Start!=-1)

	mov	eax, DWORD PTR _Start$[esp+12]
	cmp	eax, -1
	je	SHORT $L126607

; 285  : 		{
; 286  : 			D3D_CHECK(VertexBuffer8->Lock(Start * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	esi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	4096					; 00001000H
	lea	edx, DWORD PTR _VertexData$[esp+20]
	push	edx
	shl	edi, 4
	push	edi
	shl	eax, 4
	push	eax
	push	esi
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	$L148282
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	286					; 0000011eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 300  : 		}
; 301  : 
; 302  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+36]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 303  : 	}

	pop	ecx
	ret	8
$L126607:

; 287  : 		} 
; 288  : 		else if(Rover + Num < Length)

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [esi+8]
	lea	edx, DWORD PTR [eax+edi]
	cmp	edx, ecx
	jge	SHORT $L126629

; 289  : 		{
; 290  : 			D3D_CHECK(VertexBuffer8->Lock(Rover * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx]
	push	4096					; 00001000H
	lea	ebx, DWORD PTR _VertexData$[esp+20]
	push	ebx
	mov	ebx, edi
	shl	ebx, 4
	push	ebx
	shl	eax, 4
	push	eax
	push	ecx
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L126620
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L126620:

; 291  : 			First =Rover;

	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [esi+12], eax

; 292  : 
; 293  : 			Rover+=Num;

	add	eax, edi
	pop	edi
	mov	DWORD PTR [esi+16], eax

; 300  : 		}
; 301  : 
; 302  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+12]
	pop	esi
	pop	ebx

; 303  : 	}

	pop	ecx
	ret	8
	npad	4
$L126629:

; 294  : 
; 295  : 		} else
; 296  : 		{
; 297  : 			D3D_CHECK(VertexBuffer8->Lock(0,Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_DISCARD));

	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	ecx, DWORD PTR _VertexData$[esp+20]
	push	ecx
	mov	ecx, edi
	shl	ecx, 4
	push	ecx
	push	0
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L126630
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L126630:

; 298  : 			First=0;

	mov	DWORD PTR [esi+12], 0

; 299  : 			Rover=Num;

	mov	DWORD PTR [esi+16], edi
$L148282:

; 300  : 		}
; 301  : 
; 302  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+16]
	pop	edi
	pop	esi
	pop	ebx

; 303  : 	}

	pop	ecx
	ret	8
?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ENDP ; FD3DVertexBuffer<FD3DVertex>::Lock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ
_TEXT	SEGMENT
?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ PROC NEAR ; FD3DVertexBuffer<FD3DVertex>::Unlock, COMDAT
; _this$ = ecx

; 307  : 	{

	push	esi
	mov	esi, ecx

; 308  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L126640
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L126640:

; 309  : 
; 310  : 		D3D_CHECK(VertexBuffer8->Unlock());

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L148287
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L148287:

; 311  : 
; 312  : 		return First;

	mov	eax, DWORD PTR [esi+12]
	pop	esi

; 313  : 	}

	ret	0
?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ENDP	; FD3DVertexBuffer<FD3DVertex>::Unlock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ
_TEXT	SEGMENT
?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ PROC NEAR	; FD3DVertexBuffer<FD3DVertex>::Set, COMDAT
; _this$ = ecx

; 317  : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 318  : 		check(Device);

	cmp	DWORD PTR [esi], 0
	push	edi
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L126648
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L126648:

; 319  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L126650
	push	319					; 0000013fH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH

; 325  : 	}

	npad	1

; 319  : 		check(VertexBuffer8);

$L126650:

; 320  : 
; 321  : 		// Set stream source 0 and the vertex shader.
; 322  : 		D3D_CHECK(Device->SetRenderState(D3DRS_SOFTWAREVERTEXPROCESSING,FALSE));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [ecx+200]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	jge	SHORT $L126651
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L126651:

; 323  : 		D3D_CHECK(Device->SetVertexShader(T::FVF));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	66					; 00000042H
	push	eax
	call	DWORD PTR [ecx+304]
	test	eax, eax
	jge	SHORT $L126657
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L126657:

; 324  : 		D3D_CHECK(Device->SetStreamSource(0,VertexBuffer8,sizeof(T)));

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	16					; 00000010H
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+332]
	test	eax, eax
	jge	SHORT $L126663
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	324					; 00000144H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L126663:
	pop	edi
	pop	esi
	pop	ebx

; 325  : 	}

	ret	0
?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ENDP	; FD3DVertexBuffer<FD3DVertex>::Set
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ
_TEXT	SEGMENT
??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ PROC NEAR	; FD3DVertexBuffer<FD3DParticle>::~FD3DVertexBuffer<FD3DParticle>, COMDAT
; _this$ = ecx

; 247  : 	{

	push	esi
	mov	esi, ecx

; 248  : 		Exit(); 

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L148308
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+4], 0
$L148308:
	pop	esi

; 249  : 	}

	ret	0
??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ ENDP	; FD3DVertexBuffer<FD3DParticle>::~FD3DVertexBuffer<FD3DParticle>
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z
_TEXT	SEGMENT
_Num$ = 8
_Start$ = 12
_VertexData$ = -4
?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z PROC NEAR ; FD3DVertexBuffer<FD3DParticle>::Lock, COMDAT
; _this$ = ecx

; 276  : 	{

	push	ecx
	push	ebx

; 277  : 		check(VertexBuffer8);

	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	push	edi
	jne	SHORT $L126691
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L126691:

; 278  : 		check(Length);

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L126692
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L126692:

; 279  : 		check(Num<Length);

	mov	edi, DWORD PTR _Num$[esp+12]
	cmp	edi, DWORD PTR [esi+8]
	jl	SHORT $L126693
	push	279					; 00000117H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L126693:

; 280  : 
; 281  :  		T*	VertexData;
; 282  : 
; 283  : 		// Lock the vertex buffer.
; 284  : 		if(Start!=-1)

	mov	eax, DWORD PTR _Start$[esp+12]
	cmp	eax, -1
	je	SHORT $L126695

; 285  : 		{
; 286  : 			D3D_CHECK(VertexBuffer8->Lock(Start * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	esi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	4096					; 00001000H
	lea	edx, DWORD PTR _VertexData$[esp+20]
	push	edx
	lea	edx, DWORD PTR [edi+edi*2]
	shl	edx, 3
	lea	eax, DWORD PTR [eax+eax*2]
	push	edx
	shl	eax, 3
	push	eax
	push	esi
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	$L148316
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	286					; 0000011eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 300  : 		}
; 301  : 
; 302  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+36]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 303  : 	}

	pop	ecx
	ret	8
$L126695:

; 287  : 		} 
; 288  : 		else if(Rover + Num < Length)

	mov	ecx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [esi+8]
	lea	eax, DWORD PTR [ecx+edi]
	cmp	eax, edx

; 289  : 		{
; 290  : 			D3D_CHECK(VertexBuffer8->Lock(Rover * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	eax, DWORD PTR [esi+4]
	jge	SHORT $L126717
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	ebx, DWORD PTR _VertexData$[esp+20]
	push	ebx
	lea	ebx, DWORD PTR [edi+edi*2]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	shl	ebx, 3
	push	ebx
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L126708
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	290					; 00000122H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L126708:

; 291  : 			First =Rover;

	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [esi+12], eax

; 292  : 
; 293  : 			Rover+=Num;

	add	eax, edi
	pop	edi
	mov	DWORD PTR [esi+16], eax

; 300  : 		}
; 301  : 
; 302  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+12]
	pop	esi
	pop	ebx

; 303  : 	}

	pop	ecx
	ret	8
$L126717:

; 294  : 
; 295  : 		} else
; 296  : 		{
; 297  : 			D3D_CHECK(VertexBuffer8->Lock(0,Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_DISCARD));

	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$[esp+20]
	push	edx
	lea	edx, DWORD PTR [edi+edi*2]
	shl	edx, 3
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	SHORT $L126718
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	297					; 00000129H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L126718:

; 298  : 			First=0;

	mov	DWORD PTR [esi+12], 0

; 299  : 			Rover=Num;

	mov	DWORD PTR [esi+16], edi
$L148316:

; 300  : 		}
; 301  : 
; 302  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+16]
	pop	edi
	pop	esi
	pop	ebx

; 303  : 	}

	pop	ecx
	ret	8
?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z ENDP ; FD3DVertexBuffer<FD3DParticle>::Lock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEHXZ
_TEXT	SEGMENT
?Unlock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEHXZ PROC NEAR ; FD3DVertexBuffer<FD3DParticle>::Unlock, COMDAT
; _this$ = ecx

; 307  : 	{

	push	esi
	mov	esi, ecx

; 308  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L126728
	push	308					; 00000134H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L126728:

; 309  : 
; 310  : 		D3D_CHECK(VertexBuffer8->Unlock());

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L148321
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	310					; 00000136H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L148321:

; 311  : 
; 312  : 		return First;

	mov	eax, DWORD PTR [esi+12]
	pop	esi

; 313  : 	}

	ret	0
?Unlock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEHXZ ENDP	; FD3DVertexBuffer<FD3DParticle>::Unlock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ
_TEXT	SEGMENT
?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ PROC NEAR ; FD3DVertexBuffer<FD3DParticle>::Set, COMDAT
; _this$ = ecx

; 317  : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 318  : 		check(Device);

	cmp	DWORD PTR [esi], 0
	push	edi
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L126736
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L126736:

; 319  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L126738
	push	319					; 0000013fH
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH

; 325  : 	}

	npad	1

; 319  : 		check(VertexBuffer8);

$L126738:

; 320  : 
; 321  : 		// Set stream source 0 and the vertex shader.
; 322  : 		D3D_CHECK(Device->SetRenderState(D3DRS_SOFTWAREVERTEXPROCESSING,FALSE));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [ecx+200]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	jge	SHORT $L126739
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L126739:

; 323  : 		D3D_CHECK(Device->SetVertexShader(T::FVF));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	322					; 00000142H
	push	eax
	call	DWORD PTR [ecx+304]
	test	eax, eax
	jge	SHORT $L126745
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L126745:

; 324  : 		D3D_CHECK(Device->SetStreamSource(0,VertexBuffer8,sizeof(T)));

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	24					; 00000018H
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+332]
	test	eax, eax
	jge	SHORT $L126751
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	324					; 00000144H
	push	OFFSET FLAT:??_C@_0CP@GCJJ@D?3?2DEV?2DNF2001?2Stable?2D3DDrv?2Src@ ; `string'
	call	ebx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L126751:
	pop	edi
	pop	esi
	pop	ebx

; 325  : 	}

	ret	0
?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ ENDP	; FD3DVertexBuffer<FD3DParticle>::Set
_TEXT	ENDS
PUBLIC	??0FTransSample@@QAE@ABU0@@Z			; FTransSample::FTransSample
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnFile.h
xdata$x	SEGMENT
$T148404 DD	0ffffffffH
	DD	FLAT:$L148334
$T148395 DD	019930520H
	DD	01H
	DD	FLAT:$T148404
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	ENDS
;	COMDAT ??0?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12
_Other$ = 8
_this$ = -16
_i$126786 = -20
??0?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@ABV0@@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedPolygon>::TArray<UD3DRenderDevice::QueuedPolygon>, COMDAT
; _this$ = ecx

; 350  : 	{

	push	-1
	push	$L148403
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _Other$[esp+36]
	mov	eax, DWORD PTR [edi+4]
	mov	ebx, ecx
	xor	esi, esi
	push	280					; 00000118H
	mov	DWORD PTR _this$[esp+44], ebx
	mov	DWORD PTR [ebx], esi
	mov	DWORD PTR [ebx+4], eax
	mov	DWORD PTR [ebx+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z

; 351  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 352  : 		{
; 353  : 			ArrayNum=0;

	mov	DWORD PTR [ebx+4], esi

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

	cmp	DWORD PTR [edi+4], esi
	mov	DWORD PTR __$EHRec$[esp+48], esi
	mov	DWORD PTR _i$126786[esp+40], esi
	jle	$L148401
	push	ebp
	mov	DWORD PTR -28+[esp+44], esi
$L126787:

; 355  : 				new(*this)T(Other(i));

	mov	esi, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx+8]
	lea	ecx, DWORD PTR [esi+1]
	cmp	ecx, eax
	mov	DWORD PTR [ebx+4], ecx
	jle	SHORT $L148355
	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax+ecx+32]
	push	280					; 00000118H
	mov	ecx, ebx
	mov	DWORD PTR [ebx+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L148355:
	mov	eax, DWORD PTR [ebx]
	imul	esi, 280				; 00000118H
	add	esi, eax
	mov	ecx, esi
	je	SHORT $L126788
	mov	eax, DWORD PTR [edi]
	mov	edi, DWORD PTR -28+[esp+44]
	mov	edx, DWORD PTR [eax+edi]
	add	eax, edi
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	lea	edi, DWORD PTR [eax+16]
	mov	edx, edi
	sub	edx, eax
	mov	ebp, eax
	lea	esi, DWORD PTR [edx+ecx+84]
	sub	ebp, ecx
	mov	DWORD PTR -24+[esp+44], 3

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	npad	6

; 355  : 				new(*this)T(Other(i));

$L148374:
	push	edi
	lea	ecx, DWORD PTR [esi-84]
	call	??0FTransSample@@QAE@ABU0@@Z		; FTransSample::FTransSample
	mov	eax, DWORD PTR [edi+80]
	mov	DWORD PTR [esi-4], eax
	mov	ecx, DWORD PTR [esi+ebp]
	mov	eax, DWORD PTR -24+[esp+44]
	mov	DWORD PTR [esi], ecx
	add	edi, 88					; 00000058H
	add	esi, 88					; 00000058H
	dec	eax
	mov	DWORD PTR -24+[esp+44], eax
	jne	SHORT $L148374
	mov	edi, DWORD PTR _Other$[esp+40]
$L126788:

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

	mov	eax, DWORD PTR _i$126786[esp+44]
	mov	edx, DWORD PTR -28+[esp+44]
	mov	ecx, DWORD PTR [edi+4]
	inc	eax
	add	edx, 280				; 00000118H
	cmp	eax, ecx
	mov	DWORD PTR _i$126786[esp+44], eax
	mov	DWORD PTR -28+[esp+44], edx
	jl	$L126787
	pop	ebp
$L148401:

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 28					; 0000001cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148334:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148403:
	mov	eax, OFFSET FLAT:$T148395
	jmp	___CxxFrameHandler
text$x	ENDS
??0?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@ABV0@@Z ENDP ; TArray<UD3DRenderDevice::QueuedPolygon>::TArray<UD3DRenderDevice::QueuedPolygon>
; Function compile flags: /Ogty
;	COMDAT ??0FTransSample@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8
??0FTransSample@@QAE@ABU0@@Z PROC NEAR			; FTransSample::FTransSample, COMDAT
; _this$ = ecx
	mov	edx, DWORD PTR ___that$[esp-4]
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	eax, ecx
	mov	esi, edx
	mov	ecx, 8
	mov	edi, eax
	rep movsd
	lea	ecx, DWORD PTR [edx+32]
	mov	edi, ecx
	mov	ebp, DWORD PTR [edi]
	lea	esi, DWORD PTR [eax+32]
	mov	ebx, esi
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	DWORD PTR [ebx+4], ebp
	mov	edi, DWORD PTR [edi+8]
	mov	DWORD PTR [ebx+8], edi
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [esi+12], ecx
	lea	ecx, DWORD PTR [edx+48]
	mov	edi, ecx
	mov	ebp, DWORD PTR [edi]
	lea	esi, DWORD PTR [eax+48]
	mov	ebx, esi
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	DWORD PTR [ebx+4], ebp
	mov	edi, DWORD PTR [edi+8]
	mov	DWORD PTR [ebx+8], edi
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [esi+12], ecx
	lea	ecx, DWORD PTR [edx+64]
	lea	edx, DWORD PTR [eax+64]
	mov	esi, ecx
	mov	ebx, DWORD PTR [esi]
	mov	edi, edx
	mov	DWORD PTR [edi], ebx
	mov	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], ebx
	mov	esi, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], esi
	mov	ecx, DWORD PTR [ecx+12]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [edx+12], ecx
	pop	ebx
	ret	4
??0FTransSample@@QAE@ABU0@@Z ENDP			; FTransSample::FTransSample
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T148455 DD	0ffffffffH
	DD	FLAT:$L148428
$T148451 DD	019930520H
	DD	01H
	DD	FLAT:$T148455
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ PROC NEAR ; TArray<UD3DRenderDevice::QueuedPolygon>::~TArray<UD3DRenderDevice::QueuedPolygon>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L148454
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L148438
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148438:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L148439
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148439:
	push	280					; 00000118H
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L148449
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L148449:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148428:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148454:
	mov	eax, OFFSET FLAT:$T148451
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ ENDP ; TArray<UD3DRenderDevice::QueuedPolygon>::~TArray<UD3DRenderDevice::QueuedPolygon>
; Function compile flags: /Ogty
;	COMDAT ?Add@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEHHH@Z
_TEXT	SEGMENT
_n$ = 8
?Add@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEHHH@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedPolygon>::Add, COMDAT
; _this$ = ecx

; 485  : 		checkSlow(!TTypeInfo<T>::DefinitelyNeedsDestructor());
; 486  : 		INT Index = FArray::Add( n, sizeof(T) );

	mov	eax, DWORD PTR _n$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [edi+eax]
	cmp	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+4], esi
	jle	SHORT $L148624
	lea	eax, DWORD PTR [esi+esi*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	edx, DWORD PTR [eax+esi+32]
	push	280					; 00000118H
	mov	DWORD PTR [ecx+8], edx
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L148624:

; 487  : 		// CDH... needed a form of array Add which calls constructor
; 488  : 		if (Constructed)
; 489  : 		{
; 490  : 			for (INT i=Index; i<Index+n; i++)
; 491  : 				new(&(*this)(i)) T;
; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);

	mov	eax, edi
	pop	edi
	pop	esi

; 495  : 	}

	ret	8
?Add@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEHHH@Z ENDP ; TArray<UD3DRenderDevice::QueuedPolygon>::Add
_TEXT	ENDS
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnFile.h
xdata$x	SEGMENT
$T148687 DD	0ffffffffH
	DD	FLAT:$L148631
$T148679 DD	019930520H
	DD	01H
	DD	FLAT:$T148687
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	ENDS
;	COMDAT ??0?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12
_Other$ = 8
_this$ = -16
??0?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@ABV0@@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::TArray<UD3DRenderDevice::QueuedParticleByTexture>, COMDAT
; _this$ = ecx

; 350  : 	{

	push	-1
	push	$L148686
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	mov	ebx, DWORD PTR _Other$[esp+16]
	mov	eax, DWORD PTR [ebx+4]
	push	ebp
	push	esi
	mov	esi, ecx
	xor	ebp, ebp
	push	16					; 00000010H
	mov	DWORD PTR _this$[esp+32], esi
	mov	DWORD PTR [esi], ebp
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z

; 351  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 352  : 		{
; 353  : 			ArrayNum=0;

	mov	DWORD PTR [esi+4], ebp

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

	cmp	DWORD PTR [ebx+4], ebp
	mov	DWORD PTR __$EHRec$[esp+36], ebp
	jle	SHORT $L148684
	mov	DWORD PTR 8+[esp+24], ebp
	push	edi

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	npad	7

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

$L126874:

; 355  : 				new(*this)T(Other(i));

	mov	edi, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [edi+1]
	cmp	ecx, eax
	mov	DWORD PTR [esi+4], ecx
	jle	SHORT $L148652
	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax+ecx+32]
	push	16					; 00000010H
	mov	ecx, esi
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L148652:
	mov	eax, DWORD PTR [esi]
	shl	edi, 4
	add	edi, eax
	je	SHORT $L126875
	mov	ecx, DWORD PTR [ebx]
	add	ecx, DWORD PTR 8+[esp+28]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edi], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edi+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edi+12], eax
$L126875:
	mov	ecx, DWORD PTR 8+[esp+28]
	mov	eax, DWORD PTR [ebx+4]
	inc	ebp
	add	ecx, 16					; 00000010H
	cmp	ebp, eax
	mov	DWORD PTR 8+[esp+28], ecx
	jl	SHORT $L126874
	pop	edi
$L148684:

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148631:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148686:
	mov	eax, OFFSET FLAT:$T148679
	jmp	___CxxFrameHandler
text$x	ENDS
??0?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@ABV0@@Z ENDP ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::TArray<UD3DRenderDevice::QueuedParticleByTexture>
;	COMDAT xdata$x
xdata$x	SEGMENT
$T148720 DD	0ffffffffH
	DD	FLAT:$L148693
$T148716 DD	019930520H
	DD	01H
	DD	FLAT:$T148720
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ PROC NEAR ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::~TArray<UD3DRenderDevice::QueuedParticleByTexture>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L148719
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L148703
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148703:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L148704
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148704:
	push	16					; 00000010H
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L148714
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L148714:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148693:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148719:
	mov	eax, OFFSET FLAT:$T148716
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ ENDP ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::~TArray<UD3DRenderDevice::QueuedParticleByTexture>
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnFile.h
xdata$x	SEGMENT
$T148786 DD	0ffffffffH
	DD	FLAT:$L148729
$T148777 DD	019930520H
	DD	01H
	DD	FLAT:$T148786
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	ENDS
;	COMDAT ??0?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12
_Other$ = 8
_this$ = -16
_i$126948 = -20
??0?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@ABV0@@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedLineSegment>::TArray<UD3DRenderDevice::QueuedLineSegment>, COMDAT
; _this$ = ecx

; 350  : 	{

	push	-1
	push	$L148785
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 8
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _Other$[esp+24]
	mov	eax, DWORD PTR [ebp+4]
	mov	ebx, ecx
	push	esi
	xor	esi, esi
	push	36					; 00000024H
	mov	DWORD PTR _this$[esp+36], ebx
	mov	DWORD PTR [ebx], esi
	mov	DWORD PTR [ebx+4], eax
	mov	DWORD PTR [ebx+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z

; 351  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 352  : 		{
; 353  : 			ArrayNum=0;

	mov	DWORD PTR [ebx+4], esi

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

	cmp	DWORD PTR [ebp+4], esi
	mov	DWORD PTR __$EHRec$[esp+40], esi
	mov	DWORD PTR _i$126948[esp+32], esi
	jle	SHORT $L148782
	push	edi
	mov	DWORD PTR 8+[esp+32], esi

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	npad	1

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

$L126949:

; 355  : 				new(*this)T(Other(i));

	mov	esi, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx+8]
	lea	ecx, DWORD PTR [esi+1]
	cmp	ecx, eax
	mov	DWORD PTR [ebx+4], ecx
	jle	SHORT $L148752
	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax+ecx+32]
	push	36					; 00000024H
	mov	ecx, ebx
	mov	DWORD PTR [ebx+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L148752:
	mov	edx, DWORD PTR [ebx]
	lea	ecx, DWORD PTR [esi+esi*8]
	lea	edi, DWORD PTR [edx+ecx*4]
	test	edi, edi
	je	SHORT $L126950
	mov	esi, DWORD PTR [ebp]
	add	esi, DWORD PTR 8+[esp+32]
	mov	ecx, 9
	rep movsd
$L126950:
	mov	eax, DWORD PTR _i$126948[esp+36]
	mov	edx, DWORD PTR 8+[esp+32]
	mov	ecx, DWORD PTR [ebp+4]
	inc	eax
	add	edx, 36					; 00000024H
	cmp	eax, ecx
	mov	DWORD PTR _i$126948[esp+36], eax
	mov	DWORD PTR 8+[esp+32], edx
	jl	SHORT $L126949
	pop	edi
$L148782:

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+32]
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 20					; 00000014H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148729:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148785:
	mov	eax, OFFSET FLAT:$T148777
	jmp	___CxxFrameHandler
text$x	ENDS
??0?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@ABV0@@Z ENDP ; TArray<UD3DRenderDevice::QueuedLineSegment>::TArray<UD3DRenderDevice::QueuedLineSegment>
;	COMDAT xdata$x
xdata$x	SEGMENT
$T148819 DD	0ffffffffH
	DD	FLAT:$L148792
$T148815 DD	019930520H
	DD	01H
	DD	FLAT:$T148819
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ PROC NEAR ; TArray<UD3DRenderDevice::QueuedLineSegment>::~TArray<UD3DRenderDevice::QueuedLineSegment>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L148818
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L148802
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148802:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L148803
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148803:
	push	36					; 00000024H
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L148813
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L148813:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148792:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148818:
	mov	eax, OFFSET FLAT:$T148815
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ ENDP ; TArray<UD3DRenderDevice::QueuedLineSegment>::~TArray<UD3DRenderDevice::QueuedLineSegment>
PUBLIC	??3@YAXPAX0@Z					; operator delete
;	COMDAT xdata$x
; File ..\..\Engine\Inc\UnTex.h
xdata$x	SEGMENT
$T148879 DD	0ffffffffH
	DD	FLAT:$L148830
$T148869 DD	019930520H
	DD	01H
	DD	FLAT:$T148879
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	ENDS
;	COMDAT ?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z
_TEXT	SEGMENT
$T148826 = 12
$T148827 = 8
__$EHRec$ = -12
_n$ = 8
_Constructed$ = 12
_this$ = -20
?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedLineSegment>::Add, COMDAT
; _this$ = ecx

; 484  : 	{

	push	-1
	push	$L148878
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 8

; 485  : 		checkSlow(!TTypeInfo<T>::DefinitelyNeedsDestructor());
; 486  : 		INT Index = FArray::Add( n, sizeof(T) );

	mov	eax, DWORD PTR _n$[esp+16]
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi+4]
	lea	esi, DWORD PTR [ebx+eax]
	cmp	esi, DWORD PTR [edi+8]
	mov	DWORD PTR _this$[esp+32], edi
	mov	DWORD PTR -16+[esp+32], ebx
	mov	DWORD PTR [edi+4], esi
	jle	SHORT $L148835
	lea	eax, DWORD PTR [esi+esi*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	ecx, DWORD PTR [eax+esi+32]
	mov	DWORD PTR [edi+8], ecx
	push	36					; 00000024H
	mov	ecx, edi
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L148835:

; 487  : 		// CDH... needed a form of array Add which calls constructor
; 488  : 		if (Constructed)

	mov	eax, DWORD PTR _Constructed$[esp+28]
	test	eax, eax
	je	SHORT $L148875

; 489  : 		{
; 490  : 			for (INT i=Index; i<Index+n; i++)

	cmp	ebx, esi
	jge	SHORT $L148875
	push	ebp
	lea	ebp, DWORD PTR [ebx+ebx*8]
	shl	ebp, 2
	sub	esi, ebx

; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);
; 495  : 	}

	npad	7

; 489  : 		{
; 490  : 			for (INT i=Index; i<Index+n; i++)

$L126982:

; 491  : 				new(&(*this)(i)) T;

	mov	eax, DWORD PTR [edi]
	add	eax, ebp
	mov	DWORD PTR $T148827[esp+32], eax
	mov	DWORD PTR $T148826[esp+32], eax
	mov	DWORD PTR __$EHRec$[esp+44], 0
	je	SHORT $L148863
	mov	edi, eax
	mov	ebx, 2

; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);
; 495  : 	}

	npad	3

; 491  : 				new(&(*this)(i)) T;

$L148862:
	mov	ecx, edi
	call	DWORD PTR __imp_??0FVector@@QAE@XZ
	add	edi, 12					; 0000000cH
	dec	ebx
	jne	SHORT $L148862
	mov	edi, DWORD PTR _this$[esp+36]
	mov	ebx, DWORD PTR -16+[esp+36]
$L148863:
	add	ebp, 36					; 00000024H
	dec	esi
	mov	DWORD PTR __$EHRec$[esp+44], -1
	jne	SHORT $L126982
	pop	ebp
$L148875:

; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);
; 495  : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+32]
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 20					; 00000014H
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148830:
	mov	eax, DWORD PTR $T148827[ebp-4]
	push	eax
	mov	ecx, DWORD PTR $T148826[ebp-4]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
$L148878:
	mov	eax, OFFSET FLAT:$T148869
	jmp	___CxxFrameHandler
text$x	ENDS
?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z ENDP ; TArray<UD3DRenderDevice::QueuedLineSegment>::Add
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnFile.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
??3@YAXPAX0@Z PROC NEAR					; operator delete, COMDAT

; 639  : }

	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T148947 DD	0ffffffffH
	DD	FLAT:$L148891
$T148939 DD	019930520H
	DD	01H
	DD	FLAT:$T148947
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	ENDS
;	COMDAT ??0?$TArray@UFD3DVertex@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
_Other$ = 8
??0?$TArray@UFD3DVertex@@@@QAE@ABV0@@Z PROC NEAR	; TArray<FD3DVertex>::TArray<FD3DVertex>, COMDAT
; _this$ = ecx

; 350  : 	{

	push	-1
	push	$L148946
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	mov	ebx, DWORD PTR _Other$[esp+16]
	mov	eax, DWORD PTR [ebx+4]
	push	ebp
	push	esi
	mov	esi, ecx
	xor	ebp, ebp
	push	16					; 00000010H
	mov	DWORD PTR _this$[esp+32], esi
	mov	DWORD PTR [esi], ebp
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z

; 351  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 352  : 		{
; 353  : 			ArrayNum=0;

	mov	DWORD PTR [esi+4], ebp

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

	cmp	DWORD PTR [ebx+4], ebp
	mov	DWORD PTR __$EHRec$[esp+36], ebp
	jle	SHORT $L148944
	mov	DWORD PTR 8+[esp+24], ebp
	push	edi

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	npad	7

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

$L127036:

; 355  : 				new(*this)T(Other(i));

	mov	edi, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [edi+1]
	cmp	ecx, eax
	mov	DWORD PTR [esi+4], ecx
	jle	SHORT $L148914
	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax+ecx+32]
	push	16					; 00000010H
	mov	ecx, esi
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L148914:
	mov	eax, DWORD PTR [esi]
	shl	edi, 4
	add	edi, eax
	je	SHORT $L127037
	mov	ecx, DWORD PTR [ebx]
	add	ecx, DWORD PTR 8+[esp+28]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edi], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edi+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edi+12], eax
$L127037:
	mov	ecx, DWORD PTR 8+[esp+28]
	mov	eax, DWORD PTR [ebx+4]
	inc	ebp
	add	ecx, 16					; 00000010H
	cmp	ebp, eax
	mov	DWORD PTR 8+[esp+28], ecx
	jl	SHORT $L127036
	pop	edi
$L148944:

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148891:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148946:
	mov	eax, OFFSET FLAT:$T148939
	jmp	___CxxFrameHandler
text$x	ENDS
??0?$TArray@UFD3DVertex@@@@QAE@ABV0@@Z ENDP		; TArray<FD3DVertex>::TArray<FD3DVertex>
;	COMDAT xdata$x
xdata$x	SEGMENT
$T148980 DD	0ffffffffH
	DD	FLAT:$L148953
$T148976 DD	019930520H
	DD	01H
	DD	FLAT:$T148980
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@UFD3DVertex@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1?$TArray@UFD3DVertex@@@@QAE@XZ PROC NEAR		; TArray<FD3DVertex>::~TArray<FD3DVertex>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L148979
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L148963
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148963:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L148964
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148964:
	push	16					; 00000010H
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L148974
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L148974:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148953:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148979:
	mov	eax, OFFSET FLAT:$T148976
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@UFD3DVertex@@@@QAE@XZ ENDP			; TArray<FD3DVertex>::~TArray<FD3DVertex>
; Function compile flags: /Ogty
;	COMDAT ?Add@?$TArray@UFD3DVertex@@@@QAEHHH@Z
_TEXT	SEGMENT
_n$ = 8
?Add@?$TArray@UFD3DVertex@@@@QAEHHH@Z PROC NEAR		; TArray<FD3DVertex>::Add, COMDAT
; _this$ = ecx

; 485  : 		checkSlow(!TTypeInfo<T>::DefinitelyNeedsDestructor());
; 486  : 		INT Index = FArray::Add( n, sizeof(T) );

	mov	eax, DWORD PTR _n$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [edi+eax]
	cmp	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+4], esi
	jle	SHORT $L149018
	lea	eax, DWORD PTR [esi+esi*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	edx, DWORD PTR [eax+esi+32]
	push	16					; 00000010H
	mov	DWORD PTR [ecx+8], edx
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L149018:

; 487  : 		// CDH... needed a form of array Add which calls constructor
; 488  : 		if (Constructed)
; 489  : 		{
; 490  : 			for (INT i=Index; i<Index+n; i++)
; 491  : 				new(&(*this)(i)) T;
; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);

	mov	eax, edi
	pop	edi
	pop	esi

; 495  : 	}

	ret	8
?Add@?$TArray@UFD3DVertex@@@@QAEHHH@Z ENDP		; TArray<FD3DVertex>::Add
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??0QueuedPolygon@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8
??0QueuedPolygon@UD3DRenderDevice@@QAE@ABU01@@Z PROC NEAR ; UD3DRenderDevice::QueuedPolygon::QueuedPolygon, COMDAT
; _this$ = ecx
	push	ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	push	ebx
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	push	ebp
	mov	DWORD PTR [eax+12], edx
	lea	ebp, DWORD PTR [eax+16]
	push	esi
	mov	edx, ebp
	sub	edx, eax
	mov	esi, eax
	sub	esi, ecx
	push	edi
	lea	ebx, DWORD PTR [ebp+76]
	lea	edx, DWORD PTR [edx+ecx+60]
	mov	DWORD PTR -4+[esp+20], esi
	mov	DWORD PTR 8+[esp+16], 3
	npad	1
$L127099:
	lea	esi, DWORD PTR [edx-60]
	mov	edi, ebp
	mov	ecx, 8
	rep movsd
	lea	ecx, DWORD PTR [edx-28]
	mov	edi, DWORD PTR [ecx]
	lea	esi, DWORD PTR [ebx-44]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], edi
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR [edx-16]
	mov	DWORD PTR [ebx-32], ecx
	lea	ecx, DWORD PTR [edx-12]
	mov	edi, DWORD PTR [ecx]
	lea	esi, DWORD PTR [ebx-28]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], edi
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR [edx]
	mov	esi, DWORD PTR -4+[esp+20]
	mov	DWORD PTR [esi+edx], ecx
	lea	ecx, DWORD PTR [edx+4]
	mov	edi, DWORD PTR [ecx]
	lea	esi, DWORD PTR [ebx-12]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], edi
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [ebx], ecx
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [ebx+4], ecx
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [ebx+8], ecx
	mov	ecx, DWORD PTR 8+[esp+16]
	add	ebp, 88					; 00000058H
	add	ebx, 88					; 00000058H
	add	edx, 88					; 00000058H
	dec	ecx
	mov	DWORD PTR 8+[esp+16], ecx
	jne	$L127099
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	4
??0QueuedPolygon@UD3DRenderDevice@@QAE@ABU01@@Z ENDP	; UD3DRenderDevice::QueuedPolygon::QueuedPolygon
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEHHH@Z
_TEXT	SEGMENT
_n$ = 8
?Add@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEHHH@Z PROC NEAR ; TArray<_D3DADAPTER_IDENTIFIER8>::Add, COMDAT
; _this$ = ecx

; 485  : 		checkSlow(!TTypeInfo<T>::DefinitelyNeedsDestructor());
; 486  : 		INT Index = FArray::Add( n, sizeof(T) );

	mov	eax, DWORD PTR _n$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [edi+eax]
	cmp	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+4], esi
	jle	SHORT $L149075
	lea	eax, DWORD PTR [esi+esi*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	edx, DWORD PTR [eax+esi+32]
	push	1068					; 0000042cH
	mov	DWORD PTR [ecx+8], edx
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L149075:

; 487  : 		// CDH... needed a form of array Add which calls constructor
; 488  : 		if (Constructed)
; 489  : 		{
; 490  : 			for (INT i=Index; i<Index+n; i++)
; 491  : 				new(&(*this)(i)) T;
; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);

	mov	eax, edi
	pop	edi
	pop	esi

; 495  : 	}

	ret	8
?Add@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEHHH@Z ENDP	; TArray<_D3DADAPTER_IDENTIFIER8>::Add
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEHHH@Z
_TEXT	SEGMENT
_n$ = 8
?Add@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEHHH@Z PROC NEAR ; TArray<UD3DRenderDevice::ProjectorInfo>::Add, COMDAT
; _this$ = ecx

; 485  : 		checkSlow(!TTypeInfo<T>::DefinitelyNeedsDestructor());
; 486  : 		INT Index = FArray::Add( n, sizeof(T) );

	mov	eax, DWORD PTR _n$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [edi+eax]
	cmp	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+4], esi
	jle	SHORT $L149134
	lea	eax, DWORD PTR [esi+esi*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	edx, DWORD PTR [eax+esi+32]
	push	84					; 00000054H
	mov	DWORD PTR [ecx+8], edx
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L149134:

; 487  : 		// CDH... needed a form of array Add which calls constructor
; 488  : 		if (Constructed)
; 489  : 		{
; 490  : 			for (INT i=Index; i<Index+n; i++)
; 491  : 				new(&(*this)(i)) T;
; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);

	mov	eax, edi
	pop	edi
	pop	esi

; 495  : 	}

	ret	8
?Add@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEHHH@Z ENDP ; TArray<UD3DRenderDevice::ProjectorInfo>::Add
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEXHH@Z PROC NEAR ; TArray<UD3DRenderDevice::ProjectorInfo>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L128701
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128701:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L128702
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128702:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L128703
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128703:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	84					; 00000054H
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEXHH@Z ENDP ; TArray<UD3DRenderDevice::ProjectorInfo>::Remove
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEXHH@Z PROC NEAR ; TArray<UD3DRenderDevice::RenderTargetInfo>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L128734
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128734:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L128735
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128735:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L128736
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128736:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	20					; 00000014H
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEXHH@Z ENDP ; TArray<UD3DRenderDevice::RenderTargetInfo>::Remove
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEXHH@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedPolygon>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L128756
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128756:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L128757
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128757:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L128758
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128758:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	280					; 00000118H
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEXHH@Z ENDP ; TArray<UD3DRenderDevice::QueuedPolygon>::Remove
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEXHH@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L128778
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128778:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L128779
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128779:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L128780
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128780:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	16					; 00000010H
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEXHH@Z ENDP ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::Remove
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEXHH@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedLineSegment>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L128800
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128800:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L128801
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128801:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L128802
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128802:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	36					; 00000024H
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEXHH@Z ENDP ; TArray<UD3DRenderDevice::QueuedLineSegment>::Remove
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFD3DVertex@@@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@UFD3DVertex@@@@QAEXHH@Z PROC NEAR	; TArray<FD3DVertex>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L128822
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128822:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L128823
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128823:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L128824
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L128824:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	16					; 00000010H
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@UFD3DVertex@@@@QAEXHH@Z ENDP		; TArray<FD3DVertex>::Remove
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UFD3DVertex@@@@QAEXH@Z
_TEXT	SEGMENT
_Slack$ = 8
?Empty@?$TArray@UFD3DVertex@@@@QAEXH@Z PROC NEAR	; TArray<FD3DVertex>::Empty, COMDAT
; _this$ = ecx

; 518  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 519  : 			for( INT i=0; i<ArrayNum; i++ )
; 520  : 				(&(*this)(i))->~T();
; 521  : 		FArray::Empty( sizeof(T), Slack );

	mov	eax, DWORD PTR _Slack$[esp-4]
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR _Slack$[esp-4], 16		; 00000010H
	jmp	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
?Empty@?$TArray@UFD3DVertex@@@@QAEXH@Z ENDP		; TArray<FD3DVertex>::Empty
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@VFVector@@@@QAEHHH@Z
_TEXT	SEGMENT
_n$ = 8
?Add@?$TArray@VFVector@@@@QAEHHH@Z PROC NEAR		; TArray<FVector>::Add, COMDAT
; _this$ = ecx

; 485  : 		checkSlow(!TTypeInfo<T>::DefinitelyNeedsDestructor());
; 486  : 		INT Index = FArray::Add( n, sizeof(T) );

	mov	eax, DWORD PTR _n$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [edi+eax]
	cmp	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+4], esi
	jle	SHORT $L149225
	lea	eax, DWORD PTR [esi+esi*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	edx, DWORD PTR [eax+esi+32]
	push	12					; 0000000cH
	mov	DWORD PTR [ecx+8], edx
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L149225:

; 487  : 		// CDH... needed a form of array Add which calls constructor
; 488  : 		if (Constructed)
; 489  : 		{
; 490  : 			for (INT i=Index; i<Index+n; i++)
; 491  : 				new(&(*this)(i)) T;
; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);

	mov	eax, edi
	pop	edi
	pop	esi

; 495  : 	}

	ret	8
?Add@?$TArray@VFVector@@@@QAEHHH@Z ENDP			; TArray<FVector>::Add
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Clamp@@YAHHHH@Z
_TEXT	SEGMENT
_X$ = 8
_Min$ = 12
_Max$ = 16
?Clamp@@YAHHHH@Z PROC NEAR				; Clamp, COMDAT

; 110  : 	return X<Min ? Min : X<Max ? X : Max;

	mov	ecx, DWORD PTR _X$[esp-4]
	mov	eax, DWORD PTR _Min$[esp-4]
	cmp	ecx, eax
	jl	SHORT $L149230
	mov	eax, DWORD PTR _Max$[esp-4]
	cmp	ecx, eax
	jge	SHORT $L149230
	mov	eax, ecx
$L149230:

; 111  : }

	ret	0
?Clamp@@YAHHHH@Z ENDP					; Clamp
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Clamp@@YAMMMM@Z
_TEXT	SEGMENT
_X$ = 8
_Min$ = 12
_Max$ = 16
?Clamp@@YAMMMM@Z PROC NEAR				; Clamp, COMDAT

; 110  : 	return X<Min ? Min : X<Max ? X : Max;

	fld	DWORD PTR _X$[esp-4]
	fcomp	DWORD PTR _Min$[esp-4]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L149238
	fld	DWORD PTR _Min$[esp-4]

; 111  : }

	ret	0
$L149238:

; 110  : 	return X<Min ? Min : X<Max ? X : Max;

	fld	DWORD PTR _X$[esp-4]
	fcomp	DWORD PTR _Max$[esp-4]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L149236
	fld	DWORD PTR _X$[esp-4]

; 111  : }

	ret	0
$L149236:

; 110  : 	return X<Min ? Min : X<Max ? X : Max;

	fld	DWORD PTR _Max$[esp-4]

; 111  : }

	ret	0
?Clamp@@YAMMMM@Z ENDP					; Clamp
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z
_TEXT	SEGMENT
_pointer$ = 8
?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z PROC NEAR	; SafeRelease, COMDAT

; 174  : {

	push	esi

; 175  : 	HRESULT hr=D3D_OK;
; 176  : 	if(pointer)

	mov	esi, DWORD PTR _pointer$[esp]
	mov	ecx, DWORD PTR [esi]
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $L129386

; 177  : 	{
; 178  : 		hr=pointer->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 179  : 		pointer=NULL;

	mov	DWORD PTR [esi], 0
$L129386:
	pop	esi

; 180  : 	}
; 181  : 
; 182  : 	return hr;
; 183  : }

	ret	0
?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ENDP	; SafeRelease
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z
_TEXT	SEGMENT
_pointer$ = 8
?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z PROC NEAR	; SafeRelease, COMDAT

; 174  : {

	push	esi

; 175  : 	HRESULT hr=D3D_OK;
; 176  : 	if(pointer)

	mov	esi, DWORD PTR _pointer$[esp]
	mov	ecx, DWORD PTR [esi]
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $L129393

; 177  : 	{
; 178  : 		hr=pointer->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 179  : 		pointer=NULL;

	mov	DWORD PTR [esi], 0
$L129393:
	pop	esi

; 180  : 	}
; 181  : 
; 182  : 	return hr;
; 183  : }

	ret	0
?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z ENDP	; SafeRelease
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z
_TEXT	SEGMENT
_pointer$ = 8
?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z PROC NEAR ; SafeRelease, COMDAT

; 174  : {

	push	esi

; 175  : 	HRESULT hr=D3D_OK;
; 176  : 	if(pointer)

	mov	esi, DWORD PTR _pointer$[esp]
	mov	ecx, DWORD PTR [esi]
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $L129419

; 177  : 	{
; 178  : 		hr=pointer->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 179  : 		pointer=NULL;

	mov	DWORD PTR [esi], 0
$L129419:
	pop	esi

; 180  : 	}
; 181  : 
; 182  : 	return hr;
; 183  : }

	ret	0
?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ENDP	; SafeRelease
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UFD3DVertex@@@@@Z
_TEXT	SEGMENT
_Array$ = 12
??2@YAPAXIAAV?$TArray@UFD3DVertex@@@@@Z PROC NEAR	; operator new, COMDAT

; 587  : {

	push	esi

; 588  : 	INT Index = Array.FArray::Add(1,sizeof(T));

	mov	esi, DWORD PTR _Array$[esp]
	mov	eax, DWORD PTR [esi+8]
	push	edi
	mov	edi, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edi+1]
	cmp	ecx, eax
	mov	DWORD PTR [esi+4], ecx
	jle	SHORT $L149258
	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax+ecx+32]
	push	16					; 00000010H
	mov	ecx, esi
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L149258:

; 589  : 	return &Array(Index);

	mov	ecx, DWORD PTR [esi]
	mov	eax, edi
	shl	eax, 4
	pop	edi
	add	eax, ecx
	pop	esi

; 590  : }

	ret	0
??2@YAPAXIAAV?$TArray@UFD3DVertex@@@@@Z ENDP		; operator new
_TEXT	ENDS
END
